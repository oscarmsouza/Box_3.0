
Box_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08003a98  08003a98  00013a98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08003e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000398  200001d4  0800403c  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000056c  0800403c  0002056c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014834  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b00  00000000  00000000  00034a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008526  00000000  00000000  00037530  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ac0  00000000  00000000  0003fa58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d88  00000000  00000000  00040518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007a44  00000000  00000000  000412a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003bac  00000000  00000000  00048ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004c890  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000022a4  00000000  00000000  0004c90c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a80 	.word	0x08003a80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08003a80 	.word	0x08003a80

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	1c08      	adds	r0, r1, #0
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	; (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	ffffffd9 	.word	0xffffffd9
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__udivmoddi4>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	4657      	mov	r7, sl
 8000484:	464e      	mov	r6, r9
 8000486:	4645      	mov	r5, r8
 8000488:	46de      	mov	lr, fp
 800048a:	b5e0      	push	{r5, r6, r7, lr}
 800048c:	0004      	movs	r4, r0
 800048e:	b083      	sub	sp, #12
 8000490:	000d      	movs	r5, r1
 8000492:	4692      	mov	sl, r2
 8000494:	4699      	mov	r9, r3
 8000496:	428b      	cmp	r3, r1
 8000498:	d82f      	bhi.n	80004fa <__udivmoddi4+0x7a>
 800049a:	d02c      	beq.n	80004f6 <__udivmoddi4+0x76>
 800049c:	4649      	mov	r1, r9
 800049e:	4650      	mov	r0, sl
 80004a0:	f000 f8cc 	bl	800063c <__clzdi2>
 80004a4:	0029      	movs	r1, r5
 80004a6:	0006      	movs	r6, r0
 80004a8:	0020      	movs	r0, r4
 80004aa:	f000 f8c7 	bl	800063c <__clzdi2>
 80004ae:	1a33      	subs	r3, r6, r0
 80004b0:	4698      	mov	r8, r3
 80004b2:	3b20      	subs	r3, #32
 80004b4:	469b      	mov	fp, r3
 80004b6:	d500      	bpl.n	80004ba <__udivmoddi4+0x3a>
 80004b8:	e074      	b.n	80005a4 <__udivmoddi4+0x124>
 80004ba:	4653      	mov	r3, sl
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	001f      	movs	r7, r3
 80004c2:	4653      	mov	r3, sl
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	001e      	movs	r6, r3
 80004ca:	42af      	cmp	r7, r5
 80004cc:	d829      	bhi.n	8000522 <__udivmoddi4+0xa2>
 80004ce:	d026      	beq.n	800051e <__udivmoddi4+0x9e>
 80004d0:	465b      	mov	r3, fp
 80004d2:	1ba4      	subs	r4, r4, r6
 80004d4:	41bd      	sbcs	r5, r7
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	da00      	bge.n	80004dc <__udivmoddi4+0x5c>
 80004da:	e079      	b.n	80005d0 <__udivmoddi4+0x150>
 80004dc:	2200      	movs	r2, #0
 80004de:	2300      	movs	r3, #0
 80004e0:	9200      	str	r2, [sp, #0]
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	2301      	movs	r3, #1
 80004e6:	465a      	mov	r2, fp
 80004e8:	4093      	lsls	r3, r2
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2301      	movs	r3, #1
 80004ee:	4642      	mov	r2, r8
 80004f0:	4093      	lsls	r3, r2
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	e019      	b.n	800052a <__udivmoddi4+0xaa>
 80004f6:	4282      	cmp	r2, r0
 80004f8:	d9d0      	bls.n	800049c <__udivmoddi4+0x1c>
 80004fa:	2200      	movs	r2, #0
 80004fc:	2300      	movs	r3, #0
 80004fe:	9200      	str	r2, [sp, #0]
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <__udivmoddi4+0x8c>
 8000508:	601c      	str	r4, [r3, #0]
 800050a:	605d      	str	r5, [r3, #4]
 800050c:	9800      	ldr	r0, [sp, #0]
 800050e:	9901      	ldr	r1, [sp, #4]
 8000510:	b003      	add	sp, #12
 8000512:	bc3c      	pop	{r2, r3, r4, r5}
 8000514:	4690      	mov	r8, r2
 8000516:	4699      	mov	r9, r3
 8000518:	46a2      	mov	sl, r4
 800051a:	46ab      	mov	fp, r5
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	42a3      	cmp	r3, r4
 8000520:	d9d6      	bls.n	80004d0 <__udivmoddi4+0x50>
 8000522:	2200      	movs	r2, #0
 8000524:	2300      	movs	r3, #0
 8000526:	9200      	str	r2, [sp, #0]
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	4643      	mov	r3, r8
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0e8      	beq.n	8000502 <__udivmoddi4+0x82>
 8000530:	07fb      	lsls	r3, r7, #31
 8000532:	0872      	lsrs	r2, r6, #1
 8000534:	431a      	orrs	r2, r3
 8000536:	4646      	mov	r6, r8
 8000538:	087b      	lsrs	r3, r7, #1
 800053a:	e00e      	b.n	800055a <__udivmoddi4+0xda>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d101      	bne.n	8000544 <__udivmoddi4+0xc4>
 8000540:	42a2      	cmp	r2, r4
 8000542:	d80c      	bhi.n	800055e <__udivmoddi4+0xde>
 8000544:	1aa4      	subs	r4, r4, r2
 8000546:	419d      	sbcs	r5, r3
 8000548:	2001      	movs	r0, #1
 800054a:	1924      	adds	r4, r4, r4
 800054c:	416d      	adcs	r5, r5
 800054e:	2100      	movs	r1, #0
 8000550:	3e01      	subs	r6, #1
 8000552:	1824      	adds	r4, r4, r0
 8000554:	414d      	adcs	r5, r1
 8000556:	2e00      	cmp	r6, #0
 8000558:	d006      	beq.n	8000568 <__udivmoddi4+0xe8>
 800055a:	42ab      	cmp	r3, r5
 800055c:	d9ee      	bls.n	800053c <__udivmoddi4+0xbc>
 800055e:	3e01      	subs	r6, #1
 8000560:	1924      	adds	r4, r4, r4
 8000562:	416d      	adcs	r5, r5
 8000564:	2e00      	cmp	r6, #0
 8000566:	d1f8      	bne.n	800055a <__udivmoddi4+0xda>
 8000568:	465b      	mov	r3, fp
 800056a:	9800      	ldr	r0, [sp, #0]
 800056c:	9901      	ldr	r1, [sp, #4]
 800056e:	1900      	adds	r0, r0, r4
 8000570:	4169      	adcs	r1, r5
 8000572:	2b00      	cmp	r3, #0
 8000574:	db22      	blt.n	80005bc <__udivmoddi4+0x13c>
 8000576:	002b      	movs	r3, r5
 8000578:	465a      	mov	r2, fp
 800057a:	40d3      	lsrs	r3, r2
 800057c:	002a      	movs	r2, r5
 800057e:	4644      	mov	r4, r8
 8000580:	40e2      	lsrs	r2, r4
 8000582:	001c      	movs	r4, r3
 8000584:	465b      	mov	r3, fp
 8000586:	0015      	movs	r5, r2
 8000588:	2b00      	cmp	r3, #0
 800058a:	db2c      	blt.n	80005e6 <__udivmoddi4+0x166>
 800058c:	0026      	movs	r6, r4
 800058e:	409e      	lsls	r6, r3
 8000590:	0033      	movs	r3, r6
 8000592:	0026      	movs	r6, r4
 8000594:	4647      	mov	r7, r8
 8000596:	40be      	lsls	r6, r7
 8000598:	0032      	movs	r2, r6
 800059a:	1a80      	subs	r0, r0, r2
 800059c:	4199      	sbcs	r1, r3
 800059e:	9000      	str	r0, [sp, #0]
 80005a0:	9101      	str	r1, [sp, #4]
 80005a2:	e7ae      	b.n	8000502 <__udivmoddi4+0x82>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	4652      	mov	r2, sl
 80005ac:	40da      	lsrs	r2, r3
 80005ae:	4641      	mov	r1, r8
 80005b0:	0013      	movs	r3, r2
 80005b2:	464a      	mov	r2, r9
 80005b4:	408a      	lsls	r2, r1
 80005b6:	0017      	movs	r7, r2
 80005b8:	431f      	orrs	r7, r3
 80005ba:	e782      	b.n	80004c2 <__udivmoddi4+0x42>
 80005bc:	4642      	mov	r2, r8
 80005be:	2320      	movs	r3, #32
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	4646      	mov	r6, r8
 80005c6:	409a      	lsls	r2, r3
 80005c8:	0023      	movs	r3, r4
 80005ca:	40f3      	lsrs	r3, r6
 80005cc:	4313      	orrs	r3, r2
 80005ce:	e7d5      	b.n	800057c <__udivmoddi4+0xfc>
 80005d0:	4642      	mov	r2, r8
 80005d2:	2320      	movs	r3, #32
 80005d4:	2100      	movs	r1, #0
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	2200      	movs	r2, #0
 80005da:	9100      	str	r1, [sp, #0]
 80005dc:	9201      	str	r2, [sp, #4]
 80005de:	2201      	movs	r2, #1
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	9201      	str	r2, [sp, #4]
 80005e4:	e782      	b.n	80004ec <__udivmoddi4+0x6c>
 80005e6:	4642      	mov	r2, r8
 80005e8:	2320      	movs	r3, #32
 80005ea:	0026      	movs	r6, r4
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	40de      	lsrs	r6, r3
 80005f0:	002f      	movs	r7, r5
 80005f2:	46b4      	mov	ip, r6
 80005f4:	4097      	lsls	r7, r2
 80005f6:	4666      	mov	r6, ip
 80005f8:	003b      	movs	r3, r7
 80005fa:	4333      	orrs	r3, r6
 80005fc:	e7c9      	b.n	8000592 <__udivmoddi4+0x112>
 80005fe:	46c0      	nop			; (mov r8, r8)

08000600 <__clzsi2>:
 8000600:	211c      	movs	r1, #28
 8000602:	2301      	movs	r3, #1
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0xe>
 800060a:	0c00      	lsrs	r0, r0, #16
 800060c:	3910      	subs	r1, #16
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	4298      	cmp	r0, r3
 8000612:	d301      	bcc.n	8000618 <__clzsi2+0x18>
 8000614:	0a00      	lsrs	r0, r0, #8
 8000616:	3908      	subs	r1, #8
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	4298      	cmp	r0, r3
 800061c:	d301      	bcc.n	8000622 <__clzsi2+0x22>
 800061e:	0900      	lsrs	r0, r0, #4
 8000620:	3904      	subs	r1, #4
 8000622:	a202      	add	r2, pc, #8	; (adr r2, 800062c <__clzsi2+0x2c>)
 8000624:	5c10      	ldrb	r0, [r2, r0]
 8000626:	1840      	adds	r0, r0, r1
 8000628:	4770      	bx	lr
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	02020304 	.word	0x02020304
 8000630:	01010101 	.word	0x01010101
	...

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f7ff ffdd 	bl	8000600 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	1c08      	adds	r0, r1, #0
 800064c:	f7ff ffd8 	bl	8000600 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000654:	21fa      	movs	r1, #250	; 0xfa
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_InitTick+0x2c>)
{
 8000658:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800065a:	0089      	lsls	r1, r1, #2
{
 800065c:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	f7ff fd78 	bl	8000154 <__udivsi3>
 8000664:	f000 fb3e 	bl	8000ce4 <HAL_SYSTICK_Config>
 8000668:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 800066a:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800066c:	2c00      	cmp	r4, #0
 800066e:	d105      	bne.n	800067c <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000670:	3802      	subs	r0, #2
 8000672:	0022      	movs	r2, r4
 8000674:	0029      	movs	r1, r5
 8000676:	f000 fae9 	bl	8000c4c <HAL_NVIC_SetPriority>
 800067a:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 800067c:	bd70      	pop	{r4, r5, r6, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000000 	.word	0x20000000

08000684 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	2302      	movs	r3, #2
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_Init+0x24>)
{
 8000688:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800068c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068e:	430b      	orrs	r3, r1
 8000690:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000692:	f7ff ffdf 	bl	8000654 <HAL_InitTick>
 8000696:	1e04      	subs	r4, r0, #0
 8000698:	d103      	bne.n	80006a2 <HAL_Init+0x1e>
    HAL_MspInit();
 800069a:	f002 ff33 	bl	8003504 <HAL_MspInit>
}
 800069e:	0020      	movs	r0, r4
 80006a0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80006a2:	2401      	movs	r4, #1
 80006a4:	e7fb      	b.n	800069e <HAL_Init+0x1a>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80006ac:	4a02      	ldr	r2, [pc, #8]	; (80006b8 <HAL_IncTick+0xc>)
 80006ae:	6813      	ldr	r3, [r2, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	4770      	bx	lr
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	200001f0 	.word	0x200001f0

080006bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <HAL_GetTick+0x8>)
 80006be:	6818      	ldr	r0, [r3, #0]
}
 80006c0:	4770      	bx	lr
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	200001f0 	.word	0x200001f0

080006c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006cc:	f7ff fff6 	bl	80006bc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80006d0:	1c63      	adds	r3, r4, #1
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 80006d6:	0005      	movs	r5, r0
    wait++;
 80006d8:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006da:	f7ff ffef 	bl	80006bc <HAL_GetTick>
 80006de:	1b40      	subs	r0, r0, r5
 80006e0:	4284      	cmp	r4, r0
 80006e2:	d8fa      	bhi.n	80006da <HAL_Delay+0x12>
  {
  }
}
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080006e8 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <ADC_DelayMicroSecond+0x24>)
{
 80006ea:	b513      	push	{r0, r1, r4, lr}
 80006ec:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80006ee:	4908      	ldr	r1, [pc, #32]	; (8000710 <ADC_DelayMicroSecond+0x28>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	f7ff fd2f 	bl	8000154 <__udivsi3>
 80006f6:	4344      	muls	r4, r0
 80006f8:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80006fa:	9b01      	ldr	r3, [sp, #4]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d100      	bne.n	8000702 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8000700:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8000702:	9b01      	ldr	r3, [sp, #4]
 8000704:	3b01      	subs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	e7f7      	b.n	80006fa <ADC_DelayMicroSecond+0x12>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000000 	.word	0x20000000
 8000710:	000f4240 	.word	0x000f4240

08000714 <HAL_ADC_Init>:
{
 8000714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000716:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000718:	2001      	movs	r0, #1
  if(hadc == NULL)
 800071a:	2c00      	cmp	r4, #0
 800071c:	d100      	bne.n	8000720 <HAL_ADC_Init+0xc>
 800071e:	e0d1      	b.n	80008c4 <HAL_ADC_Init+0x1b0>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000720:	4b69      	ldr	r3, [pc, #420]	; (80008c8 <HAL_ADC_Init+0x1b4>)
 8000722:	6822      	ldr	r2, [r4, #0]
 8000724:	429a      	cmp	r2, r3
 8000726:	d004      	beq.n	8000732 <HAL_ADC_Init+0x1e>
 8000728:	21ce      	movs	r1, #206	; 0xce
 800072a:	4868      	ldr	r0, [pc, #416]	; (80008cc <HAL_ADC_Init+0x1b8>)
 800072c:	0049      	lsls	r1, r1, #1
 800072e:	f002 fcc3 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000732:	6862      	ldr	r2, [r4, #4]
 8000734:	4b66      	ldr	r3, [pc, #408]	; (80008d0 <HAL_ADC_Init+0x1bc>)
 8000736:	4013      	ands	r3, r2
 8000738:	d016      	beq.n	8000768 <HAL_ADC_Init+0x54>
 800073a:	2080      	movs	r0, #128	; 0x80
 800073c:	0051      	lsls	r1, r2, #1
 800073e:	0849      	lsrs	r1, r1, #1
 8000740:	05c0      	lsls	r0, r0, #23
 8000742:	4281      	cmp	r1, r0
 8000744:	d010      	beq.n	8000768 <HAL_ADC_Init+0x54>
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	0609      	lsls	r1, r1, #24
 800074a:	428a      	cmp	r2, r1
 800074c:	d00c      	beq.n	8000768 <HAL_ADC_Init+0x54>
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	0352      	lsls	r2, r2, #13
 8000752:	4293      	cmp	r3, r2
 8000754:	d008      	beq.n	8000768 <HAL_ADC_Init+0x54>
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0392      	lsls	r2, r2, #14
 800075a:	4293      	cmp	r3, r2
 800075c:	d004      	beq.n	8000768 <HAL_ADC_Init+0x54>
 800075e:	219e      	movs	r1, #158	; 0x9e
 8000760:	485a      	ldr	r0, [pc, #360]	; (80008cc <HAL_ADC_Init+0x1b8>)
 8000762:	31ff      	adds	r1, #255	; 0xff
 8000764:	f002 fca8 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000768:	2318      	movs	r3, #24
 800076a:	68a2      	ldr	r2, [r4, #8]
 800076c:	439a      	bics	r2, r3
 800076e:	d004      	beq.n	800077a <HAL_ADC_Init+0x66>
 8000770:	21cf      	movs	r1, #207	; 0xcf
 8000772:	4856      	ldr	r0, [pc, #344]	; (80008cc <HAL_ADC_Init+0x1b8>)
 8000774:	0049      	lsls	r1, r1, #1
 8000776:	f002 fc9f 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800077a:	2320      	movs	r3, #32
 800077c:	68e2      	ldr	r2, [r4, #12]
 800077e:	439a      	bics	r2, r3
 8000780:	d004      	beq.n	800078c <HAL_ADC_Init+0x78>
 8000782:	21a0      	movs	r1, #160	; 0xa0
 8000784:	4851      	ldr	r0, [pc, #324]	; (80008cc <HAL_ADC_Init+0x1b8>)
 8000786:	31ff      	adds	r1, #255	; 0xff
 8000788:	f002 fc96 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800078c:	6923      	ldr	r3, [r4, #16]
 800078e:	3b01      	subs	r3, #1
 8000790:	2b01      	cmp	r3, #1
 8000792:	d904      	bls.n	800079e <HAL_ADC_Init+0x8a>
 8000794:	21d0      	movs	r1, #208	; 0xd0
 8000796:	484d      	ldr	r0, [pc, #308]	; (80008cc <HAL_ADC_Init+0x1b8>)
 8000798:	0049      	lsls	r1, r1, #1
 800079a:	f002 fc8d 	bl	80030b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800079e:	1c66      	adds	r6, r4, #1
 80007a0:	7ff3      	ldrb	r3, [r6, #31]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d904      	bls.n	80007b0 <HAL_ADC_Init+0x9c>
 80007a6:	21a2      	movs	r1, #162	; 0xa2
 80007a8:	4848      	ldr	r0, [pc, #288]	; (80008cc <HAL_ADC_Init+0x1b8>)
 80007aa:	31ff      	adds	r1, #255	; 0xff
 80007ac:	f002 fc84 	bl	80030b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80007b0:	1ca3      	adds	r3, r4, #2
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	7fdb      	ldrb	r3, [r3, #31]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d904      	bls.n	80007c4 <HAL_ADC_Init+0xb0>
 80007ba:	21d1      	movs	r1, #209	; 0xd1
 80007bc:	4843      	ldr	r0, [pc, #268]	; (80008cc <HAL_ADC_Init+0x1b8>)
 80007be:	0049      	lsls	r1, r1, #1
 80007c0:	f002 fc7a 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80007c4:	4b43      	ldr	r3, [pc, #268]	; (80008d4 <HAL_ADC_Init+0x1c0>)
 80007c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007c8:	421a      	tst	r2, r3
 80007ca:	d004      	beq.n	80007d6 <HAL_ADC_Init+0xc2>
 80007cc:	21a4      	movs	r1, #164	; 0xa4
 80007ce:	483f      	ldr	r0, [pc, #252]	; (80008cc <HAL_ADC_Init+0x1b8>)
 80007d0:	31ff      	adds	r1, #255	; 0xff
 80007d2:	f002 fc71 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80007d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007d8:	2240      	movs	r2, #64	; 0x40
 80007da:	0019      	movs	r1, r3
 80007dc:	0018      	movs	r0, r3
 80007de:	4391      	bics	r1, r2
 80007e0:	3280      	adds	r2, #128	; 0x80
 80007e2:	4390      	bics	r0, r2
 80007e4:	d00f      	beq.n	8000806 <HAL_ADC_Init+0xf2>
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	0052      	lsls	r2, r2, #1
 80007ea:	4291      	cmp	r1, r2
 80007ec:	d00b      	beq.n	8000806 <HAL_ADC_Init+0xf2>
 80007ee:	3280      	adds	r2, #128	; 0x80
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d008      	beq.n	8000806 <HAL_ADC_Init+0xf2>
 80007f4:	3bc1      	subs	r3, #193	; 0xc1
 80007f6:	3bff      	subs	r3, #255	; 0xff
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d904      	bls.n	8000806 <HAL_ADC_Init+0xf2>
 80007fc:	21d2      	movs	r1, #210	; 0xd2
 80007fe:	4833      	ldr	r0, [pc, #204]	; (80008cc <HAL_ADC_Init+0x1b8>)
 8000800:	0049      	lsls	r1, r1, #1
 8000802:	f002 fc59 	bl	80030b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000806:	0023      	movs	r3, r4
 8000808:	332c      	adds	r3, #44	; 0x2c
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d904      	bls.n	800081a <HAL_ADC_Init+0x106>
 8000810:	21a6      	movs	r1, #166	; 0xa6
 8000812:	482e      	ldr	r0, [pc, #184]	; (80008cc <HAL_ADC_Init+0x1b8>)
 8000814:	31ff      	adds	r1, #255	; 0xff
 8000816:	f002 fc4f 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800081a:	2204      	movs	r2, #4
 800081c:	6963      	ldr	r3, [r4, #20]
 800081e:	3b04      	subs	r3, #4
 8000820:	4393      	bics	r3, r2
 8000822:	d004      	beq.n	800082e <HAL_ADC_Init+0x11a>
 8000824:	21d3      	movs	r1, #211	; 0xd3
 8000826:	4829      	ldr	r0, [pc, #164]	; (80008cc <HAL_ADC_Init+0x1b8>)
 8000828:	0049      	lsls	r1, r1, #1
 800082a:	f002 fc45 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <HAL_ADC_Init+0x1c4>)
 8000830:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000832:	421a      	tst	r2, r3
 8000834:	d004      	beq.n	8000840 <HAL_ADC_Init+0x12c>
 8000836:	21a8      	movs	r1, #168	; 0xa8
 8000838:	4824      	ldr	r0, [pc, #144]	; (80008cc <HAL_ADC_Init+0x1b8>)
 800083a:	31ff      	adds	r1, #255	; 0xff
 800083c:	f002 fc3c 	bl	80030b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8000840:	69a3      	ldr	r3, [r4, #24]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d904      	bls.n	8000850 <HAL_ADC_Init+0x13c>
 8000846:	21d4      	movs	r1, #212	; 0xd4
 8000848:	4820      	ldr	r0, [pc, #128]	; (80008cc <HAL_ADC_Init+0x1b8>)
 800084a:	0049      	lsls	r1, r1, #1
 800084c:	f002 fc34 	bl	80030b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 8000850:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000852:	2b01      	cmp	r3, #1
 8000854:	d904      	bls.n	8000860 <HAL_ADC_Init+0x14c>
 8000856:	21aa      	movs	r1, #170	; 0xaa
 8000858:	481c      	ldr	r0, [pc, #112]	; (80008cc <HAL_ADC_Init+0x1b8>)
 800085a:	31ff      	adds	r1, #255	; 0xff
 800085c:	f002 fc2c 	bl	80030b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8000860:	69e3      	ldr	r3, [r4, #28]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d904      	bls.n	8000870 <HAL_ADC_Init+0x15c>
 8000866:	21d5      	movs	r1, #213	; 0xd5
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <HAL_ADC_Init+0x1b8>)
 800086a:	0049      	lsls	r1, r1, #1
 800086c:	f002 fc24 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 8000870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000872:	2b07      	cmp	r3, #7
 8000874:	d904      	bls.n	8000880 <HAL_ADC_Init+0x16c>
 8000876:	21ac      	movs	r1, #172	; 0xac
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <HAL_ADC_Init+0x1b8>)
 800087a:	31ff      	adds	r1, #255	; 0xff
 800087c:	f002 fc1c 	bl	80030b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8000880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000882:	2b01      	cmp	r3, #1
 8000884:	d904      	bls.n	8000890 <HAL_ADC_Init+0x17c>
 8000886:	21d6      	movs	r1, #214	; 0xd6
 8000888:	4810      	ldr	r0, [pc, #64]	; (80008cc <HAL_ADC_Init+0x1b8>)
 800088a:	0049      	lsls	r1, r1, #1
 800088c:	f002 fc14 	bl	80030b8 <assert_failed>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000890:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000892:	2b00      	cmp	r3, #0
 8000894:	d106      	bne.n	80008a4 <HAL_ADC_Init+0x190>
    hadc->Lock = HAL_UNLOCKED;
 8000896:	0022      	movs	r2, r4
 8000898:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800089a:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 800089c:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800089e:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80008a0:	f002 fe3e 	bl	8003520 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80008a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008a6:	06db      	lsls	r3, r3, #27
 80008a8:	d404      	bmi.n	80008b4 <HAL_ADC_Init+0x1a0>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80008aa:	2304      	movs	r3, #4
 80008ac:	6822      	ldr	r2, [r4, #0]
 80008ae:	6891      	ldr	r1, [r2, #8]
 80008b0:	4019      	ands	r1, r3
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80008b2:	d013      	beq.n	80008dc <HAL_ADC_Init+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008b4:	2310      	movs	r3, #16
 80008b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80008b8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ba:	4313      	orrs	r3, r2
 80008bc:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80008be:	2300      	movs	r3, #0
 80008c0:	3450      	adds	r4, #80	; 0x50
 80008c2:	7023      	strb	r3, [r4, #0]
}
 80008c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40012400 	.word	0x40012400
 80008cc:	08003abb 	.word	0x08003abb
 80008d0:	fff3ffff 	.word	0xfff3ffff
 80008d4:	fffff3ff 	.word	0xfffff3ff
 80008d8:	ffffefff 	.word	0xffffefff
  ADC_STATE_CLR_SET(hadc->State,
 80008dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008de:	486a      	ldr	r0, [pc, #424]	; (8000a88 <HAL_ADC_Init+0x374>)
 80008e0:	4018      	ands	r0, r3
 80008e2:	2302      	movs	r3, #2
 80008e4:	4303      	orrs	r3, r0
 80008e6:	6563      	str	r3, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008e8:	2303      	movs	r3, #3
 80008ea:	6890      	ldr	r0, [r2, #8]
 80008ec:	4018      	ands	r0, r3
 80008ee:	4b67      	ldr	r3, [pc, #412]	; (8000a8c <HAL_ADC_Init+0x378>)
 80008f0:	2801      	cmp	r0, #1
 80008f2:	d102      	bne.n	80008fa <HAL_ADC_Init+0x1e6>
 80008f4:	6817      	ldr	r7, [r2, #0]
 80008f6:	4207      	tst	r7, r0
 80008f8:	d11a      	bne.n	8000930 <HAL_ADC_Init+0x21c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80008fa:	2580      	movs	r5, #128	; 0x80
 80008fc:	6867      	ldr	r7, [r4, #4]
 80008fe:	05ed      	lsls	r5, r5, #23
 8000900:	0078      	lsls	r0, r7, #1
 8000902:	0840      	lsrs	r0, r0, #1
 8000904:	42a8      	cmp	r0, r5
 8000906:	d004      	beq.n	8000912 <HAL_ADC_Init+0x1fe>
 8000908:	2080      	movs	r0, #128	; 0x80
 800090a:	0600      	lsls	r0, r0, #24
 800090c:	4287      	cmp	r7, r0
 800090e:	d000      	beq.n	8000912 <HAL_ADC_Init+0x1fe>
 8000910:	e09e      	b.n	8000a50 <HAL_ADC_Init+0x33c>
 8000912:	6910      	ldr	r0, [r2, #16]
 8000914:	0080      	lsls	r0, r0, #2
 8000916:	0880      	lsrs	r0, r0, #2
 8000918:	6110      	str	r0, [r2, #16]
 800091a:	6910      	ldr	r0, [r2, #16]
 800091c:	4307      	orrs	r7, r0
 800091e:	6117      	str	r7, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000920:	2718      	movs	r7, #24
 8000922:	68d0      	ldr	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000924:	68a5      	ldr	r5, [r4, #8]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000926:	43b8      	bics	r0, r7
 8000928:	60d0      	str	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800092a:	68d0      	ldr	r0, [r2, #12]
 800092c:	4328      	orrs	r0, r5
 800092e:	60d0      	str	r0, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4857      	ldr	r0, [pc, #348]	; (8000a90 <HAL_ADC_Init+0x37c>)
 8000934:	4002      	ands	r2, r0
 8000936:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000938:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	0652      	lsls	r2, r2, #25
 800093e:	4302      	orrs	r2, r0
 8000940:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	6822      	ldr	r2, [r4, #0]
 8000946:	055b      	lsls	r3, r3, #21
 8000948:	6890      	ldr	r0, [r2, #8]
 800094a:	4218      	tst	r0, r3
 800094c:	d102      	bne.n	8000954 <HAL_ADC_Init+0x240>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800094e:	6890      	ldr	r0, [r2, #8]
 8000950:	4303      	orrs	r3, r0
 8000952:	6093      	str	r3, [r2, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000954:	68d3      	ldr	r3, [r2, #12]
 8000956:	484f      	ldr	r0, [pc, #316]	; (8000a94 <HAL_ADC_Init+0x380>)
 8000958:	4003      	ands	r3, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800095a:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800095c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800095e:	68d7      	ldr	r7, [r2, #12]
 8000960:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000962:	2802      	cmp	r0, #2
 8000964:	d100      	bne.n	8000968 <HAL_ADC_Init+0x254>
 8000966:	2104      	movs	r1, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000968:	6b25      	ldr	r5, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800096a:	7ff0      	ldrb	r0, [r6, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800096c:	432b      	orrs	r3, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800096e:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000970:	433b      	orrs	r3, r7
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000972:	03ae      	lsls	r6, r5, #14
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000974:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000976:	4333      	orrs	r3, r6
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000978:	03ee      	lsls	r6, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800097a:	4333      	orrs	r3, r6
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800097c:	0346      	lsls	r6, r0, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800097e:	4333      	orrs	r3, r6
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000980:	0026      	movs	r6, r4
 8000982:	362c      	adds	r6, #44	; 0x2c
 8000984:	7836      	ldrb	r6, [r6, #0]
 8000986:	0076      	lsls	r6, r6, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000988:	4333      	orrs	r3, r6
 800098a:	430b      	orrs	r3, r1
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800098c:	21c2      	movs	r1, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800098e:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000992:	31ff      	adds	r1, #255	; 0xff
 8000994:	428b      	cmp	r3, r1
 8000996:	d004      	beq.n	80009a2 <HAL_ADC_Init+0x28e>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000998:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800099a:	68d1      	ldr	r1, [r2, #12]
 800099c:	432b      	orrs	r3, r5
 800099e:	430b      	orrs	r3, r1
 80009a0:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009a2:	1ca3      	adds	r3, r4, #2
 80009a4:	7fdb      	ldrb	r3, [r3, #31]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d106      	bne.n	80009b8 <HAL_ADC_Init+0x2a4>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d15c      	bne.n	8000a68 <HAL_ADC_Init+0x354>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	68d1      	ldr	r1, [r2, #12]
 80009b2:	025b      	lsls	r3, r3, #9
 80009b4:	430b      	orrs	r3, r1
 80009b6:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80009b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d15c      	bne.n	8000a78 <HAL_ADC_Init+0x364>
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 80009be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80009c0:	291c      	cmp	r1, #28
 80009c2:	d805      	bhi.n	80009d0 <HAL_ADC_Init+0x2bc>
 80009c4:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <HAL_ADC_Init+0x384>)
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	4393      	bics	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <HAL_ADC_Init+0x2c6>
 80009d0:	2193      	movs	r1, #147	; 0x93
 80009d2:	4832      	ldr	r0, [pc, #200]	; (8000a9c <HAL_ADC_Init+0x388>)
 80009d4:	0089      	lsls	r1, r1, #2
 80009d6:	f002 fb6f 	bl	80030b8 <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 80009da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009dc:	2260      	movs	r2, #96	; 0x60
 80009de:	0019      	movs	r1, r3
 80009e0:	4391      	bics	r1, r2
 80009e2:	d009      	beq.n	80009f8 <HAL_ADC_Init+0x2e4>
 80009e4:	2980      	cmp	r1, #128	; 0x80
 80009e6:	d007      	beq.n	80009f8 <HAL_ADC_Init+0x2e4>
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0052      	lsls	r2, r2, #1
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d003      	beq.n	80009f8 <HAL_ADC_Init+0x2e4>
 80009f0:	492b      	ldr	r1, [pc, #172]	; (8000aa0 <HAL_ADC_Init+0x38c>)
 80009f2:	482a      	ldr	r0, [pc, #168]	; (8000a9c <HAL_ADC_Init+0x388>)
 80009f4:	f002 fb60 	bl	80030b8 <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 80009f8:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <HAL_ADC_Init+0x390>)
 80009fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009fc:	421a      	tst	r2, r3
 80009fe:	d003      	beq.n	8000a08 <HAL_ADC_Init+0x2f4>
 8000a00:	4929      	ldr	r1, [pc, #164]	; (8000aa8 <HAL_ADC_Init+0x394>)
 8000a02:	4826      	ldr	r0, [pc, #152]	; (8000a9c <HAL_ADC_Init+0x388>)
 8000a04:	f002 fb58 	bl	80030b8 <assert_failed>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000a08:	6822      	ldr	r2, [r4, #0]
 8000a0a:	4928      	ldr	r1, [pc, #160]	; (8000aac <HAL_ADC_Init+0x398>)
 8000a0c:	6913      	ldr	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000a0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000a10:	400b      	ands	r3, r1
 8000a12:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a16:	6911      	ldr	r1, [r2, #16]
 8000a18:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8000a1a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000a1c:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6113      	str	r3, [r2, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	6911      	ldr	r1, [r2, #16]
 8000a26:	430b      	orrs	r3, r1
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000a28:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000a2a:	2107      	movs	r1, #7
 8000a2c:	6823      	ldr	r3, [r4, #0]
  ADC_CLEAR_ERRORCODE(hadc);
 8000a2e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000a30:	695a      	ldr	r2, [r3, #20]
 8000a32:	438a      	bics	r2, r1
 8000a34:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000a36:	695a      	ldr	r2, [r3, #20]
 8000a38:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8000a3e:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000a40:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000a42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a44:	4393      	bics	r3, r2
 8000a46:	001a      	movs	r2, r3
 8000a48:	2301      	movs	r3, #1
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000a4e:	e739      	b.n	80008c4 <HAL_ADC_Init+0x1b0>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000a50:	6910      	ldr	r0, [r2, #16]
 8000a52:	4d17      	ldr	r5, [pc, #92]	; (8000ab0 <HAL_ADC_Init+0x39c>)
 8000a54:	0080      	lsls	r0, r0, #2
 8000a56:	0880      	lsrs	r0, r0, #2
 8000a58:	6110      	str	r0, [r2, #16]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	4028      	ands	r0, r5
 8000a5e:	6018      	str	r0, [r3, #0]
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	4307      	orrs	r7, r0
 8000a64:	601f      	str	r7, [r3, #0]
 8000a66:	e75b      	b.n	8000920 <HAL_ADC_Init+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a68:	2120      	movs	r1, #32
 8000a6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a6c:	4301      	orrs	r1, r0
 8000a6e:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a70:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000a72:	430b      	orrs	r3, r1
 8000a74:	65a3      	str	r3, [r4, #88]	; 0x58
 8000a76:	e79f      	b.n	80009b8 <HAL_ADC_Init+0x2a4>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000a78:	2101      	movs	r1, #1
 8000a7a:	6913      	ldr	r3, [r2, #16]
 8000a7c:	420b      	tst	r3, r1
 8000a7e:	d0d4      	beq.n	8000a2a <HAL_ADC_Init+0x316>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000a80:	6913      	ldr	r3, [r2, #16]
 8000a82:	438b      	bics	r3, r1
 8000a84:	e7d0      	b.n	8000a28 <HAL_ADC_Init+0x314>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	fffffefd 	.word	0xfffffefd
 8000a8c:	40012708 	.word	0x40012708
 8000a90:	fdffffff 	.word	0xfdffffff
 8000a94:	fffe0219 	.word	0xfffe0219
 8000a98:	11111111 	.word	0x11111111
 8000a9c:	08003abb 	.word	0x08003abb
 8000aa0:	0000024d 	.word	0x0000024d
 8000aa4:	fffffdff 	.word	0xfffffdff
 8000aa8:	0000024e 	.word	0x0000024e
 8000aac:	fffffc03 	.word	0xfffffc03
 8000ab0:	ffc3ffff 	.word	0xffc3ffff

08000ab4 <HAL_ADC_ConfigChannel>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000ab4:	4b4b      	ldr	r3, [pc, #300]	; (8000be4 <HAL_ADC_ConfigChannel+0x130>)
 8000ab6:	6802      	ldr	r2, [r0, #0]
{
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	0005      	movs	r5, r0
 8000abc:	000c      	movs	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d003      	beq.n	8000aca <HAL_ADC_ConfigChannel+0x16>
 8000ac2:	4949      	ldr	r1, [pc, #292]	; (8000be8 <HAL_ADC_ConfigChannel+0x134>)
 8000ac4:	4849      	ldr	r0, [pc, #292]	; (8000bec <HAL_ADC_ConfigChannel+0x138>)
 8000ac6:	f002 faf7 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d036      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000ad0:	4a47      	ldr	r2, [pc, #284]	; (8000bf0 <HAL_ADC_ConfigChannel+0x13c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d033      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000ad6:	4a47      	ldr	r2, [pc, #284]	; (8000bf4 <HAL_ADC_ConfigChannel+0x140>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d030      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000adc:	4a46      	ldr	r2, [pc, #280]	; (8000bf8 <HAL_ADC_ConfigChannel+0x144>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d02d      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000ae2:	4a46      	ldr	r2, [pc, #280]	; (8000bfc <HAL_ADC_ConfigChannel+0x148>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d02a      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000ae8:	4a45      	ldr	r2, [pc, #276]	; (8000c00 <HAL_ADC_ConfigChannel+0x14c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d027      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000aee:	4a45      	ldr	r2, [pc, #276]	; (8000c04 <HAL_ADC_ConfigChannel+0x150>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d024      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000af4:	4a44      	ldr	r2, [pc, #272]	; (8000c08 <HAL_ADC_ConfigChannel+0x154>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d021      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000afa:	4a44      	ldr	r2, [pc, #272]	; (8000c0c <HAL_ADC_ConfigChannel+0x158>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d01e      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b00:	4a43      	ldr	r2, [pc, #268]	; (8000c10 <HAL_ADC_ConfigChannel+0x15c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d01b      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b06:	4a43      	ldr	r2, [pc, #268]	; (8000c14 <HAL_ADC_ConfigChannel+0x160>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d018      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b0c:	4a42      	ldr	r2, [pc, #264]	; (8000c18 <HAL_ADC_ConfigChannel+0x164>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d015      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b12:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <HAL_ADC_ConfigChannel+0x168>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d012      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b18:	4a41      	ldr	r2, [pc, #260]	; (8000c20 <HAL_ADC_ConfigChannel+0x16c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d00f      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b1e:	4a41      	ldr	r2, [pc, #260]	; (8000c24 <HAL_ADC_ConfigChannel+0x170>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d00c      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b24:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <HAL_ADC_ConfigChannel+0x174>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d009      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b2a:	4a40      	ldr	r2, [pc, #256]	; (8000c2c <HAL_ADC_ConfigChannel+0x178>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d006      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b30:	4a3f      	ldr	r2, [pc, #252]	; (8000c30 <HAL_ADC_ConfigChannel+0x17c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d003      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x8a>
 8000b36:	493f      	ldr	r1, [pc, #252]	; (8000c34 <HAL_ADC_ConfigChannel+0x180>)
 8000b38:	482c      	ldr	r0, [pc, #176]	; (8000bec <HAL_ADC_ConfigChannel+0x138>)
 8000b3a:	f002 fabd 	bl	80030b8 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8000b3e:	6863      	ldr	r3, [r4, #4]
 8000b40:	4a3d      	ldr	r2, [pc, #244]	; (8000c38 <HAL_ADC_ConfigChannel+0x184>)
 8000b42:	189b      	adds	r3, r3, r2
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d904      	bls.n	8000b52 <HAL_ADC_ConfigChannel+0x9e>
 8000b48:	21f0      	movs	r1, #240	; 0xf0
 8000b4a:	4828      	ldr	r0, [pc, #160]	; (8000bec <HAL_ADC_ConfigChannel+0x138>)
 8000b4c:	00c9      	lsls	r1, r1, #3
 8000b4e:	f002 fab3 	bl	80030b8 <assert_failed>
  __HAL_LOCK(hadc);
 8000b52:	002e      	movs	r6, r5
 8000b54:	3650      	adds	r6, #80	; 0x50
 8000b56:	7833      	ldrb	r3, [r6, #0]
 8000b58:	2002      	movs	r0, #2
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d00b      	beq.n	8000b76 <HAL_ADC_ConfigChannel+0xc2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000b5e:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 8000b60:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000b62:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8000b64:	7030      	strb	r0, [r6, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000b66:	075b      	lsls	r3, r3, #29
 8000b68:	d506      	bpl.n	8000b78 <HAL_ADC_ConfigChannel+0xc4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000b72:	2300      	movs	r3, #0
 8000b74:	7033      	strb	r3, [r6, #0]
}
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 8000b7a:	4930      	ldr	r1, [pc, #192]	; (8000c3c <HAL_ADC_ConfigChannel+0x188>)
 8000b7c:	6865      	ldr	r5, [r4, #4]
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	02c0      	lsls	r0, r0, #11
 8000b82:	428d      	cmp	r5, r1
 8000b84:	d01b      	beq.n	8000bbe <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000b86:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8000b88:	0359      	lsls	r1, r3, #13
 8000b8a:	0b49      	lsrs	r1, r1, #13
 8000b8c:	4329      	orrs	r1, r5
 8000b8e:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000b90:	4203      	tst	r3, r0
 8000b92:	d008      	beq.n	8000ba6 <HAL_ADC_ConfigChannel+0xf2>
      ADC->CCR |= ADC_CCR_TSEN;   
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <HAL_ADC_ConfigChannel+0x18c>)
 8000b98:	041b      	lsls	r3, r3, #16
 8000b9a:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000b9c:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000ba2:	f7ff fda1 	bl	80006e8 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	039b      	lsls	r3, r3, #14
 8000baa:	d505      	bpl.n	8000bb8 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	4a24      	ldr	r2, [pc, #144]	; (8000c40 <HAL_ADC_ConfigChannel+0x18c>)
 8000bb0:	03db      	lsls	r3, r3, #15
 8000bb2:	6811      	ldr	r1, [r2, #0]
 8000bb4:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000bb6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8000bbc:	e7db      	b.n	8000b76 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000bbe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000bc0:	035c      	lsls	r4, r3, #13
 8000bc2:	0b64      	lsrs	r4, r4, #13
 8000bc4:	43a1      	bics	r1, r4
 8000bc6:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000bc8:	4203      	tst	r3, r0
 8000bca:	d004      	beq.n	8000bd6 <HAL_ADC_ConfigChannel+0x122>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000bcc:	491c      	ldr	r1, [pc, #112]	; (8000c40 <HAL_ADC_ConfigChannel+0x18c>)
 8000bce:	481d      	ldr	r0, [pc, #116]	; (8000c44 <HAL_ADC_ConfigChannel+0x190>)
 8000bd0:	680a      	ldr	r2, [r1, #0]
 8000bd2:	4002      	ands	r2, r0
 8000bd4:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000bd6:	039b      	lsls	r3, r3, #14
 8000bd8:	d5ee      	bpl.n	8000bb8 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000bda:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_ADC_ConfigChannel+0x18c>)
 8000bdc:	491a      	ldr	r1, [pc, #104]	; (8000c48 <HAL_ADC_ConfigChannel+0x194>)
 8000bde:	6813      	ldr	r3, [r2, #0]
 8000be0:	400b      	ands	r3, r1
 8000be2:	e7e8      	b.n	8000bb6 <HAL_ADC_ConfigChannel+0x102>
 8000be4:	40012400 	.word	0x40012400
 8000be8:	0000077e 	.word	0x0000077e
 8000bec:	08003abb 	.word	0x08003abb
 8000bf0:	04000002 	.word	0x04000002
 8000bf4:	08000004 	.word	0x08000004
 8000bf8:	0c000008 	.word	0x0c000008
 8000bfc:	10000010 	.word	0x10000010
 8000c00:	14000020 	.word	0x14000020
 8000c04:	18000040 	.word	0x18000040
 8000c08:	1c000080 	.word	0x1c000080
 8000c0c:	20000100 	.word	0x20000100
 8000c10:	24000200 	.word	0x24000200
 8000c14:	28000400 	.word	0x28000400
 8000c18:	2c000800 	.word	0x2c000800
 8000c1c:	30001000 	.word	0x30001000
 8000c20:	34002000 	.word	0x34002000
 8000c24:	38004000 	.word	0x38004000
 8000c28:	3c008000 	.word	0x3c008000
 8000c2c:	48040000 	.word	0x48040000
 8000c30:	44020000 	.word	0x44020000
 8000c34:	0000077f 	.word	0x0000077f
 8000c38:	fffff000 	.word	0xfffff000
 8000c3c:	00001001 	.word	0x00001001
 8000c40:	40012708 	.word	0x40012708
 8000c44:	ff7fffff 	.word	0xff7fffff
 8000c48:	ffbfffff 	.word	0xffbfffff

08000c4c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0004      	movs	r4, r0
 8000c50:	000d      	movs	r5, r1
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c52:	2903      	cmp	r1, #3
 8000c54:	d903      	bls.n	8000c5e <HAL_NVIC_SetPriority+0x12>
 8000c56:	2187      	movs	r1, #135	; 0x87
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <HAL_NVIC_SetPriority+0x68>)
 8000c5a:	f002 fa2d 	bl	80030b8 <assert_failed>
 8000c5e:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000c60:	2c00      	cmp	r4, #0
 8000c62:	da14      	bge.n	8000c8e <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	230f      	movs	r3, #15
 8000c66:	b2e4      	uxtb	r4, r4
 8000c68:	4023      	ands	r3, r4
 8000c6a:	3b08      	subs	r3, #8
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_NVIC_SetPriority+0x6c>)
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	189b      	adds	r3, r3, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	4014      	ands	r4, r2
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	32fc      	adds	r2, #252	; 0xfc
 8000c7c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7e:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c80:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c82:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c84:	69d8      	ldr	r0, [r3, #28]
 8000c86:	43a8      	bics	r0, r5
 8000c88:	4302      	orrs	r2, r0
 8000c8a:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8e:	2503      	movs	r5, #3
 8000c90:	08a3      	lsrs	r3, r4, #2
 8000c92:	402c      	ands	r4, r5
 8000c94:	40ac      	lsls	r4, r5
 8000c96:	35fc      	adds	r5, #252	; 0xfc
 8000c98:	002e      	movs	r6, r5
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_NVIC_SetPriority+0x70>)
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	22c0      	movs	r2, #192	; 0xc0
 8000ca2:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca4:	4029      	ands	r1, r5
 8000ca6:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	5898      	ldr	r0, [r3, r2]
 8000cac:	43b0      	bics	r0, r6
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	5099      	str	r1, [r3, r2]
 8000cb2:	e7eb      	b.n	8000c8c <HAL_NVIC_SetPriority+0x40>
 8000cb4:	08003af3 	.word	0x08003af3
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b510      	push	{r4, lr}
 8000cc2:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cc4:	da03      	bge.n	8000cce <HAL_NVIC_EnableIRQ+0xe>
 8000cc6:	2197      	movs	r1, #151	; 0x97
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <HAL_NVIC_EnableIRQ+0x1c>)
 8000cca:	f002 f9f5 	bl	80030b8 <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cce:	231f      	movs	r3, #31
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	3b1e      	subs	r3, #30
 8000cd4:	40a3      	lsls	r3, r4
 8000cd6:	4a02      	ldr	r2, [pc, #8]	; (8000ce0 <HAL_NVIC_EnableIRQ+0x20>)
 8000cd8:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000cda:	bd10      	pop	{r4, pc}
 8000cdc:	08003af3 	.word	0x08003af3
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_SYSTICK_Config+0x28>)
 8000ce6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d80d      	bhi.n	8000d0a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cee:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf6:	6a03      	ldr	r3, [r0, #32]
 8000cf8:	0609      	lsls	r1, r1, #24
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d02:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d04:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d06:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d08:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d0a:	4770      	bx	lr
 8000d0c:	00ffffff 	.word	0x00ffffff
 8000d10:	e000e010 	.word	0xe000e010
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d18:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d1a:	1d84      	adds	r4, r0, #6
 8000d1c:	7fe3      	ldrb	r3, [r4, #31]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d004      	beq.n	8000d2c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d22:	2304      	movs	r3, #4
 8000d24:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000d26:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d2c:	210e      	movs	r1, #14
 8000d2e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d30:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	438a      	bics	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	6819      	ldr	r1, [r3, #0]
 8000d3c:	4391      	bics	r1, r2
 8000d3e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d40:	231c      	movs	r3, #28
 8000d42:	402b      	ands	r3, r5
 8000d44:	0015      	movs	r5, r2
 8000d46:	409d      	lsls	r5, r3
 8000d48:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8000d4a:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d4c:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000d50:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8000d52:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000d54:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000d56:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000d58:	42a2      	cmp	r2, r4
 8000d5a:	d0e5      	beq.n	8000d28 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000d5c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000d5e:	0023      	movs	r3, r4
 8000d60:	e7e2      	b.n	8000d28 <HAL_DMA_Abort_IT+0x10>
	...

08000d64 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
 
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d64:	684b      	ldr	r3, [r1, #4]
{
 8000d66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d68:	0004      	movs	r4, r0
 8000d6a:	000d      	movs	r5, r1
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d912      	bls.n	8000d96 <HAL_GPIO_Init+0x32>
 8000d70:	001a      	movs	r2, r3
 8000d72:	3a11      	subs	r2, #17
 8000d74:	2a01      	cmp	r2, #1
 8000d76:	d90e      	bls.n	8000d96 <HAL_GPIO_Init+0x32>
 8000d78:	4a85      	ldr	r2, [pc, #532]	; (8000f90 <HAL_GPIO_Init+0x22c>)
 8000d7a:	4986      	ldr	r1, [pc, #536]	; (8000f94 <HAL_GPIO_Init+0x230>)
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	1852      	adds	r2, r2, r1
 8000d80:	4985      	ldr	r1, [pc, #532]	; (8000f98 <HAL_GPIO_Init+0x234>)
 8000d82:	420a      	tst	r2, r1
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x32>
 8000d86:	4a85      	ldr	r2, [pc, #532]	; (8000f9c <HAL_GPIO_Init+0x238>)
 8000d88:	189b      	adds	r3, r3, r2
 8000d8a:	420b      	tst	r3, r1
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x32>
 8000d8e:	21ae      	movs	r1, #174	; 0xae
 8000d90:	4883      	ldr	r0, [pc, #524]	; (8000fa0 <HAL_GPIO_Init+0x23c>)
 8000d92:	f002 f991 	bl	80030b8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000d96:	68ab      	ldr	r3, [r5, #8]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d903      	bls.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d9c:	21af      	movs	r1, #175	; 0xaf
 8000d9e:	4880      	ldr	r0, [pc, #512]	; (8000fa0 <HAL_GPIO_Init+0x23c>)
 8000da0:	f002 f98a 	bl	80030b8 <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));
 8000da4:	23a0      	movs	r3, #160	; 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d00b      	beq.n	8000dc4 <HAL_GPIO_Init+0x60>
 8000dac:	4b7d      	ldr	r3, [pc, #500]	; (8000fa4 <HAL_GPIO_Init+0x240>)
 8000dae:	429c      	cmp	r4, r3
 8000db0:	d008      	beq.n	8000dc4 <HAL_GPIO_Init+0x60>
 8000db2:	4b7d      	ldr	r3, [pc, #500]	; (8000fa8 <HAL_GPIO_Init+0x244>)
 8000db4:	429c      	cmp	r4, r3
 8000db6:	d005      	beq.n	8000dc4 <HAL_GPIO_Init+0x60>
 8000db8:	4b7c      	ldr	r3, [pc, #496]	; (8000fac <HAL_GPIO_Init+0x248>)
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	d002      	beq.n	8000dc4 <HAL_GPIO_Init+0x60>
 8000dbe:	4b7c      	ldr	r3, [pc, #496]	; (8000fb0 <HAL_GPIO_Init+0x24c>)
 8000dc0:	429c      	cmp	r4, r3
 8000dc2:	d107      	bne.n	8000dd4 <HAL_GPIO_Init+0x70>
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x70>
 8000dcc:	4a79      	ldr	r2, [pc, #484]	; (8000fb4 <HAL_GPIO_Init+0x250>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d00d      	beq.n	8000df0 <HAL_GPIO_Init+0x8c>
 8000dd4:	4b78      	ldr	r3, [pc, #480]	; (8000fb8 <HAL_GPIO_Init+0x254>)
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	d106      	bne.n	8000de8 <HAL_GPIO_Init+0x84>
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	4a77      	ldr	r2, [pc, #476]	; (8000fbc <HAL_GPIO_Init+0x258>)
 8000dde:	4213      	tst	r3, r2
 8000de0:	d002      	beq.n	8000de8 <HAL_GPIO_Init+0x84>
 8000de2:	4313      	orrs	r3, r2
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x8c>
 8000de8:	21b0      	movs	r1, #176	; 0xb0
 8000dea:	486d      	ldr	r0, [pc, #436]	; (8000fa0 <HAL_GPIO_Init+0x23c>)
 8000dec:	f002 f964 	bl	80030b8 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000df0:	2700      	movs	r7, #0
  while (((GPIO_Init->Pin) >> position) != 0)
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	40fa      	lsrs	r2, r7
 8000df8:	d100      	bne.n	8000dfc <HAL_GPIO_Init+0x98>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000dfa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	40ba      	lsls	r2, r7
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	401a      	ands	r2, r3
 8000e04:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000e06:	d100      	bne.n	8000e0a <HAL_GPIO_Init+0xa6>
 8000e08:	e0c0      	b.n	8000f8c <HAL_GPIO_Init+0x228>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	686b      	ldr	r3, [r5, #4]
 8000e0e:	4393      	bics	r3, r2
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d12c      	bne.n	8000e6e <HAL_GPIO_Init+0x10a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000e14:	23a0      	movs	r3, #160	; 0xa0
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	d012      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
 8000e1c:	4b61      	ldr	r3, [pc, #388]	; (8000fa4 <HAL_GPIO_Init+0x240>)
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	d00f      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
 8000e22:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <HAL_GPIO_Init+0x244>)
 8000e24:	429c      	cmp	r4, r3
 8000e26:	d00c      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
 8000e28:	4b60      	ldr	r3, [pc, #384]	; (8000fac <HAL_GPIO_Init+0x248>)
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d009      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
 8000e2e:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <HAL_GPIO_Init+0x24c>)
 8000e30:	429c      	cmp	r4, r3
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
 8000e34:	4b60      	ldr	r3, [pc, #384]	; (8000fb8 <HAL_GPIO_Init+0x254>)
 8000e36:	429c      	cmp	r4, r3
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
 8000e3a:	21bf      	movs	r1, #191	; 0xbf
 8000e3c:	4858      	ldr	r0, [pc, #352]	; (8000fa0 <HAL_GPIO_Init+0x23c>)
 8000e3e:	f002 f93b 	bl	80030b8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000e42:	692b      	ldr	r3, [r5, #16]
 8000e44:	2b07      	cmp	r3, #7
 8000e46:	d903      	bls.n	8000e50 <HAL_GPIO_Init+0xec>
 8000e48:	21c0      	movs	r1, #192	; 0xc0
 8000e4a:	4855      	ldr	r0, [pc, #340]	; (8000fa0 <HAL_GPIO_Init+0x23c>)
 8000e4c:	f002 f934 	bl	80030b8 <assert_failed>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000e50:	2207      	movs	r2, #7
 8000e52:	200f      	movs	r0, #15
 8000e54:	403a      	ands	r2, r7
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8000e5a:	08fb      	lsrs	r3, r7, #3
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	18e3      	adds	r3, r4, r3
 8000e60:	6a19      	ldr	r1, [r3, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000e62:	4381      	bics	r1, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000e64:	6928      	ldr	r0, [r5, #16]
 8000e66:	4090      	lsls	r0, r2
 8000e68:	0002      	movs	r2, r0
 8000e6a:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000e6c:	621a      	str	r2, [r3, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6e:	2210      	movs	r2, #16
 8000e70:	686b      	ldr	r3, [r5, #4]
 8000e72:	007e      	lsls	r6, r7, #1
 8000e74:	4393      	bics	r3, r2
 8000e76:	3b01      	subs	r3, #1
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d819      	bhi.n	8000eb0 <HAL_GPIO_Init+0x14c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e7c:	68eb      	ldr	r3, [r5, #12]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d903      	bls.n	8000e8a <HAL_GPIO_Init+0x126>
 8000e82:	21ce      	movs	r1, #206	; 0xce
 8000e84:	4846      	ldr	r0, [pc, #280]	; (8000fa0 <HAL_GPIO_Init+0x23c>)
 8000e86:	f002 f917 	bl	80030b8 <assert_failed>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	40b2      	lsls	r2, r6
        temp = GPIOx->OSPEEDR;
 8000e8e:	68a3      	ldr	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e90:	2101      	movs	r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e92:	4393      	bics	r3, r2
 8000e94:	001a      	movs	r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	68eb      	ldr	r3, [r5, #12]
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8000e9c:	60a3      	str	r3, [r4, #8]
        temp= GPIOx->OTYPER;
 8000e9e:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	9b01      	ldr	r3, [sp, #4]
 8000ea2:	439a      	bics	r2, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea4:	686b      	ldr	r3, [r5, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	400b      	ands	r3, r1
 8000eaa:	40bb      	lsls	r3, r7
 8000eac:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8000eae:	6063      	str	r3, [r4, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	469c      	mov	ip, r3
 8000eb4:	40b3      	lsls	r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb6:	4661      	mov	r1, ip
 8000eb8:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eba:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebc:	4011      	ands	r1, r2
 8000ebe:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 8000ec0:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ec2:	4018      	ands	r0, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec4:	4301      	orrs	r1, r0
      GPIOx->MODER = temp;
 8000ec6:	6021      	str	r1, [r4, #0]
      temp = GPIOx->PUPDR;
 8000ec8:	68e1      	ldr	r1, [r4, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eca:	4019      	ands	r1, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000ecc:	68ab      	ldr	r3, [r5, #8]
 8000ece:	40b3      	lsls	r3, r6
 8000ed0:	430b      	orrs	r3, r1
      GPIOx->PUPDR = temp;
 8000ed2:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ed4:	00d3      	lsls	r3, r2, #3
 8000ed6:	d559      	bpl.n	8000f8c <HAL_GPIO_Init+0x228>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4939      	ldr	r1, [pc, #228]	; (8000fc0 <HAL_GPIO_Init+0x25c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000edc:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000ee0:	4303      	orrs	r3, r0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ee2:	4660      	mov	r0, ip
 8000ee4:	4038      	ands	r0, r7
 8000ee6:	0080      	lsls	r0, r0, #2
 8000ee8:	4086      	lsls	r6, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	634b      	str	r3, [r1, #52]	; 0x34
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_GPIO_Init+0x260>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000eee:	08b9      	lsrs	r1, r7, #2
 8000ef0:	0089      	lsls	r1, r1, #2
 8000ef2:	18c9      	adds	r1, r1, r3
 8000ef4:	688b      	ldr	r3, [r1, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ef6:	43b3      	bics	r3, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ef8:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000efa:	9301      	str	r3, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000efc:	05f6      	lsls	r6, r6, #23
 8000efe:	2300      	movs	r3, #0
 8000f00:	42b4      	cmp	r4, r6
 8000f02:	d014      	beq.n	8000f2e <HAL_GPIO_Init+0x1ca>
 8000f04:	4e27      	ldr	r6, [pc, #156]	; (8000fa4 <HAL_GPIO_Init+0x240>)
 8000f06:	3301      	adds	r3, #1
 8000f08:	42b4      	cmp	r4, r6
 8000f0a:	d010      	beq.n	8000f2e <HAL_GPIO_Init+0x1ca>
 8000f0c:	4e26      	ldr	r6, [pc, #152]	; (8000fa8 <HAL_GPIO_Init+0x244>)
 8000f0e:	3301      	adds	r3, #1
 8000f10:	42b4      	cmp	r4, r6
 8000f12:	d00c      	beq.n	8000f2e <HAL_GPIO_Init+0x1ca>
 8000f14:	4e25      	ldr	r6, [pc, #148]	; (8000fac <HAL_GPIO_Init+0x248>)
 8000f16:	4663      	mov	r3, ip
 8000f18:	42b4      	cmp	r4, r6
 8000f1a:	d008      	beq.n	8000f2e <HAL_GPIO_Init+0x1ca>
 8000f1c:	4e24      	ldr	r6, [pc, #144]	; (8000fb0 <HAL_GPIO_Init+0x24c>)
 8000f1e:	3301      	adds	r3, #1
 8000f20:	42b4      	cmp	r4, r6
 8000f22:	d004      	beq.n	8000f2e <HAL_GPIO_Init+0x1ca>
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_GPIO_Init+0x264>)
 8000f26:	18e3      	adds	r3, r4, r3
 8000f28:	1e5e      	subs	r6, r3, #1
 8000f2a:	41b3      	sbcs	r3, r6
 8000f2c:	3305      	adds	r3, #5
 8000f2e:	4083      	lsls	r3, r0
 8000f30:	9801      	ldr	r0, [sp, #4]
 8000f32:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f34:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8000f36:	4925      	ldr	r1, [pc, #148]	; (8000fcc <HAL_GPIO_Init+0x268>)
        temp &= ~((uint32_t)iocurrent);
 8000f38:	9b00      	ldr	r3, [sp, #0]
        temp = EXTI->IMR;
 8000f3a:	680e      	ldr	r6, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	43d8      	mvns	r0, r3
          temp |= iocurrent;
 8000f3e:	4333      	orrs	r3, r6
 8000f40:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f42:	03d3      	lsls	r3, r2, #15
 8000f44:	d402      	bmi.n	8000f4c <HAL_GPIO_Init+0x1e8>
        temp &= ~((uint32_t)iocurrent);
 8000f46:	0033      	movs	r3, r6
 8000f48:	4003      	ands	r3, r0
 8000f4a:	469c      	mov	ip, r3
        EXTI->IMR = temp;
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	600b      	str	r3, [r1, #0]
        temp = EXTI->EMR;
 8000f50:	684e      	ldr	r6, [r1, #4]
          temp |= iocurrent;
 8000f52:	9b00      	ldr	r3, [sp, #0]
 8000f54:	4333      	orrs	r3, r6
 8000f56:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f58:	0393      	lsls	r3, r2, #14
 8000f5a:	d402      	bmi.n	8000f62 <HAL_GPIO_Init+0x1fe>
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	0033      	movs	r3, r6
 8000f5e:	4003      	ands	r3, r0
 8000f60:	469c      	mov	ip, r3
        EXTI->EMR = temp;
 8000f62:	4663      	mov	r3, ip
 8000f64:	604b      	str	r3, [r1, #4]
        temp = EXTI->RTSR;
 8000f66:	688e      	ldr	r6, [r1, #8]
          temp |= iocurrent;
 8000f68:	9b00      	ldr	r3, [sp, #0]
 8000f6a:	4333      	orrs	r3, r6
 8000f6c:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6e:	02d3      	lsls	r3, r2, #11
 8000f70:	d402      	bmi.n	8000f78 <HAL_GPIO_Init+0x214>
        temp &= ~((uint32_t)iocurrent);
 8000f72:	0033      	movs	r3, r6
 8000f74:	4003      	ands	r3, r0
 8000f76:	469c      	mov	ip, r3
        EXTI->RTSR = temp;
 8000f78:	4663      	mov	r3, ip
 8000f7a:	608b      	str	r3, [r1, #8]
        temp = EXTI->FTSR;
 8000f7c:	68ce      	ldr	r6, [r1, #12]
          temp |= iocurrent;
 8000f7e:	9b00      	ldr	r3, [sp, #0]
 8000f80:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f82:	0292      	lsls	r2, r2, #10
 8000f84:	d401      	bmi.n	8000f8a <HAL_GPIO_Init+0x226>
        temp &= ~((uint32_t)iocurrent);
 8000f86:	0033      	movs	r3, r6
 8000f88:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 8000f8a:	60cb      	str	r3, [r1, #12]
    position++;
 8000f8c:	3701      	adds	r7, #1
 8000f8e:	e730      	b.n	8000df2 <HAL_GPIO_Init+0x8e>
 8000f90:	ffdfffff 	.word	0xffdfffff
 8000f94:	efef0000 	.word	0xefef0000
 8000f98:	fffeffff 	.word	0xfffeffff
 8000f9c:	efdf0000 	.word	0xefdf0000
 8000fa0:	08003b2e 	.word	0x08003b2e
 8000fa4:	50000400 	.word	0x50000400
 8000fa8:	50000800 	.word	0x50000800
 8000fac:	50000c00 	.word	0x50000c00
 8000fb0:	50001000 	.word	0x50001000
 8000fb4:	0000ffff 	.word	0x0000ffff
 8000fb8:	50001c00 	.word	0x50001c00
 8000fbc:	00000603 	.word	0x00000603
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	afffe400 	.word	0xafffe400
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_WritePin>:
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8000fd0:	23a0      	movs	r3, #160	; 0xa0
{
 8000fd2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8000fd4:	05db      	lsls	r3, r3, #23
{
 8000fd6:	0004      	movs	r4, r0
 8000fd8:	000d      	movs	r5, r1
 8000fda:	0016      	movs	r6, r2
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8000fdc:	4298      	cmp	r0, r3
 8000fde:	d00b      	beq.n	8000ff8 <HAL_GPIO_WritePin+0x28>
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_GPIO_WritePin+0x68>)
 8000fe2:	4298      	cmp	r0, r3
 8000fe4:	d008      	beq.n	8000ff8 <HAL_GPIO_WritePin+0x28>
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_GPIO_WritePin+0x6c>)
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d005      	beq.n	8000ff8 <HAL_GPIO_WritePin+0x28>
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_GPIO_WritePin+0x70>)
 8000fee:	4298      	cmp	r0, r3
 8000ff0:	d002      	beq.n	8000ff8 <HAL_GPIO_WritePin+0x28>
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_GPIO_WritePin+0x74>)
 8000ff4:	4298      	cmp	r0, r3
 8000ff6:	d10a      	bne.n	800100e <HAL_GPIO_WritePin+0x3e>
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	d012      	beq.n	8001022 <HAL_GPIO_WritePin+0x52>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000ffc:	2e01      	cmp	r6, #1
 8000ffe:	d916      	bls.n	800102e <HAL_GPIO_WritePin+0x5e>
 8001000:	219e      	movs	r1, #158	; 0x9e
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <HAL_GPIO_WritePin+0x78>)
 8001004:	31ff      	adds	r1, #255	; 0xff
 8001006:	f002 f857 	bl	80030b8 <assert_failed>
  
  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 800100a:	61a5      	str	r5, [r4, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800100c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_GPIO_WritePin+0x7c>)
 8001010:	4298      	cmp	r0, r3
 8001012:	d106      	bne.n	8001022 <HAL_GPIO_WritePin+0x52>
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_GPIO_WritePin+0x80>)
 8001016:	4219      	tst	r1, r3
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_WritePin+0x52>
 800101a:	001a      	movs	r2, r3
 800101c:	430a      	orrs	r2, r1
 800101e:	429a      	cmp	r2, r3
 8001020:	d0ec      	beq.n	8000ffc <HAL_GPIO_WritePin+0x2c>
 8001022:	21ce      	movs	r1, #206	; 0xce
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <HAL_GPIO_WritePin+0x78>)
 8001026:	0049      	lsls	r1, r1, #1
 8001028:	f002 f846 	bl	80030b8 <assert_failed>
 800102c:	e7e6      	b.n	8000ffc <HAL_GPIO_WritePin+0x2c>
  if(PinState != GPIO_PIN_RESET)
 800102e:	2e00      	cmp	r6, #0
 8001030:	d1eb      	bne.n	800100a <HAL_GPIO_WritePin+0x3a>
    GPIOx->BRR = GPIO_Pin ;
 8001032:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8001034:	e7ea      	b.n	800100c <HAL_GPIO_WritePin+0x3c>
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	50000400 	.word	0x50000400
 800103c:	50000800 	.word	0x50000800
 8001040:	50000c00 	.word	0x50000c00
 8001044:	50001000 	.word	0x50001000
 8001048:	08003b2e 	.word	0x08003b2e
 800104c:	50001c00 	.word	0x50001c00
 8001050:	00000603 	.word	0x00000603

08001054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8001058:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800105a:	2c00      	cmp	r4, #0
 800105c:	d100      	bne.n	8001060 <HAL_I2C_Init+0xc>
 800105e:	e08a      	b.n	8001176 <HAL_I2C_Init+0x122>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_I2C_Init+0x138>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d00a      	beq.n	800107e <HAL_I2C_Init+0x2a>
 8001068:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_I2C_Init+0x13c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_I2C_Init+0x2a>
 800106e:	4a49      	ldr	r2, [pc, #292]	; (8001194 <HAL_I2C_Init+0x140>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d004      	beq.n	800107e <HAL_I2C_Init+0x2a>
 8001074:	21ef      	movs	r1, #239	; 0xef
 8001076:	4848      	ldr	r0, [pc, #288]	; (8001198 <HAL_I2C_Init+0x144>)
 8001078:	0049      	lsls	r1, r1, #1
 800107a:	f002 f81d 	bl	80030b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800107e:	4b47      	ldr	r3, [pc, #284]	; (800119c <HAL_I2C_Init+0x148>)
 8001080:	68a2      	ldr	r2, [r4, #8]
 8001082:	429a      	cmp	r2, r3
 8001084:	d904      	bls.n	8001090 <HAL_I2C_Init+0x3c>
 8001086:	21e0      	movs	r1, #224	; 0xe0
 8001088:	4843      	ldr	r0, [pc, #268]	; (8001198 <HAL_I2C_Init+0x144>)
 800108a:	31ff      	adds	r1, #255	; 0xff
 800108c:	f002 f814 	bl	80030b8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001090:	68e3      	ldr	r3, [r4, #12]
 8001092:	3b01      	subs	r3, #1
 8001094:	2b01      	cmp	r3, #1
 8001096:	d904      	bls.n	80010a2 <HAL_I2C_Init+0x4e>
 8001098:	21f0      	movs	r1, #240	; 0xf0
 800109a:	483f      	ldr	r0, [pc, #252]	; (8001198 <HAL_I2C_Init+0x144>)
 800109c:	0049      	lsls	r1, r1, #1
 800109e:	f002 f80b 	bl	80030b8 <assert_failed>
 80010a2:	4e3f      	ldr	r6, [pc, #252]	; (80011a0 <HAL_I2C_Init+0x14c>)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80010a4:	6923      	ldr	r3, [r4, #16]
 80010a6:	4233      	tst	r3, r6
 80010a8:	d004      	beq.n	80010b4 <HAL_I2C_Init+0x60>
 80010aa:	21e2      	movs	r1, #226	; 0xe2
 80010ac:	483a      	ldr	r0, [pc, #232]	; (8001198 <HAL_I2C_Init+0x144>)
 80010ae:	31ff      	adds	r1, #255	; 0xff
 80010b0:	f002 f802 	bl	80030b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80010b4:	6963      	ldr	r3, [r4, #20]
 80010b6:	2bff      	cmp	r3, #255	; 0xff
 80010b8:	d904      	bls.n	80010c4 <HAL_I2C_Init+0x70>
 80010ba:	21f1      	movs	r1, #241	; 0xf1
 80010bc:	4836      	ldr	r0, [pc, #216]	; (8001198 <HAL_I2C_Init+0x144>)
 80010be:	0049      	lsls	r1, r1, #1
 80010c0:	f001 fffa 	bl	80030b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80010c4:	69a3      	ldr	r3, [r4, #24]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d904      	bls.n	80010d4 <HAL_I2C_Init+0x80>
 80010ca:	21e4      	movs	r1, #228	; 0xe4
 80010cc:	4832      	ldr	r0, [pc, #200]	; (8001198 <HAL_I2C_Init+0x144>)
 80010ce:	31ff      	adds	r1, #255	; 0xff
 80010d0:	f001 fff2 	bl	80030b8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_I2C_Init+0x150>)
 80010d6:	69e2      	ldr	r2, [r4, #28]
 80010d8:	421a      	tst	r2, r3
 80010da:	d004      	beq.n	80010e6 <HAL_I2C_Init+0x92>
 80010dc:	21f2      	movs	r1, #242	; 0xf2
 80010de:	482e      	ldr	r0, [pc, #184]	; (8001198 <HAL_I2C_Init+0x144>)
 80010e0:	0049      	lsls	r1, r1, #1
 80010e2:	f001 ffe9 	bl	80030b8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <HAL_I2C_Init+0x154>)
 80010e8:	6a22      	ldr	r2, [r4, #32]
 80010ea:	421a      	tst	r2, r3
 80010ec:	d004      	beq.n	80010f8 <HAL_I2C_Init+0xa4>
 80010ee:	21e6      	movs	r1, #230	; 0xe6
 80010f0:	4829      	ldr	r0, [pc, #164]	; (8001198 <HAL_I2C_Init+0x144>)
 80010f2:	31ff      	adds	r1, #255	; 0xff
 80010f4:	f001 ffe0 	bl	80030b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f8:	0025      	movs	r5, r4
 80010fa:	3541      	adds	r5, #65	; 0x41
 80010fc:	782b      	ldrb	r3, [r5, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <HAL_I2C_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001104:	0022      	movs	r2, r4
 8001106:	3240      	adds	r2, #64	; 0x40
 8001108:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800110a:	0020      	movs	r0, r4
 800110c:	f002 fa32 	bl	8003574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001110:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001112:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001114:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	68a0      	ldr	r0, [r4, #8]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	438a      	bics	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001120:	6861      	ldr	r1, [r4, #4]
 8001122:	4a22      	ldr	r2, [pc, #136]	; (80011ac <HAL_I2C_Init+0x158>)
 8001124:	400a      	ands	r2, r1
 8001126:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001128:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800112a:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800112c:	4032      	ands	r2, r6
 800112e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001130:	2901      	cmp	r1, #1
 8001132:	d121      	bne.n	8001178 <HAL_I2C_Init+0x124>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	0212      	lsls	r2, r2, #8
 8001138:	4302      	orrs	r2, r0
 800113a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800113c:	6859      	ldr	r1, [r3, #4]
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <HAL_I2C_Init+0x15c>)
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001140:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001142:	430a      	orrs	r2, r1
 8001144:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001146:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001148:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800114a:	4016      	ands	r6, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800114c:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800114e:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001150:	430a      	orrs	r2, r1
 8001152:	69a1      	ldr	r1, [r4, #24]
 8001154:	0209      	lsls	r1, r1, #8
 8001156:	430a      	orrs	r2, r1
 8001158:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800115a:	6a21      	ldr	r1, [r4, #32]
 800115c:	69e2      	ldr	r2, [r4, #28]
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001162:	2201      	movs	r2, #1
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800116a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800116c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800116e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001170:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001172:	3442      	adds	r4, #66	; 0x42
 8001174:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001176:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001178:	2284      	movs	r2, #132	; 0x84
 800117a:	0212      	lsls	r2, r2, #8
 800117c:	4302      	orrs	r2, r0
 800117e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001180:	2902      	cmp	r1, #2
 8001182:	d1db      	bne.n	800113c <HAL_I2C_Init+0xe8>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	e7d7      	b.n	800113c <HAL_I2C_Init+0xe8>
 800118c:	40005400 	.word	0x40005400
 8001190:	40005800 	.word	0x40005800
 8001194:	40007800 	.word	0x40007800
 8001198:	08003b67 	.word	0x08003b67
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	ffff7fff 	.word	0xffff7fff
 80011a4:	fff7ffff 	.word	0xfff7ffff
 80011a8:	fffdffff 	.word	0xfffdffff
 80011ac:	f0ffffff 	.word	0xf0ffffff
 80011b0:	02008000 	.word	0x02008000

080011b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_I2CEx_ConfigAnalogFilter+0x78>)
 80011b8:	6803      	ldr	r3, [r0, #0]
{
 80011ba:	0006      	movs	r6, r0
 80011bc:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80011be:	4293      	cmp	r3, r2
 80011c0:	d009      	beq.n	80011d6 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <HAL_I2CEx_ConfigAnalogFilter+0x7c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d006      	beq.n	80011d6 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 80011c8:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <HAL_I2CEx_ConfigAnalogFilter+0x80>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d003      	beq.n	80011d6 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 80011ce:	2164      	movs	r1, #100	; 0x64
 80011d0:	4819      	ldr	r0, [pc, #100]	; (8001238 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 80011d2:	f001 ff71 	bl	80030b8 <assert_failed>
 80011d6:	4d19      	ldr	r5, [pc, #100]	; (800123c <HAL_I2CEx_ConfigAnalogFilter+0x88>)
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80011d8:	422c      	tst	r4, r5
 80011da:	d003      	beq.n	80011e4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80011dc:	2165      	movs	r1, #101	; 0x65
 80011de:	4816      	ldr	r0, [pc, #88]	; (8001238 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 80011e0:	f001 ff6a 	bl	80030b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011e4:	2341      	movs	r3, #65	; 0x41
 80011e6:	469c      	mov	ip, r3
 80011e8:	44b4      	add	ip, r6
 80011ea:	4663      	mov	r3, ip
 80011ec:	781a      	ldrb	r2, [r3, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80011ee:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	2a20      	cmp	r2, #32
 80011f4:	d119      	bne.n	800122a <HAL_I2CEx_ConfigAnalogFilter+0x76>
    __HAL_LOCK(hi2c);
 80011f6:	0037      	movs	r7, r6
 80011f8:	3740      	adds	r7, #64	; 0x40
 80011fa:	783b      	ldrb	r3, [r7, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d014      	beq.n	800122a <HAL_I2CEx_ConfigAnalogFilter+0x76>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001200:	2324      	movs	r3, #36	; 0x24
 8001202:	4661      	mov	r1, ip
 8001204:	700b      	strb	r3, [r1, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001206:	2101      	movs	r1, #1
 8001208:	6833      	ldr	r3, [r6, #0]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	4388      	bics	r0, r1
 800120e:	6018      	str	r0, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	4005      	ands	r5, r0
 8001214:	601d      	str	r5, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	4304      	orrs	r4, r0
 800121a:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	4301      	orrs	r1, r0
 8001220:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001222:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001224:	4663      	mov	r3, ip
 8001226:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001228:	7038      	strb	r0, [r7, #0]
  }
}
 800122a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800122c:	40005400 	.word	0x40005400
 8001230:	40005800 	.word	0x40005800
 8001234:	40007800 	.word	0x40007800
 8001238:	08003b9f 	.word	0x08003b9f
 800123c:	ffffefff 	.word	0xffffefff

08001240 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_I2CEx_ConfigDigitalFilter+0x70>)
 8001244:	6803      	ldr	r3, [r0, #0]
{
 8001246:	0005      	movs	r5, r0
 8001248:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800124a:	4293      	cmp	r3, r2
 800124c:	d009      	beq.n	8001262 <HAL_I2CEx_ConfigDigitalFilter+0x22>
 800124e:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_I2CEx_ConfigDigitalFilter+0x74>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d006      	beq.n	8001262 <HAL_I2CEx_ConfigDigitalFilter+0x22>
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <HAL_I2CEx_ConfigDigitalFilter+0x78>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_I2CEx_ConfigDigitalFilter+0x22>
 800125a:	2192      	movs	r1, #146	; 0x92
 800125c:	4817      	ldr	r0, [pc, #92]	; (80012bc <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 800125e:	f001 ff2b 	bl	80030b8 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8001262:	2c0f      	cmp	r4, #15
 8001264:	d903      	bls.n	800126e <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 8001266:	2193      	movs	r1, #147	; 0x93
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 800126a:	f001 ff25 	bl	80030b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126e:	002e      	movs	r6, r5
 8001270:	3641      	adds	r6, #65	; 0x41
 8001272:	7832      	ldrb	r2, [r6, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001274:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	2a20      	cmp	r2, #32
 800127a:	d117      	bne.n	80012ac <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    __HAL_LOCK(hi2c);
 800127c:	0029      	movs	r1, r5
 800127e:	3140      	adds	r1, #64	; 0x40
 8001280:	780b      	ldrb	r3, [r1, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d012      	beq.n	80012ac <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001286:	2324      	movs	r3, #36	; 0x24
 8001288:	7033      	strb	r3, [r6, #0]
    __HAL_I2C_DISABLE(hi2c);
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	3801      	subs	r0, #1
 800128e:	681d      	ldr	r5, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001290:	4f0b      	ldr	r7, [pc, #44]	; (80012c0 <HAL_I2CEx_ConfigDigitalFilter+0x80>)
    __HAL_I2C_DISABLE(hi2c);
 8001292:	4385      	bics	r5, r0
 8001294:	601d      	str	r5, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001296:	681d      	ldr	r5, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8001298:	0224      	lsls	r4, r4, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800129a:	403d      	ands	r5, r7
    tmpreg |= DigitalFilter << 8U;
 800129c:	432c      	orrs	r4, r5
    hi2c->Instance->CR1 = tmpreg;
 800129e:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80012a0:	681c      	ldr	r4, [r3, #0]
 80012a2:	4320      	orrs	r0, r4
 80012a4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80012a6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80012a8:	7032      	strb	r2, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80012aa:	7008      	strb	r0, [r1, #0]
  }
}
 80012ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40005400 	.word	0x40005400
 80012b4:	40005800 	.word	0x40005800
 80012b8:	40007800 	.word	0x40007800
 80012bc:	08003b9f 	.word	0x08003b9f
 80012c0:	fffff0ff 	.word	0xfffff0ff

080012c4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80012c8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80012ca:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80012cc:	400a      	ands	r2, r1
 80012ce:	2a08      	cmp	r2, #8
 80012d0:	d026      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x5c>
 80012d2:	2a0c      	cmp	r2, #12
 80012d4:	d006      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq+0x20>
 80012d6:	2a04      	cmp	r2, #4
 80012d8:	d11a      	bne.n	8001310 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	06db      	lsls	r3, r3, #27
 80012de:	d421      	bmi.n	8001324 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80012e2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80012e4:	028a      	lsls	r2, r1, #10
 80012e6:	4812      	ldr	r0, [pc, #72]	; (8001330 <HAL_RCC_GetSysClockFreq+0x6c>)
 80012e8:	0f12      	lsrs	r2, r2, #28
 80012ea:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80012ec:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ee:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80012f0:	0f89      	lsrs	r1, r1, #30
 80012f2:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012f4:	03c0      	lsls	r0, r0, #15
 80012f6:	d504      	bpl.n	8001302 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80012f8:	480e      	ldr	r0, [pc, #56]	; (8001334 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80012fa:	4350      	muls	r0, r2
 80012fc:	f7fe ff2a 	bl	8000154 <__udivsi3>
 8001300:	e7ef      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	06db      	lsls	r3, r3, #27
 8001306:	d501      	bpl.n	800130c <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <HAL_RCC_GetSysClockFreq+0x74>)
 800130a:	e7f6      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 800130c:	4807      	ldr	r0, [pc, #28]	; (800132c <HAL_RCC_GetSysClockFreq+0x68>)
 800130e:	e7f4      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001310:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001312:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001314:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800131a:	3301      	adds	r3, #1
 800131c:	4098      	lsls	r0, r3
 800131e:	e7e0      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <HAL_RCC_GetSysClockFreq+0x70>)
 8001322:	e7de      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001326:	e7dc      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x1e>
 8001328:	40021000 	.word	0x40021000
 800132c:	00f42400 	.word	0x00f42400
 8001330:	08003d43 	.word	0x08003d43
 8001334:	007a1200 	.word	0x007a1200
 8001338:	003d0900 	.word	0x003d0900

0800133c <HAL_RCC_OscConfig>:
{
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	0005      	movs	r5, r0
 8001340:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8001342:	2800      	cmp	r0, #0
 8001344:	d102      	bne.n	800134c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001346:	2001      	movs	r0, #1
}
 8001348:	b007      	add	sp, #28
 800134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800134c:	6803      	ldr	r3, [r0, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_RCC_OscConfig+0x24>
 8001352:	069b      	lsls	r3, r3, #26
 8001354:	d104      	bne.n	8001360 <HAL_RCC_OscConfig+0x24>
 8001356:	21b0      	movs	r1, #176	; 0xb0
 8001358:	48c7      	ldr	r0, [pc, #796]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 800135a:	0049      	lsls	r1, r1, #1
 800135c:	f001 feac 	bl	80030b8 <assert_failed>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001360:	230c      	movs	r3, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001362:	2780      	movs	r7, #128	; 0x80
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001364:	4cc5      	ldr	r4, [pc, #788]	; (800167c <HAL_RCC_OscConfig+0x340>)
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001366:	027f      	lsls	r7, r7, #9
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001368:	68e2      	ldr	r2, [r4, #12]
 800136a:	401a      	ands	r2, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800136c:	68e3      	ldr	r3, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800136e:	9201      	str	r2, [sp, #4]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001370:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	682b      	ldr	r3, [r5, #0]
 8001374:	07db      	lsls	r3, r3, #31
 8001376:	d464      	bmi.n	8001442 <HAL_RCC_OscConfig+0x106>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	079b      	lsls	r3, r3, #30
 800137c:	d500      	bpl.n	8001380 <HAL_RCC_OscConfig+0x44>
 800137e:	e0c0      	b.n	8001502 <HAL_RCC_OscConfig+0x1c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	06db      	lsls	r3, r3, #27
 8001384:	d543      	bpl.n	800140e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001386:	9b01      	ldr	r3, [sp, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d000      	beq.n	800138e <HAL_RCC_OscConfig+0x52>
 800138c:	e12d      	b.n	80015ea <HAL_RCC_OscConfig+0x2ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	059b      	lsls	r3, r3, #22
 8001392:	d502      	bpl.n	800139a <HAL_RCC_OscConfig+0x5e>
 8001394:	69eb      	ldr	r3, [r5, #28]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0d5      	beq.n	8001346 <HAL_RCC_OscConfig+0xa>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800139a:	6a2b      	ldr	r3, [r5, #32]
 800139c:	2bff      	cmp	r3, #255	; 0xff
 800139e:	d904      	bls.n	80013aa <HAL_RCC_OscConfig+0x6e>
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	48b5      	ldr	r0, [pc, #724]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 80013a4:	0089      	lsls	r1, r1, #2
 80013a6:	f001 fe87 	bl	80030b8 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80013aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013ac:	4ab4      	ldr	r2, [pc, #720]	; (8001680 <HAL_RCC_OscConfig+0x344>)
 80013ae:	49b5      	ldr	r1, [pc, #724]	; (8001684 <HAL_RCC_OscConfig+0x348>)
 80013b0:	401a      	ands	r2, r3
 80013b2:	420b      	tst	r3, r1
 80013b4:	d00b      	beq.n	80013ce <HAL_RCC_OscConfig+0x92>
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	0209      	lsls	r1, r1, #8
 80013ba:	428a      	cmp	r2, r1
 80013bc:	d007      	beq.n	80013ce <HAL_RCC_OscConfig+0x92>
 80013be:	22c0      	movs	r2, #192	; 0xc0
 80013c0:	0212      	lsls	r2, r2, #8
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d003      	beq.n	80013ce <HAL_RCC_OscConfig+0x92>
 80013c6:	49b0      	ldr	r1, [pc, #704]	; (8001688 <HAL_RCC_OscConfig+0x34c>)
 80013c8:	48ab      	ldr	r0, [pc, #684]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 80013ca:	f001 fe75 	bl	80030b8 <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ce:	6862      	ldr	r2, [r4, #4]
 80013d0:	49ae      	ldr	r1, [pc, #696]	; (800168c <HAL_RCC_OscConfig+0x350>)
 80013d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013d4:	400a      	ands	r2, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013da:	6861      	ldr	r1, [r4, #4]
 80013dc:	6a2a      	ldr	r2, [r5, #32]
 80013de:	0209      	lsls	r1, r1, #8
 80013e0:	0a09      	lsrs	r1, r1, #8
 80013e2:	0612      	lsls	r2, r2, #24
 80013e4:	430a      	orrs	r2, r1
 80013e6:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	0b5b      	lsrs	r3, r3, #13
 80013ec:	3301      	adds	r3, #1
 80013ee:	0212      	lsls	r2, r2, #8
 80013f0:	409a      	lsls	r2, r3
 80013f2:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013f4:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80013f6:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013f8:	060a      	lsls	r2, r1, #24
 80013fa:	49a5      	ldr	r1, [pc, #660]	; (8001690 <HAL_RCC_OscConfig+0x354>)
 80013fc:	0f12      	lsrs	r2, r2, #28
 80013fe:	5c8a      	ldrb	r2, [r1, r2]
 8001400:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001402:	4aa4      	ldr	r2, [pc, #656]	; (8001694 <HAL_RCC_OscConfig+0x358>)
 8001404:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001406:	f7ff f925 	bl	8000654 <HAL_InitTick>
        if(status != HAL_OK)
 800140a:	2800      	cmp	r0, #0
 800140c:	d19c      	bne.n	8001348 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	682b      	ldr	r3, [r5, #0]
 8001410:	071b      	lsls	r3, r3, #28
 8001412:	d500      	bpl.n	8001416 <HAL_RCC_OscConfig+0xda>
 8001414:	e15b      	b.n	80016ce <HAL_RCC_OscConfig+0x392>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001416:	682b      	ldr	r3, [r5, #0]
 8001418:	075b      	lsls	r3, r3, #29
 800141a:	d500      	bpl.n	800141e <HAL_RCC_OscConfig+0xe2>
 800141c:	e184      	b.n	8001728 <HAL_RCC_OscConfig+0x3ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	069b      	lsls	r3, r3, #26
 8001422:	d500      	bpl.n	8001426 <HAL_RCC_OscConfig+0xea>
 8001424:	e1fd      	b.n	8001822 <HAL_RCC_OscConfig+0x4e6>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001426:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001428:	2b02      	cmp	r3, #2
 800142a:	d904      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
 800142c:	21ba      	movs	r1, #186	; 0xba
 800142e:	4892      	ldr	r0, [pc, #584]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 8001430:	0089      	lsls	r1, r1, #2
 8001432:	f001 fe41 	bl	80030b8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001436:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <HAL_RCC_OscConfig+0x102>
 800143c:	e22b      	b.n	8001896 <HAL_RCC_OscConfig+0x55a>
  return HAL_OK;
 800143e:	2000      	movs	r0, #0
 8001440:	e782      	b.n	8001348 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001442:	686b      	ldr	r3, [r5, #4]
 8001444:	4e94      	ldr	r6, [pc, #592]	; (8001698 <HAL_RCC_OscConfig+0x35c>)
 8001446:	4233      	tst	r3, r6
 8001448:	d008      	beq.n	800145c <HAL_RCC_OscConfig+0x120>
 800144a:	22a0      	movs	r2, #160	; 0xa0
 800144c:	02d2      	lsls	r2, r2, #11
 800144e:	4293      	cmp	r3, r2
 8001450:	d004      	beq.n	800145c <HAL_RCC_OscConfig+0x120>
 8001452:	216a      	movs	r1, #106	; 0x6a
 8001454:	4888      	ldr	r0, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 8001456:	31ff      	adds	r1, #255	; 0xff
 8001458:	f001 fe2e 	bl	80030b8 <assert_failed>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800145c:	9b01      	ldr	r3, [sp, #4]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d003      	beq.n	800146a <HAL_RCC_OscConfig+0x12e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d108      	bne.n	8001478 <HAL_RCC_OscConfig+0x13c>
 8001466:	2f00      	cmp	r7, #0
 8001468:	d006      	beq.n	8001478 <HAL_RCC_OscConfig+0x13c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	039b      	lsls	r3, r3, #14
 800146e:	d583      	bpl.n	8001378 <HAL_RCC_OscConfig+0x3c>
 8001470:	686b      	ldr	r3, [r5, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d180      	bne.n	8001378 <HAL_RCC_OscConfig+0x3c>
 8001476:	e766      	b.n	8001346 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	686b      	ldr	r3, [r5, #4]
 800147c:	0249      	lsls	r1, r1, #9
 800147e:	428b      	cmp	r3, r1
 8001480:	d114      	bne.n	80014ac <HAL_RCC_OscConfig+0x170>
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001488:	f7ff f918 	bl	80006bc <HAL_GetTick>
 800148c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	0292      	lsls	r2, r2, #10
 8001494:	4213      	tst	r3, r2
 8001496:	d000      	beq.n	800149a <HAL_RCC_OscConfig+0x15e>
 8001498:	e76e      	b.n	8001378 <HAL_RCC_OscConfig+0x3c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149a:	f7ff f90f 	bl	80006bc <HAL_GetTick>
 800149e:	23fa      	movs	r3, #250	; 0xfa
 80014a0:	1b80      	subs	r0, r0, r6
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d9f2      	bls.n	800148e <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80014a8:	2003      	movs	r0, #3
 80014aa:	e74d      	b.n	8001348 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	22a0      	movs	r2, #160	; 0xa0
 80014ae:	02d2      	lsls	r2, r2, #11
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d108      	bne.n	80014c6 <HAL_RCC_OscConfig+0x18a>
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	02db      	lsls	r3, r3, #11
 80014ba:	4313      	orrs	r3, r2
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	6822      	ldr	r2, [r4, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	6022      	str	r2, [r4, #0]
 80014c4:	e7e0      	b.n	8001488 <HAL_RCC_OscConfig+0x14c>
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	4016      	ands	r6, r2
 80014ca:	6026      	str	r6, [r4, #0]
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	9205      	str	r2, [sp, #20]
 80014d2:	9a05      	ldr	r2, [sp, #20]
 80014d4:	4971      	ldr	r1, [pc, #452]	; (800169c <HAL_RCC_OscConfig+0x360>)
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1d3      	bne.n	8001488 <HAL_RCC_OscConfig+0x14c>
        tickstart = HAL_GetTick();
 80014e0:	f7ff f8ec 	bl	80006bc <HAL_GetTick>
 80014e4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	0292      	lsls	r2, r2, #10
 80014ec:	4213      	tst	r3, r2
 80014ee:	d100      	bne.n	80014f2 <HAL_RCC_OscConfig+0x1b6>
 80014f0:	e742      	b.n	8001378 <HAL_RCC_OscConfig+0x3c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f2:	f7ff f8e3 	bl	80006bc <HAL_GetTick>
 80014f6:	23fa      	movs	r3, #250	; 0xfa
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4298      	cmp	r0, r3
 80014fe:	d9f2      	bls.n	80014e6 <HAL_RCC_OscConfig+0x1aa>
 8001500:	e7d2      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001502:	2320      	movs	r3, #32
 8001504:	68ea      	ldr	r2, [r5, #12]
 8001506:	439a      	bics	r2, r3
 8001508:	2a01      	cmp	r2, #1
 800150a:	d906      	bls.n	800151a <HAL_RCC_OscConfig+0x1de>
 800150c:	2a09      	cmp	r2, #9
 800150e:	d004      	beq.n	800151a <HAL_RCC_OscConfig+0x1de>
 8001510:	21ce      	movs	r1, #206	; 0xce
 8001512:	4859      	ldr	r0, [pc, #356]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 8001514:	0049      	lsls	r1, r1, #1
 8001516:	f001 fdcf 	bl	80030b8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800151a:	692b      	ldr	r3, [r5, #16]
 800151c:	2b1f      	cmp	r3, #31
 800151e:	d904      	bls.n	800152a <HAL_RCC_OscConfig+0x1ee>
 8001520:	219e      	movs	r1, #158	; 0x9e
 8001522:	4855      	ldr	r0, [pc, #340]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 8001524:	31ff      	adds	r1, #255	; 0xff
 8001526:	f001 fdc7 	bl	80030b8 <assert_failed>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800152a:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800152c:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800152e:	4213      	tst	r3, r2
 8001530:	d003      	beq.n	800153a <HAL_RCC_OscConfig+0x1fe>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001532:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001534:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001536:	4311      	orrs	r1, r2
 8001538:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153a:	9a01      	ldr	r2, [sp, #4]
 800153c:	2a04      	cmp	r2, #4
 800153e:	d003      	beq.n	8001548 <HAL_RCC_OscConfig+0x20c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001540:	2a0c      	cmp	r2, #12
 8001542:	d124      	bne.n	800158e <HAL_RCC_OscConfig+0x252>
 8001544:	2f00      	cmp	r7, #0
 8001546:	d122      	bne.n	800158e <HAL_RCC_OscConfig+0x252>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	0752      	lsls	r2, r2, #29
 800154c:	d502      	bpl.n	8001554 <HAL_RCC_OscConfig+0x218>
 800154e:	2b00      	cmp	r3, #0
 8001550:	d100      	bne.n	8001554 <HAL_RCC_OscConfig+0x218>
 8001552:	e6f8      	b.n	8001346 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	6861      	ldr	r1, [r4, #4]
 8001556:	692a      	ldr	r2, [r5, #16]
 8001558:	4851      	ldr	r0, [pc, #324]	; (80016a0 <HAL_RCC_OscConfig+0x364>)
 800155a:	0212      	lsls	r2, r2, #8
 800155c:	4001      	ands	r1, r0
 800155e:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001560:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001562:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	438a      	bics	r2, r1
 8001568:	4313      	orrs	r3, r2
 800156a:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800156c:	f7ff feaa 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 8001570:	68e3      	ldr	r3, [r4, #12]
 8001572:	4a47      	ldr	r2, [pc, #284]	; (8001690 <HAL_RCC_OscConfig+0x354>)
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	0f1b      	lsrs	r3, r3, #28
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	40d8      	lsrs	r0, r3
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <HAL_RCC_OscConfig+0x358>)
 800157e:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff f867 	bl	8000654 <HAL_InitTick>
      if(status != HAL_OK)
 8001586:	2800      	cmp	r0, #0
 8001588:	d100      	bne.n	800158c <HAL_RCC_OscConfig+0x250>
 800158a:	e6f9      	b.n	8001380 <HAL_RCC_OscConfig+0x44>
 800158c:	e6dc      	b.n	8001348 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 800158e:	2b00      	cmp	r3, #0
 8001590:	d019      	beq.n	80015c6 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001592:	2109      	movs	r1, #9
 8001594:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001596:	2704      	movs	r7, #4
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001598:	438a      	bics	r2, r1
 800159a:	4313      	orrs	r3, r2
 800159c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800159e:	f7ff f88d 	bl	80006bc <HAL_GetTick>
 80015a2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	423b      	tst	r3, r7
 80015a8:	d007      	beq.n	80015ba <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	6862      	ldr	r2, [r4, #4]
 80015ac:	692b      	ldr	r3, [r5, #16]
 80015ae:	493c      	ldr	r1, [pc, #240]	; (80016a0 <HAL_RCC_OscConfig+0x364>)
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	400a      	ands	r2, r1
 80015b4:	4313      	orrs	r3, r2
 80015b6:	6063      	str	r3, [r4, #4]
 80015b8:	e6e2      	b.n	8001380 <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff f87f 	bl	80006bc <HAL_GetTick>
 80015be:	1b80      	subs	r0, r0, r6
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d9ef      	bls.n	80015a4 <HAL_RCC_OscConfig+0x268>
 80015c4:	e770      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI_DISABLE();
 80015c6:	2201      	movs	r2, #1
 80015c8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ca:	2704      	movs	r7, #4
        __HAL_RCC_HSI_DISABLE();
 80015cc:	4393      	bics	r3, r2
 80015ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015d0:	f7ff f874 	bl	80006bc <HAL_GetTick>
 80015d4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	423b      	tst	r3, r7
 80015da:	d100      	bne.n	80015de <HAL_RCC_OscConfig+0x2a2>
 80015dc:	e6d0      	b.n	8001380 <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff f86d 	bl	80006bc <HAL_GetTick>
 80015e2:	1b80      	subs	r0, r0, r6
 80015e4:	2802      	cmp	r0, #2
 80015e6:	d9f6      	bls.n	80015d6 <HAL_RCC_OscConfig+0x29a>
 80015e8:	e75e      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80015ea:	69eb      	ldr	r3, [r5, #28]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d904      	bls.n	80015fa <HAL_RCC_OscConfig+0x2be>
 80015f0:	2186      	movs	r1, #134	; 0x86
 80015f2:	4821      	ldr	r0, [pc, #132]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 80015f4:	0089      	lsls	r1, r1, #2
 80015f6:	f001 fd5f 	bl	80030b8 <assert_failed>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015fa:	69eb      	ldr	r3, [r5, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d053      	beq.n	80016a8 <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	6822      	ldr	r2, [r4, #0]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4313      	orrs	r3, r2
 8001608:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800160a:	f7ff f857 	bl	80006bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800160e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001610:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001612:	00bf      	lsls	r7, r7, #2
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	423b      	tst	r3, r7
 8001618:	d027      	beq.n	800166a <HAL_RCC_OscConfig+0x32e>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800161a:	6a2b      	ldr	r3, [r5, #32]
 800161c:	2bff      	cmp	r3, #255	; 0xff
 800161e:	d904      	bls.n	800162a <HAL_RCC_OscConfig+0x2ee>
 8001620:	218b      	movs	r1, #139	; 0x8b
 8001622:	4815      	ldr	r0, [pc, #84]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 8001624:	0089      	lsls	r1, r1, #2
 8001626:	f001 fd47 	bl	80030b8 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800162a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_RCC_OscConfig+0x344>)
 800162e:	4915      	ldr	r1, [pc, #84]	; (8001684 <HAL_RCC_OscConfig+0x348>)
 8001630:	401a      	ands	r2, r3
 8001632:	420b      	tst	r3, r1
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x312>
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	0209      	lsls	r1, r1, #8
 800163a:	428a      	cmp	r2, r1
 800163c:	d007      	beq.n	800164e <HAL_RCC_OscConfig+0x312>
 800163e:	22c0      	movs	r2, #192	; 0xc0
 8001640:	0212      	lsls	r2, r2, #8
 8001642:	4293      	cmp	r3, r2
 8001644:	d003      	beq.n	800164e <HAL_RCC_OscConfig+0x312>
 8001646:	4917      	ldr	r1, [pc, #92]	; (80016a4 <HAL_RCC_OscConfig+0x368>)
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <HAL_RCC_OscConfig+0x33c>)
 800164a:	f001 fd35 	bl	80030b8 <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164e:	6863      	ldr	r3, [r4, #4]
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_RCC_OscConfig+0x350>)
 8001652:	4013      	ands	r3, r2
 8001654:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001656:	4313      	orrs	r3, r2
 8001658:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800165a:	6862      	ldr	r2, [r4, #4]
 800165c:	6a2b      	ldr	r3, [r5, #32]
 800165e:	0212      	lsls	r2, r2, #8
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	0a12      	lsrs	r2, r2, #8
 8001664:	4313      	orrs	r3, r2
 8001666:	6063      	str	r3, [r4, #4]
 8001668:	e6d1      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800166a:	f7ff f827 	bl	80006bc <HAL_GetTick>
 800166e:	1b80      	subs	r0, r0, r6
 8001670:	2802      	cmp	r0, #2
 8001672:	d9cf      	bls.n	8001614 <HAL_RCC_OscConfig+0x2d8>
 8001674:	e718      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	08003bda 	.word	0x08003bda
 800167c:	40021000 	.word	0x40021000
 8001680:	ffffdfff 	.word	0xffffdfff
 8001684:	ffff9fff 	.word	0xffff9fff
 8001688:	00000201 	.word	0x00000201
 800168c:	ffff1fff 	.word	0xffff1fff
 8001690:	08003d2b 	.word	0x08003d2b
 8001694:	20000000 	.word	0x20000000
 8001698:	fffeffff 	.word	0xfffeffff
 800169c:	fffbffff 	.word	0xfffbffff
 80016a0:	ffffe0ff 	.word	0xffffe0ff
 80016a4:	0000022d 	.word	0x0000022d
        __HAL_RCC_MSI_DISABLE();
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	4ac0      	ldr	r2, [pc, #768]	; (80019ac <HAL_RCC_OscConfig+0x670>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016ac:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 80016ae:	4013      	ands	r3, r2
 80016b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016b2:	f7ff f803 	bl	80006bc <HAL_GetTick>
 80016b6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016b8:	00bf      	lsls	r7, r7, #2
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	423b      	tst	r3, r7
 80016be:	d100      	bne.n	80016c2 <HAL_RCC_OscConfig+0x386>
 80016c0:	e6a5      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c2:	f7fe fffb 	bl	80006bc <HAL_GetTick>
 80016c6:	1b80      	subs	r0, r0, r6
 80016c8:	2802      	cmp	r0, #2
 80016ca:	d9f6      	bls.n	80016ba <HAL_RCC_OscConfig+0x37e>
 80016cc:	e6ec      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80016ce:	696b      	ldr	r3, [r5, #20]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d903      	bls.n	80016dc <HAL_RCC_OscConfig+0x3a0>
 80016d4:	49b6      	ldr	r1, [pc, #728]	; (80019b0 <HAL_RCC_OscConfig+0x674>)
 80016d6:	48b7      	ldr	r0, [pc, #732]	; (80019b4 <HAL_RCC_OscConfig+0x678>)
 80016d8:	f001 fcee 	bl	80030b8 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016dc:	696a      	ldr	r2, [r5, #20]
 80016de:	2301      	movs	r3, #1
 80016e0:	2a00      	cmp	r2, #0
 80016e2:	d010      	beq.n	8001706 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_LSI_ENABLE();
 80016e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016e6:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80016e8:	4313      	orrs	r3, r2
 80016ea:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80016ec:	f7fe ffe6 	bl	80006bc <HAL_GetTick>
 80016f0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80016f4:	423b      	tst	r3, r7
 80016f6:	d000      	beq.n	80016fa <HAL_RCC_OscConfig+0x3be>
 80016f8:	e68d      	b.n	8001416 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7fe ffdf 	bl	80006bc <HAL_GetTick>
 80016fe:	1b80      	subs	r0, r0, r6
 8001700:	2802      	cmp	r0, #2
 8001702:	d9f6      	bls.n	80016f2 <HAL_RCC_OscConfig+0x3b6>
 8001704:	e6d0      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_LSI_DISABLE();
 8001706:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001708:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800170a:	439a      	bics	r2, r3
 800170c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800170e:	f7fe ffd5 	bl	80006bc <HAL_GetTick>
 8001712:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001714:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001716:	423b      	tst	r3, r7
 8001718:	d100      	bne.n	800171c <HAL_RCC_OscConfig+0x3e0>
 800171a:	e67c      	b.n	8001416 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171c:	f7fe ffce 	bl	80006bc <HAL_GetTick>
 8001720:	1b80      	subs	r0, r0, r6
 8001722:	2802      	cmp	r0, #2
 8001724:	d9f6      	bls.n	8001714 <HAL_RCC_OscConfig+0x3d8>
 8001726:	e6bf      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001728:	68ab      	ldr	r3, [r5, #8]
 800172a:	4aa0      	ldr	r2, [pc, #640]	; (80019ac <HAL_RCC_OscConfig+0x670>)
 800172c:	4213      	tst	r3, r2
 800172e:	d007      	beq.n	8001740 <HAL_RCC_OscConfig+0x404>
 8001730:	22a0      	movs	r2, #160	; 0xa0
 8001732:	00d2      	lsls	r2, r2, #3
 8001734:	4293      	cmp	r3, r2
 8001736:	d003      	beq.n	8001740 <HAL_RCC_OscConfig+0x404>
 8001738:	499f      	ldr	r1, [pc, #636]	; (80019b8 <HAL_RCC_OscConfig+0x67c>)
 800173a:	489e      	ldr	r0, [pc, #632]	; (80019b4 <HAL_RCC_OscConfig+0x678>)
 800173c:	f001 fcbc 	bl	80030b8 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001740:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001744:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001746:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001748:	9102      	str	r1, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	421a      	tst	r2, r3
 800174c:	d104      	bne.n	8001758 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001750:	4313      	orrs	r3, r2
 8001752:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001754:	2301      	movs	r3, #1
 8001756:	9302      	str	r3, [sp, #8]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	2780      	movs	r7, #128	; 0x80
 800175a:	4e98      	ldr	r6, [pc, #608]	; (80019bc <HAL_RCC_OscConfig+0x680>)
 800175c:	007f      	lsls	r7, r7, #1
 800175e:	6833      	ldr	r3, [r6, #0]
 8001760:	423b      	tst	r3, r7
 8001762:	d008      	beq.n	8001776 <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	68ab      	ldr	r3, [r5, #8]
 8001768:	0052      	lsls	r2, r2, #1
 800176a:	4293      	cmp	r3, r2
 800176c:	d113      	bne.n	8001796 <HAL_RCC_OscConfig+0x45a>
 800176e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001770:	4313      	orrs	r3, r2
 8001772:	6523      	str	r3, [r4, #80]	; 0x50
 8001774:	e034      	b.n	80017e0 <HAL_RCC_OscConfig+0x4a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	6833      	ldr	r3, [r6, #0]
 8001778:	433b      	orrs	r3, r7
 800177a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800177c:	f7fe ff9e 	bl	80006bc <HAL_GetTick>
 8001780:	9003      	str	r0, [sp, #12]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	6833      	ldr	r3, [r6, #0]
 8001784:	423b      	tst	r3, r7
 8001786:	d1ed      	bne.n	8001764 <HAL_RCC_OscConfig+0x428>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7fe ff98 	bl	80006bc <HAL_GetTick>
 800178c:	9b03      	ldr	r3, [sp, #12]
 800178e:	1ac0      	subs	r0, r0, r3
 8001790:	2864      	cmp	r0, #100	; 0x64
 8001792:	d9f6      	bls.n	8001782 <HAL_RCC_OscConfig+0x446>
 8001794:	e688      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001796:	2b00      	cmp	r3, #0
 8001798:	d116      	bne.n	80017c8 <HAL_RCC_OscConfig+0x48c>
 800179a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800179c:	4a83      	ldr	r2, [pc, #524]	; (80019ac <HAL_RCC_OscConfig+0x670>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800179e:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	4013      	ands	r3, r2
 80017a2:	6523      	str	r3, [r4, #80]	; 0x50
 80017a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017a6:	4a86      	ldr	r2, [pc, #536]	; (80019c0 <HAL_RCC_OscConfig+0x684>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017a8:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	4013      	ands	r3, r2
 80017ac:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80017ae:	f7fe ff85 	bl	80006bc <HAL_GetTick>
 80017b2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017b6:	423b      	tst	r3, r7
 80017b8:	d02a      	beq.n	8001810 <HAL_RCC_OscConfig+0x4d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7fe ff7f 	bl	80006bc <HAL_GetTick>
 80017be:	4b81      	ldr	r3, [pc, #516]	; (80019c4 <HAL_RCC_OscConfig+0x688>)
 80017c0:	1b80      	subs	r0, r0, r6
 80017c2:	4298      	cmp	r0, r3
 80017c4:	d9f6      	bls.n	80017b4 <HAL_RCC_OscConfig+0x478>
 80017c6:	e66f      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	21a0      	movs	r1, #160	; 0xa0
 80017ca:	00c9      	lsls	r1, r1, #3
 80017cc:	428b      	cmp	r3, r1
 80017ce:	d10d      	bne.n	80017ec <HAL_RCC_OscConfig+0x4b0>
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	430b      	orrs	r3, r1
 80017d8:	6523      	str	r3, [r4, #80]	; 0x50
 80017da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017dc:	431a      	orrs	r2, r3
 80017de:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80017e0:	f7fe ff6c 	bl	80006bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e4:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 80017e6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e8:	00bf      	lsls	r7, r7, #2
 80017ea:	e00e      	b.n	800180a <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017ee:	4a6f      	ldr	r2, [pc, #444]	; (80019ac <HAL_RCC_OscConfig+0x670>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	6523      	str	r3, [r4, #80]	; 0x50
 80017f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80017f6:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x684>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	e7ba      	b.n	8001772 <HAL_RCC_OscConfig+0x436>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7fe ff5e 	bl	80006bc <HAL_GetTick>
 8001800:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x688>)
 8001802:	1b80      	subs	r0, r0, r6
 8001804:	4298      	cmp	r0, r3
 8001806:	d900      	bls.n	800180a <HAL_RCC_OscConfig+0x4ce>
 8001808:	e64e      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800180a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800180c:	423b      	tst	r3, r7
 800180e:	d0f5      	beq.n	80017fc <HAL_RCC_OscConfig+0x4c0>
    if(pwrclkchanged == SET)
 8001810:	9b02      	ldr	r3, [sp, #8]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d000      	beq.n	8001818 <HAL_RCC_OscConfig+0x4dc>
 8001816:	e602      	b.n	800141e <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800181a:	4a6b      	ldr	r2, [pc, #428]	; (80019c8 <HAL_RCC_OscConfig+0x68c>)
 800181c:	4013      	ands	r3, r2
 800181e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001820:	e5fd      	b.n	800141e <HAL_RCC_OscConfig+0xe2>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8001822:	69ab      	ldr	r3, [r5, #24]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d903      	bls.n	8001830 <HAL_RCC_OscConfig+0x4f4>
 8001828:	4968      	ldr	r1, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x690>)
 800182a:	4862      	ldr	r0, [pc, #392]	; (80019b4 <HAL_RCC_OscConfig+0x678>)
 800182c:	f001 fc44 	bl	80030b8 <assert_failed>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001830:	69a9      	ldr	r1, [r5, #24]
 8001832:	2301      	movs	r3, #1
 8001834:	4a66      	ldr	r2, [pc, #408]	; (80019d0 <HAL_RCC_OscConfig+0x694>)
 8001836:	2900      	cmp	r1, #0
 8001838:	d018      	beq.n	800186c <HAL_RCC_OscConfig+0x530>
        __HAL_RCC_HSI48_ENABLE();
 800183a:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800183c:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 800183e:	4319      	orrs	r1, r3
 8001840:	60a1      	str	r1, [r4, #8]
 8001842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001844:	430b      	orrs	r3, r1
 8001846:	6363      	str	r3, [r4, #52]	; 0x34
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	6a11      	ldr	r1, [r2, #32]
 800184c:	019b      	lsls	r3, r3, #6
 800184e:	430b      	orrs	r3, r1
 8001850:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001852:	f7fe ff33 	bl	80006bc <HAL_GetTick>
 8001856:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001858:	68a3      	ldr	r3, [r4, #8]
 800185a:	423b      	tst	r3, r7
 800185c:	d000      	beq.n	8001860 <HAL_RCC_OscConfig+0x524>
 800185e:	e5e2      	b.n	8001426 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001860:	f7fe ff2c 	bl	80006bc <HAL_GetTick>
 8001864:	1b80      	subs	r0, r0, r6
 8001866:	2802      	cmp	r0, #2
 8001868:	d9f6      	bls.n	8001858 <HAL_RCC_OscConfig+0x51c>
 800186a:	e61d      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI48_DISABLE();
 800186c:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800186e:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_DISABLE();
 8001870:	4399      	bics	r1, r3
 8001872:	60a1      	str	r1, [r4, #8]
 8001874:	6a13      	ldr	r3, [r2, #32]
 8001876:	4957      	ldr	r1, [pc, #348]	; (80019d4 <HAL_RCC_OscConfig+0x698>)
 8001878:	400b      	ands	r3, r1
 800187a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800187c:	f7fe ff1e 	bl	80006bc <HAL_GetTick>
 8001880:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	423b      	tst	r3, r7
 8001886:	d100      	bne.n	800188a <HAL_RCC_OscConfig+0x54e>
 8001888:	e5cd      	b.n	8001426 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188a:	f7fe ff17 	bl	80006bc <HAL_GetTick>
 800188e:	1b80      	subs	r0, r0, r6
 8001890:	2802      	cmp	r0, #2
 8001892:	d9f6      	bls.n	8001882 <HAL_RCC_OscConfig+0x546>
 8001894:	e608      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001896:	9a01      	ldr	r2, [sp, #4]
 8001898:	2a0c      	cmp	r2, #12
 800189a:	d06a      	beq.n	8001972 <HAL_RCC_OscConfig+0x636>
 800189c:	4e4e      	ldr	r6, [pc, #312]	; (80019d8 <HAL_RCC_OscConfig+0x69c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d155      	bne.n	800194e <HAL_RCC_OscConfig+0x612>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80018a2:	4b4e      	ldr	r3, [pc, #312]	; (80019dc <HAL_RCC_OscConfig+0x6a0>)
 80018a4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80018a6:	421a      	tst	r2, r3
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_OscConfig+0x576>
 80018aa:	494d      	ldr	r1, [pc, #308]	; (80019e0 <HAL_RCC_OscConfig+0x6a4>)
 80018ac:	4841      	ldr	r0, [pc, #260]	; (80019b4 <HAL_RCC_OscConfig+0x678>)
 80018ae:	f001 fc03 	bl	80030b8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80018b2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_RCC_OscConfig+0x6a8>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	d00b      	beq.n	80018d2 <HAL_RCC_OscConfig+0x596>
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	0349      	lsls	r1, r1, #13
 80018be:	428b      	cmp	r3, r1
 80018c0:	d007      	beq.n	80018d2 <HAL_RCC_OscConfig+0x596>
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	039b      	lsls	r3, r3, #14
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_OscConfig+0x596>
 80018ca:	4947      	ldr	r1, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x6ac>)
 80018cc:	4839      	ldr	r0, [pc, #228]	; (80019b4 <HAL_RCC_OscConfig+0x678>)
 80018ce:	f001 fbf3 	bl	80030b8 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80018d6:	4b45      	ldr	r3, [pc, #276]	; (80019ec <HAL_RCC_OscConfig+0x6b0>)
 80018d8:	03c9      	lsls	r1, r1, #15
 80018da:	4013      	ands	r3, r2
 80018dc:	428b      	cmp	r3, r1
 80018de:	d007      	beq.n	80018f0 <HAL_RCC_OscConfig+0x5b4>
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d003      	beq.n	80018f0 <HAL_RCC_OscConfig+0x5b4>
 80018e8:	4941      	ldr	r1, [pc, #260]	; (80019f0 <HAL_RCC_OscConfig+0x6b4>)
 80018ea:	4832      	ldr	r0, [pc, #200]	; (80019b4 <HAL_RCC_OscConfig+0x678>)
 80018ec:	f001 fbe4 	bl	80030b8 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	401e      	ands	r6, r3
 80018f4:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 80018f6:	f7fe fee1 	bl	80006bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018fa:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80018fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018fe:	04b6      	lsls	r6, r6, #18
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	4233      	tst	r3, r6
 8001904:	d11d      	bne.n	8001942 <HAL_RCC_OscConfig+0x606>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001906:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001908:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800190a:	68e2      	ldr	r2, [r4, #12]
 800190c:	430b      	orrs	r3, r1
 800190e:	4939      	ldr	r1, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x6b8>)
 8001910:	400a      	ands	r2, r1
 8001912:	4313      	orrs	r3, r2
 8001914:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001916:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	4313      	orrs	r3, r2
 800191a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	6822      	ldr	r2, [r4, #0]
 8001920:	045b      	lsls	r3, r3, #17
 8001922:	4313      	orrs	r3, r2
 8001924:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001926:	f7fe fec9 	bl	80006bc <HAL_GetTick>
 800192a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800192c:	04ad      	lsls	r5, r5, #18
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	422b      	tst	r3, r5
 8001932:	d000      	beq.n	8001936 <HAL_RCC_OscConfig+0x5fa>
 8001934:	e583      	b.n	800143e <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7fe fec1 	bl	80006bc <HAL_GetTick>
 800193a:	1b80      	subs	r0, r0, r6
 800193c:	2802      	cmp	r0, #2
 800193e:	d9f6      	bls.n	800192e <HAL_RCC_OscConfig+0x5f2>
 8001940:	e5b2      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001942:	f7fe febb 	bl	80006bc <HAL_GetTick>
 8001946:	1bc0      	subs	r0, r0, r7
 8001948:	2802      	cmp	r0, #2
 800194a:	d9d9      	bls.n	8001900 <HAL_RCC_OscConfig+0x5c4>
 800194c:	e5ac      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 800194e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001950:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001952:	401e      	ands	r6, r3
 8001954:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 8001956:	f7fe feb1 	bl	80006bc <HAL_GetTick>
 800195a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800195c:	04ad      	lsls	r5, r5, #18
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	422b      	tst	r3, r5
 8001962:	d100      	bne.n	8001966 <HAL_RCC_OscConfig+0x62a>
 8001964:	e56b      	b.n	800143e <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001966:	f7fe fea9 	bl	80006bc <HAL_GetTick>
 800196a:	1b80      	subs	r0, r0, r6
 800196c:	2802      	cmp	r0, #2
 800196e:	d9f6      	bls.n	800195e <HAL_RCC_OscConfig+0x622>
 8001970:	e59a      	b.n	80014a8 <HAL_RCC_OscConfig+0x16c>
        return HAL_ERROR;
 8001972:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	2b01      	cmp	r3, #1
 8001976:	d100      	bne.n	800197a <HAL_RCC_OscConfig+0x63e>
 8001978:	e4e6      	b.n	8001348 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800197c:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001980:	0252      	lsls	r2, r2, #9
 8001982:	401a      	ands	r2, r3
        return HAL_ERROR;
 8001984:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	428a      	cmp	r2, r1
 8001988:	d000      	beq.n	800198c <HAL_RCC_OscConfig+0x650>
 800198a:	e4dd      	b.n	8001348 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800198c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001990:	0392      	lsls	r2, r2, #14
 8001992:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	428a      	cmp	r2, r1
 8001996:	d000      	beq.n	800199a <HAL_RCC_OscConfig+0x65e>
 8001998:	e4d6      	b.n	8001348 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800199a:	20c0      	movs	r0, #192	; 0xc0
 800199c:	0400      	lsls	r0, r0, #16
 800199e:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019a0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80019a2:	1a18      	subs	r0, r3, r0
 80019a4:	1e43      	subs	r3, r0, #1
 80019a6:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80019a8:	b2c0      	uxtb	r0, r0
 80019aa:	e4cd      	b.n	8001348 <HAL_RCC_OscConfig+0xc>
 80019ac:	fffffeff 	.word	0xfffffeff
 80019b0:	0000024b 	.word	0x0000024b
 80019b4:	08003bda 	.word	0x08003bda
 80019b8:	00000277 	.word	0x00000277
 80019bc:	40007000 	.word	0x40007000
 80019c0:	fffffbff 	.word	0xfffffbff
 80019c4:	00001388 	.word	0x00001388
 80019c8:	efffffff 	.word	0xefffffff
 80019cc:	000002be 	.word	0x000002be
 80019d0:	40010000 	.word	0x40010000
 80019d4:	ffffdfff 	.word	0xffffdfff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	fffeffff 	.word	0xfffeffff
 80019e0:	000002f1 	.word	0x000002f1
 80019e4:	fff3ffff 	.word	0xfff3ffff
 80019e8:	000002f2 	.word	0x000002f2
 80019ec:	ff7fffff 	.word	0xff7fffff
 80019f0:	000002f3 	.word	0x000002f3
 80019f4:	ff02ffff 	.word	0xff02ffff

080019f8 <HAL_RCC_ClockConfig>:
{
 80019f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019fa:	0004      	movs	r4, r0
 80019fc:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001a02:	2001      	movs	r0, #1
}
 8001a04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001a06:	6803      	ldr	r3, [r0, #0]
 8001a08:	071b      	lsls	r3, r3, #28
 8001a0a:	d103      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x1c>
 8001a0c:	497c      	ldr	r1, [pc, #496]	; (8001c00 <HAL_RCC_ClockConfig+0x208>)
 8001a0e:	487d      	ldr	r0, [pc, #500]	; (8001c04 <HAL_RCC_ClockConfig+0x20c>)
 8001a10:	f001 fb52 	bl	80030b8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001a14:	2f01      	cmp	r7, #1
 8001a16:	d903      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x28>
 8001a18:	497b      	ldr	r1, [pc, #492]	; (8001c08 <HAL_RCC_ClockConfig+0x210>)
 8001a1a:	487a      	ldr	r0, [pc, #488]	; (8001c04 <HAL_RCC_ClockConfig+0x20c>)
 8001a1c:	f001 fb4c 	bl	80030b8 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	2201      	movs	r2, #1
 8001a22:	4d7a      	ldr	r5, [pc, #488]	; (8001c0c <HAL_RCC_ClockConfig+0x214>)
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	4013      	ands	r3, r2
 8001a28:	429f      	cmp	r7, r3
 8001a2a:	d83a      	bhi.n	8001aa2 <HAL_RCC_ClockConfig+0xaa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	079b      	lsls	r3, r3, #30
 8001a30:	d440      	bmi.n	8001ab4 <HAL_RCC_ClockConfig+0xbc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	07db      	lsls	r3, r3, #31
 8001a36:	d45f      	bmi.n	8001af8 <HAL_RCC_ClockConfig+0x100>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	2301      	movs	r3, #1
 8001a3a:	682a      	ldr	r2, [r5, #0]
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	4297      	cmp	r7, r2
 8001a40:	d200      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x4c>
 8001a42:	e0bb      	b.n	8001bbc <HAL_RCC_ClockConfig+0x1c4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	4d72      	ldr	r5, [pc, #456]	; (8001c10 <HAL_RCC_ClockConfig+0x218>)
 8001a48:	075b      	lsls	r3, r3, #29
 8001a4a:	d500      	bpl.n	8001a4e <HAL_RCC_ClockConfig+0x56>
 8001a4c:	e0be      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1d4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	071b      	lsls	r3, r3, #28
 8001a52:	d518      	bpl.n	8001a86 <HAL_RCC_ClockConfig+0x8e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001a54:	6923      	ldr	r3, [r4, #16]
 8001a56:	4a6f      	ldr	r2, [pc, #444]	; (8001c14 <HAL_RCC_ClockConfig+0x21c>)
 8001a58:	4213      	tst	r3, r2
 8001a5a:	d00d      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x80>
 8001a5c:	21a0      	movs	r1, #160	; 0xa0
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_ClockConfig+0x220>)
 8001a60:	00c9      	lsls	r1, r1, #3
 8001a62:	401a      	ands	r2, r3
 8001a64:	428a      	cmp	r2, r1
 8001a66:	d007      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x80>
 8001a68:	22c0      	movs	r2, #192	; 0xc0
 8001a6a:	00d2      	lsls	r2, r2, #3
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x80>
 8001a70:	496a      	ldr	r1, [pc, #424]	; (8001c1c <HAL_RCC_ClockConfig+0x224>)
 8001a72:	4864      	ldr	r0, [pc, #400]	; (8001c04 <HAL_RCC_ClockConfig+0x20c>)
 8001a74:	f001 fb20 	bl	80030b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a78:	68ea      	ldr	r2, [r5, #12]
 8001a7a:	6923      	ldr	r3, [r4, #16]
 8001a7c:	4968      	ldr	r1, [pc, #416]	; (8001c20 <HAL_RCC_ClockConfig+0x228>)
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	400a      	ands	r2, r1
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a86:	f7ff fc1d 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 8001a8a:	68eb      	ldr	r3, [r5, #12]
 8001a8c:	4a65      	ldr	r2, [pc, #404]	; (8001c24 <HAL_RCC_ClockConfig+0x22c>)
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	0f1b      	lsrs	r3, r3, #28
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	40d8      	lsrs	r0, r3
 8001a96:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <HAL_RCC_ClockConfig+0x230>)
 8001a98:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7fe fdda 	bl	8000654 <HAL_InitTick>
 8001aa0:	e7b0      	b.n	8001a04 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	682b      	ldr	r3, [r5, #0]
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	433b      	orrs	r3, r7
 8001aa8:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	4013      	ands	r3, r2
 8001aae:	429f      	cmp	r7, r3
 8001ab0:	d1a7      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xa>
 8001ab2:	e7bb      	b.n	8001a2c <HAL_RCC_ClockConfig+0x34>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001ab4:	68a3      	ldr	r3, [r4, #8]
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	0019      	movs	r1, r3
 8001aba:	4391      	bics	r1, r2
 8001abc:	d014      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0xf0>
 8001abe:	2220      	movs	r2, #32
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	4391      	bics	r1, r2
 8001ac4:	2990      	cmp	r1, #144	; 0x90
 8001ac6:	d00f      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0xf0>
 8001ac8:	2240      	movs	r2, #64	; 0x40
 8001aca:	0019      	movs	r1, r3
 8001acc:	4391      	bics	r1, r2
 8001ace:	29a0      	cmp	r1, #160	; 0xa0
 8001ad0:	d00a      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0xf0>
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	4391      	bics	r1, r2
 8001ad8:	29c0      	cmp	r1, #192	; 0xc0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0xf0>
 8001adc:	2bf0      	cmp	r3, #240	; 0xf0
 8001ade:	d003      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0xf0>
 8001ae0:	4952      	ldr	r1, [pc, #328]	; (8001c2c <HAL_RCC_ClockConfig+0x234>)
 8001ae2:	4848      	ldr	r0, [pc, #288]	; (8001c04 <HAL_RCC_ClockConfig+0x20c>)
 8001ae4:	f001 fae8 	bl	80030b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	21f0      	movs	r1, #240	; 0xf0
 8001aea:	4a49      	ldr	r2, [pc, #292]	; (8001c10 <HAL_RCC_ClockConfig+0x218>)
 8001aec:	68d3      	ldr	r3, [r2, #12]
 8001aee:	438b      	bics	r3, r1
 8001af0:	68a1      	ldr	r1, [r4, #8]
 8001af2:	430b      	orrs	r3, r1
 8001af4:	60d3      	str	r3, [r2, #12]
 8001af6:	e79c      	b.n	8001a32 <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001af8:	6863      	ldr	r3, [r4, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d903      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
 8001afe:	494c      	ldr	r1, [pc, #304]	; (8001c30 <HAL_RCC_ClockConfig+0x238>)
 8001b00:	4840      	ldr	r0, [pc, #256]	; (8001c04 <HAL_RCC_ClockConfig+0x20c>)
 8001b02:	f001 fad9 	bl	80030b8 <assert_failed>
 8001b06:	4e42      	ldr	r6, [pc, #264]	; (8001c10 <HAL_RCC_ClockConfig+0x218>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b08:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b0a:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0c:	2a02      	cmp	r2, #2
 8001b0e:	d11c      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x152>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b10:	039b      	lsls	r3, r3, #14
 8001b12:	d400      	bmi.n	8001b16 <HAL_RCC_ClockConfig+0x11e>
 8001b14:	e775      	b.n	8001a02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	2103      	movs	r1, #3
 8001b18:	68f3      	ldr	r3, [r6, #12]
 8001b1a:	438b      	bics	r3, r1
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8001b20:	f7fe fdcc 	bl	80006bc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b24:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001b26:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d11b      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x16c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b2c:	220c      	movs	r2, #12
 8001b2e:	68f3      	ldr	r3, [r6, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d100      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x140>
 8001b36:	e77f      	b.n	8001a38 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7fe fdc0 	bl	80006bc <HAL_GetTick>
 8001b3c:	9b01      	ldr	r3, [sp, #4]
 8001b3e:	1ac0      	subs	r0, r0, r3
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001b42:	4298      	cmp	r0, r3
 8001b44:	d9f2      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x134>
          return HAL_TIMEOUT;
 8001b46:	2003      	movs	r0, #3
 8001b48:	e75c      	b.n	8001a04 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4a:	2a03      	cmp	r2, #3
 8001b4c:	d102      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b4e:	019b      	lsls	r3, r3, #6
 8001b50:	d4e1      	bmi.n	8001b16 <HAL_RCC_ClockConfig+0x11e>
 8001b52:	e756      	b.n	8001a02 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b54:	2a01      	cmp	r2, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b58:	075b      	lsls	r3, r3, #29
 8001b5a:	d4dc      	bmi.n	8001b16 <HAL_RCC_ClockConfig+0x11e>
 8001b5c:	e751      	b.n	8001a02 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b5e:	059b      	lsls	r3, r3, #22
 8001b60:	d4d9      	bmi.n	8001b16 <HAL_RCC_ClockConfig+0x11e>
 8001b62:	e74e      	b.n	8001a02 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d10d      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x18c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b68:	220c      	movs	r2, #12
 8001b6a:	68f3      	ldr	r3, [r6, #12]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d100      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x17c>
 8001b72:	e761      	b.n	8001a38 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7fe fda2 	bl	80006bc <HAL_GetTick>
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	1ac0      	subs	r0, r0, r3
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001b7e:	4298      	cmp	r0, r3
 8001b80:	d9f2      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x170>
 8001b82:	e7e0      	b.n	8001b46 <HAL_RCC_ClockConfig+0x14e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x1b8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b88:	220c      	movs	r2, #12
 8001b8a:	68f3      	ldr	r3, [r6, #12]
 8001b8c:	4213      	tst	r3, r2
 8001b8e:	d100      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x19a>
 8001b90:	e752      	b.n	8001a38 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f7fe fd93 	bl	80006bc <HAL_GetTick>
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	1ac0      	subs	r0, r0, r3
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001b9c:	4298      	cmp	r0, r3
 8001b9e:	d9f3      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x190>
 8001ba0:	e7d1      	b.n	8001b46 <HAL_RCC_ClockConfig+0x14e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba2:	f7fe fd8b 	bl	80006bc <HAL_GetTick>
 8001ba6:	9b01      	ldr	r3, [sp, #4]
 8001ba8:	1ac0      	subs	r0, r0, r3
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001bac:	4298      	cmp	r0, r3
 8001bae:	d8ca      	bhi.n	8001b46 <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	68f3      	ldr	r3, [r6, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d1f3      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x1aa>
 8001bba:	e73d      	b.n	8001a38 <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbc:	682a      	ldr	r2, [r5, #0]
 8001bbe:	439a      	bics	r2, r3
 8001bc0:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	682a      	ldr	r2, [r5, #0]
 8001bc4:	421a      	tst	r2, r3
 8001bc6:	d000      	beq.n	8001bca <HAL_RCC_ClockConfig+0x1d2>
 8001bc8:	e71b      	b.n	8001a02 <HAL_RCC_ClockConfig+0xa>
 8001bca:	e73b      	b.n	8001a44 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001bcc:	68e3      	ldr	r3, [r4, #12]
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <HAL_RCC_ClockConfig+0x21c>)
 8001bd0:	4213      	tst	r3, r2
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x1f8>
 8001bd4:	21a0      	movs	r1, #160	; 0xa0
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_RCC_ClockConfig+0x220>)
 8001bd8:	00c9      	lsls	r1, r1, #3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	428a      	cmp	r2, r1
 8001bde:	d007      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x1f8>
 8001be0:	22c0      	movs	r2, #192	; 0xc0
 8001be2:	00d2      	lsls	r2, r2, #3
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d003      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x1f8>
 8001be8:	4913      	ldr	r1, [pc, #76]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <HAL_RCC_ClockConfig+0x20c>)
 8001bec:	f001 fa64 	bl	80030b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	68eb      	ldr	r3, [r5, #12]
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	68e2      	ldr	r2, [r4, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60eb      	str	r3, [r5, #12]
 8001bfc:	e727      	b.n	8001a4e <HAL_RCC_ClockConfig+0x56>
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	00000366 	.word	0x00000366
 8001c04:	08003bda 	.word	0x08003bda
 8001c08:	00000367 	.word	0x00000367
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	fffffbff 	.word	0xfffffbff
 8001c18:	fffffdff 	.word	0xfffffdff
 8001c1c:	000003f1 	.word	0x000003f1
 8001c20:	ffffc7ff 	.word	0xffffc7ff
 8001c24:	08003d2b 	.word	0x08003d2b
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	0000037e 	.word	0x0000037e
 8001c30:	00000385 	.word	0x00000385
 8001c34:	00001388 	.word	0x00001388
 8001c38:	000003ea 	.word	0x000003ea
 8001c3c:	fffff8ff 	.word	0xfffff8ff

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	055b      	lsls	r3, r3, #21
 8001c48:	0f5b      	lsrs	r3, r3, #29
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c4e:	6810      	ldr	r0, [r2, #0]
 8001c50:	40d8      	lsrs	r0, r3
}
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08003d3b 	.word	0x08003d3b
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	049b      	lsls	r3, r3, #18
 8001c68:	0f5b      	lsrs	r3, r3, #29
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c6e:	6810      	ldr	r0, [r2, #0]
 8001c70:	40d8      	lsrs	r0, r3
}
 8001c72:	4770      	bx	lr
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08003d3b 	.word	0x08003d3b
 8001c7c:	20000000 	.word	0x20000000

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp_reg;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001c82:	4b93      	ldr	r3, [pc, #588]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c84:	6802      	ldr	r2, [r0, #0]
{
 8001c86:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d903      	bls.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001c8c:	2167      	movs	r1, #103	; 0x67
 8001c8e:	4891      	ldr	r0, [pc, #580]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c90:	f001 fa12 	bl	80030b8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	069b      	lsls	r3, r3, #26
 8001c98:	d54d      	bpl.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	4a8e      	ldr	r2, [pc, #568]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c9e:	4213      	tst	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001ca2:	2198      	movs	r1, #152	; 0x98
 8001ca4:	4a8d      	ldr	r2, [pc, #564]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ca6:	0349      	lsls	r1, r1, #13
 8001ca8:	401a      	ands	r2, r3
 8001caa:	428a      	cmp	r2, r1
 8001cac:	d007      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001cae:	228c      	movs	r2, #140	; 0x8c
 8001cb0:	0392      	lsls	r2, r2, #14
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001cb6:	2173      	movs	r1, #115	; 0x73
 8001cb8:	4886      	ldr	r0, [pc, #536]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cba:	f001 f9fd 	bl	80030b8 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbe:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001cc0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc2:	4d87      	ldr	r5, [pc, #540]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cc4:	055b      	lsls	r3, r3, #21
 8001cc6:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001cc8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cca:	421a      	tst	r2, r3
 8001ccc:	d104      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	2780      	movs	r7, #128	; 0x80
 8001cda:	4e82      	ldr	r6, [pc, #520]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cdc:	007f      	lsls	r7, r7, #1
 8001cde:	6833      	ldr	r3, [r6, #0]
 8001ce0:	423b      	tst	r3, r7
 8001ce2:	d100      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001ce4:	e0af      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ce6:	22c0      	movs	r2, #192	; 0xc0
 8001ce8:	21c0      	movs	r1, #192	; 0xc0
 8001cea:	6828      	ldr	r0, [r5, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001cec:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001cee:	0392      	lsls	r2, r2, #14
 8001cf0:	4010      	ands	r0, r2
 8001cf2:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	4290      	cmp	r0, r2
 8001cf8:	d000      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001cfa:	e0b6      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001cfc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8001cfe:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d00:	d000      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001d02:	e0bd      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d04:	6861      	ldr	r1, [r4, #4]
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	000a      	movs	r2, r1
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d107      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	4874      	ldr	r0, [pc, #464]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d16:	4003      	ands	r3, r0
 8001d18:	20c0      	movs	r0, #192	; 0xc0
 8001d1a:	0380      	lsls	r0, r0, #14
 8001d1c:	4001      	ands	r1, r0
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	602b      	str	r3, [r5, #0]
 8001d22:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001d24:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d26:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d28:	652a      	str	r2, [r5, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d103      	bne.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001d30:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	63ab      	str	r3, [r5, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	07db      	lsls	r3, r3, #31
 8001d3a:	d50d      	bpl.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8001d3c:	68a3      	ldr	r3, [r4, #8]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d903      	bls.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001d42:	21de      	movs	r1, #222	; 0xde
 8001d44:	4863      	ldr	r0, [pc, #396]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d46:	f001 f9b7 	bl	80030b8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	4a64      	ldr	r2, [pc, #400]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d4e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001d50:	438b      	bics	r3, r1
 8001d52:	68a1      	ldr	r1, [r4, #8]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	079b      	lsls	r3, r3, #30
 8001d5c:	d50e      	bpl.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8001d5e:	230c      	movs	r3, #12
 8001d60:	68e2      	ldr	r2, [r4, #12]
 8001d62:	439a      	bics	r2, r3
 8001d64:	d003      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8001d66:	21e9      	movs	r1, #233	; 0xe9
 8001d68:	485a      	ldr	r0, [pc, #360]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d6a:	f001 f9a5 	bl	80030b8 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d6e:	210c      	movs	r1, #12
 8001d70:	4a5b      	ldr	r2, [pc, #364]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d72:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001d74:	438b      	bics	r3, r1
 8001d76:	68e1      	ldr	r1, [r4, #12]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	075b      	lsls	r3, r3, #29
 8001d80:	d50d      	bpl.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8001d82:	4d5b      	ldr	r5, [pc, #364]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8001d84:	6923      	ldr	r3, [r4, #16]
 8001d86:	422b      	tst	r3, r5
 8001d88:	d003      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d8a:	21f3      	movs	r1, #243	; 0xf3
 8001d8c:	4851      	ldr	r0, [pc, #324]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d8e:	f001 f993 	bl	80030b8 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d92:	4a53      	ldr	r2, [pc, #332]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d94:	6921      	ldr	r1, [r4, #16]
 8001d96:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001d98:	402b      	ands	r3, r5
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	071b      	lsls	r3, r3, #28
 8001da2:	d512      	bpl.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8001da4:	6963      	ldr	r3, [r4, #20]
 8001da6:	4a53      	ldr	r2, [pc, #332]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001da8:	4213      	tst	r3, r2
 8001daa:	d007      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	0192      	lsls	r2, r2, #6
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d003      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001db4:	21fd      	movs	r1, #253	; 0xfd
 8001db6:	4847      	ldr	r0, [pc, #284]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001db8:	f001 f97e 	bl	80030b8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dbc:	4a48      	ldr	r2, [pc, #288]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbe:	494e      	ldr	r1, [pc, #312]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8001dc0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001dc2:	400b      	ands	r3, r1
 8001dc4:	6961      	ldr	r1, [r4, #20]
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	d513      	bpl.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8001dd0:	69a3      	ldr	r3, [r4, #24]
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001dd4:	4213      	tst	r3, r2
 8001dd6:	d008      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	0292      	lsls	r2, r2, #10
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001de0:	2184      	movs	r1, #132	; 0x84
 8001de2:	483c      	ldr	r0, [pc, #240]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001de4:	0049      	lsls	r1, r1, #1
 8001de6:	f001 f967 	bl	80030b8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dea:	4a3d      	ldr	r2, [pc, #244]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dec:	493a      	ldr	r1, [pc, #232]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001df0:	400b      	ands	r3, r1
 8001df2:	69a1      	ldr	r1, [r4, #24]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	065b      	lsls	r3, r3, #25
 8001dfc:	d50e      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001dfe:	4d40      	ldr	r5, [pc, #256]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8001e00:	6a23      	ldr	r3, [r4, #32]
 8001e02:	422b      	tst	r3, r5
 8001e04:	d004      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001e06:	2114      	movs	r1, #20
 8001e08:	4832      	ldr	r0, [pc, #200]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e0a:	31ff      	adds	r1, #255	; 0xff
 8001e0c:	f001 f954 	bl	80030b8 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e10:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e12:	6a21      	ldr	r1, [r4, #32]
 8001e14:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e16:	402b      	ands	r3, r5
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e1c:	6823      	ldr	r3, [r4, #0]
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001e1e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	d521      	bpl.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e24:	4d37      	ldr	r5, [pc, #220]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8001e26:	69e3      	ldr	r3, [r4, #28]
 8001e28:	422b      	tst	r3, r5
 8001e2a:	d004      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8001e2c:	211c      	movs	r1, #28
 8001e2e:	4829      	ldr	r0, [pc, #164]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e30:	31ff      	adds	r1, #255	; 0xff
 8001e32:	f001 f941 	bl	80030b8 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e36:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e38:	69e1      	ldr	r1, [r4, #28]
 8001e3a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  return HAL_OK;
 8001e3c:	2000      	movs	r0, #0
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e3e:	402b      	ands	r3, r5
 8001e40:	430b      	orrs	r3, r1
 8001e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e44:	e010      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e46:	6833      	ldr	r3, [r6, #0]
 8001e48:	433b      	orrs	r3, r7
 8001e4a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e4c:	f7fe fc36 	bl	80006bc <HAL_GetTick>
 8001e50:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	6833      	ldr	r3, [r6, #0]
 8001e54:	423b      	tst	r3, r7
 8001e56:	d000      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8001e58:	e745      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x66>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7fe fc2f 	bl	80006bc <HAL_GetTick>
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	1ac0      	subs	r0, r0, r3
 8001e62:	2864      	cmp	r0, #100	; 0x64
 8001e64:	d9f5      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
}
 8001e68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	428a      	cmp	r2, r1
 8001e70:	d000      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001e72:	e743      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e74:	682a      	ldr	r2, [r5, #0]
          return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e78:	0392      	lsls	r2, r2, #14
 8001e7a:	d400      	bmi.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8001e7c:	e73e      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e7e:	e7f3      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e80:	400b      	ands	r3, r1
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d100      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001e86:	e73d      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x84>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	069b      	lsls	r3, r3, #26
 8001e8c:	d400      	bmi.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001e8e:	e739      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e90:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e92:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e94:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8001e96:	031b      	lsls	r3, r3, #12
 8001e98:	4303      	orrs	r3, r0
 8001e9a:	652b      	str	r3, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e9c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e9e:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ea0:	4819      	ldr	r0, [pc, #100]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x288>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ea2:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ea4:	4003      	ands	r3, r0
 8001ea6:	652b      	str	r3, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001ea8:	6529      	str	r1, [r5, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001eaa:	05d3      	lsls	r3, r2, #23
 8001eac:	d400      	bmi.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8001eae:	e729      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x84>
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fc04 	bl	80006bc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eb4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001eb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eb8:	00bf      	lsls	r7, r7, #2
 8001eba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001ebc:	423b      	tst	r3, r7
 8001ebe:	d000      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8001ec0:	e720      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x84>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7fe fbfb 	bl	80006bc <HAL_GetTick>
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001ec8:	1b80      	subs	r0, r0, r6
 8001eca:	4298      	cmp	r0, r3
 8001ecc:	d9f5      	bls.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8001ece:	e7ca      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8001ed0:	000001ff 	.word	0x000001ff
 8001ed4:	08003c12 	.word	0x08003c12
 8001ed8:	fffcffff 	.word	0xfffcffff
 8001edc:	ffdfffff 	.word	0xffdfffff
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	ffcfffff 	.word	0xffcfffff
 8001eec:	efffffff 	.word	0xefffffff
 8001ef0:	fffff3ff 	.word	0xfffff3ff
 8001ef4:	ffffefff 	.word	0xffffefff
 8001ef8:	ffffcfff 	.word	0xffffcfff
 8001efc:	fffeffff 	.word	0xfffeffff
 8001f00:	fbffffff 	.word	0xfbffffff
 8001f04:	fff3ffff 	.word	0xfff3ffff
 8001f08:	fff7ffff 	.word	0xfff7ffff
 8001f0c:	00001388 	.word	0x00001388

08001f10 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f10:	6803      	ldr	r3, [r0, #0]
 8001f12:	4907      	ldr	r1, [pc, #28]	; (8001f30 <UART_EndRxTransfer+0x20>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	3123      	adds	r1, #35	; 0x23
 8001f1e:	31ff      	adds	r1, #255	; 0xff
 8001f20:	438a      	bics	r2, r1
 8001f22:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f24:	2320      	movs	r3, #32
 8001f26:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001f2c:	4770      	bx	lr
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	fffffedf 	.word	0xfffffedf

08001f34 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f34:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001f36:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f38:	2b21      	cmp	r3, #33	; 0x21
 8001f3a:	d10d      	bne.n	8001f58 <UART_TxISR_16BIT+0x24>
  {
    if (huart->TxXferCount == 0U)
 8001f3c:	0001      	movs	r1, r0
 8001f3e:	3152      	adds	r1, #82	; 0x52
 8001f40:	880a      	ldrh	r2, [r1, #0]
 8001f42:	6803      	ldr	r3, [r0, #0]
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d108      	bne.n	8001f5a <UART_TxISR_16BIT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001f58:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f5a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001f5c:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 8001f5e:	3402      	adds	r4, #2
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001f60:	05d2      	lsls	r2, r2, #23
 8001f62:	0dd2      	lsrs	r2, r2, #23
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8001f66:	64c4      	str	r4, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001f68:	880b      	ldrh	r3, [r1, #0]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	800b      	strh	r3, [r1, #0]
}
 8001f70:	e7f2      	b.n	8001f58 <UART_TxISR_16BIT+0x24>

08001f72 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f72:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001f74:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f76:	2b21      	cmp	r3, #33	; 0x21
 8001f78:	d10d      	bne.n	8001f96 <UART_TxISR_8BIT+0x24>
    if (huart->TxXferCount == 0U)
 8001f7a:	0001      	movs	r1, r0
 8001f7c:	3152      	adds	r1, #82	; 0x52
 8001f7e:	880a      	ldrh	r2, [r1, #0]
 8001f80:	6803      	ldr	r3, [r0, #0]
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d108      	bne.n	8001f98 <UART_TxISR_8BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001f98:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001f9a:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8001f9c:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001f9e:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8001fa0:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001fa2:	880b      	ldrh	r3, [r1, #0]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	800b      	strh	r3, [r1, #0]
}
 8001faa:	e7f4      	b.n	8001f96 <UART_TxISR_8BIT+0x24>

08001fac <HAL_UART_Transmit_IT>:
{
 8001fac:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8001fae:	6f44      	ldr	r4, [r0, #116]	; 0x74
{
 8001fb0:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001fb2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001fb4:	2c20      	cmp	r4, #32
 8001fb6:	d130      	bne.n	800201a <HAL_UART_Transmit_IT+0x6e>
      return HAL_ERROR;
 8001fb8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001fba:	2900      	cmp	r1, #0
 8001fbc:	d02d      	beq.n	800201a <HAL_UART_Transmit_IT+0x6e>
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d02b      	beq.n	800201a <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc2:	2480      	movs	r4, #128	; 0x80
 8001fc4:	689d      	ldr	r5, [r3, #8]
 8001fc6:	0164      	lsls	r4, r4, #5
 8001fc8:	42a5      	cmp	r5, r4
 8001fca:	d104      	bne.n	8001fd6 <HAL_UART_Transmit_IT+0x2a>
 8001fcc:	691c      	ldr	r4, [r3, #16]
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8001fd2:	4201      	tst	r1, r0
 8001fd4:	d121      	bne.n	800201a <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 8001fd6:	001c      	movs	r4, r3
 8001fd8:	3470      	adds	r4, #112	; 0x70
 8001fda:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8001fdc:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001fde:	2e01      	cmp	r6, #1
 8001fe0:	d01b      	beq.n	800201a <HAL_UART_Transmit_IT+0x6e>
 8001fe2:	3801      	subs	r0, #1
 8001fe4:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8001fe6:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001fe8:	0019      	movs	r1, r3
 8001fea:	3150      	adds	r1, #80	; 0x50
 8001fec:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8001fee:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8001ff0:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->TxISR       = NULL;
 8001ff4:	665a      	str	r2, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ff6:	3221      	adds	r2, #33	; 0x21
 8001ff8:	675a      	str	r2, [r3, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	0152      	lsls	r2, r2, #5
 8001ffe:	4295      	cmp	r5, r2
 8002000:	d10c      	bne.n	800201c <HAL_UART_Transmit_IT+0x70>
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	2a00      	cmp	r2, #0
 8002006:	d109      	bne.n	800201c <HAL_UART_Transmit_IT+0x70>
      huart->TxISR = UART_TxISR_16BIT;
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_UART_Transmit_IT+0x74>)
      huart->TxISR = UART_TxISR_8BIT;
 800200a:	665a      	str	r2, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 8002010:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002012:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8002014:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002016:	430b      	orrs	r3, r1
 8002018:	6013      	str	r3, [r2, #0]
}
 800201a:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 800201c:	4a01      	ldr	r2, [pc, #4]	; (8002024 <HAL_UART_Transmit_IT+0x78>)
 800201e:	e7f4      	b.n	800200a <HAL_UART_Transmit_IT+0x5e>
 8002020:	08001f35 	.word	0x08001f35
 8002024:	08001f73 	.word	0x08001f73

08002028 <HAL_UART_Receive_IT>:
{
 8002028:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800202a:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 800202c:	0003      	movs	r3, r0
    return HAL_BUSY;
 800202e:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002030:	2c20      	cmp	r4, #32
 8002032:	d141      	bne.n	80020b8 <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8002034:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002036:	2900      	cmp	r1, #0
 8002038:	d03e      	beq.n	80020b8 <HAL_UART_Receive_IT+0x90>
 800203a:	2a00      	cmp	r2, #0
 800203c:	d03c      	beq.n	80020b8 <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800203e:	2580      	movs	r5, #128	; 0x80
 8002040:	689c      	ldr	r4, [r3, #8]
 8002042:	016d      	lsls	r5, r5, #5
 8002044:	42ac      	cmp	r4, r5
 8002046:	d104      	bne.n	8002052 <HAL_UART_Receive_IT+0x2a>
 8002048:	691d      	ldr	r5, [r3, #16]
 800204a:	2d00      	cmp	r5, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 800204e:	4201      	tst	r1, r0
 8002050:	d132      	bne.n	80020b8 <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8002052:	001d      	movs	r5, r3
 8002054:	3570      	adds	r5, #112	; 0x70
 8002056:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8002058:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800205a:	2e01      	cmp	r6, #1
 800205c:	d02c      	beq.n	80020b8 <HAL_UART_Receive_IT+0x90>
 800205e:	3801      	subs	r0, #1
 8002060:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8002062:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002064:	0019      	movs	r1, r3
 8002066:	3158      	adds	r1, #88	; 0x58
 8002068:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 800206a:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 800206c:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 800206e:	2100      	movs	r1, #0
 8002070:	001a      	movs	r2, r3
 8002072:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8002074:	0140      	lsls	r0, r0, #5
 8002076:	325c      	adds	r2, #92	; 0x5c
 8002078:	4284      	cmp	r4, r0
 800207a:	d120      	bne.n	80020be <HAL_UART_Receive_IT+0x96>
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	2900      	cmp	r1, #0
 8002080:	d11b      	bne.n	80020ba <HAL_UART_Receive_IT+0x92>
 8002082:	4918      	ldr	r1, [pc, #96]	; (80020e4 <HAL_UART_Receive_IT+0xbc>)
 8002084:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002086:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002088:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800208c:	3222      	adds	r2, #34	; 0x22
 800208e:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	6890      	ldr	r0, [r2, #8]
 8002094:	4301      	orrs	r1, r0
 8002096:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	0149      	lsls	r1, r1, #5
 800209c:	428c      	cmp	r4, r1
 800209e:	d11e      	bne.n	80020de <HAL_UART_Receive_IT+0xb6>
 80020a0:	6919      	ldr	r1, [r3, #16]
 80020a2:	2900      	cmp	r1, #0
 80020a4:	d11b      	bne.n	80020de <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 80020a6:	4910      	ldr	r1, [pc, #64]	; (80020e8 <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 80020a8:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80020aa:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 80020ac:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80020ae:	6811      	ldr	r1, [r2, #0]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 80020b4:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 80020ba:	21ff      	movs	r1, #255	; 0xff
 80020bc:	e7e2      	b.n	8002084 <HAL_UART_Receive_IT+0x5c>
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d104      	bne.n	80020cc <HAL_UART_Receive_IT+0xa4>
 80020c2:	6919      	ldr	r1, [r3, #16]
 80020c4:	2900      	cmp	r1, #0
 80020c6:	d0f8      	beq.n	80020ba <HAL_UART_Receive_IT+0x92>
 80020c8:	217f      	movs	r1, #127	; 0x7f
 80020ca:	e7db      	b.n	8002084 <HAL_UART_Receive_IT+0x5c>
 80020cc:	2080      	movs	r0, #128	; 0x80
 80020ce:	0540      	lsls	r0, r0, #21
 80020d0:	4284      	cmp	r4, r0
 80020d2:	d1d7      	bne.n	8002084 <HAL_UART_Receive_IT+0x5c>
 80020d4:	6919      	ldr	r1, [r3, #16]
 80020d6:	2900      	cmp	r1, #0
 80020d8:	d0f6      	beq.n	80020c8 <HAL_UART_Receive_IT+0xa0>
 80020da:	213f      	movs	r1, #63	; 0x3f
 80020dc:	e7d2      	b.n	8002084 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 80020de:	4903      	ldr	r1, [pc, #12]	; (80020ec <HAL_UART_Receive_IT+0xc4>)
 80020e0:	e7e2      	b.n	80020a8 <HAL_UART_Receive_IT+0x80>
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	000001ff 	.word	0x000001ff
 80020e8:	08002151 	.word	0x08002151
 80020ec:	080020f1 	.word	0x080020f1

080020f0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020f0:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80020f2:	b510      	push	{r4, lr}
 80020f4:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020f6:	2a22      	cmp	r2, #34	; 0x22
 80020f8:	d123      	bne.n	8002142 <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 80020fa:	0002      	movs	r2, r0
 80020fc:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	4013      	ands	r3, r2
 8002104:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002106:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8002108:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800210a:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800210c:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 800210e:	3301      	adds	r3, #1
 8002110:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002112:	8813      	ldrh	r3, [r2, #0]
 8002114:	3b01      	subs	r3, #1
 8002116:	b29b      	uxth	r3, r3
 8002118:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800211a:	8813      	ldrh	r3, [r2, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10e      	bne.n	8002140 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002122:	6802      	ldr	r2, [r0, #0]
 8002124:	4c09      	ldr	r4, [pc, #36]	; (800214c <UART_RxISR_8BIT+0x5c>)
 8002126:	6811      	ldr	r1, [r2, #0]
 8002128:	4021      	ands	r1, r4
 800212a:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212c:	6891      	ldr	r1, [r2, #8]
 800212e:	3423      	adds	r4, #35	; 0x23
 8002130:	34ff      	adds	r4, #255	; 0xff
 8002132:	43a1      	bics	r1, r4
 8002134:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002136:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002138:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800213a:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800213c:	f000 ffb6 	bl	80030ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002140:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002142:	2208      	movs	r2, #8
 8002144:	6999      	ldr	r1, [r3, #24]
 8002146:	430a      	orrs	r2, r1
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	e7f9      	b.n	8002140 <UART_RxISR_8BIT+0x50>
 800214c:	fffffedf 	.word	0xfffffedf

08002150 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002150:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8002152:	b510      	push	{r4, lr}
 8002154:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002156:	2a22      	cmp	r2, #34	; 0x22
 8002158:	d121      	bne.n	800219e <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 800215a:	0004      	movs	r4, r0
 800215c:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800215e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002160:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002162:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8002164:	4021      	ands	r1, r4
 8002166:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8002168:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800216a:	3202      	adds	r2, #2
 800216c:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800216e:	315a      	adds	r1, #90	; 0x5a
 8002170:	880a      	ldrh	r2, [r1, #0]
 8002172:	3a01      	subs	r2, #1
 8002174:	b292      	uxth	r2, r2
 8002176:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8002178:	880a      	ldrh	r2, [r1, #0]
 800217a:	b292      	uxth	r2, r2
 800217c:	2a00      	cmp	r2, #0
 800217e:	d10d      	bne.n	800219c <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	4c09      	ldr	r4, [pc, #36]	; (80021a8 <UART_RxISR_16BIT+0x58>)
 8002184:	4021      	ands	r1, r4
 8002186:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	3423      	adds	r4, #35	; 0x23
 800218c:	34ff      	adds	r4, #255	; 0xff
 800218e:	43a1      	bics	r1, r4
 8002190:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002192:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002194:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8002196:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002198:	f000 ff88 	bl	80030ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800219c:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800219e:	2208      	movs	r2, #8
 80021a0:	6999      	ldr	r1, [r3, #24]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	e7f9      	b.n	800219c <UART_RxISR_16BIT+0x4c>
 80021a8:	fffffedf 	.word	0xfffffedf

080021ac <HAL_UART_ErrorCallback>:
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_UART_IRQHandler>:
{
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021b2:	6803      	ldr	r3, [r0, #0]
{
 80021b4:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021b6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021b8:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021ba:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80021bc:	0711      	lsls	r1, r2, #28
 80021be:	d10a      	bne.n	80021d6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80021c0:	2120      	movs	r1, #32
 80021c2:	420a      	tst	r2, r1
 80021c4:	d100      	bne.n	80021c8 <HAL_UART_IRQHandler+0x18>
 80021c6:	e06a      	b.n	800229e <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021c8:	4208      	tst	r0, r1
 80021ca:	d068      	beq.n	800229e <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 80021cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 80021ce:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d15a      	bne.n	800228a <HAL_UART_IRQHandler+0xda>
 80021d4:	e05a      	b.n	800228c <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80021d6:	2101      	movs	r1, #1
 80021d8:	0035      	movs	r5, r6
 80021da:	400d      	ands	r5, r1
 80021dc:	d103      	bne.n	80021e6 <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80021de:	2790      	movs	r7, #144	; 0x90
 80021e0:	007f      	lsls	r7, r7, #1
 80021e2:	4238      	tst	r0, r7
 80021e4:	d05b      	beq.n	800229e <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80021e6:	420a      	tst	r2, r1
 80021e8:	d005      	beq.n	80021f6 <HAL_UART_IRQHandler+0x46>
 80021ea:	05c6      	lsls	r6, r0, #23
 80021ec:	d503      	bpl.n	80021f6 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80021ee:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021f0:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80021f2:	4331      	orrs	r1, r6
 80021f4:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021f6:	2102      	movs	r1, #2
 80021f8:	420a      	tst	r2, r1
 80021fa:	d006      	beq.n	800220a <HAL_UART_IRQHandler+0x5a>
 80021fc:	2d00      	cmp	r5, #0
 80021fe:	d004      	beq.n	800220a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002200:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002202:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002204:	1849      	adds	r1, r1, r1
 8002206:	4331      	orrs	r1, r6
 8002208:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800220a:	2104      	movs	r1, #4
 800220c:	420a      	tst	r2, r1
 800220e:	d006      	beq.n	800221e <HAL_UART_IRQHandler+0x6e>
 8002210:	2d00      	cmp	r5, #0
 8002212:	d004      	beq.n	800221e <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002214:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002216:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002218:	3902      	subs	r1, #2
 800221a:	4331      	orrs	r1, r6
 800221c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800221e:	0711      	lsls	r1, r2, #28
 8002220:	d508      	bpl.n	8002234 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002222:	0681      	lsls	r1, r0, #26
 8002224:	d401      	bmi.n	800222a <HAL_UART_IRQHandler+0x7a>
 8002226:	2d00      	cmp	r5, #0
 8002228:	d004      	beq.n	8002234 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800222a:	2108      	movs	r1, #8
 800222c:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800222e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002230:	4319      	orrs	r1, r3
 8002232:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002234:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d028      	beq.n	800228c <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800223a:	2320      	movs	r3, #32
 800223c:	421a      	tst	r2, r3
 800223e:	d006      	beq.n	800224e <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002240:	4218      	tst	r0, r3
 8002242:	d004      	beq.n	800224e <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8002244:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 800224a:	0020      	movs	r0, r4
 800224c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800224e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8002250:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002252:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8002254:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002256:	065b      	lsls	r3, r3, #25
 8002258:	d402      	bmi.n	8002260 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800225a:	2308      	movs	r3, #8
 800225c:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800225e:	d01a      	beq.n	8002296 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002260:	f7ff fe56 	bl	8001f10 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002264:	2140      	movs	r1, #64	; 0x40
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	420a      	tst	r2, r1
 800226c:	d00f      	beq.n	800228e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800226e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002270:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002272:	438a      	bics	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002276:	2800      	cmp	r0, #0
 8002278:	d009      	beq.n	800228e <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_UART_IRQHandler+0x134>)
 800227c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800227e:	f7fe fd4b 	bl	8000d18 <HAL_DMA_Abort_IT>
 8002282:	2800      	cmp	r0, #0
 8002284:	d002      	beq.n	800228c <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002286:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002288:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800228a:	4798      	blx	r3
}
 800228c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800228e:	0020      	movs	r0, r4
 8002290:	f7ff ff8c 	bl	80021ac <HAL_UART_ErrorCallback>
 8002294:	e7fa      	b.n	800228c <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8002296:	f7ff ff89 	bl	80021ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229a:	67e5      	str	r5, [r4, #124]	; 0x7c
 800229c:	e7f6      	b.n	800228c <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	0349      	lsls	r1, r1, #13
 80022a2:	420a      	tst	r2, r1
 80022a4:	d006      	beq.n	80022b4 <HAL_UART_IRQHandler+0x104>
 80022a6:	0275      	lsls	r5, r6, #9
 80022a8:	d504      	bpl.n	80022b4 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80022aa:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80022ac:	0020      	movs	r0, r4
 80022ae:	f000 fc5d 	bl	8002b6c <HAL_UARTEx_WakeupCallback>
    return;
 80022b2:	e7eb      	b.n	800228c <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	420a      	tst	r2, r1
 80022b8:	d003      	beq.n	80022c2 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80022ba:	4208      	tst	r0, r1
 80022bc:	d001      	beq.n	80022c2 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 80022be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022c0:	e785      	b.n	80021ce <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80022c2:	2140      	movs	r1, #64	; 0x40
 80022c4:	420a      	tst	r2, r1
 80022c6:	d0e1      	beq.n	800228c <HAL_UART_IRQHandler+0xdc>
 80022c8:	4208      	tst	r0, r1
 80022ca:	d0df      	beq.n	800228c <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022cc:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80022ce:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022d0:	438a      	bics	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80022d4:	2320      	movs	r3, #32
 80022d6:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80022dc:	f000 fee0 	bl	80030a0 <HAL_UART_TxCpltCallback>
 80022e0:	e7d4      	b.n	800228c <HAL_UART_IRQHandler+0xdc>
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	080022e9 	.word	0x080022e9

080022e8 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80022e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	0002      	movs	r2, r0
{
 80022ee:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80022f0:	325a      	adds	r2, #90	; 0x5a
 80022f2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80022f4:	3a08      	subs	r2, #8
 80022f6:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80022f8:	f7ff ff58 	bl	80021ac <HAL_UART_ErrorCallback>
}
 80022fc:	bd10      	pop	{r4, pc}
	...

08002300 <UART_SetConfig>:
{
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002302:	6842      	ldr	r2, [r0, #4]
 8002304:	4baf      	ldr	r3, [pc, #700]	; (80025c4 <UART_SetConfig+0x2c4>)
{
 8002306:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002308:	429a      	cmp	r2, r3
 800230a:	d903      	bls.n	8002314 <UART_SetConfig+0x14>
 800230c:	49ae      	ldr	r1, [pc, #696]	; (80025c8 <UART_SetConfig+0x2c8>)
 800230e:	48af      	ldr	r0, [pc, #700]	; (80025cc <UART_SetConfig+0x2cc>)
 8002310:	f000 fed2 	bl	80030b8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	68a3      	ldr	r3, [r4, #8]
 8002318:	0552      	lsls	r2, r2, #21
 800231a:	4293      	cmp	r3, r2
 800231c:	d006      	beq.n	800232c <UART_SetConfig+0x2c>
 800231e:	4aac      	ldr	r2, [pc, #688]	; (80025d0 <UART_SetConfig+0x2d0>)
 8002320:	4213      	tst	r3, r2
 8002322:	d003      	beq.n	800232c <UART_SetConfig+0x2c>
 8002324:	49ab      	ldr	r1, [pc, #684]	; (80025d4 <UART_SetConfig+0x2d4>)
 8002326:	48a9      	ldr	r0, [pc, #676]	; (80025cc <UART_SetConfig+0x2cc>)
 8002328:	f000 fec6 	bl	80030b8 <assert_failed>
 800232c:	4daa      	ldr	r5, [pc, #680]	; (80025d8 <UART_SetConfig+0x2d8>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800232e:	6822      	ldr	r2, [r4, #0]
 8002330:	68e3      	ldr	r3, [r4, #12]
 8002332:	4eaa      	ldr	r6, [pc, #680]	; (80025dc <UART_SetConfig+0x2dc>)
 8002334:	42aa      	cmp	r2, r5
 8002336:	d160      	bne.n	80023fa <UART_SetConfig+0xfa>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8002338:	4aa9      	ldr	r2, [pc, #676]	; (80025e0 <UART_SetConfig+0x2e0>)
 800233a:	4213      	tst	r3, r2
 800233c:	d003      	beq.n	8002346 <UART_SetConfig+0x46>
 800233e:	49a9      	ldr	r1, [pc, #676]	; (80025e4 <UART_SetConfig+0x2e4>)
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8002340:	48a2      	ldr	r0, [pc, #648]	; (80025cc <UART_SetConfig+0x2cc>)
 8002342:	f000 feb9 	bl	80030b8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002346:	6923      	ldr	r3, [r4, #16]
 8002348:	4aa7      	ldr	r2, [pc, #668]	; (80025e8 <UART_SetConfig+0x2e8>)
 800234a:	4213      	tst	r3, r2
 800234c:	d007      	beq.n	800235e <UART_SetConfig+0x5e>
 800234e:	22c0      	movs	r2, #192	; 0xc0
 8002350:	00d2      	lsls	r2, r2, #3
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <UART_SetConfig+0x5e>
 8002356:	49a5      	ldr	r1, [pc, #660]	; (80025ec <UART_SetConfig+0x2ec>)
 8002358:	489c      	ldr	r0, [pc, #624]	; (80025cc <UART_SetConfig+0x2cc>)
 800235a:	f000 fead 	bl	80030b8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800235e:	6963      	ldr	r3, [r4, #20]
 8002360:	220c      	movs	r2, #12
 8002362:	0019      	movs	r1, r3
 8002364:	4391      	bics	r1, r2
 8002366:	d101      	bne.n	800236c <UART_SetConfig+0x6c>
 8002368:	2b00      	cmp	r3, #0
 800236a:	d103      	bne.n	8002374 <UART_SetConfig+0x74>
 800236c:	49a0      	ldr	r1, [pc, #640]	; (80025f0 <UART_SetConfig+0x2f0>)
 800236e:	4897      	ldr	r0, [pc, #604]	; (80025cc <UART_SetConfig+0x2cc>)
 8002370:	f000 fea2 	bl	80030b8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002374:	4b9f      	ldr	r3, [pc, #636]	; (80025f4 <UART_SetConfig+0x2f4>)
 8002376:	69a2      	ldr	r2, [r4, #24]
 8002378:	421a      	tst	r2, r3
 800237a:	d003      	beq.n	8002384 <UART_SetConfig+0x84>
 800237c:	499e      	ldr	r1, [pc, #632]	; (80025f8 <UART_SetConfig+0x2f8>)
 800237e:	4893      	ldr	r0, [pc, #588]	; (80025cc <UART_SetConfig+0x2cc>)
 8002380:	f000 fe9a 	bl	80030b8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002384:	4b9d      	ldr	r3, [pc, #628]	; (80025fc <UART_SetConfig+0x2fc>)
 8002386:	69e2      	ldr	r2, [r4, #28]
 8002388:	421a      	tst	r2, r3
 800238a:	d003      	beq.n	8002394 <UART_SetConfig+0x94>
 800238c:	499c      	ldr	r1, [pc, #624]	; (8002600 <UART_SetConfig+0x300>)
 800238e:	488f      	ldr	r0, [pc, #572]	; (80025cc <UART_SetConfig+0x2cc>)
 8002390:	f000 fe92 	bl	80030b8 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002394:	6927      	ldr	r7, [r4, #16]
 8002396:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002398:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800239a:	433a      	orrs	r2, r7
 800239c:	6967      	ldr	r7, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800239e:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a0:	69e1      	ldr	r1, [r4, #28]
 80023a2:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023a4:	4f97      	ldr	r7, [pc, #604]	; (8002604 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023a8:	4038      	ands	r0, r7
 80023aa:	4302      	orrs	r2, r0
 80023ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ae:	685a      	ldr	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023b0:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b2:	4016      	ands	r6, r2
 80023b4:	68e2      	ldr	r2, [r4, #12]
 80023b6:	4316      	orrs	r6, r2
 80023b8:	605e      	str	r6, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023ba:	42ab      	cmp	r3, r5
 80023bc:	d001      	beq.n	80023c2 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
 80023be:	6a22      	ldr	r2, [r4, #32]
 80023c0:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4e90      	ldr	r6, [pc, #576]	; (8002608 <UART_SetConfig+0x308>)
 80023c6:	4032      	ands	r2, r6
 80023c8:	4302      	orrs	r2, r0
 80023ca:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023cc:	4a8f      	ldr	r2, [pc, #572]	; (800260c <UART_SetConfig+0x30c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d120      	bne.n	8002414 <UART_SetConfig+0x114>
 80023d2:	2203      	movs	r2, #3
 80023d4:	4b8e      	ldr	r3, [pc, #568]	; (8002610 <UART_SetConfig+0x310>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	4013      	ands	r3, r2
 80023da:	4a8e      	ldr	r2, [pc, #568]	; (8002614 <UART_SetConfig+0x314>)
 80023dc:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	4299      	cmp	r1, r3
 80023e4:	d100      	bne.n	80023e8 <UART_SetConfig+0xe8>
 80023e6:	e0de      	b.n	80025a6 <UART_SetConfig+0x2a6>
    switch (clocksource)
 80023e8:	2808      	cmp	r0, #8
 80023ea:	d833      	bhi.n	8002454 <UART_SetConfig+0x154>
 80023ec:	f7fd fe9e 	bl	800012c <__gnu_thumb1_case_uqi>
 80023f0:	32a5a29b 	.word	0x32a5a29b
 80023f4:	323232c0 	.word	0x323232c0
 80023f8:	c3          	.byte	0xc3
 80023f9:	00          	.byte	0x00
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80023fa:	4233      	tst	r3, r6
 80023fc:	d004      	beq.n	8002408 <UART_SetConfig+0x108>
 80023fe:	21ad      	movs	r1, #173	; 0xad
 8002400:	4872      	ldr	r0, [pc, #456]	; (80025cc <UART_SetConfig+0x2cc>)
 8002402:	0109      	lsls	r1, r1, #4
 8002404:	f000 fe58 	bl	80030b8 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8002408:	4b83      	ldr	r3, [pc, #524]	; (8002618 <UART_SetConfig+0x318>)
 800240a:	6a22      	ldr	r2, [r4, #32]
 800240c:	421a      	tst	r2, r3
 800240e:	d09a      	beq.n	8002346 <UART_SetConfig+0x46>
 8002410:	4982      	ldr	r1, [pc, #520]	; (800261c <UART_SetConfig+0x31c>)
 8002412:	e795      	b.n	8002340 <UART_SetConfig+0x40>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002414:	4a82      	ldr	r2, [pc, #520]	; (8002620 <UART_SetConfig+0x320>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d105      	bne.n	8002426 <UART_SetConfig+0x126>
 800241a:	220c      	movs	r2, #12
 800241c:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <UART_SetConfig+0x310>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	4013      	ands	r3, r2
 8002422:	4a80      	ldr	r2, [pc, #512]	; (8002624 <UART_SetConfig+0x324>)
 8002424:	e7da      	b.n	80023dc <UART_SetConfig+0xdc>
 8002426:	4a80      	ldr	r2, [pc, #512]	; (8002628 <UART_SetConfig+0x328>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d100      	bne.n	800242e <UART_SetConfig+0x12e>
 800242c:	e0af      	b.n	800258e <UART_SetConfig+0x28e>
 800242e:	4a7f      	ldr	r2, [pc, #508]	; (800262c <UART_SetConfig+0x32c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <UART_SetConfig+0x136>
 8002434:	e0ab      	b.n	800258e <UART_SetConfig+0x28e>
 8002436:	42ab      	cmp	r3, r5
 8002438:	d000      	beq.n	800243c <UART_SetConfig+0x13c>
 800243a:	e0a1      	b.n	8002580 <UART_SetConfig+0x280>
 800243c:	21c0      	movs	r1, #192	; 0xc0
 800243e:	2080      	movs	r0, #128	; 0x80
 8002440:	4a73      	ldr	r2, [pc, #460]	; (8002610 <UART_SetConfig+0x310>)
 8002442:	0109      	lsls	r1, r1, #4
 8002444:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002446:	00c0      	lsls	r0, r0, #3
 8002448:	400b      	ands	r3, r1
 800244a:	4283      	cmp	r3, r0
 800244c:	d038      	beq.n	80024c0 <UART_SetConfig+0x1c0>
 800244e:	d803      	bhi.n	8002458 <UART_SetConfig+0x158>
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8002454:	2501      	movs	r5, #1
 8002456:	e00d      	b.n	8002474 <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002458:	2080      	movs	r0, #128	; 0x80
 800245a:	0100      	lsls	r0, r0, #4
 800245c:	4283      	cmp	r3, r0
 800245e:	d00e      	beq.n	800247e <UART_SetConfig+0x17e>
 8002460:	428b      	cmp	r3, r1
 8002462:	d1f7      	bne.n	8002454 <UART_SetConfig+0x154>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002464:	2080      	movs	r0, #128	; 0x80
 8002466:	0200      	lsls	r0, r0, #8
 8002468:	e00d      	b.n	8002486 <UART_SetConfig+0x186>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800246a:	f7ff fbe9 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 800246e:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8002470:	42a8      	cmp	r0, r5
 8002472:	d108      	bne.n	8002486 <UART_SetConfig+0x186>
  huart->RxISR = NULL;
 8002474:	2300      	movs	r3, #0
}
 8002476:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8002478:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800247a:	6663      	str	r3, [r4, #100]	; 0x64
}
 800247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	06db      	lsls	r3, r3, #27
 8002482:	d520      	bpl.n	80024c6 <UART_SetConfig+0x1c6>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002484:	484f      	ldr	r0, [pc, #316]	; (80025c4 <UART_SetConfig+0x2c4>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002486:	2203      	movs	r2, #3
 8002488:	6863      	ldr	r3, [r4, #4]
 800248a:	435a      	muls	r2, r3
 800248c:	4282      	cmp	r2, r0
 800248e:	d8e1      	bhi.n	8002454 <UART_SetConfig+0x154>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002490:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002492:	4282      	cmp	r2, r0
 8002494:	d3de      	bcc.n	8002454 <UART_SetConfig+0x154>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002496:	2700      	movs	r7, #0
 8002498:	0e02      	lsrs	r2, r0, #24
 800249a:	0201      	lsls	r1, r0, #8
 800249c:	085e      	lsrs	r6, r3, #1
 800249e:	1989      	adds	r1, r1, r6
 80024a0:	417a      	adcs	r2, r7
 80024a2:	0008      	movs	r0, r1
 80024a4:	0011      	movs	r1, r2
 80024a6:	001a      	movs	r2, r3
 80024a8:	003b      	movs	r3, r7
 80024aa:	f7fd ffc9 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80024ae:	4b60      	ldr	r3, [pc, #384]	; (8002630 <UART_SetConfig+0x330>)
 80024b0:	18c2      	adds	r2, r0, r3
 80024b2:	4b60      	ldr	r3, [pc, #384]	; (8002634 <UART_SetConfig+0x334>)
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8cd      	bhi.n	8002454 <UART_SetConfig+0x154>
          huart->Instance->BRR = usartdiv;
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	003d      	movs	r5, r7
 80024bc:	60d8      	str	r0, [r3, #12]
 80024be:	e7d9      	b.n	8002474 <UART_SetConfig+0x174>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80024c0:	f7fe ff00 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
        break;
 80024c4:	e7d3      	b.n	800246e <UART_SetConfig+0x16e>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80024c6:	485c      	ldr	r0, [pc, #368]	; (8002638 <UART_SetConfig+0x338>)
 80024c8:	e7dd      	b.n	8002486 <UART_SetConfig+0x186>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024ca:	f7ff fbc9 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 80024ce:	e064      	b.n	800259a <UART_SetConfig+0x29a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024d0:	2510      	movs	r5, #16
 80024d2:	4b4f      	ldr	r3, [pc, #316]	; (8002610 <UART_SetConfig+0x310>)
 80024d4:	6861      	ldr	r1, [r4, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80024d8:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024da:	4015      	ands	r5, r2
 80024dc:	d006      	beq.n	80024ec <UART_SetConfig+0x1ec>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80024de:	4b57      	ldr	r3, [pc, #348]	; (800263c <UART_SetConfig+0x33c>)
 80024e0:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80024e2:	f7fd fe37 	bl	8000154 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80024e6:	2500      	movs	r5, #0
 80024e8:	b283      	uxth	r3, r0
        break;
 80024ea:	e004      	b.n	80024f6 <UART_SetConfig+0x1f6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80024ec:	4b54      	ldr	r3, [pc, #336]	; (8002640 <UART_SetConfig+0x340>)
 80024ee:	18c0      	adds	r0, r0, r3
 80024f0:	f7fd fe30 	bl	8000154 <__udivsi3>
 80024f4:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024f6:	0019      	movs	r1, r3
 80024f8:	4852      	ldr	r0, [pc, #328]	; (8002644 <UART_SetConfig+0x344>)
 80024fa:	3910      	subs	r1, #16
 80024fc:	4281      	cmp	r1, r0
 80024fe:	d8a9      	bhi.n	8002454 <UART_SetConfig+0x154>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002500:	210f      	movs	r1, #15
 8002502:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002504:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002506:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002508:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800250a:	6821      	ldr	r1, [r4, #0]
 800250c:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 800250e:	60cb      	str	r3, [r1, #12]
 8002510:	e7b0      	b.n	8002474 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002512:	f7fe fed7 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 8002516:	e040      	b.n	800259a <UART_SetConfig+0x29a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002518:	6863      	ldr	r3, [r4, #4]
 800251a:	0858      	lsrs	r0, r3, #1
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	025b      	lsls	r3, r3, #9
 8002520:	e03e      	b.n	80025a0 <UART_SetConfig+0x2a0>
  uint32_t usartdiv                   = 0x00000000U;
 8002522:	2300      	movs	r3, #0
 8002524:	e7e7      	b.n	80024f6 <UART_SetConfig+0x1f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002526:	f7ff fb8b 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800252a:	6863      	ldr	r3, [r4, #4]
 800252c:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800252e:	18c0      	adds	r0, r0, r3
 8002530:	6861      	ldr	r1, [r4, #4]
 8002532:	e00b      	b.n	800254c <UART_SetConfig+0x24c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002534:	f7ff fb94 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 8002538:	e7f7      	b.n	800252a <UART_SetConfig+0x22a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800253a:	2510      	movs	r5, #16
 800253c:	4b34      	ldr	r3, [pc, #208]	; (8002610 <UART_SetConfig+0x310>)
 800253e:	6861      	ldr	r1, [r4, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002542:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002544:	4015      	ands	r5, r2
 8002546:	d006      	beq.n	8002556 <UART_SetConfig+0x256>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <UART_SetConfig+0x2c4>)
 800254a:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800254c:	f7fd fe02 	bl	8000154 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002550:	2500      	movs	r5, #0
 8002552:	b283      	uxth	r3, r0
        break;
 8002554:	e004      	b.n	8002560 <UART_SetConfig+0x260>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <UART_SetConfig+0x338>)
 8002558:	18c0      	adds	r0, r0, r3
 800255a:	f7fd fdfb 	bl	8000154 <__udivsi3>
 800255e:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002560:	0019      	movs	r1, r3
 8002562:	4838      	ldr	r0, [pc, #224]	; (8002644 <UART_SetConfig+0x344>)
 8002564:	3910      	subs	r1, #16
 8002566:	4281      	cmp	r1, r0
 8002568:	d900      	bls.n	800256c <UART_SetConfig+0x26c>
 800256a:	e773      	b.n	8002454 <UART_SetConfig+0x154>
      huart->Instance->BRR = usartdiv;
 800256c:	6821      	ldr	r1, [r4, #0]
 800256e:	e7ce      	b.n	800250e <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002570:	f7fe fea8 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 8002574:	e7d9      	b.n	800252a <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	0858      	lsrs	r0, r3, #1
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	e7d6      	b.n	800252e <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002580:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 8002582:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	4299      	cmp	r1, r3
 8002588:	d0cb      	beq.n	8002522 <UART_SetConfig+0x222>
  uint32_t usartdiv                   = 0x00000000U;
 800258a:	2300      	movs	r3, #0
 800258c:	e7e8      	b.n	8002560 <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	4299      	cmp	r1, r3
 8002594:	d1c7      	bne.n	8002526 <UART_SetConfig+0x226>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002596:	f7ff fb53 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800259a:	6863      	ldr	r3, [r4, #4]
 800259c:	0040      	lsls	r0, r0, #1
 800259e:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025a0:	18c0      	adds	r0, r0, r3
 80025a2:	6861      	ldr	r1, [r4, #4]
 80025a4:	e79d      	b.n	80024e2 <UART_SetConfig+0x1e2>
    switch (clocksource)
 80025a6:	2808      	cmp	r0, #8
 80025a8:	d900      	bls.n	80025ac <UART_SetConfig+0x2ac>
 80025aa:	e753      	b.n	8002454 <UART_SetConfig+0x154>
 80025ac:	f7fd fdc8 	bl	8000140 <__gnu_thumb1_case_shi>
 80025b0:	ff8dfff3 	.word	0xff8dfff3
 80025b4:	ff52ff90 	.word	0xff52ff90
 80025b8:	ff52ffb1 	.word	0xff52ffb1
 80025bc:	ff52ff52 	.word	0xff52ff52
 80025c0:	ffb4      	.short	0xffb4
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	003d0900 	.word	0x003d0900
 80025c8:	00000ac8 	.word	0x00000ac8
 80025cc:	08003c5e 	.word	0x08003c5e
 80025d0:	ffffefff 	.word	0xffffefff
 80025d4:	00000ac9 	.word	0x00000ac9
 80025d8:	40004800 	.word	0x40004800
 80025dc:	ffffcfff 	.word	0xffffcfff
 80025e0:	ffffdfff 	.word	0xffffdfff
 80025e4:	00000acc 	.word	0x00000acc
 80025e8:	fffffbff 	.word	0xfffffbff
 80025ec:	00000ad4 	.word	0x00000ad4
 80025f0:	00000ad5 	.word	0x00000ad5
 80025f4:	fffffcff 	.word	0xfffffcff
 80025f8:	00000ad6 	.word	0x00000ad6
 80025fc:	ffff7fff 	.word	0xffff7fff
 8002600:	00000ad7 	.word	0x00000ad7
 8002604:	efff69f3 	.word	0xefff69f3
 8002608:	fffff4ff 	.word	0xfffff4ff
 800260c:	40013800 	.word	0x40013800
 8002610:	40021000 	.word	0x40021000
 8002614:	08003c4d 	.word	0x08003c4d
 8002618:	fffff7ff 	.word	0xfffff7ff
 800261c:	00000ad1 	.word	0x00000ad1
 8002620:	40004400 	.word	0x40004400
 8002624:	08003c51 	.word	0x08003c51
 8002628:	40004c00 	.word	0x40004c00
 800262c:	40005000 	.word	0x40005000
 8002630:	fffffd00 	.word	0xfffffd00
 8002634:	000ffcff 	.word	0x000ffcff
 8002638:	00f42400 	.word	0x00f42400
 800263c:	007a1200 	.word	0x007a1200
 8002640:	01e84800 	.word	0x01e84800
 8002644:	0000ffef 	.word	0x0000ffef

08002648 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8002648:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800264a:	b570      	push	{r4, r5, r6, lr}
 800264c:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d903      	bls.n	800265a <UART_AdvFeatureConfig+0x12>
 8002652:	4955      	ldr	r1, [pc, #340]	; (80027a8 <UART_AdvFeatureConfig+0x160>)
 8002654:	4855      	ldr	r0, [pc, #340]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 8002656:	f000 fd2f 	bl	80030b8 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800265a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800265c:	07db      	lsls	r3, r3, #31
 800265e:	d50d      	bpl.n	800267c <UART_AdvFeatureConfig+0x34>
 8002660:	4d53      	ldr	r5, [pc, #332]	; (80027b0 <UART_AdvFeatureConfig+0x168>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8002662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002664:	422b      	tst	r3, r5
 8002666:	d003      	beq.n	8002670 <UART_AdvFeatureConfig+0x28>
 8002668:	4952      	ldr	r1, [pc, #328]	; (80027b4 <UART_AdvFeatureConfig+0x16c>)
 800266a:	4850      	ldr	r0, [pc, #320]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 800266c:	f000 fd24 	bl	80030b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002670:	6822      	ldr	r2, [r4, #0]
 8002672:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002674:	6853      	ldr	r3, [r2, #4]
 8002676:	402b      	ands	r3, r5
 8002678:	430b      	orrs	r3, r1
 800267a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800267c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800267e:	079b      	lsls	r3, r3, #30
 8002680:	d50d      	bpl.n	800269e <UART_AdvFeatureConfig+0x56>
 8002682:	4d4d      	ldr	r5, [pc, #308]	; (80027b8 <UART_AdvFeatureConfig+0x170>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8002684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002686:	422b      	tst	r3, r5
 8002688:	d003      	beq.n	8002692 <UART_AdvFeatureConfig+0x4a>
 800268a:	494c      	ldr	r1, [pc, #304]	; (80027bc <UART_AdvFeatureConfig+0x174>)
 800268c:	4847      	ldr	r0, [pc, #284]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 800268e:	f000 fd13 	bl	80030b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002696:	6853      	ldr	r3, [r2, #4]
 8002698:	402b      	ands	r3, r5
 800269a:	430b      	orrs	r3, r1
 800269c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800269e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026a0:	075b      	lsls	r3, r3, #29
 80026a2:	d50d      	bpl.n	80026c0 <UART_AdvFeatureConfig+0x78>
 80026a4:	4d46      	ldr	r5, [pc, #280]	; (80027c0 <UART_AdvFeatureConfig+0x178>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80026a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026a8:	422b      	tst	r3, r5
 80026aa:	d003      	beq.n	80026b4 <UART_AdvFeatureConfig+0x6c>
 80026ac:	4945      	ldr	r1, [pc, #276]	; (80027c4 <UART_AdvFeatureConfig+0x17c>)
 80026ae:	483f      	ldr	r0, [pc, #252]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 80026b0:	f000 fd02 	bl	80030b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80026b8:	6853      	ldr	r3, [r2, #4]
 80026ba:	402b      	ands	r3, r5
 80026bc:	430b      	orrs	r3, r1
 80026be:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026c2:	071b      	lsls	r3, r3, #28
 80026c4:	d50d      	bpl.n	80026e2 <UART_AdvFeatureConfig+0x9a>
 80026c6:	4d40      	ldr	r5, [pc, #256]	; (80027c8 <UART_AdvFeatureConfig+0x180>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80026c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026ca:	422b      	tst	r3, r5
 80026cc:	d003      	beq.n	80026d6 <UART_AdvFeatureConfig+0x8e>
 80026ce:	493f      	ldr	r1, [pc, #252]	; (80027cc <UART_AdvFeatureConfig+0x184>)
 80026d0:	4836      	ldr	r0, [pc, #216]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 80026d2:	f000 fcf1 	bl	80030b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026da:	6853      	ldr	r3, [r2, #4]
 80026dc:	402b      	ands	r3, r5
 80026de:	430b      	orrs	r3, r1
 80026e0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e4:	06db      	lsls	r3, r3, #27
 80026e6:	d50d      	bpl.n	8002704 <UART_AdvFeatureConfig+0xbc>
 80026e8:	4d39      	ldr	r5, [pc, #228]	; (80027d0 <UART_AdvFeatureConfig+0x188>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80026ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ec:	422b      	tst	r3, r5
 80026ee:	d003      	beq.n	80026f8 <UART_AdvFeatureConfig+0xb0>
 80026f0:	4938      	ldr	r1, [pc, #224]	; (80027d4 <UART_AdvFeatureConfig+0x18c>)
 80026f2:	482e      	ldr	r0, [pc, #184]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 80026f4:	f000 fce0 	bl	80030b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026fc:	6893      	ldr	r3, [r2, #8]
 80026fe:	402b      	ands	r3, r5
 8002700:	430b      	orrs	r3, r1
 8002702:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002706:	069b      	lsls	r3, r3, #26
 8002708:	d50d      	bpl.n	8002726 <UART_AdvFeatureConfig+0xde>
 800270a:	4d33      	ldr	r5, [pc, #204]	; (80027d8 <UART_AdvFeatureConfig+0x190>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800270c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800270e:	422b      	tst	r3, r5
 8002710:	d003      	beq.n	800271a <UART_AdvFeatureConfig+0xd2>
 8002712:	4932      	ldr	r1, [pc, #200]	; (80027dc <UART_AdvFeatureConfig+0x194>)
 8002714:	4825      	ldr	r0, [pc, #148]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 8002716:	f000 fccf 	bl	80030b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800271e:	6893      	ldr	r3, [r2, #8]
 8002720:	402b      	ands	r3, r5
 8002722:	430b      	orrs	r3, r1
 8002724:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002728:	065b      	lsls	r3, r3, #25
 800272a:	d52a      	bpl.n	8002782 <UART_AdvFeatureConfig+0x13a>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	4a2c      	ldr	r2, [pc, #176]	; (80027e0 <UART_AdvFeatureConfig+0x198>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d006      	beq.n	8002742 <UART_AdvFeatureConfig+0xfa>
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <UART_AdvFeatureConfig+0x19c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d003      	beq.n	8002742 <UART_AdvFeatureConfig+0xfa>
 800273a:	492b      	ldr	r1, [pc, #172]	; (80027e8 <UART_AdvFeatureConfig+0x1a0>)
 800273c:	481b      	ldr	r0, [pc, #108]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 800273e:	f000 fcbb 	bl	80030b8 <assert_failed>
 8002742:	4d2a      	ldr	r5, [pc, #168]	; (80027ec <UART_AdvFeatureConfig+0x1a4>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8002744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002746:	422b      	tst	r3, r5
 8002748:	d003      	beq.n	8002752 <UART_AdvFeatureConfig+0x10a>
 800274a:	4929      	ldr	r1, [pc, #164]	; (80027f0 <UART_AdvFeatureConfig+0x1a8>)
 800274c:	4817      	ldr	r0, [pc, #92]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 800274e:	f000 fcb3 	bl	80030b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002752:	6821      	ldr	r1, [r4, #0]
 8002754:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002756:	684b      	ldr	r3, [r1, #4]
 8002758:	402b      	ands	r3, r5
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	035b      	lsls	r3, r3, #13
 8002762:	429a      	cmp	r2, r3
 8002764:	d10d      	bne.n	8002782 <UART_AdvFeatureConfig+0x13a>
 8002766:	4d23      	ldr	r5, [pc, #140]	; (80027f4 <UART_AdvFeatureConfig+0x1ac>)
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8002768:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800276a:	422b      	tst	r3, r5
 800276c:	d003      	beq.n	8002776 <UART_AdvFeatureConfig+0x12e>
 800276e:	4922      	ldr	r1, [pc, #136]	; (80027f8 <UART_AdvFeatureConfig+0x1b0>)
 8002770:	480e      	ldr	r0, [pc, #56]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 8002772:	f000 fca1 	bl	80030b8 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800277a:	6853      	ldr	r3, [r2, #4]
 800277c:	402b      	ands	r3, r5
 800277e:	430b      	orrs	r3, r1
 8002780:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	d50d      	bpl.n	80027a4 <UART_AdvFeatureConfig+0x15c>
 8002788:	4d1c      	ldr	r5, [pc, #112]	; (80027fc <UART_AdvFeatureConfig+0x1b4>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800278a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800278c:	422b      	tst	r3, r5
 800278e:	d003      	beq.n	8002798 <UART_AdvFeatureConfig+0x150>
 8002790:	491b      	ldr	r1, [pc, #108]	; (8002800 <UART_AdvFeatureConfig+0x1b8>)
 8002792:	4806      	ldr	r0, [pc, #24]	; (80027ac <UART_AdvFeatureConfig+0x164>)
 8002794:	f000 fc90 	bl	80030b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800279c:	6853      	ldr	r3, [r2, #4]
 800279e:	402b      	ands	r3, r5
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6053      	str	r3, [r2, #4]
}
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	00000b9a 	.word	0x00000b9a
 80027ac:	08003c5e 	.word	0x08003c5e
 80027b0:	fffdffff 	.word	0xfffdffff
 80027b4:	00000b9f 	.word	0x00000b9f
 80027b8:	fffeffff 	.word	0xfffeffff
 80027bc:	00000ba6 	.word	0x00000ba6
 80027c0:	fffbffff 	.word	0xfffbffff
 80027c4:	00000bad 	.word	0x00000bad
 80027c8:	ffff7fff 	.word	0xffff7fff
 80027cc:	00000bb4 	.word	0x00000bb4
 80027d0:	ffffefff 	.word	0xffffefff
 80027d4:	00000bbb 	.word	0x00000bbb
 80027d8:	ffffdfff 	.word	0xffffdfff
 80027dc:	00000bc2 	.word	0x00000bc2
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40004400 	.word	0x40004400
 80027e8:	00000bc9 	.word	0x00000bc9
 80027ec:	ffefffff 	.word	0xffefffff
 80027f0:	00000bca 	.word	0x00000bca
 80027f4:	ff9fffff 	.word	0xff9fffff
 80027f8:	00000bcf 	.word	0x00000bcf
 80027fc:	fff7ffff 	.word	0xfff7ffff
 8002800:	00000bd7 	.word	0x00000bd7

08002804 <UART_WaitOnFlagUntilTimeout>:
{
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	0004      	movs	r4, r0
 8002808:	000e      	movs	r6, r1
 800280a:	0015      	movs	r5, r2
 800280c:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	69d3      	ldr	r3, [r2, #28]
 8002812:	4033      	ands	r3, r6
 8002814:	1b9b      	subs	r3, r3, r6
 8002816:	4259      	negs	r1, r3
 8002818:	414b      	adcs	r3, r1
 800281a:	42ab      	cmp	r3, r5
 800281c:	d001      	beq.n	8002822 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800281e:	2000      	movs	r0, #0
 8002820:	e01b      	b.n	800285a <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8002822:	9b06      	ldr	r3, [sp, #24]
 8002824:	3301      	adds	r3, #1
 8002826:	d0f3      	beq.n	8002810 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002828:	f7fd ff48 	bl	80006bc <HAL_GetTick>
 800282c:	9b06      	ldr	r3, [sp, #24]
 800282e:	1bc0      	subs	r0, r0, r7
 8002830:	4283      	cmp	r3, r0
 8002832:	d301      	bcc.n	8002838 <UART_WaitOnFlagUntilTimeout+0x34>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ea      	bne.n	800280e <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	4908      	ldr	r1, [pc, #32]	; (800285c <UART_WaitOnFlagUntilTimeout+0x58>)
 800283c:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800283e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002840:	400a      	ands	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	31a3      	adds	r1, #163	; 0xa3
 8002848:	31ff      	adds	r1, #255	; 0xff
 800284a:	438a      	bics	r2, r1
 800284c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800284e:	2320      	movs	r3, #32
 8002850:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002852:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002854:	2300      	movs	r3, #0
 8002856:	3470      	adds	r4, #112	; 0x70
 8002858:	7023      	strb	r3, [r4, #0]
}
 800285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800285c:	fffffe5f 	.word	0xfffffe5f

08002860 <HAL_UART_Transmit>:
{
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	b087      	sub	sp, #28
 8002864:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002866:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002868:	0004      	movs	r4, r0
 800286a:	000d      	movs	r5, r1
 800286c:	0017      	movs	r7, r2
    return HAL_BUSY;
 800286e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002870:	2b20      	cmp	r3, #32
 8002872:	d149      	bne.n	8002908 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002874:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002876:	2900      	cmp	r1, #0
 8002878:	d046      	beq.n	8002908 <HAL_UART_Transmit+0xa8>
 800287a:	2a00      	cmp	r2, #0
 800287c:	d044      	beq.n	8002908 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	68a2      	ldr	r2, [r4, #8]
 8002882:	015b      	lsls	r3, r3, #5
 8002884:	429a      	cmp	r2, r3
 8002886:	d104      	bne.n	8002892 <HAL_UART_Transmit+0x32>
 8002888:	6923      	ldr	r3, [r4, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 800288e:	4201      	tst	r1, r0
 8002890:	d13a      	bne.n	8002908 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8002892:	0023      	movs	r3, r4
 8002894:	3370      	adds	r3, #112	; 0x70
 8002896:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002898:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800289a:	2a01      	cmp	r2, #1
 800289c:	d034      	beq.n	8002908 <HAL_UART_Transmit+0xa8>
 800289e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80028a2:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a6:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a8:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80028aa:	f7fd ff07 	bl	80006bc <HAL_GetTick>
    huart->TxXferSize  = Size;
 80028ae:	0023      	movs	r3, r4
 80028b0:	3350      	adds	r3, #80	; 0x50
 80028b2:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80028b4:	3302      	adds	r3, #2
 80028b6:	9303      	str	r3, [sp, #12]
 80028b8:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80028be:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c0:	015b      	lsls	r3, r3, #5
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d104      	bne.n	80028d0 <HAL_UART_Transmit+0x70>
 80028c6:	6923      	ldr	r3, [r4, #16]
 80028c8:	42b3      	cmp	r3, r6
 80028ca:	d101      	bne.n	80028d0 <HAL_UART_Transmit+0x70>
 80028cc:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80028ce:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80028d0:	0023      	movs	r3, r4
 80028d2:	3352      	adds	r3, #82	; 0x52
 80028d4:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d6:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80028d8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	0020      	movs	r0, r4
 80028e6:	f7ff ff8d 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d10b      	bne.n	8002906 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80028ee:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80028f0:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80028f2:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80028f4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80028f6:	e007      	b.n	8002908 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f8:	2200      	movs	r2, #0
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	0020      	movs	r0, r4
 80028fe:	f7ff ff81 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 8002902:	2800      	cmp	r0, #0
 8002904:	d002      	beq.n	800290c <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8002906:	2003      	movs	r0, #3
}
 8002908:	b007      	add	sp, #28
 800290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800290e:	2d00      	cmp	r5, #0
 8002910:	d10b      	bne.n	800292a <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002912:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002914:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002916:	05db      	lsls	r3, r3, #23
 8002918:	0ddb      	lsrs	r3, r3, #23
 800291a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800291c:	9b03      	ldr	r3, [sp, #12]
 800291e:	9a03      	ldr	r2, [sp, #12]
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	3b01      	subs	r3, #1
 8002924:	b29b      	uxth	r3, r3
 8002926:	8013      	strh	r3, [r2, #0]
 8002928:	e7d2      	b.n	80028d0 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800292a:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800292c:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800292e:	6293      	str	r3, [r2, #40]	; 0x28
 8002930:	e7f4      	b.n	800291c <HAL_UART_Transmit+0xbc>
	...

08002934 <HAL_UART_Receive>:
{
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002936:	b087      	sub	sp, #28
 8002938:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 800293a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800293c:	0004      	movs	r4, r0
 800293e:	000d      	movs	r5, r1
 8002940:	0016      	movs	r6, r2
    return HAL_BUSY;
 8002942:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002944:	2b20      	cmp	r3, #32
 8002946:	d143      	bne.n	80029d0 <HAL_UART_Receive+0x9c>
      return  HAL_ERROR;
 8002948:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800294a:	2900      	cmp	r1, #0
 800294c:	d040      	beq.n	80029d0 <HAL_UART_Receive+0x9c>
 800294e:	2a00      	cmp	r2, #0
 8002950:	d03e      	beq.n	80029d0 <HAL_UART_Receive+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	68a2      	ldr	r2, [r4, #8]
 8002956:	015b      	lsls	r3, r3, #5
 8002958:	429a      	cmp	r2, r3
 800295a:	d104      	bne.n	8002966 <HAL_UART_Receive+0x32>
 800295c:	6923      	ldr	r3, [r4, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8002962:	4201      	tst	r1, r0
 8002964:	d134      	bne.n	80029d0 <HAL_UART_Receive+0x9c>
    __HAL_LOCK(huart);
 8002966:	0023      	movs	r3, r4
 8002968:	3370      	adds	r3, #112	; 0x70
 800296a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800296c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800296e:	2a01      	cmp	r2, #1
 8002970:	d02e      	beq.n	80029d0 <HAL_UART_Receive+0x9c>
 8002972:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002974:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8002976:	701a      	strb	r2, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002978:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297a:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800297c:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 800297e:	f7fd fe9d 	bl	80006bc <HAL_GetTick>
    huart->RxXferSize  = Size;
 8002982:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8002984:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 8002986:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002988:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 800298a:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 800298c:	3302      	adds	r3, #2
 800298e:	9303      	str	r3, [sp, #12]
 8002990:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002992:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8002994:	0149      	lsls	r1, r1, #5
 8002996:	3302      	adds	r3, #2
 8002998:	428a      	cmp	r2, r1
 800299a:	d11d      	bne.n	80029d8 <HAL_UART_Receive+0xa4>
 800299c:	6921      	ldr	r1, [r4, #16]
 800299e:	42b9      	cmp	r1, r7
 80029a0:	d118      	bne.n	80029d4 <HAL_UART_Receive+0xa0>
 80029a2:	4925      	ldr	r1, [pc, #148]	; (8002a38 <HAL_UART_Receive+0x104>)
 80029a4:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 80029a6:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a8:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80029aa:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ac:	015b      	lsls	r3, r3, #5
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d104      	bne.n	80029bc <HAL_UART_Receive+0x88>
 80029b2:	6923      	ldr	r3, [r4, #16]
 80029b4:	42b3      	cmp	r3, r6
 80029b6:	d101      	bne.n	80029bc <HAL_UART_Receive+0x88>
 80029b8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80029ba:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 80029bc:	0023      	movs	r3, r4
 80029be:	335a      	adds	r3, #90	; 0x5a
 80029c0:	8818      	ldrh	r0, [r3, #0]
 80029c2:	b280      	uxth	r0, r0
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d119      	bne.n	80029fc <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 80029c8:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80029ca:	3470      	adds	r4, #112	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 80029cc:	60a3      	str	r3, [r4, #8]
    __HAL_UNLOCK(huart);
 80029ce:	7020      	strb	r0, [r4, #0]
}
 80029d0:	b007      	add	sp, #28
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80029d4:	21ff      	movs	r1, #255	; 0xff
 80029d6:	e7e5      	b.n	80029a4 <HAL_UART_Receive+0x70>
 80029d8:	2a00      	cmp	r2, #0
 80029da:	d104      	bne.n	80029e6 <HAL_UART_Receive+0xb2>
 80029dc:	6921      	ldr	r1, [r4, #16]
 80029de:	2900      	cmp	r1, #0
 80029e0:	d0f8      	beq.n	80029d4 <HAL_UART_Receive+0xa0>
 80029e2:	217f      	movs	r1, #127	; 0x7f
 80029e4:	e7de      	b.n	80029a4 <HAL_UART_Receive+0x70>
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	0549      	lsls	r1, r1, #21
 80029ea:	428a      	cmp	r2, r1
 80029ec:	d104      	bne.n	80029f8 <HAL_UART_Receive+0xc4>
 80029ee:	6921      	ldr	r1, [r4, #16]
 80029f0:	2900      	cmp	r1, #0
 80029f2:	d0f6      	beq.n	80029e2 <HAL_UART_Receive+0xae>
 80029f4:	213f      	movs	r1, #63	; 0x3f
 80029f6:	e7d5      	b.n	80029a4 <HAL_UART_Receive+0x70>
 80029f8:	801f      	strh	r7, [r3, #0]
 80029fa:	e7d4      	b.n	80029a6 <HAL_UART_Receive+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029fc:	9b05      	ldr	r3, [sp, #20]
 80029fe:	2200      	movs	r2, #0
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2120      	movs	r1, #32
 8002a04:	9b04      	ldr	r3, [sp, #16]
 8002a06:	0020      	movs	r0, r4
 8002a08:	f7ff fefc 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d110      	bne.n	8002a32 <HAL_UART_Receive+0xfe>
 8002a10:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8002a16:	2d00      	cmp	r5, #0
 8002a18:	d108      	bne.n	8002a2c <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a1a:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8002a1c:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8002a1e:	9b03      	ldr	r3, [sp, #12]
 8002a20:	9a03      	ldr	r2, [sp, #12]
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	8013      	strh	r3, [r2, #0]
 8002a2a:	e7c7      	b.n	80029bc <HAL_UART_Receive+0x88>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a2c:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8002a2e:	3501      	adds	r5, #1
 8002a30:	e7f5      	b.n	8002a1e <HAL_UART_Receive+0xea>
        return HAL_TIMEOUT;
 8002a32:	2003      	movs	r0, #3
 8002a34:	e7cc      	b.n	80029d0 <HAL_UART_Receive+0x9c>
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	000001ff 	.word	0x000001ff

08002a3c <UART_CheckIdleState>:
{
 8002a3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3e:	2600      	movs	r6, #0
{
 8002a40:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002a44:	f7fd fe3a 	bl	80006bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a48:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002a4a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	071b      	lsls	r3, r3, #28
 8002a50:	d415      	bmi.n	8002a7e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	075b      	lsls	r3, r3, #29
 8002a58:	d50a      	bpl.n	8002a70 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <UART_CheckIdleState+0x5c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	03c9      	lsls	r1, r1, #15
 8002a64:	002b      	movs	r3, r5
 8002a66:	0020      	movs	r0, r4
 8002a68:	f7ff fecc 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d111      	bne.n	8002a94 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002a70:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002a72:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002a74:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002a76:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002a78:	3470      	adds	r4, #112	; 0x70
 8002a7a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002a7c:	e00b      	b.n	8002a96 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <UART_CheckIdleState+0x5c>)
 8002a82:	0032      	movs	r2, r6
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	0389      	lsls	r1, r1, #14
 8002a88:	0003      	movs	r3, r0
 8002a8a:	0020      	movs	r0, r4
 8002a8c:	f7ff feba 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d0de      	beq.n	8002a52 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002a94:	2003      	movs	r0, #3
}
 8002a96:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002a98:	01ffffff 	.word	0x01ffffff

08002a9c <HAL_UART_Init>:
{
 8002a9c:	b510      	push	{r4, lr}
 8002a9e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002aa2:	2001      	movs	r0, #1
}
 8002aa4:	bd10      	pop	{r4, pc}
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002aa6:	6981      	ldr	r1, [r0, #24]
 8002aa8:	6803      	ldr	r3, [r0, #0]
 8002aaa:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <HAL_UART_Init+0xb4>)
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d03e      	beq.n	8002b2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d010      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002ab4:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <HAL_UART_Init+0xb8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002aba:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <HAL_UART_Init+0xbc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00a      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002ac0:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <HAL_UART_Init+0xc0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002ac6:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_UART_Init+0xc4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002acc:	2130      	movs	r1, #48	; 0x30
 8002ace:	31ff      	adds	r1, #255	; 0xff
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8002ad0:	4824      	ldr	r0, [pc, #144]	; (8002b64 <HAL_UART_Init+0xc8>)
 8002ad2:	f000 faf1 	bl	80030b8 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <HAL_UART_Init+0x4c>
    huart->Lock = HAL_UNLOCKED;
 8002adc:	0022      	movs	r2, r4
 8002ade:	3270      	adds	r2, #112	; 0x70
 8002ae0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002ae2:	0020      	movs	r0, r4
 8002ae4:	f000 fd78 	bl	80035d8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002aea:	2101      	movs	r1, #1
 8002aec:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002aee:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002af0:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002af2:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002af4:	438b      	bics	r3, r1
 8002af6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002af8:	f7ff fc02 	bl	8002300 <UART_SetConfig>
 8002afc:	2801      	cmp	r0, #1
 8002afe:	d0d0      	beq.n	8002aa2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_UART_Init+0x70>
    UART_AdvFeatureConfig(huart);
 8002b06:	0020      	movs	r0, r4
 8002b08:	f7ff fd9e 	bl	8002648 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	4916      	ldr	r1, [pc, #88]	; (8002b68 <HAL_UART_Init+0xcc>)
 8002b10:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002b12:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b14:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b16:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	438a      	bics	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002b20:	2201      	movs	r2, #1
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002b28:	f7ff ff88 	bl	8002a3c <UART_CheckIdleState>
 8002b2c:	e7ba      	b.n	8002aa4 <HAL_UART_Init+0x8>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d0d1      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_UART_Init+0xb8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d0ce      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_UART_Init+0xbc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d0cb      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_UART_Init+0xc0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d0c8      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <HAL_UART_Init+0xc4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d0c5      	beq.n	8002ad6 <HAL_UART_Init+0x3a>
 8002b4a:	219a      	movs	r1, #154	; 0x9a
 8002b4c:	0049      	lsls	r1, r1, #1
 8002b4e:	e7bf      	b.n	8002ad0 <HAL_UART_Init+0x34>
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40004400 	.word	0x40004400
 8002b58:	40004c00 	.word	0x40004c00
 8002b5c:	40005000 	.word	0x40005000
 8002b60:	40004800 	.word	0x40004800
 8002b64:	08003c5e 	.word	0x08003c5e
 8002b68:	ffffb7ff 	.word	0xffffb7ff

08002b6c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002b6c:	4770      	bx	lr
	...

08002b70 <decHex>:
		len--;
	}
	return decimal;
}

void decHex(int number, char buff[7]) {
 8002b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b72:	000d      	movs	r5, r1
 8002b74:	0004      	movs	r4, r0

	char hex[7]; /*bcoz it contains characters A to F*/
	memset(buff, 0x00, 7);//sizeof(buff));
 8002b76:	2207      	movs	r2, #7
 8002b78:	2100      	movs	r1, #0
 8002b7a:	0028      	movs	r0, r5
 8002b7c:	f000 fea7 	bl	80038ce <memset>
	memset(hex, 0x00, 7);//sizeof(buff));
 8002b80:	2207      	movs	r2, #7
 8002b82:	2100      	movs	r1, #0
 8002b84:	4668      	mov	r0, sp
 8002b86:	f000 fea2 	bl	80038ce <memset>
	int cnt, i;
	cnt = 0; /*initialize index to zero*/
	if (number == 0) {
 8002b8a:	2c00      	cmp	r4, #0
 8002b8c:	d015      	beq.n	8002bba <decHex+0x4a>
 8002b8e:	0023      	movs	r3, r4
			break;
		case 14:
			hex[cnt] = 'E';
			break;
		case 15:
			hex[cnt] = 'F';
 8002b90:	2146      	movs	r1, #70	; 0x46
	if (number == 0) {
 8002b92:	2400      	movs	r4, #0
			hex[cnt] = 'E';
 8002b94:	2645      	movs	r6, #69	; 0x45
			hex[cnt] = 'D';
 8002b96:	2744      	movs	r7, #68	; 0x44
	while (number > 0) {
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	dd12      	ble.n	8002bc2 <decHex+0x52>
		switch (number % 16) {
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	4010      	ands	r0, r2
 8002ba2:	3a19      	subs	r2, #25
 8002ba4:	4694      	mov	ip, r2
 8002ba6:	4484      	add	ip, r0
 8002ba8:	4662      	mov	r2, ip
 8002baa:	2a05      	cmp	r2, #5
 8002bac:	d820      	bhi.n	8002bf0 <decHex+0x80>
 8002bae:	4660      	mov	r0, ip
 8002bb0:	f7fd fabc 	bl	800012c <__gnu_thumb1_case_uqi>
 8002bb4:	13110f0b 	.word	0x13110f0b
 8002bb8:	1b18      	.short	0x1b18
		strcpy(buff, "0");
 8002bba:	4911      	ldr	r1, [pc, #68]	; (8002c00 <decHex+0x90>)
 8002bbc:	0028      	movs	r0, r5
 8002bbe:	f000 fe9b 	bl	80038f8 <strcpy>
			hex[cnt] = (number % 16) + 0x30; /*converted into char value*/
		}
		number = number / 16;
		cnt++;
	}
	for (i = (cnt - 1); i >= 0; i--) {
 8002bc2:	3c01      	subs	r4, #1
 8002bc4:	1c63      	adds	r3, r4, #1
 8002bc6:	d115      	bne.n	8002bf4 <decHex+0x84>
		int j = cnt - 1 - i;
		buff[j] = hex[i];
	}
}
 8002bc8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			hex[cnt] = 'A';
 8002bca:	2041      	movs	r0, #65	; 0x41
			hex[cnt] = (number % 16) + 0x30; /*converted into char value*/
 8002bcc:	466a      	mov	r2, sp
 8002bce:	5510      	strb	r0, [r2, r4]
 8002bd0:	e005      	b.n	8002bde <decHex+0x6e>
			hex[cnt] = 'B';
 8002bd2:	2042      	movs	r0, #66	; 0x42
 8002bd4:	e7fa      	b.n	8002bcc <decHex+0x5c>
			hex[cnt] = 'C';
 8002bd6:	2043      	movs	r0, #67	; 0x43
 8002bd8:	e7f8      	b.n	8002bcc <decHex+0x5c>
			hex[cnt] = 'D';
 8002bda:	466a      	mov	r2, sp
 8002bdc:	5517      	strb	r7, [r2, r4]
		number = number / 16;
 8002bde:	111b      	asrs	r3, r3, #4
		cnt++;
 8002be0:	3401      	adds	r4, #1
 8002be2:	e7d9      	b.n	8002b98 <decHex+0x28>
			hex[cnt] = 'E';
 8002be4:	466a      	mov	r2, sp
 8002be6:	5516      	strb	r6, [r2, r4]
			break;
 8002be8:	e7f9      	b.n	8002bde <decHex+0x6e>
			hex[cnt] = 'F';
 8002bea:	466a      	mov	r2, sp
 8002bec:	5511      	strb	r1, [r2, r4]
			break;
 8002bee:	e7f6      	b.n	8002bde <decHex+0x6e>
			hex[cnt] = (number % 16) + 0x30; /*converted into char value*/
 8002bf0:	3030      	adds	r0, #48	; 0x30
 8002bf2:	e7eb      	b.n	8002bcc <decHex+0x5c>
		buff[j] = hex[i];
 8002bf4:	466b      	mov	r3, sp
 8002bf6:	5d1b      	ldrb	r3, [r3, r4]
	for (i = (cnt - 1); i >= 0; i--) {
 8002bf8:	3c01      	subs	r4, #1
		buff[j] = hex[i];
 8002bfa:	702b      	strb	r3, [r5, #0]
 8002bfc:	3501      	adds	r5, #1
 8002bfe:	e7e1      	b.n	8002bc4 <decHex+0x54>
 8002c00:	08003c97 	.word	0x08003c97

08002c04 <check_size_info>:
	}
	*i = 0;

}

void check_size_info(int size, char*buff) {
 8002c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c06:	000c      	movs	r4, r1
	if(size == 2){
 8002c08:	2802      	cmp	r0, #2
 8002c0a:	d10c      	bne.n	8002c26 <check_size_info+0x22>
		char dado[4] = "";
 8002c0c:	2500      	movs	r5, #0
		switch (strlen(buff)) {
 8002c0e:	0008      	movs	r0, r1
		char dado[4] = "";
 8002c10:	9500      	str	r5, [sp, #0]
		switch (strlen(buff)) {
 8002c12:	f7fd fa79 	bl	8000108 <strlen>
 8002c16:	2801      	cmp	r0, #1
 8002c18:	d052      	beq.n	8002cc0 <check_size_info+0xbc>
 8002c1a:	2802      	cmp	r0, #2
 8002c1c:	d002      	beq.n	8002c24 <check_size_info+0x20>
			strcpy(buff, dado);*/
			break;
/*		case (3):
			break;*/
		default:
			buff[0] = 48;
 8002c1e:	2330      	movs	r3, #48	; 0x30
			buff[1] = 0;
 8002c20:	7065      	strb	r5, [r4, #1]
			buff[0] = 48;
 8002c22:	7023      	strb	r3, [r4, #0]
			buff[6] = 0;
			break;
		}

		}
}
 8002c24:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		else if (size==4){
 8002c26:	2804      	cmp	r0, #4
 8002c28:	d114      	bne.n	8002c54 <check_size_info+0x50>
		char dado[5] = "";
 8002c2a:	2500      	movs	r5, #0
 8002c2c:	466b      	mov	r3, sp
		switch (strlen(buff)) {
 8002c2e:	0008      	movs	r0, r1
		char dado[5] = "";
 8002c30:	9500      	str	r5, [sp, #0]
 8002c32:	711d      	strb	r5, [r3, #4]
		switch (strlen(buff)) {
 8002c34:	f7fd fa68 	bl	8000108 <strlen>
 8002c38:	3801      	subs	r0, #1
 8002c3a:	2803      	cmp	r0, #3
 8002c3c:	d803      	bhi.n	8002c46 <check_size_info+0x42>
 8002c3e:	f7fd fa6b 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002c42:	3a34      	.short	0x3a34
 8002c44:	f13f      	.short	0xf13f
			buff[0] = 48;
 8002c46:	2330      	movs	r3, #48	; 0x30
			buff[4] = 0;
 8002c48:	7125      	strb	r5, [r4, #4]
			buff[0] = 48;
 8002c4a:	7023      	strb	r3, [r4, #0]
			buff[1] = 48;
 8002c4c:	7063      	strb	r3, [r4, #1]
			buff[2] = 48;
 8002c4e:	70a3      	strb	r3, [r4, #2]
			buff[3] = 48;
 8002c50:	70e3      	strb	r3, [r4, #3]
			break;
 8002c52:	e7e7      	b.n	8002c24 <check_size_info+0x20>
		else if (size==6){
 8002c54:	2806      	cmp	r0, #6
 8002c56:	d1e5      	bne.n	8002c24 <check_size_info+0x20>
		char dado[7] = "";
 8002c58:	2500      	movs	r5, #0
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	0029      	movs	r1, r5
 8002c5e:	a801      	add	r0, sp, #4
 8002c60:	9500      	str	r5, [sp, #0]
 8002c62:	f000 fe34 	bl	80038ce <memset>
		switch (strlen(buff)) {
 8002c66:	0020      	movs	r0, r4
 8002c68:	f7fd fa4e 	bl	8000108 <strlen>
 8002c6c:	3801      	subs	r0, #1
 8002c6e:	2805      	cmp	r0, #5
 8002c70:	d82a      	bhi.n	8002cc8 <check_size_info+0xc4>
 8002c72:	f7fd fa51 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002c76:	1303      	.short	0x1303
 8002c78:	d725201a 	.word	0xd725201a
			dado[0] = 48;
 8002c7c:	2330      	movs	r3, #48	; 0x30
 8002c7e:	466a      	mov	r2, sp
 8002c80:	7013      	strb	r3, [r2, #0]
			dado[1] = 48;
 8002c82:	7053      	strb	r3, [r2, #1]
			dado[2] = 48;
 8002c84:	7093      	strb	r3, [r2, #2]
			dado[3] = 48;
 8002c86:	70d3      	strb	r3, [r2, #3]
			dado[4] = 48;
 8002c88:	7113      	strb	r3, [r2, #4]
			strcat(dado, buff);
 8002c8a:	0021      	movs	r1, r4
 8002c8c:	4668      	mov	r0, sp
 8002c8e:	f000 fe26 	bl	80038de <strcat>
			strcpy(buff, dado);
 8002c92:	4669      	mov	r1, sp
 8002c94:	0020      	movs	r0, r4
 8002c96:	f000 fe2f 	bl	80038f8 <strcpy>
			break;
 8002c9a:	e7c3      	b.n	8002c24 <check_size_info+0x20>
			dado[0] = 48;
 8002c9c:	2330      	movs	r3, #48	; 0x30
 8002c9e:	466a      	mov	r2, sp
 8002ca0:	7013      	strb	r3, [r2, #0]
			dado[1] = 48;
 8002ca2:	7053      	strb	r3, [r2, #1]
			dado[2] = 48;
 8002ca4:	7093      	strb	r3, [r2, #2]
			dado[3] = 48;
 8002ca6:	70d3      	strb	r3, [r2, #3]
 8002ca8:	e7ef      	b.n	8002c8a <check_size_info+0x86>
			dado[0] = 48;
 8002caa:	2330      	movs	r3, #48	; 0x30
 8002cac:	466a      	mov	r2, sp
 8002cae:	7013      	strb	r3, [r2, #0]
			dado[1] = 48;
 8002cb0:	7053      	strb	r3, [r2, #1]
			dado[2] = 48;
 8002cb2:	7093      	strb	r3, [r2, #2]
 8002cb4:	e7e9      	b.n	8002c8a <check_size_info+0x86>
			dado[0] = 48;
 8002cb6:	2330      	movs	r3, #48	; 0x30
 8002cb8:	466a      	mov	r2, sp
 8002cba:	7013      	strb	r3, [r2, #0]
			dado[1] = 48;
 8002cbc:	7053      	strb	r3, [r2, #1]
 8002cbe:	e7e4      	b.n	8002c8a <check_size_info+0x86>
			dado[0] = 48;
 8002cc0:	2330      	movs	r3, #48	; 0x30
 8002cc2:	466a      	mov	r2, sp
 8002cc4:	7013      	strb	r3, [r2, #0]
 8002cc6:	e7e0      	b.n	8002c8a <check_size_info+0x86>
			buff[0] = 48;
 8002cc8:	2330      	movs	r3, #48	; 0x30
			buff[6] = 0;
 8002cca:	71a5      	strb	r5, [r4, #6]
			buff[0] = 48;
 8002ccc:	7023      	strb	r3, [r4, #0]
			buff[1] = 48;
 8002cce:	7063      	strb	r3, [r4, #1]
			buff[2] = 48;
 8002cd0:	70a3      	strb	r3, [r4, #2]
			buff[3] = 48;
 8002cd2:	70e3      	strb	r3, [r4, #3]
			buff[4] = 48;
 8002cd4:	7123      	strb	r3, [r4, #4]
			buff[5] = 48;
 8002cd6:	7163      	strb	r3, [r4, #5]
}
 8002cd8:	e7a4      	b.n	8002c24 <check_size_info+0x20>
	...

08002cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cdc:	b530      	push	{r4, r5, lr}
 8002cde:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce0:	2238      	movs	r2, #56	; 0x38
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	a80e      	add	r0, sp, #56	; 0x38
 8002ce6:	f000 fdf2 	bl	80038ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cea:	2214      	movs	r2, #20
 8002cec:	2100      	movs	r1, #0
 8002cee:	4668      	mov	r0, sp
 8002cf0:	f000 fded 	bl	80038ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf4:	2224      	movs	r2, #36	; 0x24
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	a805      	add	r0, sp, #20
 8002cfa:	f000 fde8 	bl	80038ce <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfe:	4914      	ldr	r1, [pc, #80]	; (8002d50 <SystemClock_Config+0x74>)
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <SystemClock_Config+0x78>)
 8002d02:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002d04:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d06:	401a      	ands	r2, r3
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002d10:	2310      	movs	r3, #16
 8002d12:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002d14:	3b0f      	subs	r3, #15
 8002d16:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002d18:	23a0      	movs	r3, #160	; 0xa0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d1a:	250f      	movs	r5, #15
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002d1c:	021b      	lsls	r3, r3, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d1e:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002d20:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002d22:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d24:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d26:	f7fe fb09 	bl	800133c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d2a:	0021      	movs	r1, r4
 8002d2c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d2e:	9500      	str	r5, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002d30:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d32:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d34:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d36:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d38:	f7fe fe5e 	bl	80019f8 <HAL_RCC_ClockConfig>
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d3c:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002d3e:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d40:	9407      	str	r4, [sp, #28]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d42:	9408      	str	r4, [sp, #32]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d44:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d46:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d48:	f7fe ff9a 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002d4c:	b01d      	add	sp, #116	; 0x74
 8002d4e:	bd30      	pop	{r4, r5, pc}
 8002d50:	40007000 	.word	0x40007000
 8002d54:	ffffe7ff 	.word	0xffffe7ff

08002d58 <blink>:

}

/* USER CODE BEGIN 4 */

void blink(uint8_t times) {
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int var = 0; var < times; ++var) {
		LED_ON
 8002d5a:	2580      	movs	r5, #128	; 0x80
 8002d5c:	26a0      	movs	r6, #160	; 0xa0
void blink(uint8_t times) {
 8002d5e:	0007      	movs	r7, r0
	for (int var = 0; var < times; ++var) {
 8002d60:	2400      	movs	r4, #0
		LED_ON
 8002d62:	006d      	lsls	r5, r5, #1
 8002d64:	05f6      	lsls	r6, r6, #23
	for (int var = 0; var < times; ++var) {
 8002d66:	42bc      	cmp	r4, r7
 8002d68:	db00      	blt.n	8002d6c <blink+0x14>
		HAL_Delay(25);
		LED_OFF
		HAL_Delay(25);
	}

}
 8002d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LED_ON
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	0029      	movs	r1, r5
 8002d70:	0030      	movs	r0, r6
 8002d72:	f7fe f92d 	bl	8000fd0 <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8002d76:	2019      	movs	r0, #25
 8002d78:	f7fd fca6 	bl	80006c8 <HAL_Delay>
		LED_OFF
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	0029      	movs	r1, r5
 8002d80:	0030      	movs	r0, r6
 8002d82:	f7fe f925 	bl	8000fd0 <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8002d86:	2019      	movs	r0, #25
 8002d88:	f7fd fc9e 	bl	80006c8 <HAL_Delay>
	for (int var = 0; var < times; ++var) {
 8002d8c:	3401      	adds	r4, #1
 8002d8e:	e7ea      	b.n	8002d66 <blink+0xe>

08002d90 <fn_fprint>:

void fn_fprint(char *data) {
 8002d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	0005      	movs	r5, r0
	int tamanho = strlen(data);
 8002d96:	f7fd f9b7 	bl	8000108 <strlen>
	char new_command[tamanho];
 8002d9a:	466a      	mov	r2, sp
 8002d9c:	1dc3      	adds	r3, r0, #7
 8002d9e:	08db      	lsrs	r3, r3, #3
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	469d      	mov	sp, r3
	strcpy(new_command, data);
 8002da6:	0029      	movs	r1, r5
	int tamanho = strlen(data);
 8002da8:	0004      	movs	r4, r0
	strcpy(new_command, data);
 8002daa:	4668      	mov	r0, sp
 8002dac:	f000 fda4 	bl	80038f8 <strcpy>
 8002db0:	466e      	mov	r6, sp
	char new_com[1]; // (uint8_t*)new_command;
	for (int var = 0; var < tamanho; ++var) {
 8002db2:	466d      	mov	r5, sp
 8002db4:	1bab      	subs	r3, r5, r6
 8002db6:	429c      	cmp	r4, r3
 8002db8:	dc01      	bgt.n	8002dbe <fn_fprint+0x2e>
		new_com[0] = new_command[var];
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
	}
}
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		new_com[0] = new_command[var];
 8002dbe:	782b      	ldrb	r3, [r5, #0]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8002dc0:	2201      	movs	r2, #1
		new_com[0] = new_command[var];
 8002dc2:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8002dc4:	1d39      	adds	r1, r7, #4
 8002dc6:	230a      	movs	r3, #10
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <fn_fprint+0x44>)
 8002dca:	f7ff fd49 	bl	8002860 <HAL_UART_Transmit>
 8002dce:	3501      	adds	r5, #1
 8002dd0:	e7f0      	b.n	8002db4 <fn_fprint+0x24>
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20000390 	.word	0x20000390

08002dd8 <main>:
{
 8002dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dda:	2604      	movs	r6, #4
{
 8002ddc:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002dde:	f7fd fc51 	bl	8000684 <HAL_Init>
  SystemClock_Config();
 8002de2:	f7ff ff7b 	bl	8002cdc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de6:	2214      	movs	r2, #20
 8002de8:	2100      	movs	r1, #0
 8002dea:	a805      	add	r0, sp, #20
 8002dec:	f000 fd6f 	bl	80038ce <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002df0:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df2:	4b91      	ldr	r3, [pc, #580]	; (8003038 <main+0x260>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df4:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin|WISOL_RST_Pin, GPIO_PIN_SET);
 8002df8:	27c0      	movs	r7, #192	; 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfa:	4332      	orrs	r2, r6
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin|WISOL_RST_Pin, GPIO_PIN_SET);
 8002e00:	023f      	lsls	r7, r7, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e02:	4032      	ands	r2, r6
 8002e04:	9201      	str	r2, [sp, #4]
 8002e06:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e0c:	4301      	orrs	r1, r0
 8002e0e:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e10:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	4002      	ands	r2, r0
 8002e16:	9202      	str	r2, [sp, #8]
 8002e18:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin|GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8002e1c:	4887      	ldr	r0, [pc, #540]	; (800303c <main+0x264>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	432a      	orrs	r2, r5
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	402a      	ands	r2, r5
 8002e26:	9203      	str	r2, [sp, #12]
 8002e28:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin|GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8002e32:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e34:	400b      	ands	r3, r1
 8002e36:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin|GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8002e38:	3122      	adds	r1, #34	; 0x22
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin|GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8002e3c:	f7fe f8c8 	bl	8000fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin|WISOL_RST_Pin, GPIO_PIN_SET);
 8002e40:	002a      	movs	r2, r5
 8002e42:	0039      	movs	r1, r7
 8002e44:	487d      	ldr	r0, [pc, #500]	; (800303c <main+0x264>)
 8002e46:	f7fe f8c3 	bl	8000fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_LED_Pin|EN_US_Pin|EN_GPRS_Pin|EN_GPS_Pin 
 8002e4a:	219f      	movs	r1, #159	; 0x9f
 8002e4c:	20a0      	movs	r0, #160	; 0xa0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	0209      	lsls	r1, r1, #8
 8002e52:	05c0      	lsls	r0, r0, #23
 8002e54:	f7fe f8bc 	bl	8000fd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8002e58:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8002e5a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8002e5c:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8002e5e:	4878      	ldr	r0, [pc, #480]	; (8003040 <main+0x268>)
  GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8002e60:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e62:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8002e66:	f7fd ff7d 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002e6a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e6c:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6e:	a905      	add	r1, sp, #20
 8002e70:	4873      	ldr	r0, [pc, #460]	; (8003040 <main+0x268>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e72:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e76:	f7fd ff75 	bl	8000d64 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e7a:	a905      	add	r1, sp, #20
 8002e7c:	4871      	ldr	r0, [pc, #452]	; (8003044 <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e7e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e80:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e84:	f7fd ff6e 	bl	8000d64 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e88:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = HC_SR04_TRG_Pin|HC_SR04_PULSE_Pin;
 8002e8a:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	a905      	add	r1, sp, #20
 8002e8e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = HC_SR04_TRG_Pin|HC_SR04_PULSE_Pin;
 8002e90:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e92:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	f7fd ff65 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_INT1_XL_Pin|EXT_INT_MAG_Pin|GPS_EXTI_Pin|GPS_TIMEPULSE_Pin;
 8002e9a:	4b6b      	ldr	r3, [pc, #428]	; (8003048 <main+0x270>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = EXT_INT1_XL_Pin|EXT_INT_MAG_Pin|GPS_EXTI_Pin|GPS_TIMEPULSE_Pin;
 8002e9e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ea0:	4b6a      	ldr	r3, [pc, #424]	; (800304c <main+0x274>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	4866      	ldr	r0, [pc, #408]	; (800303c <main+0x264>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ea4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea8:	f7fd ff5c 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002eac:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8002eae:	a905      	add	r1, sp, #20
 8002eb0:	4862      	ldr	r0, [pc, #392]	; (800303c <main+0x264>)
  GPIO_InitStruct.Pin = GPRS_RST_Pin;
 8002eb2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002eb4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8002eba:	f7fd ff53 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WISOL_WKP_Pin|WISOL_RST_Pin|GPRS_PWR_ON_Pin;
 8002ebe:	4b64      	ldr	r3, [pc, #400]	; (8003050 <main+0x278>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	a905      	add	r1, sp, #20
 8002ec2:	485e      	ldr	r0, [pc, #376]	; (800303c <main+0x264>)
  GPIO_InitStruct.Pin = WISOL_WKP_Pin|WISOL_RST_Pin|GPRS_PWR_ON_Pin;
 8002ec4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f7fd ff4a 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_LED_Pin|EN_US_Pin|EN_GPRS_Pin|EN_GPS_Pin 
 8002ed0:	239f      	movs	r3, #159	; 0x9f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_LED_Pin|EN_US_Pin|EN_GPRS_Pin|EN_GPS_Pin 
 8002ed4:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	a905      	add	r1, sp, #20
 8002ed8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_LED_Pin|EN_US_Pin|EN_GPRS_Pin|EN_GPS_Pin 
 8002eda:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002edc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	f7fd ff3f 	bl	8000d64 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	0021      	movs	r1, r4
 8002eea:	a805      	add	r0, sp, #20
 8002eec:	f000 fcef 	bl	80038ce <memset>
  hadc.Instance = ADC1;
 8002ef0:	4f58      	ldr	r7, [pc, #352]	; (8003054 <main+0x27c>)
 8002ef2:	4b59      	ldr	r3, [pc, #356]	; (8003058 <main+0x280>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ef4:	0038      	movs	r0, r7
  hadc.Instance = ADC1;
 8002ef6:	603b      	str	r3, [r7, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002ef8:	23c0      	movs	r3, #192	; 0xc0
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	607b      	str	r3, [r7, #4]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002efe:	197b      	adds	r3, r7, r5
 8002f00:	77dc      	strb	r4, [r3, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002f02:	1cbb      	adds	r3, r7, #2
 8002f04:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f06:	23c2      	movs	r3, #194	; 0xc2
 8002f08:	33ff      	adds	r3, #255	; 0xff
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002f0c:	003b      	movs	r3, r7
 8002f0e:	332c      	adds	r3, #44	; 0x2c
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002f10:	613d      	str	r5, [r7, #16]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002f12:	701c      	strb	r4, [r3, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f14:	617e      	str	r6, [r7, #20]
  hadc.Init.OversamplingMode = DISABLE;
 8002f16:	63fc      	str	r4, [r7, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002f18:	60bc      	str	r4, [r7, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f1a:	63bc      	str	r4, [r7, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f1c:	60fc      	str	r4, [r7, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f1e:	62bc      	str	r4, [r7, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f20:	633c      	str	r4, [r7, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002f22:	61bc      	str	r4, [r7, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002f24:	637c      	str	r4, [r7, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002f26:	61fc      	str	r4, [r7, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002f28:	f7fd fbf4 	bl	8000714 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	; (800305c <main+0x284>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f2e:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_4;
 8002f30:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002f32:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f34:	0038      	movs	r0, r7
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002f36:	015b      	lsls	r3, r3, #5
 8002f38:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f3a:	f7fd fdbb 	bl	8000ab4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <main+0x288>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f40:	a905      	add	r1, sp, #20
 8002f42:	0038      	movs	r0, r7
  sConfig.Channel = ADC_CHANNEL_5;
 8002f44:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f46:	f7fd fdb5 	bl	8000ab4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002f4a:	4b46      	ldr	r3, [pc, #280]	; (8003064 <main+0x28c>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f4c:	a905      	add	r1, sp, #20
 8002f4e:	0038      	movs	r0, r7
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002f50:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f52:	f7fd fdaf 	bl	8000ab4 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 8002f56:	4e44      	ldr	r6, [pc, #272]	; (8003068 <main+0x290>)
 8002f58:	4b44      	ldr	r3, [pc, #272]	; (800306c <main+0x294>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f5a:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8002f5c:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00000708;
 8002f5e:	23e1      	movs	r3, #225	; 0xe1
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f64:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8002f66:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f68:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f6a:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f6c:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f6e:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f70:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f72:	f7fe f86f 	bl	8001054 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f76:	0021      	movs	r1, r4
 8002f78:	0030      	movs	r0, r6
 8002f7a:	f7fe f91b 	bl	80011b4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f7e:	0030      	movs	r0, r6
  hlpuart1.Init.BaudRate = 9600;
 8002f80:	2696      	movs	r6, #150	; 0x96
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f82:	0021      	movs	r1, r4
 8002f84:	f7fe f95c 	bl	8001240 <HAL_I2CEx_ConfigDigitalFilter>
  hlpuart1.Instance = LPUART1;
 8002f88:	4839      	ldr	r0, [pc, #228]	; (8003070 <main+0x298>)
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <main+0x29c>)
  hlpuart1.Init.BaudRate = 9600;
 8002f8c:	01b6      	lsls	r6, r6, #6
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f8e:	350b      	adds	r5, #11
  hlpuart1.Instance = LPUART1;
 8002f90:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002f92:	6046      	str	r6, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f94:	6084      	str	r4, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f96:	60c4      	str	r4, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f98:	6104      	str	r4, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f9a:	6145      	str	r5, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9c:	6184      	str	r4, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f9e:	6204      	str	r4, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa0:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002fa2:	f7ff fd7b 	bl	8002a9c <HAL_UART_Init>
  huart1.Instance = USART1;
 8002fa6:	4834      	ldr	r0, [pc, #208]	; (8003078 <main+0x2a0>)
 8002fa8:	4b34      	ldr	r3, [pc, #208]	; (800307c <main+0x2a4>)
  huart1.Init.BaudRate = 9600;
 8002faa:	6046      	str	r6, [r0, #4]
  huart1.Instance = USART1;
 8002fac:	6003      	str	r3, [r0, #0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fae:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fb2:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb6:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb8:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fba:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fbc:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fbe:	f7ff fd6d 	bl	8002a9c <HAL_UART_Init>
  huart2.Instance = USART2;
 8002fc2:	482f      	ldr	r0, [pc, #188]	; (8003080 <main+0x2a8>)
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <main+0x2ac>)
  huart2.Init.BaudRate = 9600;
 8002fc6:	6046      	str	r6, [r0, #4]
  huart2.Instance = USART2;
 8002fc8:	6003      	str	r3, [r0, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fca:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fce:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd4:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fd6:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fd8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fda:	f7ff fd5f 	bl	8002a9c <HAL_UART_Init>
  huart4.Instance = USART4;
 8002fde:	482a      	ldr	r0, [pc, #168]	; (8003088 <main+0x2b0>)
 8002fe0:	4b2a      	ldr	r3, [pc, #168]	; (800308c <main+0x2b4>)
  huart4.Init.BaudRate = 9600;
 8002fe2:	6046      	str	r6, [r0, #4]
  huart4.Instance = USART4;
 8002fe4:	6003      	str	r3, [r0, #0]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	6084      	str	r4, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fe8:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002fea:	6104      	str	r4, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fec:	6145      	str	r5, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fee:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff0:	61c4      	str	r4, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ff2:	6204      	str	r4, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff4:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ff6:	f7ff fd51 	bl	8002a9c <HAL_UART_Init>
  huart5.Instance = USART5;
 8002ffa:	4825      	ldr	r0, [pc, #148]	; (8003090 <main+0x2b8>)
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <main+0x2bc>)
  huart5.Init.BaudRate = 9600;
 8002ffe:	6046      	str	r6, [r0, #4]
  huart5.Instance = USART5;
 8003000:	6003      	str	r3, [r0, #0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003002:	6084      	str	r4, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003004:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003006:	6104      	str	r4, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003008:	6145      	str	r5, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300a:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800300c:	61c4      	str	r4, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800300e:	6204      	str	r4, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003010:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003012:	f7ff fd43 	bl	8002a9c <HAL_UART_Init>
	blink(5);
 8003016:	2005      	movs	r0, #5
 8003018:	f7ff fe9e 	bl	8002d58 <blink>
	fn_fprint("START PROGRAM\r\n");
 800301c:	481e      	ldr	r0, [pc, #120]	; (8003098 <main+0x2c0>)
 800301e:	f7ff feb7 	bl	8002d90 <fn_fprint>
	fn_info_sigfox();
 8003022:	f000 f9eb 	bl	80033fc <fn_info_sigfox>
		blink(10);
 8003026:	200a      	movs	r0, #10
 8003028:	f7ff fe96 	bl	8002d58 <blink>
		fn_send_start_frame_sigfox();
 800302c:	f000 f96a 	bl	8003304 <fn_send_start_frame_sigfox>
		HAL_Delay(60000);
 8003030:	481a      	ldr	r0, [pc, #104]	; (800309c <main+0x2c4>)
 8003032:	f7fd fb49 	bl	80006c8 <HAL_Delay>
 8003036:	e7f6      	b.n	8003026 <main+0x24e>
 8003038:	40021000 	.word	0x40021000
 800303c:	50000400 	.word	0x50000400
 8003040:	50000800 	.word	0x50000800
 8003044:	50001c00 	.word	0x50001c00
 8003048:	00003003 	.word	0x00003003
 800304c:	10110000 	.word	0x10110000
 8003050:	0000c020 	.word	0x0000c020
 8003054:	20000510 	.word	0x20000510
 8003058:	40012400 	.word	0x40012400
 800305c:	10000010 	.word	0x10000010
 8003060:	14000020 	.word	0x14000020
 8003064:	48040000 	.word	0x48040000
 8003068:	20000344 	.word	0x20000344
 800306c:	40005400 	.word	0x40005400
 8003070:	20000390 	.word	0x20000390
 8003074:	40004800 	.word	0x40004800
 8003078:	200002a8 	.word	0x200002a8
 800307c:	40013800 	.word	0x40013800
 8003080:	20000490 	.word	0x20000490
 8003084:	40004400 	.word	0x40004400
 8003088:	20000410 	.word	0x20000410
 800308c:	40004c00 	.word	0x40004c00
 8003090:	20000224 	.word	0x20000224
 8003094:	40005000 	.word	0x40005000
 8003098:	08003c99 	.word	0x08003c99
 800309c:	0000ea60 	.word	0x0000ea60

080030a0 <HAL_UART_TxCpltCallback>:
 80030a0:	2201      	movs	r2, #1
 80030a2:	4b01      	ldr	r3, [pc, #4]	; (80030a8 <HAL_UART_TxCpltCallback+0x8>)
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	4770      	bx	lr
 80030a8:	20000221 	.word	0x20000221

080030ac <HAL_UART_RxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	UartReady = SET;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	UartReady = SET;
 80030ac:	2201      	movs	r2, #1
 80030ae:	4b01      	ldr	r3, [pc, #4]	; (80030b4 <HAL_UART_RxCpltCallback+0x8>)
 80030b0:	701a      	strb	r2, [r3, #0]
}
 80030b2:	4770      	bx	lr
 80030b4:	20000221 	.word	0x20000221

080030b8 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80030b8:	4770      	bx	lr
	...

080030bc <fn_init_sigfox>:
/*
 fn_init_sigfox
 funcao de configuracoes para a rede sigfox na regiao 2 e 4 alem da possibilidade de utilizar na dongle com downlink
 parta tal deve-se definir a DONGLE_KEY
 */
void fn_init_sigfox() {
 80030bc:	b513      	push	{r0, r1, r4, lr}
	char ok[4];
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$P=0\r\n", 8, 100);
 80030be:	4c26      	ldr	r4, [pc, #152]	; (8003158 <fn_init_sigfox+0x9c>)
 80030c0:	2364      	movs	r3, #100	; 0x64
 80030c2:	2208      	movs	r2, #8
 80030c4:	4925      	ldr	r1, [pc, #148]	; (800315c <fn_init_sigfox+0xa0>)
 80030c6:	0020      	movs	r0, r4
 80030c8:	f7ff fbca 	bl	8002860 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 80030cc:	a901      	add	r1, sp, #4
 80030ce:	2364      	movs	r3, #100	; 0x64
 80030d0:	2204      	movs	r2, #4
 80030d2:	0020      	movs	r0, r4
 80030d4:	f7ff fc2e 	bl	8002934 <HAL_UART_Receive>
	HAL_Delay(10);
 80030d8:	200a      	movs	r0, #10
 80030da:	f7fd faf5 	bl	80006c8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$DR=905200000\r\n", 17, 100);
 80030de:	2364      	movs	r3, #100	; 0x64
 80030e0:	2211      	movs	r2, #17
 80030e2:	491f      	ldr	r1, [pc, #124]	; (8003160 <fn_init_sigfox+0xa4>)
 80030e4:	0020      	movs	r0, r4
 80030e6:	f7ff fbbb 	bl	8002860 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 80030ea:	a901      	add	r1, sp, #4
 80030ec:	2364      	movs	r3, #100	; 0x64
 80030ee:	2204      	movs	r2, #4
 80030f0:	0020      	movs	r0, r4
 80030f2:	f7ff fc1f 	bl	8002934 <HAL_UART_Receive>
	HAL_Delay(10);
 80030f6:	200a      	movs	r0, #10
 80030f8:	f7fd fae6 	bl	80006c8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$IF=902200000\r\n", 17, 100);
 80030fc:	2364      	movs	r3, #100	; 0x64
 80030fe:	2211      	movs	r2, #17
 8003100:	4918      	ldr	r1, [pc, #96]	; (8003164 <fn_init_sigfox+0xa8>)
 8003102:	0020      	movs	r0, r4
 8003104:	f7ff fbac 	bl	8002860 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8003108:	a901      	add	r1, sp, #4
 800310a:	2364      	movs	r3, #100	; 0x64
 800310c:	2204      	movs	r2, #4
 800310e:	0020      	movs	r0, r4
 8003110:	f7ff fc10 	bl	8002934 <HAL_UART_Receive>
	HAL_Delay(10);
 8003114:	200a      	movs	r0, #10
 8003116:	f7fd fad7 	bl	80006c8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$WR\r\n", 7, 100);
 800311a:	2364      	movs	r3, #100	; 0x64
 800311c:	2207      	movs	r2, #7
 800311e:	4912      	ldr	r1, [pc, #72]	; (8003168 <fn_init_sigfox+0xac>)
 8003120:	0020      	movs	r0, r4
 8003122:	f7ff fb9d 	bl	8002860 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8003126:	a901      	add	r1, sp, #4
 8003128:	2364      	movs	r3, #100	; 0x64
 800312a:	2204      	movs	r2, #4
 800312c:	0020      	movs	r0, r4
 800312e:	f7ff fc01 	bl	8002934 <HAL_UART_Receive>
	HAL_Delay(10);
 8003132:	200a      	movs	r0, #10
 8003134:	f7fd fac8 	bl	80006c8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$RC\r\n", 7, 100);
 8003138:	2364      	movs	r3, #100	; 0x64
 800313a:	2207      	movs	r2, #7
 800313c:	490b      	ldr	r1, [pc, #44]	; (800316c <fn_init_sigfox+0xb0>)
 800313e:	0020      	movs	r0, r4
 8003140:	f7ff fb8e 	bl	8002860 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8003144:	2364      	movs	r3, #100	; 0x64
 8003146:	2204      	movs	r2, #4
 8003148:	a901      	add	r1, sp, #4
 800314a:	0020      	movs	r0, r4
 800314c:	f7ff fbf2 	bl	8002934 <HAL_UART_Receive>
	HAL_Delay(10);
 8003150:	200a      	movs	r0, #10
 8003152:	f7fd fab9 	bl	80006c8 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)"ATS410=1\r\n",11);//ATS410=1 private key ; ATS410=0 public key
	//HAL_UART_Receive_IT(&huart1,(uint8_t*)ok,4,10);
	HAL_Delay(500);
#endif

}
 8003156:	bd13      	pop	{r0, r1, r4, pc}
 8003158:	200002a8 	.word	0x200002a8
 800315c:	08003cee 	.word	0x08003cee
 8003160:	08003cf7 	.word	0x08003cf7
 8003164:	08003d09 	.word	0x08003d09
 8003168:	08003d1b 	.word	0x08003d1b
 800316c:	08003d23 	.word	0x08003d23

08003170 <fn_get_id_sigfox>:

//pegar id
void fn_get_id_sigfox() {
 8003170:	b530      	push	{r4, r5, lr}
 8003172:	b085      	sub	sp, #20

	char command[9] = "AT$I=10\r\n";
 8003174:	2209      	movs	r2, #9
 8003176:	4910      	ldr	r1, [pc, #64]	; (80031b8 <fn_get_id_sigfox+0x48>)
 8003178:	a801      	add	r0, sp, #4
 800317a:	f000 fb9f 	bl	80038bc <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 9);
 800317e:	4d0f      	ldr	r5, [pc, #60]	; (80031bc <fn_get_id_sigfox+0x4c>)
 8003180:	2209      	movs	r2, #9
 8003182:	a901      	add	r1, sp, #4
 8003184:	0028      	movs	r0, r5
 8003186:	f7fe ff11 	bl	8001fac <HAL_UART_Transmit_IT>
	while (UartReady != SET) {
 800318a:	4c0d      	ldr	r4, [pc, #52]	; (80031c0 <fn_get_id_sigfox+0x50>)
 800318c:	7823      	ldrb	r3, [r4, #0]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d1fc      	bne.n	800318c <fn_get_id_sigfox+0x1c>
	}
	//Reset transmission flag
	UartReady = RESET;
 8003192:	2300      	movs	r3, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.id, 10);
 8003194:	220a      	movs	r2, #10
 8003196:	490b      	ldr	r1, [pc, #44]	; (80031c4 <fn_get_id_sigfox+0x54>)
 8003198:	0028      	movs	r0, r5
	UartReady = RESET;
 800319a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.id, 10);
 800319c:	f7fe ff44 	bl	8002028 <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 80031a0:	7823      	ldrb	r3, [r4, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d103      	bne.n	80031ae <fn_get_id_sigfox+0x3e>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	7023      	strb	r3, [r4, #0]

}
 80031aa:	b005      	add	sp, #20
 80031ac:	bd30      	pop	{r4, r5, pc}
		blink(2);
 80031ae:	2002      	movs	r0, #2
 80031b0:	f7ff fdd2 	bl	8002d58 <blink>
 80031b4:	e7f4      	b.n	80031a0 <fn_get_id_sigfox+0x30>
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	08003a98 	.word	0x08003a98
 80031bc:	200002a8 	.word	0x200002a8
 80031c0:	20000221 	.word	0x20000221
 80031c4:	200001f4 	.word	0x200001f4

080031c8 <fn_get_pac_sigfox>:

//pegar pac
void fn_get_pac_sigfox() {
 80031c8:	b530      	push	{r4, r5, lr}

	char command[9] = "AT$I=11\r\n";
 80031ca:	4911      	ldr	r1, [pc, #68]	; (8003210 <fn_get_pac_sigfox+0x48>)
void fn_get_pac_sigfox() {
 80031cc:	b085      	sub	sp, #20
	char command[9] = "AT$I=11\r\n";
 80031ce:	2209      	movs	r2, #9
 80031d0:	310a      	adds	r1, #10
 80031d2:	a801      	add	r0, sp, #4
 80031d4:	f000 fb72 	bl	80038bc <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 9);
 80031d8:	4d0e      	ldr	r5, [pc, #56]	; (8003214 <fn_get_pac_sigfox+0x4c>)
 80031da:	2209      	movs	r2, #9
 80031dc:	a901      	add	r1, sp, #4
 80031de:	0028      	movs	r0, r5
 80031e0:	f7fe fee4 	bl	8001fac <HAL_UART_Transmit_IT>
	while (UartReady != SET) {
 80031e4:	4c0c      	ldr	r4, [pc, #48]	; (8003218 <fn_get_pac_sigfox+0x50>)
 80031e6:	7823      	ldrb	r3, [r4, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d1fc      	bne.n	80031e6 <fn_get_pac_sigfox+0x1e>
	}
	//Reset transmission flag
	UartReady = RESET;
 80031ec:	2300      	movs	r3, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.pac, 18);
 80031ee:	2212      	movs	r2, #18
 80031f0:	490a      	ldr	r1, [pc, #40]	; (800321c <fn_get_pac_sigfox+0x54>)
 80031f2:	0028      	movs	r0, r5
	UartReady = RESET;
 80031f4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.pac, 18);
 80031f6:	f7fe ff17 	bl	8002028 <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 80031fa:	7823      	ldrb	r3, [r4, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d103      	bne.n	8003208 <fn_get_pac_sigfox+0x40>
		blink(2);
	}
	//Reset transmission flag8
	UartReady = RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	7023      	strb	r3, [r4, #0]
}
 8003204:	b005      	add	sp, #20
 8003206:	bd30      	pop	{r4, r5, pc}
		blink(2);
 8003208:	2002      	movs	r0, #2
 800320a:	f7ff fda5 	bl	8002d58 <blink>
 800320e:	e7f4      	b.n	80031fa <fn_get_pac_sigfox+0x32>
 8003210:	08003a98 	.word	0x08003a98
 8003214:	200002a8 	.word	0x200002a8
 8003218:	20000221 	.word	0x20000221
 800321c:	200001fe 	.word	0x200001fe

08003220 <fn_at_sigfox>:

//dumy command
void fn_at_sigfox() {
 8003220:	b513      	push	{r0, r1, r4, lr}

	char command[4] = "AT\r\n";
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <fn_at_sigfox+0x24>)
	//int at = 0;
	HAL_UART_Transmit(&huart1, (uint8_t*) command, 4, 100);
 8003224:	4c08      	ldr	r4, [pc, #32]	; (8003248 <fn_at_sigfox+0x28>)
	char command[4] = "AT\r\n";
 8003226:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) command, 4, 100);
 8003228:	a901      	add	r1, sp, #4
 800322a:	2364      	movs	r3, #100	; 0x64
 800322c:	2204      	movs	r2, #4
 800322e:	0020      	movs	r0, r4
 8003230:	f7ff fb16 	bl	8002860 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) st_sigfox_parameters.at, 4, 100);
 8003234:	2364      	movs	r3, #100	; 0x64
 8003236:	2204      	movs	r2, #4
 8003238:	4904      	ldr	r1, [pc, #16]	; (800324c <fn_at_sigfox+0x2c>)
 800323a:	0020      	movs	r0, r4
 800323c:	f7ff fb7a 	bl	8002934 <HAL_UART_Receive>
	/*		if (st_sigfox_parameters.at[0] == 79
	 && st_sigfox_parameters.at[1] == 85) {
	 at = 1;
	 }
	 return at;*/
}
 8003240:	bd13      	pop	{r0, r1, r4, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	0a0d5441 	.word	0x0a0d5441
 8003248:	200002a8 	.word	0x200002a8
 800324c:	2000021d 	.word	0x2000021d

08003250 <fn_get_volt_sigfox>:

//pegar a tensao no modulo sigfox
void fn_get_volt_sigfox() {
 8003250:	b537      	push	{r0, r1, r2, r4, r5, lr}

	char command[7] = "AT$V?\r\n";
 8003252:	4911      	ldr	r1, [pc, #68]	; (8003298 <fn_get_volt_sigfox+0x48>)
 8003254:	2207      	movs	r2, #7
 8003256:	3114      	adds	r1, #20
 8003258:	4668      	mov	r0, sp
 800325a:	f000 fb2f 	bl	80038bc <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 7);
 800325e:	4d0f      	ldr	r5, [pc, #60]	; (800329c <fn_get_volt_sigfox+0x4c>)
 8003260:	2207      	movs	r2, #7
 8003262:	4669      	mov	r1, sp
 8003264:	0028      	movs	r0, r5
 8003266:	f7fe fea1 	bl	8001fac <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.volts, 6);
 800326a:	4c0d      	ldr	r4, [pc, #52]	; (80032a0 <fn_get_volt_sigfox+0x50>)
 800326c:	2206      	movs	r2, #6
 800326e:	0021      	movs	r1, r4
 8003270:	0028      	movs	r0, r5
 8003272:	f7fe fed9 	bl	8002028 <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <fn_get_volt_sigfox+0x54>)
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	2a01      	cmp	r2, #1
 800327c:	d107      	bne.n	800328e <fn_get_volt_sigfox+0x3e>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 800327e:	2200      	movs	r2, #0

	int_volt_sigfox = atoi(st_sigfox_parameters.volts);
 8003280:	0020      	movs	r0, r4
	UartReady = RESET;
 8003282:	701a      	strb	r2, [r3, #0]
	int_volt_sigfox = atoi(st_sigfox_parameters.volts);
 8003284:	f000 faef 	bl	8003866 <atoi>
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <fn_get_volt_sigfox+0x58>)
 800328a:	6018      	str	r0, [r3, #0]
}
 800328c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		blink(2);
 800328e:	2002      	movs	r0, #2
 8003290:	f7ff fd62 	bl	8002d58 <blink>
 8003294:	e7ef      	b.n	8003276 <fn_get_volt_sigfox+0x26>
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	08003a98 	.word	0x08003a98
 800329c:	200002a8 	.word	0x200002a8
 80032a0:	20000217 	.word	0x20000217
 80032a4:	20000221 	.word	0x20000221
 80032a8:	20000328 	.word	0x20000328

080032ac <fn_get_temperature_sigfox>:

//pegar a temperatura no mudulo sigfox
void fn_get_temperature_sigfox() {
 80032ac:	b537      	push	{r0, r1, r2, r4, r5, lr}

	char command[8] = "AT$T?\r\n";
 80032ae:	2208      	movs	r2, #8
 80032b0:	490f      	ldr	r1, [pc, #60]	; (80032f0 <fn_get_temperature_sigfox+0x44>)
 80032b2:	4668      	mov	r0, sp
 80032b4:	f000 fb02 	bl	80038bc <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 8);
 80032b8:	4d0e      	ldr	r5, [pc, #56]	; (80032f4 <fn_get_temperature_sigfox+0x48>)
 80032ba:	2208      	movs	r2, #8
 80032bc:	4669      	mov	r1, sp
 80032be:	0028      	movs	r0, r5
 80032c0:	f7fe fe74 	bl	8001fac <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.temperature,
 80032c4:	4c0c      	ldr	r4, [pc, #48]	; (80032f8 <fn_get_temperature_sigfox+0x4c>)
 80032c6:	2207      	movs	r2, #7
 80032c8:	0021      	movs	r1, r4
 80032ca:	0028      	movs	r0, r5
 80032cc:	f7fe feac 	bl	8002028 <HAL_UART_Receive_IT>
			7);
	while (UartReady != SET) {
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <fn_get_temperature_sigfox+0x50>)
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	2a01      	cmp	r2, #1
 80032d6:	d107      	bne.n	80032e8 <fn_get_temperature_sigfox+0x3c>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 80032d8:	2200      	movs	r2, #0

	int_temp_sigfox = atoi(st_sigfox_parameters.temperature);
 80032da:	0020      	movs	r0, r4
	UartReady = RESET;
 80032dc:	701a      	strb	r2, [r3, #0]
	int_temp_sigfox = atoi(st_sigfox_parameters.temperature);
 80032de:	f000 fac2 	bl	8003866 <atoi>
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <fn_get_temperature_sigfox+0x54>)
 80032e4:	6018      	str	r0, [r3, #0]

}
 80032e6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		blink(2);
 80032e8:	2002      	movs	r0, #2
 80032ea:	f7ff fd35 	bl	8002d58 <blink>
 80032ee:	e7ef      	b.n	80032d0 <fn_get_temperature_sigfox+0x24>
 80032f0:	08003ca9 	.word	0x08003ca9
 80032f4:	200002a8 	.word	0x200002a8
 80032f8:	20000210 	.word	0x20000210
 80032fc:	20000221 	.word	0x20000221
 8003300:	200002a4 	.word	0x200002a4

08003304 <fn_send_start_frame_sigfox>:

	strcpy(st_sigfox_frame.test, frame);
}

void fn_send_start_frame_sigfox() {
	SIGFOX_ON
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	20a0      	movs	r0, #160	; 0xa0
void fn_send_start_frame_sigfox() {
 8003308:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
	fn_init_sigfox();
	fn_get_temperature_sigfox();
	fn_get_volt_sigfox();

	char start_machine_frame[15] = { 0 };
 800330a:	270f      	movs	r7, #15
	char ok[4] = { 0 };
 800330c:	2500      	movs	r5, #0
void fn_send_start_frame_sigfox() {
 800330e:	b089      	sub	sp, #36	; 0x24
	SIGFOX_ON
 8003310:	2201      	movs	r2, #1
 8003312:	0209      	lsls	r1, r1, #8
 8003314:	05c0      	lsls	r0, r0, #23
	char start_machine_frame[15] = { 0 };
 8003316:	ac04      	add	r4, sp, #16
	SIGFOX_ON
 8003318:	f7fd fe5a 	bl	8000fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800331c:	2064      	movs	r0, #100	; 0x64
 800331e:	f7fd f9d3 	bl	80006c8 <HAL_Delay>
	fn_init_sigfox();
 8003322:	f7ff fecb 	bl	80030bc <fn_init_sigfox>
	fn_get_temperature_sigfox();
 8003326:	f7ff ffc1 	bl	80032ac <fn_get_temperature_sigfox>
	fn_get_volt_sigfox();
 800332a:	f7ff ff91 	bl	8003250 <fn_get_volt_sigfox>
	char start_machine_frame[15] = { 0 };
 800332e:	003a      	movs	r2, r7
 8003330:	2100      	movs	r1, #0
 8003332:	0020      	movs	r0, r4
 8003334:	f000 facb 	bl	80038ce <memset>
	char buffer_start[7] = { 0 };
 8003338:	2207      	movs	r2, #7
 800333a:	0029      	movs	r1, r5
 800333c:	a802      	add	r0, sp, #8
	char ok[4] = { 0 };
 800333e:	9501      	str	r5, [sp, #4]
	char buffer_start[7] = { 0 };
 8003340:	f000 fac5 	bl	80038ce <memset>
	int temp_buff = (int_temp_sigfox/10);
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <fn_send_start_frame_sigfox+0xec>)
 8003346:	210a      	movs	r1, #10
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	f7fc ff8d 	bl	8000268 <__divsi3>
	int volt_buff = (int_volt_sigfox/100);
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <fn_send_start_frame_sigfox+0xf0>)
	int temp_buff = (int_temp_sigfox/10);
 8003350:	0006      	movs	r6, r0
	int volt_buff = (int_volt_sigfox/100);
 8003352:	2164      	movs	r1, #100	; 0x64
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	f7fc ff87 	bl	8000268 <__divsi3>

	start_machine_frame[0] = 65;
 800335a:	2341      	movs	r3, #65	; 0x41
 800335c:	7023      	strb	r3, [r4, #0]
	start_machine_frame[1] = 84;
 800335e:	3313      	adds	r3, #19
 8003360:	7063      	strb	r3, [r4, #1]
	start_machine_frame[2] = 36;
 8003362:	3b30      	subs	r3, #48	; 0x30
 8003364:	70a3      	strb	r3, [r4, #2]
	start_machine_frame[3] = 83;
 8003366:	332f      	adds	r3, #47	; 0x2f
 8003368:	70e3      	strb	r3, [r4, #3]
	start_machine_frame[4] = 70;
 800336a:	3b0d      	subs	r3, #13
 800336c:	7123      	strb	r3, [r4, #4]
	start_machine_frame[5] = 61;
 800336e:	3b09      	subs	r3, #9
 8003370:	7163      	strb	r3, [r4, #5]
	start_machine_frame[6] = 48;
 8003372:	3b0d      	subs	r3, #13
 8003374:	71a3      	strb	r3, [r4, #6]
	start_machine_frame[7] = 50;

	decHex(volt_buff, buffer_start);
 8003376:	a902      	add	r1, sp, #8
	start_machine_frame[7] = 50;
 8003378:	3302      	adds	r3, #2
 800337a:	71e3      	strb	r3, [r4, #7]
	decHex(volt_buff, buffer_start);
 800337c:	f7ff fbf8 	bl	8002b70 <decHex>
	check_size_info(2, buffer_start);
 8003380:	a902      	add	r1, sp, #8
 8003382:	2002      	movs	r0, #2
 8003384:	f7ff fc3e 	bl	8002c04 <check_size_info>
	strcat(start_machine_frame, buffer_start);
 8003388:	a902      	add	r1, sp, #8
 800338a:	0020      	movs	r0, r4
 800338c:	f000 faa7 	bl	80038de <strcat>


	decHex(temp_buff, buffer_start);
 8003390:	a902      	add	r1, sp, #8
 8003392:	0030      	movs	r0, r6
 8003394:	f7ff fbec 	bl	8002b70 <decHex>
	check_size_info(2, buffer_start);
 8003398:	a902      	add	r1, sp, #8
 800339a:	2002      	movs	r0, #2
 800339c:	f7ff fc32 	bl	8002c04 <check_size_info>
	strcat(start_machine_frame, buffer_start);
 80033a0:	a902      	add	r1, sp, #8
 80033a2:	0020      	movs	r0, r4
 80033a4:	f000 fa9b 	bl	80038de <strcat>


	start_machine_frame[12] = 13;
 80033a8:	230d      	movs	r3, #13
	start_machine_frame[13] = 10;
	start_machine_frame[14] = 0;
	HAL_UART_Transmit(&huart1, (uint8_t*) start_machine_frame, 15, 200);
 80033aa:	4e13      	ldr	r6, [pc, #76]	; (80033f8 <fn_send_start_frame_sigfox+0xf4>)
	start_machine_frame[12] = 13;
 80033ac:	7323      	strb	r3, [r4, #12]
	start_machine_frame[13] = 10;
 80033ae:	3b03      	subs	r3, #3
	HAL_UART_Transmit(&huart1, (uint8_t*) start_machine_frame, 15, 200);
 80033b0:	003a      	movs	r2, r7
 80033b2:	0021      	movs	r1, r4
	start_machine_frame[13] = 10;
 80033b4:	7363      	strb	r3, [r4, #13]
	HAL_UART_Transmit(&huart1, (uint8_t*) start_machine_frame, 15, 200);
 80033b6:	0030      	movs	r0, r6
 80033b8:	33be      	adds	r3, #190	; 0xbe
	start_machine_frame[14] = 0;
 80033ba:	73a5      	strb	r5, [r4, #14]
	HAL_UART_Transmit(&huart1, (uint8_t*) start_machine_frame, 15, 200);
 80033bc:	f7ff fa50 	bl	8002860 <HAL_UART_Transmit>
	HAL_Delay(500);
 80033c0:	20fa      	movs	r0, #250	; 0xfa
 80033c2:	0040      	lsls	r0, r0, #1
 80033c4:	f7fd f980 	bl	80006c8 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 200);
 80033c8:	23c8      	movs	r3, #200	; 0xc8
 80033ca:	a901      	add	r1, sp, #4
 80033cc:	2204      	movs	r2, #4
 80033ce:	0030      	movs	r0, r6
 80033d0:	f7ff fab0 	bl	8002934 <HAL_UART_Receive>

	HAL_Delay(1000);
 80033d4:	20fa      	movs	r0, #250	; 0xfa
 80033d6:	0080      	lsls	r0, r0, #2
 80033d8:	f7fd f976 	bl	80006c8 <HAL_Delay>
	SIGFOX_OFF
 80033dc:	2180      	movs	r1, #128	; 0x80
 80033de:	20a0      	movs	r0, #160	; 0xa0
 80033e0:	002a      	movs	r2, r5
 80033e2:	0209      	lsls	r1, r1, #8
 80033e4:	05c0      	lsls	r0, r0, #23
 80033e6:	f7fd fdf3 	bl	8000fd0 <HAL_GPIO_WritePin>
}
 80033ea:	b009      	add	sp, #36	; 0x24
 80033ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	200002a4 	.word	0x200002a4
 80033f4:	20000328 	.word	0x20000328
 80033f8:	200002a8 	.word	0x200002a8

080033fc <fn_info_sigfox>:

void fn_info_sigfox() {
 80033fc:	b570      	push	{r4, r5, r6, lr}
	SIGFOX_ON
 80033fe:	2580      	movs	r5, #128	; 0x80
 8003400:	24a0      	movs	r4, #160	; 0xa0
 8003402:	022d      	lsls	r5, r5, #8
 8003404:	05e4      	lsls	r4, r4, #23
 8003406:	0029      	movs	r1, r5
 8003408:	0020      	movs	r0, r4
 800340a:	2201      	movs	r2, #1
 800340c:	f7fd fde0 	bl	8000fd0 <HAL_GPIO_WritePin>
	SIGFOX_RESET_ON
 8003410:	0029      	movs	r1, r5
 8003412:	2200      	movs	r2, #0
 8003414:	0020      	movs	r0, r4
 8003416:	f7fd fddb 	bl	8000fd0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800341a:	200a      	movs	r0, #10
 800341c:	f7fd f954 	bl	80006c8 <HAL_Delay>
	SIGFOX_RESET_OFF
 8003420:	0029      	movs	r1, r5
 8003422:	2201      	movs	r2, #1
 8003424:	0020      	movs	r0, r4
 8003426:	f7fd fdd3 	bl	8000fd0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800342a:	20fa      	movs	r0, #250	; 0xfa
 800342c:	0080      	lsls	r0, r0, #2
 800342e:	f7fd f94b 	bl	80006c8 <HAL_Delay>
	fn_at_sigfox();
 8003432:	f7ff fef5 	bl	8003220 <fn_at_sigfox>
	HAL_Delay(100);
 8003436:	2064      	movs	r0, #100	; 0x64
 8003438:	f7fd f946 	bl	80006c8 <HAL_Delay>
	fn_init_sigfox();
 800343c:	f7ff fe3e 	bl	80030bc <fn_init_sigfox>
	HAL_Delay(100);
 8003440:	2064      	movs	r0, #100	; 0x64
 8003442:	f7fd f941 	bl	80006c8 <HAL_Delay>
	fn_get_id_sigfox();
 8003446:	f7ff fe93 	bl	8003170 <fn_get_id_sigfox>
	fn_fprint("SIGFOX ID: ");
 800344a:	4825      	ldr	r0, [pc, #148]	; (80034e0 <fn_info_sigfox+0xe4>)
 800344c:	f7ff fca0 	bl	8002d90 <fn_fprint>
	fn_fprint(st_sigfox_parameters.id);
 8003450:	4824      	ldr	r0, [pc, #144]	; (80034e4 <fn_info_sigfox+0xe8>)
 8003452:	f7ff fc9d 	bl	8002d90 <fn_fprint>
	fn_fprint("\r\n");
 8003456:	4e24      	ldr	r6, [pc, #144]	; (80034e8 <fn_info_sigfox+0xec>)
 8003458:	0030      	movs	r0, r6
 800345a:	f7ff fc99 	bl	8002d90 <fn_fprint>
	HAL_Delay(100);
 800345e:	2064      	movs	r0, #100	; 0x64
 8003460:	f7fd f932 	bl	80006c8 <HAL_Delay>
	fn_get_pac_sigfox();
 8003464:	f7ff feb0 	bl	80031c8 <fn_get_pac_sigfox>
	fn_fprint("SIGFOX PAC: ");
 8003468:	4820      	ldr	r0, [pc, #128]	; (80034ec <fn_info_sigfox+0xf0>)
 800346a:	f7ff fc91 	bl	8002d90 <fn_fprint>
	fn_fprint(st_sigfox_parameters.pac);
 800346e:	4820      	ldr	r0, [pc, #128]	; (80034f0 <fn_info_sigfox+0xf4>)
 8003470:	f7ff fc8e 	bl	8002d90 <fn_fprint>
	fn_fprint("\r\n");
 8003474:	0030      	movs	r0, r6
 8003476:	f7ff fc8b 	bl	8002d90 <fn_fprint>
	HAL_Delay(100);
 800347a:	2064      	movs	r0, #100	; 0x64
 800347c:	f7fd f924 	bl	80006c8 <HAL_Delay>
	fn_get_temperature_sigfox();
 8003480:	f7ff ff14 	bl	80032ac <fn_get_temperature_sigfox>
	fn_fprint("SIGFOX TEMPERATURE: ");
 8003484:	481b      	ldr	r0, [pc, #108]	; (80034f4 <fn_info_sigfox+0xf8>)
 8003486:	f7ff fc83 	bl	8002d90 <fn_fprint>
	fn_fprint(st_sigfox_parameters.temperature);
 800348a:	481b      	ldr	r0, [pc, #108]	; (80034f8 <fn_info_sigfox+0xfc>)
 800348c:	f7ff fc80 	bl	8002d90 <fn_fprint>
	fn_fprint("\r\n");
 8003490:	0030      	movs	r0, r6
 8003492:	f7ff fc7d 	bl	8002d90 <fn_fprint>
	SIGFOX_RESET_ON
 8003496:	0029      	movs	r1, r5
 8003498:	2200      	movs	r2, #0
 800349a:	0020      	movs	r0, r4
 800349c:	f7fd fd98 	bl	8000fd0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80034a0:	200a      	movs	r0, #10
 80034a2:	f7fd f911 	bl	80006c8 <HAL_Delay>
	SIGFOX_RESET_OFF
 80034a6:	0029      	movs	r1, r5
 80034a8:	2201      	movs	r2, #1
 80034aa:	0020      	movs	r0, r4
 80034ac:	f7fd fd90 	bl	8000fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80034b0:	2064      	movs	r0, #100	; 0x64
 80034b2:	f7fd f909 	bl	80006c8 <HAL_Delay>
	fn_get_volt_sigfox();
 80034b6:	f7ff fecb 	bl	8003250 <fn_get_volt_sigfox>
	fn_fprint("SIGFOX VOLTS: ");
 80034ba:	4810      	ldr	r0, [pc, #64]	; (80034fc <fn_info_sigfox+0x100>)
 80034bc:	f7ff fc68 	bl	8002d90 <fn_fprint>
	fn_fprint(st_sigfox_parameters.volts);
 80034c0:	480f      	ldr	r0, [pc, #60]	; (8003500 <fn_info_sigfox+0x104>)
 80034c2:	f7ff fc65 	bl	8002d90 <fn_fprint>
	fn_fprint("\r\n");
 80034c6:	0030      	movs	r0, r6
 80034c8:	f7ff fc62 	bl	8002d90 <fn_fprint>
	HAL_Delay(100);
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	f7fd f8fb 	bl	80006c8 <HAL_Delay>
	SIGFOX_OFF
 80034d2:	0029      	movs	r1, r5
 80034d4:	2200      	movs	r2, #0
 80034d6:	0020      	movs	r0, r4
 80034d8:	f7fd fd7a 	bl	8000fd0 <HAL_GPIO_WritePin>
}
 80034dc:	bd70      	pop	{r4, r5, r6, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	08003cb1 	.word	0x08003cb1
 80034e4:	200001f4 	.word	0x200001f4
 80034e8:	08003d18 	.word	0x08003d18
 80034ec:	08003cbd 	.word	0x08003cbd
 80034f0:	200001fe 	.word	0x200001fe
 80034f4:	08003cca 	.word	0x08003cca
 80034f8:	20000210 	.word	0x20000210
 80034fc:	08003cdf 	.word	0x08003cdf
 8003500:	20000217 	.word	0x20000217

08003504 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003504:	2201      	movs	r2, #1
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_MspInit+0x18>)
 8003508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800350a:	430a      	orrs	r2, r1
 800350c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003512:	0552      	lsls	r2, r2, #21
 8003514:	430a      	orrs	r2, r1
 8003516:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003518:	4770      	bx	lr
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	40021000 	.word	0x40021000

08003520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003520:	b510      	push	{r4, lr}
 8003522:	0004      	movs	r4, r0
 8003524:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003526:	2214      	movs	r2, #20
 8003528:	2100      	movs	r1, #0
 800352a:	a801      	add	r0, sp, #4
 800352c:	f000 f9cf 	bl	80038ce <memset>
  if(hadc->Instance==ADC1)
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_ADC_MspInit+0x4c>)
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d116      	bne.n	8003566 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <HAL_ADC_MspInit+0x50>)
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003542:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003544:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003546:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354c:	430a      	orrs	r2, r1
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	400b      	ands	r3, r1
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 8003558:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 800355c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800355e:	3b2d      	subs	r3, #45	; 0x2d
 8003560:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003562:	f7fd fbff 	bl	8000d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003566:	b006      	add	sp, #24
 8003568:	bd10      	pop	{r4, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	40012400 	.word	0x40012400
 8003570:	40021000 	.word	0x40021000

08003574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003574:	b510      	push	{r4, lr}
 8003576:	0004      	movs	r4, r0
 8003578:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357a:	2214      	movs	r2, #20
 800357c:	2100      	movs	r1, #0
 800357e:	a801      	add	r0, sp, #4
 8003580:	f000 f9a5 	bl	80038ce <memset>
  if(hi2c->Instance==I2C1)
 8003584:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_I2C_MspInit+0x58>)
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d11c      	bne.n	80035c6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358c:	2102      	movs	r1, #2
 800358e:	4c10      	ldr	r4, [pc, #64]	; (80035d0 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003590:	4810      	ldr	r0, [pc, #64]	; (80035d4 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003594:	430a      	orrs	r2, r1
 8003596:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003598:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800359a:	400b      	ands	r3, r1
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035a0:	23c0      	movs	r3, #192	; 0xc0
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a6:	2312      	movs	r3, #18
 80035a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035aa:	3b11      	subs	r3, #17
 80035ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ae:	185b      	adds	r3, r3, r1
 80035b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035b4:	3301      	adds	r3, #1
 80035b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b8:	f7fd fbd4 	bl	8000d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035c0:	039b      	lsls	r3, r3, #14
 80035c2:	4313      	orrs	r3, r2
 80035c4:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035c6:	b006      	add	sp, #24
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	40005400 	.word	0x40005400
 80035d0:	40021000 	.word	0x40021000
 80035d4:	50000400 	.word	0x50000400

080035d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035d8:	b510      	push	{r4, lr}
 80035da:	0004      	movs	r4, r0
 80035dc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035de:	2214      	movs	r2, #20
 80035e0:	2100      	movs	r1, #0
 80035e2:	a805      	add	r0, sp, #20
 80035e4:	f000 f973 	bl	80038ce <memset>
  if(huart->Instance==LPUART1)
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	4a56      	ldr	r2, [pc, #344]	; (8003744 <HAL_UART_MspInit+0x16c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d123      	bne.n	8003638 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	4b55      	ldr	r3, [pc, #340]	; (8003748 <HAL_UART_MspInit+0x170>)
 80035f4:	02d2      	lsls	r2, r2, #11
 80035f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f8:	4854      	ldr	r0, [pc, #336]	; (800374c <HAL_UART_MspInit+0x174>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80035fa:	430a      	orrs	r2, r1
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	2202      	movs	r2, #2
 8003600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003602:	4311      	orrs	r1, r2
 8003604:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003608:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360a:	4013      	ands	r3, r2
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
 8003610:	23c0      	movs	r3, #192	; 0xc0
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 800361a:	3301      	adds	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 800361e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003620:	f7fd fba0 	bl	8000d64 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8003624:	2200      	movs	r2, #0
 8003626:	201d      	movs	r0, #29
 8003628:	0011      	movs	r1, r2
 800362a:	f7fd fb0f 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 800362e:	201d      	movs	r0, #29
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART5 interrupt Init */
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003630:	f7fd fb46 	bl	8000cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003634:	b00a      	add	sp, #40	; 0x28
 8003636:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 8003638:	4a45      	ldr	r2, [pc, #276]	; (8003750 <HAL_UART_MspInit+0x178>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d11d      	bne.n	800367a <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_UART_MspInit+0x170>)
 8003642:	01d2      	lsls	r2, r2, #7
 8003644:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003646:	4841      	ldr	r0, [pc, #260]	; (800374c <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003648:	430a      	orrs	r2, r1
 800364a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364c:	2202      	movs	r2, #2
 800364e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003650:	4311      	orrs	r1, r2
 8003652:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003658:	4013      	ands	r3, r2
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SFOX_RX_Pin|SFOX_TX_Pin;
 800365e:	23c0      	movs	r3, #192	; 0xc0
 8003660:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003662:	3bbd      	subs	r3, #189	; 0xbd
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003666:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003668:	f7fd fb7c 	bl	8000d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	201b      	movs	r0, #27
 8003670:	0011      	movs	r1, r2
 8003672:	f7fd faeb 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003676:	201b      	movs	r0, #27
 8003678:	e7da      	b.n	8003630 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART2)
 800367a:	4a36      	ldr	r2, [pc, #216]	; (8003754 <HAL_UART_MspInit+0x17c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d121      	bne.n	80036c4 <HAL_UART_MspInit+0xec>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_UART_MspInit+0x170>)
 8003684:	0292      	lsls	r2, r2, #10
 8003686:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003688:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 800368a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003692:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003694:	430a      	orrs	r2, r1
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	400b      	ands	r3, r1
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = US_RX_Pin|US_TX_Pin;
 80036a0:	230c      	movs	r3, #12
 80036a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	3b0a      	subs	r3, #10
 80036a6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a8:	185b      	adds	r3, r3, r1
 80036aa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80036ac:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ae:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80036b0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	f7fd fb57 	bl	8000d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	201c      	movs	r0, #28
 80036ba:	0011      	movs	r1, r2
 80036bc:	f7fd fac6 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036c0:	201c      	movs	r0, #28
 80036c2:	e7b5      	b.n	8003630 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART4)
 80036c4:	4a24      	ldr	r2, [pc, #144]	; (8003758 <HAL_UART_MspInit+0x180>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d120      	bne.n	800370c <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART4_CLK_ENABLE();
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_UART_MspInit+0x170>)
 80036ce:	0312      	lsls	r2, r2, #12
 80036d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART4_CLK_ENABLE();
 80036d4:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	2101      	movs	r1, #1
    __HAL_RCC_USART4_CLK_ENABLE();
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036dc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	430a      	orrs	r2, r1
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e6:	400b      	ands	r3, r1
 80036e8:	9303      	str	r3, [sp, #12]
 80036ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 80036ec:	2303      	movs	r3, #3
 80036ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80036f2:	18db      	adds	r3, r3, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80036f6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f8:	a905      	add	r1, sp, #20
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fa:	f7fd fb33 	bl	8000d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	200e      	movs	r0, #14
 8003702:	0011      	movs	r1, r2
 8003704:	f7fd faa2 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003708:	200e      	movs	r0, #14
 800370a:	e791      	b.n	8003630 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART5)
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_UART_MspInit+0x184>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d000      	beq.n	8003714 <HAL_UART_MspInit+0x13c>
 8003712:	e78f      	b.n	8003634 <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <HAL_UART_MspInit+0x170>)
 8003718:	0352      	lsls	r2, r2, #13
 800371a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371c:	480b      	ldr	r0, [pc, #44]	; (800374c <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART5_CLK_ENABLE();
 800371e:	430a      	orrs	r2, r1
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	2202      	movs	r2, #2
 8003724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003726:	4311      	orrs	r1, r2
 8003728:	62d9      	str	r1, [r3, #44]	; 0x2c
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372e:	4013      	ands	r3, r2
 8003730:	9304      	str	r3, [sp, #16]
 8003732:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPRS_RX_Pin|GPRS_TX_Pin;
 8003734:	2318      	movs	r3, #24
 8003736:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	3b15      	subs	r3, #21
 800373a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 800373c:	3303      	adds	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8003740:	9309      	str	r3, [sp, #36]	; 0x24
 8003742:	e7da      	b.n	80036fa <HAL_UART_MspInit+0x122>
 8003744:	40004800 	.word	0x40004800
 8003748:	40021000 	.word	0x40021000
 800374c:	50000400 	.word	0x50000400
 8003750:	40013800 	.word	0x40013800
 8003754:	40004400 	.word	0x40004400
 8003758:	40004c00 	.word	0x40004c00
 800375c:	40005000 	.word	0x40005000

08003760 <NMI_Handler>:
 8003760:	4770      	bx	lr

08003762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003762:	e7fe      	b.n	8003762 <HardFault_Handler>

08003764 <SVC_Handler>:
 8003764:	4770      	bx	lr

08003766 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003766:	4770      	bx	lr

08003768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003768:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800376a:	f7fc ff9f 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800376e:	bd10      	pop	{r4, pc}

08003770 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8003770:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003772:	4803      	ldr	r0, [pc, #12]	; (8003780 <USART4_5_IRQHandler+0x10>)
 8003774:	f7fe fd1c 	bl	80021b0 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <USART4_5_IRQHandler+0x14>)
 800377a:	f7fe fd19 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800377e:	bd10      	pop	{r4, pc}
 8003780:	20000410 	.word	0x20000410
 8003784:	20000224 	.word	0x20000224

08003788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003788:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800378a:	4802      	ldr	r0, [pc, #8]	; (8003794 <USART1_IRQHandler+0xc>)
 800378c:	f7fe fd10 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003790:	bd10      	pop	{r4, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	200002a8 	.word	0x200002a8

08003798 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003798:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800379a:	4802      	ldr	r0, [pc, #8]	; (80037a4 <USART2_IRQHandler+0xc>)
 800379c:	f7fe fd08 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	20000490 	.word	0x20000490

080037a8 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 80037a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80037aa:	4802      	ldr	r0, [pc, #8]	; (80037b4 <RNG_LPUART1_IRQHandler+0xc>)
 80037ac:	f7fe fd00 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	20000390 	.word	0x20000390

080037b8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <SystemInit+0x44>)
 80037bc:	0052      	lsls	r2, r2, #1
 80037be:	6819      	ldr	r1, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	490e      	ldr	r1, [pc, #56]	; (8003800 <SystemInit+0x48>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	490d      	ldr	r1, [pc, #52]	; (8003804 <SystemInit+0x4c>)
 80037d0:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80037d2:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80037d4:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	438a      	bics	r2, r1
 80037da:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	490a      	ldr	r1, [pc, #40]	; (8003808 <SystemInit+0x50>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	4909      	ldr	r1, [pc, #36]	; (800380c <SystemInit+0x54>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	4b07      	ldr	r3, [pc, #28]	; (8003810 <SystemInit+0x58>)
 80037f4:	0512      	lsls	r2, r2, #20
 80037f6:	609a      	str	r2, [r3, #8]
#endif
}
 80037f8:	4770      	bx	lr
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	40021000 	.word	0x40021000
 8003800:	88ff400c 	.word	0x88ff400c
 8003804:	fef6fff6 	.word	0xfef6fff6
 8003808:	fffbffff 	.word	0xfffbffff
 800380c:	ff02ffff 	.word	0xff02ffff
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003814:	480d      	ldr	r0, [pc, #52]	; (800384c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003816:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800381a:	e003      	b.n	8003824 <LoopCopyDataInit>

0800381c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800381e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003822:	3104      	adds	r1, #4

08003824 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003824:	480b      	ldr	r0, [pc, #44]	; (8003854 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800382a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800382c:	d3f6      	bcc.n	800381c <CopyDataInit>
  ldr  r2, =_sbss
 800382e:	4a0b      	ldr	r2, [pc, #44]	; (800385c <LoopForever+0x12>)
  b  LoopFillZerobss
 8003830:	e002      	b.n	8003838 <LoopFillZerobss>

08003832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003832:	2300      	movs	r3, #0
  str  r3, [r2]
 8003834:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003836:	3204      	adds	r2, #4

08003838 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <LoopForever+0x16>)
  cmp  r2, r3
 800383a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800383c:	d3f9      	bcc.n	8003832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800383e:	f7ff ffbb 	bl	80037b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003842:	f000 f817 	bl	8003874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003846:	f7ff fac7 	bl	8002dd8 <main>

0800384a <LoopForever>:

LoopForever:
    b LoopForever
 800384a:	e7fe      	b.n	800384a <LoopForever>
   ldr   r0, =_estack
 800384c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003850:	08003e68 	.word	0x08003e68
  ldr  r0, =_sdata
 8003854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003858:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 800385c:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 8003860:	2000056c 	.word	0x2000056c

08003864 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003864:	e7fe      	b.n	8003864 <ADC1_COMP_IRQHandler>

08003866 <atoi>:
 8003866:	b510      	push	{r4, lr}
 8003868:	220a      	movs	r2, #10
 800386a:	2100      	movs	r1, #0
 800386c:	f000 f8d2 	bl	8003a14 <strtol>
 8003870:	bd10      	pop	{r4, pc}
	...

08003874 <__libc_init_array>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	2600      	movs	r6, #0
 8003878:	4d0c      	ldr	r5, [pc, #48]	; (80038ac <__libc_init_array+0x38>)
 800387a:	4c0d      	ldr	r4, [pc, #52]	; (80038b0 <__libc_init_array+0x3c>)
 800387c:	1b64      	subs	r4, r4, r5
 800387e:	10a4      	asrs	r4, r4, #2
 8003880:	42a6      	cmp	r6, r4
 8003882:	d109      	bne.n	8003898 <__libc_init_array+0x24>
 8003884:	2600      	movs	r6, #0
 8003886:	f000 f8fb 	bl	8003a80 <_init>
 800388a:	4d0a      	ldr	r5, [pc, #40]	; (80038b4 <__libc_init_array+0x40>)
 800388c:	4c0a      	ldr	r4, [pc, #40]	; (80038b8 <__libc_init_array+0x44>)
 800388e:	1b64      	subs	r4, r4, r5
 8003890:	10a4      	asrs	r4, r4, #2
 8003892:	42a6      	cmp	r6, r4
 8003894:	d105      	bne.n	80038a2 <__libc_init_array+0x2e>
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	00b3      	lsls	r3, r6, #2
 800389a:	58eb      	ldr	r3, [r5, r3]
 800389c:	4798      	blx	r3
 800389e:	3601      	adds	r6, #1
 80038a0:	e7ee      	b.n	8003880 <__libc_init_array+0xc>
 80038a2:	00b3      	lsls	r3, r6, #2
 80038a4:	58eb      	ldr	r3, [r5, r3]
 80038a6:	4798      	blx	r3
 80038a8:	3601      	adds	r6, #1
 80038aa:	e7f2      	b.n	8003892 <__libc_init_array+0x1e>
 80038ac:	08003e60 	.word	0x08003e60
 80038b0:	08003e60 	.word	0x08003e60
 80038b4:	08003e60 	.word	0x08003e60
 80038b8:	08003e64 	.word	0x08003e64

080038bc <memcpy>:
 80038bc:	2300      	movs	r3, #0
 80038be:	b510      	push	{r4, lr}
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d100      	bne.n	80038c6 <memcpy+0xa>
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	5ccc      	ldrb	r4, [r1, r3]
 80038c8:	54c4      	strb	r4, [r0, r3]
 80038ca:	3301      	adds	r3, #1
 80038cc:	e7f8      	b.n	80038c0 <memcpy+0x4>

080038ce <memset>:
 80038ce:	0003      	movs	r3, r0
 80038d0:	1882      	adds	r2, r0, r2
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d100      	bne.n	80038d8 <memset+0xa>
 80038d6:	4770      	bx	lr
 80038d8:	7019      	strb	r1, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	e7f9      	b.n	80038d2 <memset+0x4>

080038de <strcat>:
 80038de:	0002      	movs	r2, r0
 80038e0:	b510      	push	{r4, lr}
 80038e2:	7813      	ldrb	r3, [r2, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <strcat+0x16>
 80038e8:	5ccc      	ldrb	r4, [r1, r3]
 80038ea:	54d4      	strb	r4, [r2, r3]
 80038ec:	3301      	adds	r3, #1
 80038ee:	2c00      	cmp	r4, #0
 80038f0:	d1fa      	bne.n	80038e8 <strcat+0xa>
 80038f2:	bd10      	pop	{r4, pc}
 80038f4:	3201      	adds	r2, #1
 80038f6:	e7f4      	b.n	80038e2 <strcat+0x4>

080038f8 <strcpy>:
 80038f8:	1c03      	adds	r3, r0, #0
 80038fa:	780a      	ldrb	r2, [r1, #0]
 80038fc:	3101      	adds	r1, #1
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	2a00      	cmp	r2, #0
 8003904:	d1f9      	bne.n	80038fa <strcpy+0x2>
 8003906:	4770      	bx	lr

08003908 <_strtol_l.isra.0>:
 8003908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390a:	001f      	movs	r7, r3
 800390c:	000e      	movs	r6, r1
 800390e:	b087      	sub	sp, #28
 8003910:	9005      	str	r0, [sp, #20]
 8003912:	9103      	str	r1, [sp, #12]
 8003914:	9202      	str	r2, [sp, #8]
 8003916:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003918:	7834      	ldrb	r4, [r6, #0]
 800391a:	f000 f88f 	bl	8003a3c <__locale_ctype_ptr_l>
 800391e:	2208      	movs	r2, #8
 8003920:	1900      	adds	r0, r0, r4
 8003922:	7843      	ldrb	r3, [r0, #1]
 8003924:	1c75      	adds	r5, r6, #1
 8003926:	4013      	ands	r3, r2
 8003928:	d10c      	bne.n	8003944 <_strtol_l.isra.0+0x3c>
 800392a:	2c2d      	cmp	r4, #45	; 0x2d
 800392c:	d10c      	bne.n	8003948 <_strtol_l.isra.0+0x40>
 800392e:	3301      	adds	r3, #1
 8003930:	782c      	ldrb	r4, [r5, #0]
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	1cb5      	adds	r5, r6, #2
 8003936:	2f00      	cmp	r7, #0
 8003938:	d00c      	beq.n	8003954 <_strtol_l.isra.0+0x4c>
 800393a:	2f10      	cmp	r7, #16
 800393c:	d114      	bne.n	8003968 <_strtol_l.isra.0+0x60>
 800393e:	2c30      	cmp	r4, #48	; 0x30
 8003940:	d00a      	beq.n	8003958 <_strtol_l.isra.0+0x50>
 8003942:	e011      	b.n	8003968 <_strtol_l.isra.0+0x60>
 8003944:	002e      	movs	r6, r5
 8003946:	e7e6      	b.n	8003916 <_strtol_l.isra.0+0xe>
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	2c2b      	cmp	r4, #43	; 0x2b
 800394c:	d1f3      	bne.n	8003936 <_strtol_l.isra.0+0x2e>
 800394e:	782c      	ldrb	r4, [r5, #0]
 8003950:	1cb5      	adds	r5, r6, #2
 8003952:	e7f0      	b.n	8003936 <_strtol_l.isra.0+0x2e>
 8003954:	2c30      	cmp	r4, #48	; 0x30
 8003956:	d12f      	bne.n	80039b8 <_strtol_l.isra.0+0xb0>
 8003958:	2220      	movs	r2, #32
 800395a:	782b      	ldrb	r3, [r5, #0]
 800395c:	4393      	bics	r3, r2
 800395e:	2b58      	cmp	r3, #88	; 0x58
 8003960:	d151      	bne.n	8003a06 <_strtol_l.isra.0+0xfe>
 8003962:	2710      	movs	r7, #16
 8003964:	786c      	ldrb	r4, [r5, #1]
 8003966:	3502      	adds	r5, #2
 8003968:	9b01      	ldr	r3, [sp, #4]
 800396a:	4a29      	ldr	r2, [pc, #164]	; (8003a10 <_strtol_l.isra.0+0x108>)
 800396c:	0039      	movs	r1, r7
 800396e:	189e      	adds	r6, r3, r2
 8003970:	0030      	movs	r0, r6
 8003972:	f7fc fc75 	bl	8000260 <__aeabi_uidivmod>
 8003976:	0030      	movs	r0, r6
 8003978:	9104      	str	r1, [sp, #16]
 800397a:	0039      	movs	r1, r7
 800397c:	f7fc fbea 	bl	8000154 <__udivsi3>
 8003980:	2101      	movs	r1, #1
 8003982:	2300      	movs	r3, #0
 8003984:	4249      	negs	r1, r1
 8003986:	0002      	movs	r2, r0
 8003988:	468c      	mov	ip, r1
 800398a:	0018      	movs	r0, r3
 800398c:	0021      	movs	r1, r4
 800398e:	3930      	subs	r1, #48	; 0x30
 8003990:	2909      	cmp	r1, #9
 8003992:	d813      	bhi.n	80039bc <_strtol_l.isra.0+0xb4>
 8003994:	000c      	movs	r4, r1
 8003996:	42a7      	cmp	r7, r4
 8003998:	dd1c      	ble.n	80039d4 <_strtol_l.isra.0+0xcc>
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	d009      	beq.n	80039b2 <_strtol_l.isra.0+0xaa>
 800399e:	4663      	mov	r3, ip
 80039a0:	4282      	cmp	r2, r0
 80039a2:	d306      	bcc.n	80039b2 <_strtol_l.isra.0+0xaa>
 80039a4:	d102      	bne.n	80039ac <_strtol_l.isra.0+0xa4>
 80039a6:	9904      	ldr	r1, [sp, #16]
 80039a8:	42a1      	cmp	r1, r4
 80039aa:	db02      	blt.n	80039b2 <_strtol_l.isra.0+0xaa>
 80039ac:	2301      	movs	r3, #1
 80039ae:	4378      	muls	r0, r7
 80039b0:	1820      	adds	r0, r4, r0
 80039b2:	782c      	ldrb	r4, [r5, #0]
 80039b4:	3501      	adds	r5, #1
 80039b6:	e7e9      	b.n	800398c <_strtol_l.isra.0+0x84>
 80039b8:	270a      	movs	r7, #10
 80039ba:	e7d5      	b.n	8003968 <_strtol_l.isra.0+0x60>
 80039bc:	0021      	movs	r1, r4
 80039be:	3941      	subs	r1, #65	; 0x41
 80039c0:	2919      	cmp	r1, #25
 80039c2:	d801      	bhi.n	80039c8 <_strtol_l.isra.0+0xc0>
 80039c4:	3c37      	subs	r4, #55	; 0x37
 80039c6:	e7e6      	b.n	8003996 <_strtol_l.isra.0+0x8e>
 80039c8:	0021      	movs	r1, r4
 80039ca:	3961      	subs	r1, #97	; 0x61
 80039cc:	2919      	cmp	r1, #25
 80039ce:	d801      	bhi.n	80039d4 <_strtol_l.isra.0+0xcc>
 80039d0:	3c57      	subs	r4, #87	; 0x57
 80039d2:	e7e0      	b.n	8003996 <_strtol_l.isra.0+0x8e>
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	d108      	bne.n	80039ea <_strtol_l.isra.0+0xe2>
 80039d8:	9a05      	ldr	r2, [sp, #20]
 80039da:	3323      	adds	r3, #35	; 0x23
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	9b02      	ldr	r3, [sp, #8]
 80039e0:	0030      	movs	r0, r6
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <_strtol_l.isra.0+0xf6>
 80039e6:	b007      	add	sp, #28
 80039e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ea:	9a01      	ldr	r2, [sp, #4]
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d000      	beq.n	80039f2 <_strtol_l.isra.0+0xea>
 80039f0:	4240      	negs	r0, r0
 80039f2:	9a02      	ldr	r2, [sp, #8]
 80039f4:	2a00      	cmp	r2, #0
 80039f6:	d0f6      	beq.n	80039e6 <_strtol_l.isra.0+0xde>
 80039f8:	9a03      	ldr	r2, [sp, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d000      	beq.n	8003a00 <_strtol_l.isra.0+0xf8>
 80039fe:	1e6a      	subs	r2, r5, #1
 8003a00:	9b02      	ldr	r3, [sp, #8]
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e7ef      	b.n	80039e6 <_strtol_l.isra.0+0xde>
 8003a06:	2430      	movs	r4, #48	; 0x30
 8003a08:	2f00      	cmp	r7, #0
 8003a0a:	d1ad      	bne.n	8003968 <_strtol_l.isra.0+0x60>
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	e7ab      	b.n	8003968 <_strtol_l.isra.0+0x60>
 8003a10:	7fffffff 	.word	0x7fffffff

08003a14 <strtol>:
 8003a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a16:	0013      	movs	r3, r2
 8003a18:	4a06      	ldr	r2, [pc, #24]	; (8003a34 <strtol+0x20>)
 8003a1a:	0005      	movs	r5, r0
 8003a1c:	6810      	ldr	r0, [r2, #0]
 8003a1e:	6a04      	ldr	r4, [r0, #32]
 8003a20:	2c00      	cmp	r4, #0
 8003a22:	d100      	bne.n	8003a26 <strtol+0x12>
 8003a24:	4c04      	ldr	r4, [pc, #16]	; (8003a38 <strtol+0x24>)
 8003a26:	000a      	movs	r2, r1
 8003a28:	9400      	str	r4, [sp, #0]
 8003a2a:	0029      	movs	r1, r5
 8003a2c:	f7ff ff6c 	bl	8003908 <_strtol_l.isra.0>
 8003a30:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	20000004 	.word	0x20000004
 8003a38:	20000068 	.word	0x20000068

08003a3c <__locale_ctype_ptr_l>:
 8003a3c:	30ec      	adds	r0, #236	; 0xec
 8003a3e:	6800      	ldr	r0, [r0, #0]
 8003a40:	4770      	bx	lr

08003a42 <__ascii_mbtowc>:
 8003a42:	b082      	sub	sp, #8
 8003a44:	2900      	cmp	r1, #0
 8003a46:	d100      	bne.n	8003a4a <__ascii_mbtowc+0x8>
 8003a48:	a901      	add	r1, sp, #4
 8003a4a:	1e10      	subs	r0, r2, #0
 8003a4c:	d006      	beq.n	8003a5c <__ascii_mbtowc+0x1a>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <__ascii_mbtowc+0x1e>
 8003a52:	7813      	ldrb	r3, [r2, #0]
 8003a54:	600b      	str	r3, [r1, #0]
 8003a56:	7810      	ldrb	r0, [r2, #0]
 8003a58:	1e43      	subs	r3, r0, #1
 8003a5a:	4198      	sbcs	r0, r3
 8003a5c:	b002      	add	sp, #8
 8003a5e:	4770      	bx	lr
 8003a60:	2002      	movs	r0, #2
 8003a62:	4240      	negs	r0, r0
 8003a64:	e7fa      	b.n	8003a5c <__ascii_mbtowc+0x1a>

08003a66 <__ascii_wctomb>:
 8003a66:	1e0b      	subs	r3, r1, #0
 8003a68:	d004      	beq.n	8003a74 <__ascii_wctomb+0xe>
 8003a6a:	2aff      	cmp	r2, #255	; 0xff
 8003a6c:	d904      	bls.n	8003a78 <__ascii_wctomb+0x12>
 8003a6e:	238a      	movs	r3, #138	; 0x8a
 8003a70:	6003      	str	r3, [r0, #0]
 8003a72:	3b8b      	subs	r3, #139	; 0x8b
 8003a74:	0018      	movs	r0, r3
 8003a76:	4770      	bx	lr
 8003a78:	700a      	strb	r2, [r1, #0]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e7fa      	b.n	8003a74 <__ascii_wctomb+0xe>
	...

08003a80 <_init>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr

08003a8c <_fini>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr
