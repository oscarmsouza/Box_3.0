
Box_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000374c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800380c  0800380c  0001380c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08003be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000398  200001d4  08003db8  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000056c  08003db8  0002056c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000156d9  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cb5  00000000  00000000  000358d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000084f5  00000000  00000000  0003858a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ad8  00000000  00000000  00040a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000dd0  00000000  00000000  00041558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007d2e  00000000  00000000  00042328  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003ba9  00000000  00000000  0004a056  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004dbff  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002288  00000000  00000000  0004dc7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037f4 	.word	0x080037f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	080037f4 	.word	0x080037f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f806 	bl	8000268 <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__aeabi_idiv0>:
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_uldivmod>:
 800026c:	2b00      	cmp	r3, #0
 800026e:	d111      	bne.n	8000294 <__aeabi_uldivmod+0x28>
 8000270:	2a00      	cmp	r2, #0
 8000272:	d10f      	bne.n	8000294 <__aeabi_uldivmod+0x28>
 8000274:	2900      	cmp	r1, #0
 8000276:	d100      	bne.n	800027a <__aeabi_uldivmod+0xe>
 8000278:	2800      	cmp	r0, #0
 800027a:	d002      	beq.n	8000282 <__aeabi_uldivmod+0x16>
 800027c:	2100      	movs	r1, #0
 800027e:	43c9      	mvns	r1, r1
 8000280:	1c08      	adds	r0, r1, #0
 8000282:	b407      	push	{r0, r1, r2}
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <__aeabi_uldivmod+0x24>)
 8000286:	a102      	add	r1, pc, #8	; (adr r1, 8000290 <__aeabi_uldivmod+0x24>)
 8000288:	1840      	adds	r0, r0, r1
 800028a:	9002      	str	r0, [sp, #8]
 800028c:	bd03      	pop	{r0, r1, pc}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	ffffffd9 	.word	0xffffffd9
 8000294:	b403      	push	{r0, r1}
 8000296:	4668      	mov	r0, sp
 8000298:	b501      	push	{r0, lr}
 800029a:	9802      	ldr	r0, [sp, #8]
 800029c:	f000 f806 	bl	80002ac <__udivmoddi4>
 80002a0:	9b01      	ldr	r3, [sp, #4]
 80002a2:	469e      	mov	lr, r3
 80002a4:	b002      	add	sp, #8
 80002a6:	bc0c      	pop	{r2, r3}
 80002a8:	4770      	bx	lr
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__udivmoddi4>:
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ae:	4657      	mov	r7, sl
 80002b0:	464e      	mov	r6, r9
 80002b2:	4645      	mov	r5, r8
 80002b4:	46de      	mov	lr, fp
 80002b6:	b5e0      	push	{r5, r6, r7, lr}
 80002b8:	0004      	movs	r4, r0
 80002ba:	b083      	sub	sp, #12
 80002bc:	000d      	movs	r5, r1
 80002be:	4692      	mov	sl, r2
 80002c0:	4699      	mov	r9, r3
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d82f      	bhi.n	8000326 <__udivmoddi4+0x7a>
 80002c6:	d02c      	beq.n	8000322 <__udivmoddi4+0x76>
 80002c8:	4649      	mov	r1, r9
 80002ca:	4650      	mov	r0, sl
 80002cc:	f000 f8cc 	bl	8000468 <__clzdi2>
 80002d0:	0029      	movs	r1, r5
 80002d2:	0006      	movs	r6, r0
 80002d4:	0020      	movs	r0, r4
 80002d6:	f000 f8c7 	bl	8000468 <__clzdi2>
 80002da:	1a33      	subs	r3, r6, r0
 80002dc:	4698      	mov	r8, r3
 80002de:	3b20      	subs	r3, #32
 80002e0:	469b      	mov	fp, r3
 80002e2:	d500      	bpl.n	80002e6 <__udivmoddi4+0x3a>
 80002e4:	e074      	b.n	80003d0 <__udivmoddi4+0x124>
 80002e6:	4653      	mov	r3, sl
 80002e8:	465a      	mov	r2, fp
 80002ea:	4093      	lsls	r3, r2
 80002ec:	001f      	movs	r7, r3
 80002ee:	4653      	mov	r3, sl
 80002f0:	4642      	mov	r2, r8
 80002f2:	4093      	lsls	r3, r2
 80002f4:	001e      	movs	r6, r3
 80002f6:	42af      	cmp	r7, r5
 80002f8:	d829      	bhi.n	800034e <__udivmoddi4+0xa2>
 80002fa:	d026      	beq.n	800034a <__udivmoddi4+0x9e>
 80002fc:	465b      	mov	r3, fp
 80002fe:	1ba4      	subs	r4, r4, r6
 8000300:	41bd      	sbcs	r5, r7
 8000302:	2b00      	cmp	r3, #0
 8000304:	da00      	bge.n	8000308 <__udivmoddi4+0x5c>
 8000306:	e079      	b.n	80003fc <__udivmoddi4+0x150>
 8000308:	2200      	movs	r2, #0
 800030a:	2300      	movs	r3, #0
 800030c:	9200      	str	r2, [sp, #0]
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	2301      	movs	r3, #1
 8000312:	465a      	mov	r2, fp
 8000314:	4093      	lsls	r3, r2
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	2301      	movs	r3, #1
 800031a:	4642      	mov	r2, r8
 800031c:	4093      	lsls	r3, r2
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	e019      	b.n	8000356 <__udivmoddi4+0xaa>
 8000322:	4282      	cmp	r2, r0
 8000324:	d9d0      	bls.n	80002c8 <__udivmoddi4+0x1c>
 8000326:	2200      	movs	r2, #0
 8000328:	2300      	movs	r3, #0
 800032a:	9200      	str	r2, [sp, #0]
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <__udivmoddi4+0x8c>
 8000334:	601c      	str	r4, [r3, #0]
 8000336:	605d      	str	r5, [r3, #4]
 8000338:	9800      	ldr	r0, [sp, #0]
 800033a:	9901      	ldr	r1, [sp, #4]
 800033c:	b003      	add	sp, #12
 800033e:	bc3c      	pop	{r2, r3, r4, r5}
 8000340:	4690      	mov	r8, r2
 8000342:	4699      	mov	r9, r3
 8000344:	46a2      	mov	sl, r4
 8000346:	46ab      	mov	fp, r5
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	42a3      	cmp	r3, r4
 800034c:	d9d6      	bls.n	80002fc <__udivmoddi4+0x50>
 800034e:	2200      	movs	r2, #0
 8000350:	2300      	movs	r3, #0
 8000352:	9200      	str	r2, [sp, #0]
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	4643      	mov	r3, r8
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0e8      	beq.n	800032e <__udivmoddi4+0x82>
 800035c:	07fb      	lsls	r3, r7, #31
 800035e:	0872      	lsrs	r2, r6, #1
 8000360:	431a      	orrs	r2, r3
 8000362:	4646      	mov	r6, r8
 8000364:	087b      	lsrs	r3, r7, #1
 8000366:	e00e      	b.n	8000386 <__udivmoddi4+0xda>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d101      	bne.n	8000370 <__udivmoddi4+0xc4>
 800036c:	42a2      	cmp	r2, r4
 800036e:	d80c      	bhi.n	800038a <__udivmoddi4+0xde>
 8000370:	1aa4      	subs	r4, r4, r2
 8000372:	419d      	sbcs	r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	1924      	adds	r4, r4, r4
 8000378:	416d      	adcs	r5, r5
 800037a:	2100      	movs	r1, #0
 800037c:	3e01      	subs	r6, #1
 800037e:	1824      	adds	r4, r4, r0
 8000380:	414d      	adcs	r5, r1
 8000382:	2e00      	cmp	r6, #0
 8000384:	d006      	beq.n	8000394 <__udivmoddi4+0xe8>
 8000386:	42ab      	cmp	r3, r5
 8000388:	d9ee      	bls.n	8000368 <__udivmoddi4+0xbc>
 800038a:	3e01      	subs	r6, #1
 800038c:	1924      	adds	r4, r4, r4
 800038e:	416d      	adcs	r5, r5
 8000390:	2e00      	cmp	r6, #0
 8000392:	d1f8      	bne.n	8000386 <__udivmoddi4+0xda>
 8000394:	465b      	mov	r3, fp
 8000396:	9800      	ldr	r0, [sp, #0]
 8000398:	9901      	ldr	r1, [sp, #4]
 800039a:	1900      	adds	r0, r0, r4
 800039c:	4169      	adcs	r1, r5
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db22      	blt.n	80003e8 <__udivmoddi4+0x13c>
 80003a2:	002b      	movs	r3, r5
 80003a4:	465a      	mov	r2, fp
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	002a      	movs	r2, r5
 80003aa:	4644      	mov	r4, r8
 80003ac:	40e2      	lsrs	r2, r4
 80003ae:	001c      	movs	r4, r3
 80003b0:	465b      	mov	r3, fp
 80003b2:	0015      	movs	r5, r2
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	db2c      	blt.n	8000412 <__udivmoddi4+0x166>
 80003b8:	0026      	movs	r6, r4
 80003ba:	409e      	lsls	r6, r3
 80003bc:	0033      	movs	r3, r6
 80003be:	0026      	movs	r6, r4
 80003c0:	4647      	mov	r7, r8
 80003c2:	40be      	lsls	r6, r7
 80003c4:	0032      	movs	r2, r6
 80003c6:	1a80      	subs	r0, r0, r2
 80003c8:	4199      	sbcs	r1, r3
 80003ca:	9000      	str	r0, [sp, #0]
 80003cc:	9101      	str	r1, [sp, #4]
 80003ce:	e7ae      	b.n	800032e <__udivmoddi4+0x82>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	4652      	mov	r2, sl
 80003d8:	40da      	lsrs	r2, r3
 80003da:	4641      	mov	r1, r8
 80003dc:	0013      	movs	r3, r2
 80003de:	464a      	mov	r2, r9
 80003e0:	408a      	lsls	r2, r1
 80003e2:	0017      	movs	r7, r2
 80003e4:	431f      	orrs	r7, r3
 80003e6:	e782      	b.n	80002ee <__udivmoddi4+0x42>
 80003e8:	4642      	mov	r2, r8
 80003ea:	2320      	movs	r3, #32
 80003ec:	1a9b      	subs	r3, r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	4646      	mov	r6, r8
 80003f2:	409a      	lsls	r2, r3
 80003f4:	0023      	movs	r3, r4
 80003f6:	40f3      	lsrs	r3, r6
 80003f8:	4313      	orrs	r3, r2
 80003fa:	e7d5      	b.n	80003a8 <__udivmoddi4+0xfc>
 80003fc:	4642      	mov	r2, r8
 80003fe:	2320      	movs	r3, #32
 8000400:	2100      	movs	r1, #0
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	2200      	movs	r2, #0
 8000406:	9100      	str	r1, [sp, #0]
 8000408:	9201      	str	r2, [sp, #4]
 800040a:	2201      	movs	r2, #1
 800040c:	40da      	lsrs	r2, r3
 800040e:	9201      	str	r2, [sp, #4]
 8000410:	e782      	b.n	8000318 <__udivmoddi4+0x6c>
 8000412:	4642      	mov	r2, r8
 8000414:	2320      	movs	r3, #32
 8000416:	0026      	movs	r6, r4
 8000418:	1a9b      	subs	r3, r3, r2
 800041a:	40de      	lsrs	r6, r3
 800041c:	002f      	movs	r7, r5
 800041e:	46b4      	mov	ip, r6
 8000420:	4097      	lsls	r7, r2
 8000422:	4666      	mov	r6, ip
 8000424:	003b      	movs	r3, r7
 8000426:	4333      	orrs	r3, r6
 8000428:	e7c9      	b.n	80003be <__udivmoddi4+0x112>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__clzsi2>:
 800042c:	211c      	movs	r1, #28
 800042e:	2301      	movs	r3, #1
 8000430:	041b      	lsls	r3, r3, #16
 8000432:	4298      	cmp	r0, r3
 8000434:	d301      	bcc.n	800043a <__clzsi2+0xe>
 8000436:	0c00      	lsrs	r0, r0, #16
 8000438:	3910      	subs	r1, #16
 800043a:	0a1b      	lsrs	r3, r3, #8
 800043c:	4298      	cmp	r0, r3
 800043e:	d301      	bcc.n	8000444 <__clzsi2+0x18>
 8000440:	0a00      	lsrs	r0, r0, #8
 8000442:	3908      	subs	r1, #8
 8000444:	091b      	lsrs	r3, r3, #4
 8000446:	4298      	cmp	r0, r3
 8000448:	d301      	bcc.n	800044e <__clzsi2+0x22>
 800044a:	0900      	lsrs	r0, r0, #4
 800044c:	3904      	subs	r1, #4
 800044e:	a202      	add	r2, pc, #8	; (adr r2, 8000458 <__clzsi2+0x2c>)
 8000450:	5c10      	ldrb	r0, [r2, r0]
 8000452:	1840      	adds	r0, r0, r1
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	02020304 	.word	0x02020304
 800045c:	01010101 	.word	0x01010101
	...

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f7ff ffdd 	bl	800042c <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	1c08      	adds	r0, r1, #0
 8000478:	f7ff ffd8 	bl	800042c <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000480:	21fa      	movs	r1, #250	; 0xfa
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_InitTick+0x2c>)
{
 8000484:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000486:	0089      	lsls	r1, r1, #2
{
 8000488:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	f7ff fe62 	bl	8000154 <__udivsi3>
 8000490:	f000 fb3e 	bl	8000b10 <HAL_SYSTICK_Config>
 8000494:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000496:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000498:	2c00      	cmp	r4, #0
 800049a:	d105      	bne.n	80004a8 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800049c:	3802      	subs	r0, #2
 800049e:	0022      	movs	r2, r4
 80004a0:	0029      	movs	r1, r5
 80004a2:	f000 fae9 	bl	8000a78 <HAL_NVIC_SetPriority>
 80004a6:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 80004a8:	bd70      	pop	{r4, r5, r6, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000000 	.word	0x20000000

080004b0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b0:	2302      	movs	r3, #2
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <HAL_Init+0x24>)
{
 80004b4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b6:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004b8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004be:	f7ff ffdf 	bl	8000480 <HAL_InitTick>
 80004c2:	1e04      	subs	r4, r0, #0
 80004c4:	d103      	bne.n	80004ce <HAL_Init+0x1e>
    HAL_MspInit();
 80004c6:	f002 fed7 	bl	8003278 <HAL_MspInit>
}
 80004ca:	0020      	movs	r0, r4
 80004cc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004ce:	2401      	movs	r4, #1
 80004d0:	e7fb      	b.n	80004ca <HAL_Init+0x1a>
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	40022000 	.word	0x40022000

080004d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004d8:	4a02      	ldr	r2, [pc, #8]	; (80004e4 <HAL_IncTick+0xc>)
 80004da:	6813      	ldr	r3, [r2, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	200001f0 	.word	0x200001f0

080004e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004e8:	4b01      	ldr	r3, [pc, #4]	; (80004f0 <HAL_GetTick+0x8>)
 80004ea:	6818      	ldr	r0, [r3, #0]
}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	200001f0 	.word	0x200001f0

080004f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004f8:	f7ff fff6 	bl	80004e8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80004fc:	1c63      	adds	r3, r4, #1
 80004fe:	1e5a      	subs	r2, r3, #1
 8000500:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8000502:	0005      	movs	r5, r0
    wait++;
 8000504:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000506:	f7ff ffef 	bl	80004e8 <HAL_GetTick>
 800050a:	1b40      	subs	r0, r0, r5
 800050c:	4284      	cmp	r4, r0
 800050e:	d8fa      	bhi.n	8000506 <HAL_Delay+0x12>
  {
  }
}
 8000510:	bd70      	pop	{r4, r5, r6, pc}
	...

08000514 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <ADC_DelayMicroSecond+0x24>)
{
 8000516:	b513      	push	{r0, r1, r4, lr}
 8000518:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800051a:	4908      	ldr	r1, [pc, #32]	; (800053c <ADC_DelayMicroSecond+0x28>)
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	f7ff fe19 	bl	8000154 <__udivsi3>
 8000522:	4344      	muls	r4, r0
 8000524:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8000526:	9b01      	ldr	r3, [sp, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d100      	bne.n	800052e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800052c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800052e:	9b01      	ldr	r3, [sp, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	e7f7      	b.n	8000526 <ADC_DelayMicroSecond+0x12>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	20000000 	.word	0x20000000
 800053c:	000f4240 	.word	0x000f4240

08000540 <HAL_ADC_Init>:
{
 8000540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000542:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000544:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000546:	2c00      	cmp	r4, #0
 8000548:	d100      	bne.n	800054c <HAL_ADC_Init+0xc>
 800054a:	e0d1      	b.n	80006f0 <HAL_ADC_Init+0x1b0>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800054c:	4b69      	ldr	r3, [pc, #420]	; (80006f4 <HAL_ADC_Init+0x1b4>)
 800054e:	6822      	ldr	r2, [r4, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d004      	beq.n	800055e <HAL_ADC_Init+0x1e>
 8000554:	21ce      	movs	r1, #206	; 0xce
 8000556:	4868      	ldr	r0, [pc, #416]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 8000558:	0049      	lsls	r1, r1, #1
 800055a:	f002 fd1f 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800055e:	6862      	ldr	r2, [r4, #4]
 8000560:	4b66      	ldr	r3, [pc, #408]	; (80006fc <HAL_ADC_Init+0x1bc>)
 8000562:	4013      	ands	r3, r2
 8000564:	d016      	beq.n	8000594 <HAL_ADC_Init+0x54>
 8000566:	2080      	movs	r0, #128	; 0x80
 8000568:	0051      	lsls	r1, r2, #1
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	05c0      	lsls	r0, r0, #23
 800056e:	4281      	cmp	r1, r0
 8000570:	d010      	beq.n	8000594 <HAL_ADC_Init+0x54>
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0609      	lsls	r1, r1, #24
 8000576:	428a      	cmp	r2, r1
 8000578:	d00c      	beq.n	8000594 <HAL_ADC_Init+0x54>
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	0352      	lsls	r2, r2, #13
 800057e:	4293      	cmp	r3, r2
 8000580:	d008      	beq.n	8000594 <HAL_ADC_Init+0x54>
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0392      	lsls	r2, r2, #14
 8000586:	4293      	cmp	r3, r2
 8000588:	d004      	beq.n	8000594 <HAL_ADC_Init+0x54>
 800058a:	219e      	movs	r1, #158	; 0x9e
 800058c:	485a      	ldr	r0, [pc, #360]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 800058e:	31ff      	adds	r1, #255	; 0xff
 8000590:	f002 fd04 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000594:	2318      	movs	r3, #24
 8000596:	68a2      	ldr	r2, [r4, #8]
 8000598:	439a      	bics	r2, r3
 800059a:	d004      	beq.n	80005a6 <HAL_ADC_Init+0x66>
 800059c:	21cf      	movs	r1, #207	; 0xcf
 800059e:	4856      	ldr	r0, [pc, #344]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 80005a0:	0049      	lsls	r1, r1, #1
 80005a2:	f002 fcfb 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80005a6:	2320      	movs	r3, #32
 80005a8:	68e2      	ldr	r2, [r4, #12]
 80005aa:	439a      	bics	r2, r3
 80005ac:	d004      	beq.n	80005b8 <HAL_ADC_Init+0x78>
 80005ae:	21a0      	movs	r1, #160	; 0xa0
 80005b0:	4851      	ldr	r0, [pc, #324]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 80005b2:	31ff      	adds	r1, #255	; 0xff
 80005b4:	f002 fcf2 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80005b8:	6923      	ldr	r3, [r4, #16]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d904      	bls.n	80005ca <HAL_ADC_Init+0x8a>
 80005c0:	21d0      	movs	r1, #208	; 0xd0
 80005c2:	484d      	ldr	r0, [pc, #308]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 80005c4:	0049      	lsls	r1, r1, #1
 80005c6:	f002 fce9 	bl	8002f9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80005ca:	1c66      	adds	r6, r4, #1
 80005cc:	7ff3      	ldrb	r3, [r6, #31]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d904      	bls.n	80005dc <HAL_ADC_Init+0x9c>
 80005d2:	21a2      	movs	r1, #162	; 0xa2
 80005d4:	4848      	ldr	r0, [pc, #288]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 80005d6:	31ff      	adds	r1, #255	; 0xff
 80005d8:	f002 fce0 	bl	8002f9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80005dc:	1ca3      	adds	r3, r4, #2
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	7fdb      	ldrb	r3, [r3, #31]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d904      	bls.n	80005f0 <HAL_ADC_Init+0xb0>
 80005e6:	21d1      	movs	r1, #209	; 0xd1
 80005e8:	4843      	ldr	r0, [pc, #268]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 80005ea:	0049      	lsls	r1, r1, #1
 80005ec:	f002 fcd6 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <HAL_ADC_Init+0x1c0>)
 80005f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005f4:	421a      	tst	r2, r3
 80005f6:	d004      	beq.n	8000602 <HAL_ADC_Init+0xc2>
 80005f8:	21a4      	movs	r1, #164	; 0xa4
 80005fa:	483f      	ldr	r0, [pc, #252]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 80005fc:	31ff      	adds	r1, #255	; 0xff
 80005fe:	f002 fccd 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000604:	2240      	movs	r2, #64	; 0x40
 8000606:	0019      	movs	r1, r3
 8000608:	0018      	movs	r0, r3
 800060a:	4391      	bics	r1, r2
 800060c:	3280      	adds	r2, #128	; 0x80
 800060e:	4390      	bics	r0, r2
 8000610:	d00f      	beq.n	8000632 <HAL_ADC_Init+0xf2>
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0052      	lsls	r2, r2, #1
 8000616:	4291      	cmp	r1, r2
 8000618:	d00b      	beq.n	8000632 <HAL_ADC_Init+0xf2>
 800061a:	3280      	adds	r2, #128	; 0x80
 800061c:	4293      	cmp	r3, r2
 800061e:	d008      	beq.n	8000632 <HAL_ADC_Init+0xf2>
 8000620:	3bc1      	subs	r3, #193	; 0xc1
 8000622:	3bff      	subs	r3, #255	; 0xff
 8000624:	2b01      	cmp	r3, #1
 8000626:	d904      	bls.n	8000632 <HAL_ADC_Init+0xf2>
 8000628:	21d2      	movs	r1, #210	; 0xd2
 800062a:	4833      	ldr	r0, [pc, #204]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 800062c:	0049      	lsls	r1, r1, #1
 800062e:	f002 fcb5 	bl	8002f9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000632:	0023      	movs	r3, r4
 8000634:	332c      	adds	r3, #44	; 0x2c
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d904      	bls.n	8000646 <HAL_ADC_Init+0x106>
 800063c:	21a6      	movs	r1, #166	; 0xa6
 800063e:	482e      	ldr	r0, [pc, #184]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 8000640:	31ff      	adds	r1, #255	; 0xff
 8000642:	f002 fcab 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000646:	2204      	movs	r2, #4
 8000648:	6963      	ldr	r3, [r4, #20]
 800064a:	3b04      	subs	r3, #4
 800064c:	4393      	bics	r3, r2
 800064e:	d004      	beq.n	800065a <HAL_ADC_Init+0x11a>
 8000650:	21d3      	movs	r1, #211	; 0xd3
 8000652:	4829      	ldr	r0, [pc, #164]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 8000654:	0049      	lsls	r1, r1, #1
 8000656:	f002 fca1 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <HAL_ADC_Init+0x1c4>)
 800065c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800065e:	421a      	tst	r2, r3
 8000660:	d004      	beq.n	800066c <HAL_ADC_Init+0x12c>
 8000662:	21a8      	movs	r1, #168	; 0xa8
 8000664:	4824      	ldr	r0, [pc, #144]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 8000666:	31ff      	adds	r1, #255	; 0xff
 8000668:	f002 fc98 	bl	8002f9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800066c:	69a3      	ldr	r3, [r4, #24]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d904      	bls.n	800067c <HAL_ADC_Init+0x13c>
 8000672:	21d4      	movs	r1, #212	; 0xd4
 8000674:	4820      	ldr	r0, [pc, #128]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 8000676:	0049      	lsls	r1, r1, #1
 8000678:	f002 fc90 	bl	8002f9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 800067c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800067e:	2b01      	cmp	r3, #1
 8000680:	d904      	bls.n	800068c <HAL_ADC_Init+0x14c>
 8000682:	21aa      	movs	r1, #170	; 0xaa
 8000684:	481c      	ldr	r0, [pc, #112]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 8000686:	31ff      	adds	r1, #255	; 0xff
 8000688:	f002 fc88 	bl	8002f9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 800068c:	69e3      	ldr	r3, [r4, #28]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d904      	bls.n	800069c <HAL_ADC_Init+0x15c>
 8000692:	21d5      	movs	r1, #213	; 0xd5
 8000694:	4818      	ldr	r0, [pc, #96]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 8000696:	0049      	lsls	r1, r1, #1
 8000698:	f002 fc80 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 800069c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800069e:	2b07      	cmp	r3, #7
 80006a0:	d904      	bls.n	80006ac <HAL_ADC_Init+0x16c>
 80006a2:	21ac      	movs	r1, #172	; 0xac
 80006a4:	4814      	ldr	r0, [pc, #80]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 80006a6:	31ff      	adds	r1, #255	; 0xff
 80006a8:	f002 fc78 	bl	8002f9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 80006ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d904      	bls.n	80006bc <HAL_ADC_Init+0x17c>
 80006b2:	21d6      	movs	r1, #214	; 0xd6
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <HAL_ADC_Init+0x1b8>)
 80006b6:	0049      	lsls	r1, r1, #1
 80006b8:	f002 fc70 	bl	8002f9c <assert_failed>
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d106      	bne.n	80006d0 <HAL_ADC_Init+0x190>
    hadc->Lock = HAL_UNLOCKED;
 80006c2:	0022      	movs	r2, r4
 80006c4:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80006c6:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 80006c8:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80006ca:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80006cc:	f002 fde2 	bl	8003294 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80006d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80006d2:	06db      	lsls	r3, r3, #27
 80006d4:	d404      	bmi.n	80006e0 <HAL_ADC_Init+0x1a0>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80006d6:	2304      	movs	r3, #4
 80006d8:	6822      	ldr	r2, [r4, #0]
 80006da:	6891      	ldr	r1, [r2, #8]
 80006dc:	4019      	ands	r1, r3
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80006de:	d013      	beq.n	8000708 <HAL_ADC_Init+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006e0:	2310      	movs	r3, #16
 80006e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80006e4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006e6:	4313      	orrs	r3, r2
 80006e8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80006ea:	2300      	movs	r3, #0
 80006ec:	3450      	adds	r4, #80	; 0x50
 80006ee:	7023      	strb	r3, [r4, #0]
}
 80006f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40012400 	.word	0x40012400
 80006f8:	0800382f 	.word	0x0800382f
 80006fc:	fff3ffff 	.word	0xfff3ffff
 8000700:	fffff3ff 	.word	0xfffff3ff
 8000704:	ffffefff 	.word	0xffffefff
  ADC_STATE_CLR_SET(hadc->State,
 8000708:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800070a:	486a      	ldr	r0, [pc, #424]	; (80008b4 <HAL_ADC_Init+0x374>)
 800070c:	4018      	ands	r0, r3
 800070e:	2302      	movs	r3, #2
 8000710:	4303      	orrs	r3, r0
 8000712:	6563      	str	r3, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000714:	2303      	movs	r3, #3
 8000716:	6890      	ldr	r0, [r2, #8]
 8000718:	4018      	ands	r0, r3
 800071a:	4b67      	ldr	r3, [pc, #412]	; (80008b8 <HAL_ADC_Init+0x378>)
 800071c:	2801      	cmp	r0, #1
 800071e:	d102      	bne.n	8000726 <HAL_ADC_Init+0x1e6>
 8000720:	6817      	ldr	r7, [r2, #0]
 8000722:	4207      	tst	r7, r0
 8000724:	d11a      	bne.n	800075c <HAL_ADC_Init+0x21c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000726:	2580      	movs	r5, #128	; 0x80
 8000728:	6867      	ldr	r7, [r4, #4]
 800072a:	05ed      	lsls	r5, r5, #23
 800072c:	0078      	lsls	r0, r7, #1
 800072e:	0840      	lsrs	r0, r0, #1
 8000730:	42a8      	cmp	r0, r5
 8000732:	d004      	beq.n	800073e <HAL_ADC_Init+0x1fe>
 8000734:	2080      	movs	r0, #128	; 0x80
 8000736:	0600      	lsls	r0, r0, #24
 8000738:	4287      	cmp	r7, r0
 800073a:	d000      	beq.n	800073e <HAL_ADC_Init+0x1fe>
 800073c:	e09e      	b.n	800087c <HAL_ADC_Init+0x33c>
 800073e:	6910      	ldr	r0, [r2, #16]
 8000740:	0080      	lsls	r0, r0, #2
 8000742:	0880      	lsrs	r0, r0, #2
 8000744:	6110      	str	r0, [r2, #16]
 8000746:	6910      	ldr	r0, [r2, #16]
 8000748:	4307      	orrs	r7, r0
 800074a:	6117      	str	r7, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800074c:	2718      	movs	r7, #24
 800074e:	68d0      	ldr	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000750:	68a5      	ldr	r5, [r4, #8]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000752:	43b8      	bics	r0, r7
 8000754:	60d0      	str	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000756:	68d0      	ldr	r0, [r2, #12]
 8000758:	4328      	orrs	r0, r5
 800075a:	60d0      	str	r0, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4857      	ldr	r0, [pc, #348]	; (80008bc <HAL_ADC_Init+0x37c>)
 8000760:	4002      	ands	r2, r0
 8000762:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000764:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	0652      	lsls	r2, r2, #25
 800076a:	4302      	orrs	r2, r0
 800076c:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	6822      	ldr	r2, [r4, #0]
 8000772:	055b      	lsls	r3, r3, #21
 8000774:	6890      	ldr	r0, [r2, #8]
 8000776:	4218      	tst	r0, r3
 8000778:	d102      	bne.n	8000780 <HAL_ADC_Init+0x240>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800077a:	6890      	ldr	r0, [r2, #8]
 800077c:	4303      	orrs	r3, r0
 800077e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000780:	68d3      	ldr	r3, [r2, #12]
 8000782:	484f      	ldr	r0, [pc, #316]	; (80008c0 <HAL_ADC_Init+0x380>)
 8000784:	4003      	ands	r3, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000786:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000788:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800078a:	68d7      	ldr	r7, [r2, #12]
 800078c:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800078e:	2802      	cmp	r0, #2
 8000790:	d100      	bne.n	8000794 <HAL_ADC_Init+0x254>
 8000792:	2104      	movs	r1, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000794:	6b25      	ldr	r5, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000796:	7ff0      	ldrb	r0, [r6, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000798:	432b      	orrs	r3, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800079a:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800079c:	433b      	orrs	r3, r7
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800079e:	03ae      	lsls	r6, r5, #14
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80007a0:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80007a2:	4333      	orrs	r3, r6
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80007a4:	03ee      	lsls	r6, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80007a6:	4333      	orrs	r3, r6
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80007a8:	0346      	lsls	r6, r0, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80007aa:	4333      	orrs	r3, r6
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80007ac:	0026      	movs	r6, r4
 80007ae:	362c      	adds	r6, #44	; 0x2c
 80007b0:	7836      	ldrb	r6, [r6, #0]
 80007b2:	0076      	lsls	r6, r6, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80007b4:	4333      	orrs	r3, r6
 80007b6:	430b      	orrs	r3, r1
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80007b8:	21c2      	movs	r1, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80007ba:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80007bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007be:	31ff      	adds	r1, #255	; 0xff
 80007c0:	428b      	cmp	r3, r1
 80007c2:	d004      	beq.n	80007ce <HAL_ADC_Init+0x28e>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80007c4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80007c6:	68d1      	ldr	r1, [r2, #12]
 80007c8:	432b      	orrs	r3, r5
 80007ca:	430b      	orrs	r3, r1
 80007cc:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007ce:	1ca3      	adds	r3, r4, #2
 80007d0:	7fdb      	ldrb	r3, [r3, #31]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d106      	bne.n	80007e4 <HAL_ADC_Init+0x2a4>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d15c      	bne.n	8000894 <HAL_ADC_Init+0x354>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	68d1      	ldr	r1, [r2, #12]
 80007de:	025b      	lsls	r3, r3, #9
 80007e0:	430b      	orrs	r3, r1
 80007e2:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80007e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d15c      	bne.n	80008a4 <HAL_ADC_Init+0x364>
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 80007ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007ec:	291c      	cmp	r1, #28
 80007ee:	d805      	bhi.n	80007fc <HAL_ADC_Init+0x2bc>
 80007f0:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <HAL_ADC_Init+0x384>)
 80007f2:	40ca      	lsrs	r2, r1
 80007f4:	4393      	bics	r3, r2
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d004      	beq.n	8000806 <HAL_ADC_Init+0x2c6>
 80007fc:	2193      	movs	r1, #147	; 0x93
 80007fe:	4832      	ldr	r0, [pc, #200]	; (80008c8 <HAL_ADC_Init+0x388>)
 8000800:	0089      	lsls	r1, r1, #2
 8000802:	f002 fbcb 	bl	8002f9c <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 8000806:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000808:	2260      	movs	r2, #96	; 0x60
 800080a:	0019      	movs	r1, r3
 800080c:	4391      	bics	r1, r2
 800080e:	d009      	beq.n	8000824 <HAL_ADC_Init+0x2e4>
 8000810:	2980      	cmp	r1, #128	; 0x80
 8000812:	d007      	beq.n	8000824 <HAL_ADC_Init+0x2e4>
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	4293      	cmp	r3, r2
 800081a:	d003      	beq.n	8000824 <HAL_ADC_Init+0x2e4>
 800081c:	492b      	ldr	r1, [pc, #172]	; (80008cc <HAL_ADC_Init+0x38c>)
 800081e:	482a      	ldr	r0, [pc, #168]	; (80008c8 <HAL_ADC_Init+0x388>)
 8000820:	f002 fbbc 	bl	8002f9c <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 8000824:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <HAL_ADC_Init+0x390>)
 8000826:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000828:	421a      	tst	r2, r3
 800082a:	d003      	beq.n	8000834 <HAL_ADC_Init+0x2f4>
 800082c:	4929      	ldr	r1, [pc, #164]	; (80008d4 <HAL_ADC_Init+0x394>)
 800082e:	4826      	ldr	r0, [pc, #152]	; (80008c8 <HAL_ADC_Init+0x388>)
 8000830:	f002 fbb4 	bl	8002f9c <assert_failed>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000834:	6822      	ldr	r2, [r4, #0]
 8000836:	4928      	ldr	r1, [pc, #160]	; (80008d8 <HAL_ADC_Init+0x398>)
 8000838:	6913      	ldr	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800083a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800083c:	400b      	ands	r3, r1
 800083e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000842:	6911      	ldr	r1, [r2, #16]
 8000844:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8000846:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000848:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800084a:	430b      	orrs	r3, r1
 800084c:	6113      	str	r3, [r2, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800084e:	2301      	movs	r3, #1
 8000850:	6911      	ldr	r1, [r2, #16]
 8000852:	430b      	orrs	r3, r1
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000854:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000856:	2107      	movs	r1, #7
 8000858:	6823      	ldr	r3, [r4, #0]
  ADC_CLEAR_ERRORCODE(hadc);
 800085a:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800085c:	695a      	ldr	r2, [r3, #20]
 800085e:	438a      	bics	r2, r1
 8000860:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000866:	430a      	orrs	r2, r1
 8000868:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800086a:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800086c:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 800086e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000870:	4393      	bics	r3, r2
 8000872:	001a      	movs	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4313      	orrs	r3, r2
 8000878:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800087a:	e739      	b.n	80006f0 <HAL_ADC_Init+0x1b0>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800087c:	6910      	ldr	r0, [r2, #16]
 800087e:	4d17      	ldr	r5, [pc, #92]	; (80008dc <HAL_ADC_Init+0x39c>)
 8000880:	0080      	lsls	r0, r0, #2
 8000882:	0880      	lsrs	r0, r0, #2
 8000884:	6110      	str	r0, [r2, #16]
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	4028      	ands	r0, r5
 800088a:	6018      	str	r0, [r3, #0]
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	4307      	orrs	r7, r0
 8000890:	601f      	str	r7, [r3, #0]
 8000892:	e75b      	b.n	800074c <HAL_ADC_Init+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000894:	2120      	movs	r1, #32
 8000896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000898:	4301      	orrs	r1, r0
 800089a:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800089c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800089e:	430b      	orrs	r3, r1
 80008a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80008a2:	e79f      	b.n	80007e4 <HAL_ADC_Init+0x2a4>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80008a4:	2101      	movs	r1, #1
 80008a6:	6913      	ldr	r3, [r2, #16]
 80008a8:	420b      	tst	r3, r1
 80008aa:	d0d4      	beq.n	8000856 <HAL_ADC_Init+0x316>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80008ac:	6913      	ldr	r3, [r2, #16]
 80008ae:	438b      	bics	r3, r1
 80008b0:	e7d0      	b.n	8000854 <HAL_ADC_Init+0x314>
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	fffffefd 	.word	0xfffffefd
 80008b8:	40012708 	.word	0x40012708
 80008bc:	fdffffff 	.word	0xfdffffff
 80008c0:	fffe0219 	.word	0xfffe0219
 80008c4:	11111111 	.word	0x11111111
 80008c8:	0800382f 	.word	0x0800382f
 80008cc:	0000024d 	.word	0x0000024d
 80008d0:	fffffdff 	.word	0xfffffdff
 80008d4:	0000024e 	.word	0x0000024e
 80008d8:	fffffc03 	.word	0xfffffc03
 80008dc:	ffc3ffff 	.word	0xffc3ffff

080008e0 <HAL_ADC_ConfigChannel>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80008e0:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <HAL_ADC_ConfigChannel+0x130>)
 80008e2:	6802      	ldr	r2, [r0, #0]
{
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	0005      	movs	r5, r0
 80008e8:	000c      	movs	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d003      	beq.n	80008f6 <HAL_ADC_ConfigChannel+0x16>
 80008ee:	4949      	ldr	r1, [pc, #292]	; (8000a14 <HAL_ADC_ConfigChannel+0x134>)
 80008f0:	4849      	ldr	r0, [pc, #292]	; (8000a18 <HAL_ADC_ConfigChannel+0x138>)
 80008f2:	f002 fb53 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d036      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 80008fc:	4a47      	ldr	r2, [pc, #284]	; (8000a1c <HAL_ADC_ConfigChannel+0x13c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d033      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000902:	4a47      	ldr	r2, [pc, #284]	; (8000a20 <HAL_ADC_ConfigChannel+0x140>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d030      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000908:	4a46      	ldr	r2, [pc, #280]	; (8000a24 <HAL_ADC_ConfigChannel+0x144>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d02d      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 800090e:	4a46      	ldr	r2, [pc, #280]	; (8000a28 <HAL_ADC_ConfigChannel+0x148>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d02a      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000914:	4a45      	ldr	r2, [pc, #276]	; (8000a2c <HAL_ADC_ConfigChannel+0x14c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d027      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 800091a:	4a45      	ldr	r2, [pc, #276]	; (8000a30 <HAL_ADC_ConfigChannel+0x150>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d024      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000920:	4a44      	ldr	r2, [pc, #272]	; (8000a34 <HAL_ADC_ConfigChannel+0x154>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d021      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000926:	4a44      	ldr	r2, [pc, #272]	; (8000a38 <HAL_ADC_ConfigChannel+0x158>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d01e      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 800092c:	4a43      	ldr	r2, [pc, #268]	; (8000a3c <HAL_ADC_ConfigChannel+0x15c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d01b      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000932:	4a43      	ldr	r2, [pc, #268]	; (8000a40 <HAL_ADC_ConfigChannel+0x160>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d018      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000938:	4a42      	ldr	r2, [pc, #264]	; (8000a44 <HAL_ADC_ConfigChannel+0x164>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d015      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 800093e:	4a42      	ldr	r2, [pc, #264]	; (8000a48 <HAL_ADC_ConfigChannel+0x168>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d012      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000944:	4a41      	ldr	r2, [pc, #260]	; (8000a4c <HAL_ADC_ConfigChannel+0x16c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d00f      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 800094a:	4a41      	ldr	r2, [pc, #260]	; (8000a50 <HAL_ADC_ConfigChannel+0x170>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d00c      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000950:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <HAL_ADC_ConfigChannel+0x174>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d009      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000956:	4a40      	ldr	r2, [pc, #256]	; (8000a58 <HAL_ADC_ConfigChannel+0x178>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d006      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 800095c:	4a3f      	ldr	r2, [pc, #252]	; (8000a5c <HAL_ADC_ConfigChannel+0x17c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d003      	beq.n	800096a <HAL_ADC_ConfigChannel+0x8a>
 8000962:	493f      	ldr	r1, [pc, #252]	; (8000a60 <HAL_ADC_ConfigChannel+0x180>)
 8000964:	482c      	ldr	r0, [pc, #176]	; (8000a18 <HAL_ADC_ConfigChannel+0x138>)
 8000966:	f002 fb19 	bl	8002f9c <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 800096a:	6863      	ldr	r3, [r4, #4]
 800096c:	4a3d      	ldr	r2, [pc, #244]	; (8000a64 <HAL_ADC_ConfigChannel+0x184>)
 800096e:	189b      	adds	r3, r3, r2
 8000970:	2b01      	cmp	r3, #1
 8000972:	d904      	bls.n	800097e <HAL_ADC_ConfigChannel+0x9e>
 8000974:	21f0      	movs	r1, #240	; 0xf0
 8000976:	4828      	ldr	r0, [pc, #160]	; (8000a18 <HAL_ADC_ConfigChannel+0x138>)
 8000978:	00c9      	lsls	r1, r1, #3
 800097a:	f002 fb0f 	bl	8002f9c <assert_failed>
  __HAL_LOCK(hadc);
 800097e:	002e      	movs	r6, r5
 8000980:	3650      	adds	r6, #80	; 0x50
 8000982:	7833      	ldrb	r3, [r6, #0]
 8000984:	2002      	movs	r0, #2
 8000986:	2b01      	cmp	r3, #1
 8000988:	d00b      	beq.n	80009a2 <HAL_ADC_ConfigChannel+0xc2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800098a:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 800098c:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800098e:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8000990:	7030      	strb	r0, [r6, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000992:	075b      	lsls	r3, r3, #29
 8000994:	d506      	bpl.n	80009a4 <HAL_ADC_ConfigChannel+0xc4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000996:	2320      	movs	r3, #32
 8000998:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800099a:	4313      	orrs	r3, r2
 800099c:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800099e:	2300      	movs	r3, #0
 80009a0:	7033      	strb	r3, [r6, #0]
}
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 80009a6:	4930      	ldr	r1, [pc, #192]	; (8000a68 <HAL_ADC_ConfigChannel+0x188>)
 80009a8:	6865      	ldr	r5, [r4, #4]
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	02c0      	lsls	r0, r0, #11
 80009ae:	428d      	cmp	r5, r1
 80009b0:	d01b      	beq.n	80009ea <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80009b2:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80009b4:	0359      	lsls	r1, r3, #13
 80009b6:	0b49      	lsrs	r1, r1, #13
 80009b8:	4329      	orrs	r1, r5
 80009ba:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80009bc:	4203      	tst	r3, r0
 80009be:	d008      	beq.n	80009d2 <HAL_ADC_ConfigChannel+0xf2>
      ADC->CCR |= ADC_CCR_TSEN;   
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	4a2a      	ldr	r2, [pc, #168]	; (8000a6c <HAL_ADC_ConfigChannel+0x18c>)
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80009c8:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80009ca:	430b      	orrs	r3, r1
 80009cc:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80009ce:	f7ff fda1 	bl	8000514 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	039b      	lsls	r3, r3, #14
 80009d6:	d505      	bpl.n	80009e4 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <HAL_ADC_ConfigChannel+0x18c>)
 80009dc:	03db      	lsls	r3, r3, #15
 80009de:	6811      	ldr	r1, [r2, #0]
 80009e0:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80009e2:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80009e4:	2000      	movs	r0, #0
 80009e6:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 80009e8:	e7db      	b.n	80009a2 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80009ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80009ec:	035c      	lsls	r4, r3, #13
 80009ee:	0b64      	lsrs	r4, r4, #13
 80009f0:	43a1      	bics	r1, r4
 80009f2:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80009f4:	4203      	tst	r3, r0
 80009f6:	d004      	beq.n	8000a02 <HAL_ADC_ConfigChannel+0x122>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80009f8:	491c      	ldr	r1, [pc, #112]	; (8000a6c <HAL_ADC_ConfigChannel+0x18c>)
 80009fa:	481d      	ldr	r0, [pc, #116]	; (8000a70 <HAL_ADC_ConfigChannel+0x190>)
 80009fc:	680a      	ldr	r2, [r1, #0]
 80009fe:	4002      	ands	r2, r0
 8000a00:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000a02:	039b      	lsls	r3, r3, #14
 8000a04:	d5ee      	bpl.n	80009e4 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000a06:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <HAL_ADC_ConfigChannel+0x18c>)
 8000a08:	491a      	ldr	r1, [pc, #104]	; (8000a74 <HAL_ADC_ConfigChannel+0x194>)
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	e7e8      	b.n	80009e2 <HAL_ADC_ConfigChannel+0x102>
 8000a10:	40012400 	.word	0x40012400
 8000a14:	0000077e 	.word	0x0000077e
 8000a18:	0800382f 	.word	0x0800382f
 8000a1c:	04000002 	.word	0x04000002
 8000a20:	08000004 	.word	0x08000004
 8000a24:	0c000008 	.word	0x0c000008
 8000a28:	10000010 	.word	0x10000010
 8000a2c:	14000020 	.word	0x14000020
 8000a30:	18000040 	.word	0x18000040
 8000a34:	1c000080 	.word	0x1c000080
 8000a38:	20000100 	.word	0x20000100
 8000a3c:	24000200 	.word	0x24000200
 8000a40:	28000400 	.word	0x28000400
 8000a44:	2c000800 	.word	0x2c000800
 8000a48:	30001000 	.word	0x30001000
 8000a4c:	34002000 	.word	0x34002000
 8000a50:	38004000 	.word	0x38004000
 8000a54:	3c008000 	.word	0x3c008000
 8000a58:	48040000 	.word	0x48040000
 8000a5c:	44020000 	.word	0x44020000
 8000a60:	0000077f 	.word	0x0000077f
 8000a64:	fffff000 	.word	0xfffff000
 8000a68:	00001001 	.word	0x00001001
 8000a6c:	40012708 	.word	0x40012708
 8000a70:	ff7fffff 	.word	0xff7fffff
 8000a74:	ffbfffff 	.word	0xffbfffff

08000a78 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	0004      	movs	r4, r0
 8000a7c:	000d      	movs	r5, r1
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000a7e:	2903      	cmp	r1, #3
 8000a80:	d903      	bls.n	8000a8a <HAL_NVIC_SetPriority+0x12>
 8000a82:	2187      	movs	r1, #135	; 0x87
 8000a84:	4816      	ldr	r0, [pc, #88]	; (8000ae0 <HAL_NVIC_SetPriority+0x68>)
 8000a86:	f002 fa89 	bl	8002f9c <assert_failed>
 8000a8a:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	da14      	bge.n	8000aba <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a90:	230f      	movs	r3, #15
 8000a92:	b2e4      	uxtb	r4, r4
 8000a94:	4023      	ands	r3, r4
 8000a96:	3b08      	subs	r3, #8
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_NVIC_SetPriority+0x6c>)
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4014      	ands	r4, r2
 8000aa4:	4094      	lsls	r4, r2
 8000aa6:	32fc      	adds	r2, #252	; 0xfc
 8000aa8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aaa:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aae:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	69d8      	ldr	r0, [r3, #28]
 8000ab2:	43a8      	bics	r0, r5
 8000ab4:	4302      	orrs	r2, r0
 8000ab6:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aba:	2503      	movs	r5, #3
 8000abc:	08a3      	lsrs	r3, r4, #2
 8000abe:	402c      	ands	r4, r5
 8000ac0:	40ac      	lsls	r4, r5
 8000ac2:	35fc      	adds	r5, #252	; 0xfc
 8000ac4:	002e      	movs	r6, r5
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_NVIC_SetPriority+0x70>)
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	189b      	adds	r3, r3, r2
 8000acc:	22c0      	movs	r2, #192	; 0xc0
 8000ace:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad0:	4029      	ands	r1, r5
 8000ad2:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	5898      	ldr	r0, [r3, r2]
 8000ad8:	43b0      	bics	r0, r6
 8000ada:	4301      	orrs	r1, r0
 8000adc:	5099      	str	r1, [r3, r2]
 8000ade:	e7eb      	b.n	8000ab8 <HAL_NVIC_SetPriority+0x40>
 8000ae0:	08003867 	.word	0x08003867
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b510      	push	{r4, lr}
 8000aee:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000af0:	da03      	bge.n	8000afa <HAL_NVIC_EnableIRQ+0xe>
 8000af2:	2197      	movs	r1, #151	; 0x97
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <HAL_NVIC_EnableIRQ+0x1c>)
 8000af6:	f002 fa51 	bl	8002f9c <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000afa:	231f      	movs	r3, #31
 8000afc:	401c      	ands	r4, r3
 8000afe:	3b1e      	subs	r3, #30
 8000b00:	40a3      	lsls	r3, r4
 8000b02:	4a02      	ldr	r2, [pc, #8]	; (8000b0c <HAL_NVIC_EnableIRQ+0x20>)
 8000b04:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b06:	bd10      	pop	{r4, pc}
 8000b08:	08003867 	.word	0x08003867
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <HAL_SYSTICK_Config+0x28>)
 8000b12:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b14:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d80d      	bhi.n	8000b36 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1e:	4808      	ldr	r0, [pc, #32]	; (8000b40 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b20:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b22:	6a03      	ldr	r3, [r0, #32]
 8000b24:	0609      	lsls	r1, r1, #24
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b30:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b32:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b34:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b36:	4770      	bx	lr
 8000b38:	00ffffff 	.word	0x00ffffff
 8000b3c:	e000e010 	.word	0xe000e010
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b44:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b46:	1d84      	adds	r4, r0, #6
 8000b48:	7fe3      	ldrb	r3, [r4, #31]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d004      	beq.n	8000b58 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000b52:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b58:	210e      	movs	r1, #14
 8000b5a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b5c:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	438a      	bics	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000b64:	2201      	movs	r2, #1
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	4391      	bics	r1, r2
 8000b6a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b6c:	231c      	movs	r3, #28
 8000b6e:	402b      	ands	r3, r5
 8000b70:	0015      	movs	r5, r2
 8000b72:	409d      	lsls	r5, r3
 8000b74:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8000b76:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b78:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b7a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000b7c:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8000b7e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000b80:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000b82:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000b84:	42a2      	cmp	r2, r4
 8000b86:	d0e5      	beq.n	8000b54 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000b88:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000b8a:	0023      	movs	r3, r4
 8000b8c:	e7e2      	b.n	8000b54 <HAL_DMA_Abort_IT+0x10>
	...

08000b90 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
 
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000b90:	684b      	ldr	r3, [r1, #4]
{
 8000b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b94:	0004      	movs	r4, r0
 8000b96:	000d      	movs	r5, r1
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d912      	bls.n	8000bc2 <HAL_GPIO_Init+0x32>
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	3a11      	subs	r2, #17
 8000ba0:	2a01      	cmp	r2, #1
 8000ba2:	d90e      	bls.n	8000bc2 <HAL_GPIO_Init+0x32>
 8000ba4:	4a85      	ldr	r2, [pc, #532]	; (8000dbc <HAL_GPIO_Init+0x22c>)
 8000ba6:	4986      	ldr	r1, [pc, #536]	; (8000dc0 <HAL_GPIO_Init+0x230>)
 8000ba8:	401a      	ands	r2, r3
 8000baa:	1852      	adds	r2, r2, r1
 8000bac:	4985      	ldr	r1, [pc, #532]	; (8000dc4 <HAL_GPIO_Init+0x234>)
 8000bae:	420a      	tst	r2, r1
 8000bb0:	d007      	beq.n	8000bc2 <HAL_GPIO_Init+0x32>
 8000bb2:	4a85      	ldr	r2, [pc, #532]	; (8000dc8 <HAL_GPIO_Init+0x238>)
 8000bb4:	189b      	adds	r3, r3, r2
 8000bb6:	420b      	tst	r3, r1
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x32>
 8000bba:	21ae      	movs	r1, #174	; 0xae
 8000bbc:	4883      	ldr	r0, [pc, #524]	; (8000dcc <HAL_GPIO_Init+0x23c>)
 8000bbe:	f002 f9ed 	bl	8002f9c <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000bc2:	68ab      	ldr	r3, [r5, #8]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d903      	bls.n	8000bd0 <HAL_GPIO_Init+0x40>
 8000bc8:	21af      	movs	r1, #175	; 0xaf
 8000bca:	4880      	ldr	r0, [pc, #512]	; (8000dcc <HAL_GPIO_Init+0x23c>)
 8000bcc:	f002 f9e6 	bl	8002f9c <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	429c      	cmp	r4, r3
 8000bd6:	d00b      	beq.n	8000bf0 <HAL_GPIO_Init+0x60>
 8000bd8:	4b7d      	ldr	r3, [pc, #500]	; (8000dd0 <HAL_GPIO_Init+0x240>)
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	d008      	beq.n	8000bf0 <HAL_GPIO_Init+0x60>
 8000bde:	4b7d      	ldr	r3, [pc, #500]	; (8000dd4 <HAL_GPIO_Init+0x244>)
 8000be0:	429c      	cmp	r4, r3
 8000be2:	d005      	beq.n	8000bf0 <HAL_GPIO_Init+0x60>
 8000be4:	4b7c      	ldr	r3, [pc, #496]	; (8000dd8 <HAL_GPIO_Init+0x248>)
 8000be6:	429c      	cmp	r4, r3
 8000be8:	d002      	beq.n	8000bf0 <HAL_GPIO_Init+0x60>
 8000bea:	4b7c      	ldr	r3, [pc, #496]	; (8000ddc <HAL_GPIO_Init+0x24c>)
 8000bec:	429c      	cmp	r4, r3
 8000bee:	d107      	bne.n	8000c00 <HAL_GPIO_Init+0x70>
 8000bf0:	682b      	ldr	r3, [r5, #0]
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x70>
 8000bf8:	4a79      	ldr	r2, [pc, #484]	; (8000de0 <HAL_GPIO_Init+0x250>)
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d00d      	beq.n	8000c1c <HAL_GPIO_Init+0x8c>
 8000c00:	4b78      	ldr	r3, [pc, #480]	; (8000de4 <HAL_GPIO_Init+0x254>)
 8000c02:	429c      	cmp	r4, r3
 8000c04:	d106      	bne.n	8000c14 <HAL_GPIO_Init+0x84>
 8000c06:	682b      	ldr	r3, [r5, #0]
 8000c08:	4a77      	ldr	r2, [pc, #476]	; (8000de8 <HAL_GPIO_Init+0x258>)
 8000c0a:	4213      	tst	r3, r2
 8000c0c:	d002      	beq.n	8000c14 <HAL_GPIO_Init+0x84>
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x8c>
 8000c14:	21b0      	movs	r1, #176	; 0xb0
 8000c16:	486d      	ldr	r0, [pc, #436]	; (8000dcc <HAL_GPIO_Init+0x23c>)
 8000c18:	f002 f9c0 	bl	8002f9c <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c1c:	2700      	movs	r7, #0
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	40fa      	lsrs	r2, r7
 8000c24:	d100      	bne.n	8000c28 <HAL_GPIO_Init+0x98>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000c26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	40ba      	lsls	r2, r7
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000c32:	d100      	bne.n	8000c36 <HAL_GPIO_Init+0xa6>
 8000c34:	e0c0      	b.n	8000db8 <HAL_GPIO_Init+0x228>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000c36:	2210      	movs	r2, #16
 8000c38:	686b      	ldr	r3, [r5, #4]
 8000c3a:	4393      	bics	r3, r2
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d12c      	bne.n	8000c9a <HAL_GPIO_Init+0x10a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c40:	23a0      	movs	r3, #160	; 0xa0
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	429c      	cmp	r4, r3
 8000c46:	d012      	beq.n	8000c6e <HAL_GPIO_Init+0xde>
 8000c48:	4b61      	ldr	r3, [pc, #388]	; (8000dd0 <HAL_GPIO_Init+0x240>)
 8000c4a:	429c      	cmp	r4, r3
 8000c4c:	d00f      	beq.n	8000c6e <HAL_GPIO_Init+0xde>
 8000c4e:	4b61      	ldr	r3, [pc, #388]	; (8000dd4 <HAL_GPIO_Init+0x244>)
 8000c50:	429c      	cmp	r4, r3
 8000c52:	d00c      	beq.n	8000c6e <HAL_GPIO_Init+0xde>
 8000c54:	4b60      	ldr	r3, [pc, #384]	; (8000dd8 <HAL_GPIO_Init+0x248>)
 8000c56:	429c      	cmp	r4, r3
 8000c58:	d009      	beq.n	8000c6e <HAL_GPIO_Init+0xde>
 8000c5a:	4b60      	ldr	r3, [pc, #384]	; (8000ddc <HAL_GPIO_Init+0x24c>)
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d006      	beq.n	8000c6e <HAL_GPIO_Init+0xde>
 8000c60:	4b60      	ldr	r3, [pc, #384]	; (8000de4 <HAL_GPIO_Init+0x254>)
 8000c62:	429c      	cmp	r4, r3
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0xde>
 8000c66:	21bf      	movs	r1, #191	; 0xbf
 8000c68:	4858      	ldr	r0, [pc, #352]	; (8000dcc <HAL_GPIO_Init+0x23c>)
 8000c6a:	f002 f997 	bl	8002f9c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000c6e:	692b      	ldr	r3, [r5, #16]
 8000c70:	2b07      	cmp	r3, #7
 8000c72:	d903      	bls.n	8000c7c <HAL_GPIO_Init+0xec>
 8000c74:	21c0      	movs	r1, #192	; 0xc0
 8000c76:	4855      	ldr	r0, [pc, #340]	; (8000dcc <HAL_GPIO_Init+0x23c>)
 8000c78:	f002 f990 	bl	8002f9c <assert_failed>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	200f      	movs	r0, #15
 8000c80:	403a      	ands	r2, r7
 8000c82:	0092      	lsls	r2, r2, #2
 8000c84:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8000c86:	08fb      	lsrs	r3, r7, #3
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	18e3      	adds	r3, r4, r3
 8000c8c:	6a19      	ldr	r1, [r3, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000c8e:	4381      	bics	r1, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000c90:	6928      	ldr	r0, [r5, #16]
 8000c92:	4090      	lsls	r0, r2
 8000c94:	0002      	movs	r2, r0
 8000c96:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000c98:	621a      	str	r2, [r3, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	686b      	ldr	r3, [r5, #4]
 8000c9e:	007e      	lsls	r6, r7, #1
 8000ca0:	4393      	bics	r3, r2
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d819      	bhi.n	8000cdc <HAL_GPIO_Init+0x14c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ca8:	68eb      	ldr	r3, [r5, #12]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d903      	bls.n	8000cb6 <HAL_GPIO_Init+0x126>
 8000cae:	21ce      	movs	r1, #206	; 0xce
 8000cb0:	4846      	ldr	r0, [pc, #280]	; (8000dcc <HAL_GPIO_Init+0x23c>)
 8000cb2:	f002 f973 	bl	8002f9c <assert_failed>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	40b2      	lsls	r2, r6
        temp = GPIOx->OSPEEDR;
 8000cba:	68a3      	ldr	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cbc:	2101      	movs	r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cbe:	4393      	bics	r3, r2
 8000cc0:	001a      	movs	r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc2:	68eb      	ldr	r3, [r5, #12]
 8000cc4:	40b3      	lsls	r3, r6
 8000cc6:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8000cc8:	60a3      	str	r3, [r4, #8]
        temp= GPIOx->OTYPER;
 8000cca:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ccc:	9b01      	ldr	r3, [sp, #4]
 8000cce:	439a      	bics	r2, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cd0:	686b      	ldr	r3, [r5, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	40bb      	lsls	r3, r7
 8000cd8:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8000cda:	6063      	str	r3, [r4, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cdc:	2303      	movs	r3, #3
 8000cde:	469c      	mov	ip, r3
 8000ce0:	40b3      	lsls	r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce2:	4661      	mov	r1, ip
 8000ce4:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce6:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce8:	4011      	ands	r1, r2
 8000cea:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 8000cec:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cee:	4018      	ands	r0, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf0:	4301      	orrs	r1, r0
      GPIOx->MODER = temp;
 8000cf2:	6021      	str	r1, [r4, #0]
      temp = GPIOx->PUPDR;
 8000cf4:	68e1      	ldr	r1, [r4, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf6:	4019      	ands	r1, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000cf8:	68ab      	ldr	r3, [r5, #8]
 8000cfa:	40b3      	lsls	r3, r6
 8000cfc:	430b      	orrs	r3, r1
      GPIOx->PUPDR = temp;
 8000cfe:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d00:	00d3      	lsls	r3, r2, #3
 8000d02:	d559      	bpl.n	8000db8 <HAL_GPIO_Init+0x228>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d04:	2001      	movs	r0, #1
 8000d06:	4939      	ldr	r1, [pc, #228]	; (8000dec <HAL_GPIO_Init+0x25c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d08:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000d0c:	4303      	orrs	r3, r0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d0e:	4660      	mov	r0, ip
 8000d10:	4038      	ands	r0, r7
 8000d12:	0080      	lsls	r0, r0, #2
 8000d14:	4086      	lsls	r6, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	634b      	str	r3, [r1, #52]	; 0x34
 8000d18:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <HAL_GPIO_Init+0x260>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1a:	08b9      	lsrs	r1, r7, #2
 8000d1c:	0089      	lsls	r1, r1, #2
 8000d1e:	18c9      	adds	r1, r1, r3
 8000d20:	688b      	ldr	r3, [r1, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d22:	43b3      	bics	r3, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d24:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d26:	9301      	str	r3, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d28:	05f6      	lsls	r6, r6, #23
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	42b4      	cmp	r4, r6
 8000d2e:	d014      	beq.n	8000d5a <HAL_GPIO_Init+0x1ca>
 8000d30:	4e27      	ldr	r6, [pc, #156]	; (8000dd0 <HAL_GPIO_Init+0x240>)
 8000d32:	3301      	adds	r3, #1
 8000d34:	42b4      	cmp	r4, r6
 8000d36:	d010      	beq.n	8000d5a <HAL_GPIO_Init+0x1ca>
 8000d38:	4e26      	ldr	r6, [pc, #152]	; (8000dd4 <HAL_GPIO_Init+0x244>)
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	42b4      	cmp	r4, r6
 8000d3e:	d00c      	beq.n	8000d5a <HAL_GPIO_Init+0x1ca>
 8000d40:	4e25      	ldr	r6, [pc, #148]	; (8000dd8 <HAL_GPIO_Init+0x248>)
 8000d42:	4663      	mov	r3, ip
 8000d44:	42b4      	cmp	r4, r6
 8000d46:	d008      	beq.n	8000d5a <HAL_GPIO_Init+0x1ca>
 8000d48:	4e24      	ldr	r6, [pc, #144]	; (8000ddc <HAL_GPIO_Init+0x24c>)
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	42b4      	cmp	r4, r6
 8000d4e:	d004      	beq.n	8000d5a <HAL_GPIO_Init+0x1ca>
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <HAL_GPIO_Init+0x264>)
 8000d52:	18e3      	adds	r3, r4, r3
 8000d54:	1e5e      	subs	r6, r3, #1
 8000d56:	41b3      	sbcs	r3, r6
 8000d58:	3305      	adds	r3, #5
 8000d5a:	4083      	lsls	r3, r0
 8000d5c:	9801      	ldr	r0, [sp, #4]
 8000d5e:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d60:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8000d62:	4925      	ldr	r1, [pc, #148]	; (8000df8 <HAL_GPIO_Init+0x268>)
        temp &= ~((uint32_t)iocurrent);
 8000d64:	9b00      	ldr	r3, [sp, #0]
        temp = EXTI->IMR;
 8000d66:	680e      	ldr	r6, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	43d8      	mvns	r0, r3
          temp |= iocurrent;
 8000d6a:	4333      	orrs	r3, r6
 8000d6c:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6e:	03d3      	lsls	r3, r2, #15
 8000d70:	d402      	bmi.n	8000d78 <HAL_GPIO_Init+0x1e8>
        temp &= ~((uint32_t)iocurrent);
 8000d72:	0033      	movs	r3, r6
 8000d74:	4003      	ands	r3, r0
 8000d76:	469c      	mov	ip, r3
        EXTI->IMR = temp;
 8000d78:	4663      	mov	r3, ip
 8000d7a:	600b      	str	r3, [r1, #0]
        temp = EXTI->EMR;
 8000d7c:	684e      	ldr	r6, [r1, #4]
          temp |= iocurrent;
 8000d7e:	9b00      	ldr	r3, [sp, #0]
 8000d80:	4333      	orrs	r3, r6
 8000d82:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d84:	0393      	lsls	r3, r2, #14
 8000d86:	d402      	bmi.n	8000d8e <HAL_GPIO_Init+0x1fe>
        temp &= ~((uint32_t)iocurrent);
 8000d88:	0033      	movs	r3, r6
 8000d8a:	4003      	ands	r3, r0
 8000d8c:	469c      	mov	ip, r3
        EXTI->EMR = temp;
 8000d8e:	4663      	mov	r3, ip
 8000d90:	604b      	str	r3, [r1, #4]
        temp = EXTI->RTSR;
 8000d92:	688e      	ldr	r6, [r1, #8]
          temp |= iocurrent;
 8000d94:	9b00      	ldr	r3, [sp, #0]
 8000d96:	4333      	orrs	r3, r6
 8000d98:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9a:	02d3      	lsls	r3, r2, #11
 8000d9c:	d402      	bmi.n	8000da4 <HAL_GPIO_Init+0x214>
        temp &= ~((uint32_t)iocurrent);
 8000d9e:	0033      	movs	r3, r6
 8000da0:	4003      	ands	r3, r0
 8000da2:	469c      	mov	ip, r3
        EXTI->RTSR = temp;
 8000da4:	4663      	mov	r3, ip
 8000da6:	608b      	str	r3, [r1, #8]
        temp = EXTI->FTSR;
 8000da8:	68ce      	ldr	r6, [r1, #12]
          temp |= iocurrent;
 8000daa:	9b00      	ldr	r3, [sp, #0]
 8000dac:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dae:	0292      	lsls	r2, r2, #10
 8000db0:	d401      	bmi.n	8000db6 <HAL_GPIO_Init+0x226>
        temp &= ~((uint32_t)iocurrent);
 8000db2:	0033      	movs	r3, r6
 8000db4:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 8000db6:	60cb      	str	r3, [r1, #12]
    position++;
 8000db8:	3701      	adds	r7, #1
 8000dba:	e730      	b.n	8000c1e <HAL_GPIO_Init+0x8e>
 8000dbc:	ffdfffff 	.word	0xffdfffff
 8000dc0:	efef0000 	.word	0xefef0000
 8000dc4:	fffeffff 	.word	0xfffeffff
 8000dc8:	efdf0000 	.word	0xefdf0000
 8000dcc:	080038a2 	.word	0x080038a2
 8000dd0:	50000400 	.word	0x50000400
 8000dd4:	50000800 	.word	0x50000800
 8000dd8:	50000c00 	.word	0x50000c00
 8000ddc:	50001000 	.word	0x50001000
 8000de0:	0000ffff 	.word	0x0000ffff
 8000de4:	50001c00 	.word	0x50001c00
 8000de8:	00000603 	.word	0x00000603
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000
 8000df4:	afffe400 	.word	0xafffe400
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_GPIO_WritePin>:
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8000dfc:	23a0      	movs	r3, #160	; 0xa0
{
 8000dfe:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8000e00:	05db      	lsls	r3, r3, #23
{
 8000e02:	0004      	movs	r4, r0
 8000e04:	000d      	movs	r5, r1
 8000e06:	0016      	movs	r6, r2
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8000e08:	4298      	cmp	r0, r3
 8000e0a:	d00b      	beq.n	8000e24 <HAL_GPIO_WritePin+0x28>
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_GPIO_WritePin+0x68>)
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d008      	beq.n	8000e24 <HAL_GPIO_WritePin+0x28>
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_GPIO_WritePin+0x6c>)
 8000e14:	4298      	cmp	r0, r3
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_WritePin+0x28>
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_GPIO_WritePin+0x70>)
 8000e1a:	4298      	cmp	r0, r3
 8000e1c:	d002      	beq.n	8000e24 <HAL_GPIO_WritePin+0x28>
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_GPIO_WritePin+0x74>)
 8000e20:	4298      	cmp	r0, r3
 8000e22:	d10a      	bne.n	8000e3a <HAL_GPIO_WritePin+0x3e>
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d012      	beq.n	8000e4e <HAL_GPIO_WritePin+0x52>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000e28:	2e01      	cmp	r6, #1
 8000e2a:	d916      	bls.n	8000e5a <HAL_GPIO_WritePin+0x5e>
 8000e2c:	219e      	movs	r1, #158	; 0x9e
 8000e2e:	4811      	ldr	r0, [pc, #68]	; (8000e74 <HAL_GPIO_WritePin+0x78>)
 8000e30:	31ff      	adds	r1, #255	; 0xff
 8000e32:	f002 f8b3 	bl	8002f9c <assert_failed>
  
  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e36:	61a5      	str	r5, [r4, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_GPIO_WritePin+0x7c>)
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	d106      	bne.n	8000e4e <HAL_GPIO_WritePin+0x52>
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_GPIO_WritePin+0x80>)
 8000e42:	4219      	tst	r1, r3
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_WritePin+0x52>
 8000e46:	001a      	movs	r2, r3
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d0ec      	beq.n	8000e28 <HAL_GPIO_WritePin+0x2c>
 8000e4e:	21ce      	movs	r1, #206	; 0xce
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <HAL_GPIO_WritePin+0x78>)
 8000e52:	0049      	lsls	r1, r1, #1
 8000e54:	f002 f8a2 	bl	8002f9c <assert_failed>
 8000e58:	e7e6      	b.n	8000e28 <HAL_GPIO_WritePin+0x2c>
  if(PinState != GPIO_PIN_RESET)
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d1eb      	bne.n	8000e36 <HAL_GPIO_WritePin+0x3a>
    GPIOx->BRR = GPIO_Pin ;
 8000e5e:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8000e60:	e7ea      	b.n	8000e38 <HAL_GPIO_WritePin+0x3c>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	50000400 	.word	0x50000400
 8000e68:	50000800 	.word	0x50000800
 8000e6c:	50000c00 	.word	0x50000c00
 8000e70:	50001000 	.word	0x50001000
 8000e74:	080038a2 	.word	0x080038a2
 8000e78:	50001c00 	.word	0x50001c00
 8000e7c:	00000603 	.word	0x00000603

08000e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	d100      	bne.n	8000e8c <HAL_I2C_Init+0xc>
 8000e8a:	e08a      	b.n	8000fa2 <HAL_I2C_Init+0x122>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <HAL_I2C_Init+0x138>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d00a      	beq.n	8000eaa <HAL_I2C_Init+0x2a>
 8000e94:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_I2C_Init+0x13c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d007      	beq.n	8000eaa <HAL_I2C_Init+0x2a>
 8000e9a:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <HAL_I2C_Init+0x140>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d004      	beq.n	8000eaa <HAL_I2C_Init+0x2a>
 8000ea0:	21ef      	movs	r1, #239	; 0xef
 8000ea2:	4848      	ldr	r0, [pc, #288]	; (8000fc4 <HAL_I2C_Init+0x144>)
 8000ea4:	0049      	lsls	r1, r1, #1
 8000ea6:	f002 f879 	bl	8002f9c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_I2C_Init+0x148>)
 8000eac:	68a2      	ldr	r2, [r4, #8]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d904      	bls.n	8000ebc <HAL_I2C_Init+0x3c>
 8000eb2:	21e0      	movs	r1, #224	; 0xe0
 8000eb4:	4843      	ldr	r0, [pc, #268]	; (8000fc4 <HAL_I2C_Init+0x144>)
 8000eb6:	31ff      	adds	r1, #255	; 0xff
 8000eb8:	f002 f870 	bl	8002f9c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8000ebc:	68e3      	ldr	r3, [r4, #12]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d904      	bls.n	8000ece <HAL_I2C_Init+0x4e>
 8000ec4:	21f0      	movs	r1, #240	; 0xf0
 8000ec6:	483f      	ldr	r0, [pc, #252]	; (8000fc4 <HAL_I2C_Init+0x144>)
 8000ec8:	0049      	lsls	r1, r1, #1
 8000eca:	f002 f867 	bl	8002f9c <assert_failed>
 8000ece:	4e3f      	ldr	r6, [pc, #252]	; (8000fcc <HAL_I2C_Init+0x14c>)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8000ed0:	6923      	ldr	r3, [r4, #16]
 8000ed2:	4233      	tst	r3, r6
 8000ed4:	d004      	beq.n	8000ee0 <HAL_I2C_Init+0x60>
 8000ed6:	21e2      	movs	r1, #226	; 0xe2
 8000ed8:	483a      	ldr	r0, [pc, #232]	; (8000fc4 <HAL_I2C_Init+0x144>)
 8000eda:	31ff      	adds	r1, #255	; 0xff
 8000edc:	f002 f85e 	bl	8002f9c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8000ee0:	6963      	ldr	r3, [r4, #20]
 8000ee2:	2bff      	cmp	r3, #255	; 0xff
 8000ee4:	d904      	bls.n	8000ef0 <HAL_I2C_Init+0x70>
 8000ee6:	21f1      	movs	r1, #241	; 0xf1
 8000ee8:	4836      	ldr	r0, [pc, #216]	; (8000fc4 <HAL_I2C_Init+0x144>)
 8000eea:	0049      	lsls	r1, r1, #1
 8000eec:	f002 f856 	bl	8002f9c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8000ef0:	69a3      	ldr	r3, [r4, #24]
 8000ef2:	2b07      	cmp	r3, #7
 8000ef4:	d904      	bls.n	8000f00 <HAL_I2C_Init+0x80>
 8000ef6:	21e4      	movs	r1, #228	; 0xe4
 8000ef8:	4832      	ldr	r0, [pc, #200]	; (8000fc4 <HAL_I2C_Init+0x144>)
 8000efa:	31ff      	adds	r1, #255	; 0xff
 8000efc:	f002 f84e 	bl	8002f9c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8000f00:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <HAL_I2C_Init+0x150>)
 8000f02:	69e2      	ldr	r2, [r4, #28]
 8000f04:	421a      	tst	r2, r3
 8000f06:	d004      	beq.n	8000f12 <HAL_I2C_Init+0x92>
 8000f08:	21f2      	movs	r1, #242	; 0xf2
 8000f0a:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <HAL_I2C_Init+0x144>)
 8000f0c:	0049      	lsls	r1, r1, #1
 8000f0e:	f002 f845 	bl	8002f9c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <HAL_I2C_Init+0x154>)
 8000f14:	6a22      	ldr	r2, [r4, #32]
 8000f16:	421a      	tst	r2, r3
 8000f18:	d004      	beq.n	8000f24 <HAL_I2C_Init+0xa4>
 8000f1a:	21e6      	movs	r1, #230	; 0xe6
 8000f1c:	4829      	ldr	r0, [pc, #164]	; (8000fc4 <HAL_I2C_Init+0x144>)
 8000f1e:	31ff      	adds	r1, #255	; 0xff
 8000f20:	f002 f83c 	bl	8002f9c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f24:	0025      	movs	r5, r4
 8000f26:	3541      	adds	r5, #65	; 0x41
 8000f28:	782b      	ldrb	r3, [r5, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <HAL_I2C_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f30:	0022      	movs	r2, r4
 8000f32:	3240      	adds	r2, #64	; 0x40
 8000f34:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f36:	0020      	movs	r0, r4
 8000f38:	f002 f9d6 	bl	80032e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f3c:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f3e:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f40:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	68a0      	ldr	r0, [r4, #8]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	438a      	bics	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f4c:	6861      	ldr	r1, [r4, #4]
 8000f4e:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <HAL_I2C_Init+0x158>)
 8000f50:	400a      	ands	r2, r1
 8000f52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f54:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f56:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f58:	4032      	ands	r2, r6
 8000f5a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f5c:	2901      	cmp	r1, #1
 8000f5e:	d121      	bne.n	8000fa4 <HAL_I2C_Init+0x124>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	0212      	lsls	r2, r2, #8
 8000f64:	4302      	orrs	r2, r0
 8000f66:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f68:	6859      	ldr	r1, [r3, #4]
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <HAL_I2C_Init+0x15c>)
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f6c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f72:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f74:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f76:	4016      	ands	r6, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f78:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f7a:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	69a1      	ldr	r1, [r4, #24]
 8000f80:	0209      	lsls	r1, r1, #8
 8000f82:	430a      	orrs	r2, r1
 8000f84:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f86:	6a21      	ldr	r1, [r4, #32]
 8000f88:	69e2      	ldr	r2, [r4, #28]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	6819      	ldr	r1, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000f96:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f98:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f9a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f9c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f9e:	3442      	adds	r4, #66	; 0x42
 8000fa0:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fa4:	2284      	movs	r2, #132	; 0x84
 8000fa6:	0212      	lsls	r2, r2, #8
 8000fa8:	4302      	orrs	r2, r0
 8000faa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fac:	2902      	cmp	r1, #2
 8000fae:	d1db      	bne.n	8000f68 <HAL_I2C_Init+0xe8>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	e7d7      	b.n	8000f68 <HAL_I2C_Init+0xe8>
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	40005800 	.word	0x40005800
 8000fc0:	40007800 	.word	0x40007800
 8000fc4:	080038db 	.word	0x080038db
 8000fc8:	000003ff 	.word	0x000003ff
 8000fcc:	ffff7fff 	.word	0xffff7fff
 8000fd0:	fff7ffff 	.word	0xfff7ffff
 8000fd4:	fffdffff 	.word	0xfffdffff
 8000fd8:	f0ffffff 	.word	0xf0ffffff
 8000fdc:	02008000 	.word	0x02008000

08000fe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_I2CEx_ConfigAnalogFilter+0x78>)
 8000fe4:	6803      	ldr	r3, [r0, #0]
{
 8000fe6:	0006      	movs	r6, r0
 8000fe8:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d009      	beq.n	8001002 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_I2CEx_ConfigAnalogFilter+0x7c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d006      	beq.n	8001002 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 8000ff4:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <HAL_I2CEx_ConfigAnalogFilter+0x80>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d003      	beq.n	8001002 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 8000ffa:	2164      	movs	r1, #100	; 0x64
 8000ffc:	4819      	ldr	r0, [pc, #100]	; (8001064 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 8000ffe:	f001 ffcd 	bl	8002f9c <assert_failed>
 8001002:	4d19      	ldr	r5, [pc, #100]	; (8001068 <HAL_I2CEx_ConfigAnalogFilter+0x88>)
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8001004:	422c      	tst	r4, r5
 8001006:	d003      	beq.n	8001010 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8001008:	2165      	movs	r1, #101	; 0x65
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 800100c:	f001 ffc6 	bl	8002f9c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001010:	2341      	movs	r3, #65	; 0x41
 8001012:	469c      	mov	ip, r3
 8001014:	44b4      	add	ip, r6
 8001016:	4663      	mov	r3, ip
 8001018:	781a      	ldrb	r2, [r3, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800101a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	2a20      	cmp	r2, #32
 8001020:	d119      	bne.n	8001056 <HAL_I2CEx_ConfigAnalogFilter+0x76>
    __HAL_LOCK(hi2c);
 8001022:	0037      	movs	r7, r6
 8001024:	3740      	adds	r7, #64	; 0x40
 8001026:	783b      	ldrb	r3, [r7, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d014      	beq.n	8001056 <HAL_I2CEx_ConfigAnalogFilter+0x76>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800102c:	2324      	movs	r3, #36	; 0x24
 800102e:	4661      	mov	r1, ip
 8001030:	700b      	strb	r3, [r1, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001032:	2101      	movs	r1, #1
 8001034:	6833      	ldr	r3, [r6, #0]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	4388      	bics	r0, r1
 800103a:	6018      	str	r0, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	4005      	ands	r5, r0
 8001040:	601d      	str	r5, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	4304      	orrs	r4, r0
 8001046:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	4301      	orrs	r1, r0
 800104c:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800104e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001050:	4663      	mov	r3, ip
 8001052:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001054:	7038      	strb	r0, [r7, #0]
  }
}
 8001056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001058:	40005400 	.word	0x40005400
 800105c:	40005800 	.word	0x40005800
 8001060:	40007800 	.word	0x40007800
 8001064:	08003913 	.word	0x08003913
 8001068:	ffffefff 	.word	0xffffefff

0800106c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800106e:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_I2CEx_ConfigDigitalFilter+0x70>)
 8001070:	6803      	ldr	r3, [r0, #0]
{
 8001072:	0005      	movs	r5, r0
 8001074:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001076:	4293      	cmp	r3, r2
 8001078:	d009      	beq.n	800108e <HAL_I2CEx_ConfigDigitalFilter+0x22>
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_I2CEx_ConfigDigitalFilter+0x74>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d006      	beq.n	800108e <HAL_I2CEx_ConfigDigitalFilter+0x22>
 8001080:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <HAL_I2CEx_ConfigDigitalFilter+0x78>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d003      	beq.n	800108e <HAL_I2CEx_ConfigDigitalFilter+0x22>
 8001086:	2192      	movs	r1, #146	; 0x92
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 800108a:	f001 ff87 	bl	8002f9c <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800108e:	2c0f      	cmp	r4, #15
 8001090:	d903      	bls.n	800109a <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 8001092:	2193      	movs	r1, #147	; 0x93
 8001094:	4814      	ldr	r0, [pc, #80]	; (80010e8 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 8001096:	f001 ff81 	bl	8002f9c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800109a:	002e      	movs	r6, r5
 800109c:	3641      	adds	r6, #65	; 0x41
 800109e:	7832      	ldrb	r2, [r6, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80010a0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	2a20      	cmp	r2, #32
 80010a6:	d117      	bne.n	80010d8 <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    __HAL_LOCK(hi2c);
 80010a8:	0029      	movs	r1, r5
 80010aa:	3140      	adds	r1, #64	; 0x40
 80010ac:	780b      	ldrb	r3, [r1, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d012      	beq.n	80010d8 <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80010b2:	2324      	movs	r3, #36	; 0x24
 80010b4:	7033      	strb	r3, [r6, #0]
    __HAL_I2C_DISABLE(hi2c);
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	3801      	subs	r0, #1
 80010ba:	681d      	ldr	r5, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80010bc:	4f0b      	ldr	r7, [pc, #44]	; (80010ec <HAL_I2CEx_ConfigDigitalFilter+0x80>)
    __HAL_I2C_DISABLE(hi2c);
 80010be:	4385      	bics	r5, r0
 80010c0:	601d      	str	r5, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80010c2:	681d      	ldr	r5, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80010c4:	0224      	lsls	r4, r4, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80010c6:	403d      	ands	r5, r7
    tmpreg |= DigitalFilter << 8U;
 80010c8:	432c      	orrs	r4, r5
    hi2c->Instance->CR1 = tmpreg;
 80010ca:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80010cc:	681c      	ldr	r4, [r3, #0]
 80010ce:	4320      	orrs	r0, r4
 80010d0:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80010d2:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80010d4:	7032      	strb	r2, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80010d6:	7008      	strb	r0, [r1, #0]
  }
}
 80010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	40005400 	.word	0x40005400
 80010e0:	40005800 	.word	0x40005800
 80010e4:	40007800 	.word	0x40007800
 80010e8:	08003913 	.word	0x08003913
 80010ec:	fffff0ff 	.word	0xfffff0ff

080010f0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010f0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80010f4:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80010f6:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80010f8:	400a      	ands	r2, r1
 80010fa:	2a08      	cmp	r2, #8
 80010fc:	d026      	beq.n	800114c <HAL_RCC_GetSysClockFreq+0x5c>
 80010fe:	2a0c      	cmp	r2, #12
 8001100:	d006      	beq.n	8001110 <HAL_RCC_GetSysClockFreq+0x20>
 8001102:	2a04      	cmp	r2, #4
 8001104:	d11a      	bne.n	800113c <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	06db      	lsls	r3, r3, #27
 800110a:	d421      	bmi.n	8001150 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800110c:	4812      	ldr	r0, [pc, #72]	; (8001158 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800110e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001110:	028a      	lsls	r2, r1, #10
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <HAL_RCC_GetSysClockFreq+0x6c>)
 8001114:	0f12      	lsrs	r2, r2, #28
 8001116:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001118:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800111a:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800111c:	0f89      	lsrs	r1, r1, #30
 800111e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001120:	03c0      	lsls	r0, r0, #15
 8001122:	d504      	bpl.n	800112e <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001124:	480e      	ldr	r0, [pc, #56]	; (8001160 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001126:	4350      	muls	r0, r2
 8001128:	f7ff f814 	bl	8000154 <__udivsi3>
 800112c:	e7ef      	b.n	800110e <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	06db      	lsls	r3, r3, #27
 8001132:	d501      	bpl.n	8001138 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <HAL_RCC_GetSysClockFreq+0x74>)
 8001136:	e7f6      	b.n	8001126 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <HAL_RCC_GetSysClockFreq+0x68>)
 800113a:	e7f4      	b.n	8001126 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800113c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800113e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001140:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001142:	041b      	lsls	r3, r3, #16
 8001144:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001146:	3301      	adds	r3, #1
 8001148:	4098      	lsls	r0, r3
 800114a:	e7e0      	b.n	800110e <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <HAL_RCC_GetSysClockFreq+0x70>)
 800114e:	e7de      	b.n	800110e <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001152:	e7dc      	b.n	800110e <HAL_RCC_GetSysClockFreq+0x1e>
 8001154:	40021000 	.word	0x40021000
 8001158:	00f42400 	.word	0x00f42400
 800115c:	08003abe 	.word	0x08003abe
 8001160:	007a1200 	.word	0x007a1200
 8001164:	003d0900 	.word	0x003d0900

08001168 <HAL_RCC_OscConfig>:
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	0005      	movs	r5, r0
 800116c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800116e:	2800      	cmp	r0, #0
 8001170:	d102      	bne.n	8001178 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001172:	2001      	movs	r0, #1
}
 8001174:	b007      	add	sp, #28
 8001176:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001178:	6803      	ldr	r3, [r0, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <HAL_RCC_OscConfig+0x24>
 800117e:	069b      	lsls	r3, r3, #26
 8001180:	d104      	bne.n	800118c <HAL_RCC_OscConfig+0x24>
 8001182:	21b0      	movs	r1, #176	; 0xb0
 8001184:	48c7      	ldr	r0, [pc, #796]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 8001186:	0049      	lsls	r1, r1, #1
 8001188:	f001 ff08 	bl	8002f9c <assert_failed>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118c:	230c      	movs	r3, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800118e:	2780      	movs	r7, #128	; 0x80
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001190:	4cc5      	ldr	r4, [pc, #788]	; (80014a8 <HAL_RCC_OscConfig+0x340>)
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001192:	027f      	lsls	r7, r7, #9
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001194:	68e2      	ldr	r2, [r4, #12]
 8001196:	401a      	ands	r2, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001198:	68e3      	ldr	r3, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119a:	9201      	str	r2, [sp, #4]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800119c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	682b      	ldr	r3, [r5, #0]
 80011a0:	07db      	lsls	r3, r3, #31
 80011a2:	d464      	bmi.n	800126e <HAL_RCC_OscConfig+0x106>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	079b      	lsls	r3, r3, #30
 80011a8:	d500      	bpl.n	80011ac <HAL_RCC_OscConfig+0x44>
 80011aa:	e0c0      	b.n	800132e <HAL_RCC_OscConfig+0x1c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	06db      	lsls	r3, r3, #27
 80011b0:	d543      	bpl.n	800123a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80011b2:	9b01      	ldr	r3, [sp, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d000      	beq.n	80011ba <HAL_RCC_OscConfig+0x52>
 80011b8:	e12d      	b.n	8001416 <HAL_RCC_OscConfig+0x2ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	059b      	lsls	r3, r3, #22
 80011be:	d502      	bpl.n	80011c6 <HAL_RCC_OscConfig+0x5e>
 80011c0:	69eb      	ldr	r3, [r5, #28]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0d5      	beq.n	8001172 <HAL_RCC_OscConfig+0xa>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80011c6:	6a2b      	ldr	r3, [r5, #32]
 80011c8:	2bff      	cmp	r3, #255	; 0xff
 80011ca:	d904      	bls.n	80011d6 <HAL_RCC_OscConfig+0x6e>
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	48b5      	ldr	r0, [pc, #724]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 80011d0:	0089      	lsls	r1, r1, #2
 80011d2:	f001 fee3 	bl	8002f9c <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80011d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80011d8:	4ab4      	ldr	r2, [pc, #720]	; (80014ac <HAL_RCC_OscConfig+0x344>)
 80011da:	49b5      	ldr	r1, [pc, #724]	; (80014b0 <HAL_RCC_OscConfig+0x348>)
 80011dc:	401a      	ands	r2, r3
 80011de:	420b      	tst	r3, r1
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x92>
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0209      	lsls	r1, r1, #8
 80011e6:	428a      	cmp	r2, r1
 80011e8:	d007      	beq.n	80011fa <HAL_RCC_OscConfig+0x92>
 80011ea:	22c0      	movs	r2, #192	; 0xc0
 80011ec:	0212      	lsls	r2, r2, #8
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d003      	beq.n	80011fa <HAL_RCC_OscConfig+0x92>
 80011f2:	49b0      	ldr	r1, [pc, #704]	; (80014b4 <HAL_RCC_OscConfig+0x34c>)
 80011f4:	48ab      	ldr	r0, [pc, #684]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 80011f6:	f001 fed1 	bl	8002f9c <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011fa:	6862      	ldr	r2, [r4, #4]
 80011fc:	49ae      	ldr	r1, [pc, #696]	; (80014b8 <HAL_RCC_OscConfig+0x350>)
 80011fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001200:	400a      	ands	r2, r1
 8001202:	431a      	orrs	r2, r3
 8001204:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001206:	6861      	ldr	r1, [r4, #4]
 8001208:	6a2a      	ldr	r2, [r5, #32]
 800120a:	0209      	lsls	r1, r1, #8
 800120c:	0a09      	lsrs	r1, r1, #8
 800120e:	0612      	lsls	r2, r2, #24
 8001210:	430a      	orrs	r2, r1
 8001212:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	0b5b      	lsrs	r3, r3, #13
 8001218:	3301      	adds	r3, #1
 800121a:	0212      	lsls	r2, r2, #8
 800121c:	409a      	lsls	r2, r3
 800121e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001220:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001224:	060a      	lsls	r2, r1, #24
 8001226:	49a5      	ldr	r1, [pc, #660]	; (80014bc <HAL_RCC_OscConfig+0x354>)
 8001228:	0f12      	lsrs	r2, r2, #28
 800122a:	5c8a      	ldrb	r2, [r1, r2]
 800122c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800122e:	4aa4      	ldr	r2, [pc, #656]	; (80014c0 <HAL_RCC_OscConfig+0x358>)
 8001230:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001232:	f7ff f925 	bl	8000480 <HAL_InitTick>
        if(status != HAL_OK)
 8001236:	2800      	cmp	r0, #0
 8001238:	d19c      	bne.n	8001174 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	071b      	lsls	r3, r3, #28
 800123e:	d500      	bpl.n	8001242 <HAL_RCC_OscConfig+0xda>
 8001240:	e15b      	b.n	80014fa <HAL_RCC_OscConfig+0x392>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001242:	682b      	ldr	r3, [r5, #0]
 8001244:	075b      	lsls	r3, r3, #29
 8001246:	d500      	bpl.n	800124a <HAL_RCC_OscConfig+0xe2>
 8001248:	e184      	b.n	8001554 <HAL_RCC_OscConfig+0x3ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	069b      	lsls	r3, r3, #26
 800124e:	d500      	bpl.n	8001252 <HAL_RCC_OscConfig+0xea>
 8001250:	e1fd      	b.n	800164e <HAL_RCC_OscConfig+0x4e6>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001252:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001254:	2b02      	cmp	r3, #2
 8001256:	d904      	bls.n	8001262 <HAL_RCC_OscConfig+0xfa>
 8001258:	21ba      	movs	r1, #186	; 0xba
 800125a:	4892      	ldr	r0, [pc, #584]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 800125c:	0089      	lsls	r1, r1, #2
 800125e:	f001 fe9d 	bl	8002f9c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001262:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001264:	2b00      	cmp	r3, #0
 8001266:	d000      	beq.n	800126a <HAL_RCC_OscConfig+0x102>
 8001268:	e22b      	b.n	80016c2 <HAL_RCC_OscConfig+0x55a>
  return HAL_OK;
 800126a:	2000      	movs	r0, #0
 800126c:	e782      	b.n	8001174 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800126e:	686b      	ldr	r3, [r5, #4]
 8001270:	4e94      	ldr	r6, [pc, #592]	; (80014c4 <HAL_RCC_OscConfig+0x35c>)
 8001272:	4233      	tst	r3, r6
 8001274:	d008      	beq.n	8001288 <HAL_RCC_OscConfig+0x120>
 8001276:	22a0      	movs	r2, #160	; 0xa0
 8001278:	02d2      	lsls	r2, r2, #11
 800127a:	4293      	cmp	r3, r2
 800127c:	d004      	beq.n	8001288 <HAL_RCC_OscConfig+0x120>
 800127e:	216a      	movs	r1, #106	; 0x6a
 8001280:	4888      	ldr	r0, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 8001282:	31ff      	adds	r1, #255	; 0xff
 8001284:	f001 fe8a 	bl	8002f9c <assert_failed>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001288:	9b01      	ldr	r3, [sp, #4]
 800128a:	2b08      	cmp	r3, #8
 800128c:	d003      	beq.n	8001296 <HAL_RCC_OscConfig+0x12e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d108      	bne.n	80012a4 <HAL_RCC_OscConfig+0x13c>
 8001292:	2f00      	cmp	r7, #0
 8001294:	d006      	beq.n	80012a4 <HAL_RCC_OscConfig+0x13c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	039b      	lsls	r3, r3, #14
 800129a:	d583      	bpl.n	80011a4 <HAL_RCC_OscConfig+0x3c>
 800129c:	686b      	ldr	r3, [r5, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d180      	bne.n	80011a4 <HAL_RCC_OscConfig+0x3c>
 80012a2:	e766      	b.n	8001172 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	686b      	ldr	r3, [r5, #4]
 80012a8:	0249      	lsls	r1, r1, #9
 80012aa:	428b      	cmp	r3, r1
 80012ac:	d114      	bne.n	80012d8 <HAL_RCC_OscConfig+0x170>
 80012ae:	6822      	ldr	r2, [r4, #0]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012b4:	f7ff f918 	bl	80004e8 <HAL_GetTick>
 80012b8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	0292      	lsls	r2, r2, #10
 80012c0:	4213      	tst	r3, r2
 80012c2:	d000      	beq.n	80012c6 <HAL_RCC_OscConfig+0x15e>
 80012c4:	e76e      	b.n	80011a4 <HAL_RCC_OscConfig+0x3c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c6:	f7ff f90f 	bl	80004e8 <HAL_GetTick>
 80012ca:	23fa      	movs	r3, #250	; 0xfa
 80012cc:	1b80      	subs	r0, r0, r6
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4298      	cmp	r0, r3
 80012d2:	d9f2      	bls.n	80012ba <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80012d4:	2003      	movs	r0, #3
 80012d6:	e74d      	b.n	8001174 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d8:	22a0      	movs	r2, #160	; 0xa0
 80012da:	02d2      	lsls	r2, r2, #11
 80012dc:	4293      	cmp	r3, r2
 80012de:	d108      	bne.n	80012f2 <HAL_RCC_OscConfig+0x18a>
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	6822      	ldr	r2, [r4, #0]
 80012e4:	02db      	lsls	r3, r3, #11
 80012e6:	4313      	orrs	r3, r2
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	6822      	ldr	r2, [r4, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	6022      	str	r2, [r4, #0]
 80012f0:	e7e0      	b.n	80012b4 <HAL_RCC_OscConfig+0x14c>
 80012f2:	6822      	ldr	r2, [r4, #0]
 80012f4:	4016      	ands	r6, r2
 80012f6:	6026      	str	r6, [r4, #0]
 80012f8:	6822      	ldr	r2, [r4, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	9205      	str	r2, [sp, #20]
 80012fe:	9a05      	ldr	r2, [sp, #20]
 8001300:	4971      	ldr	r1, [pc, #452]	; (80014c8 <HAL_RCC_OscConfig+0x360>)
 8001302:	6822      	ldr	r2, [r4, #0]
 8001304:	400a      	ands	r2, r1
 8001306:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1d3      	bne.n	80012b4 <HAL_RCC_OscConfig+0x14c>
        tickstart = HAL_GetTick();
 800130c:	f7ff f8ec 	bl	80004e8 <HAL_GetTick>
 8001310:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	0292      	lsls	r2, r2, #10
 8001318:	4213      	tst	r3, r2
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x1b6>
 800131c:	e742      	b.n	80011a4 <HAL_RCC_OscConfig+0x3c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131e:	f7ff f8e3 	bl	80004e8 <HAL_GetTick>
 8001322:	23fa      	movs	r3, #250	; 0xfa
 8001324:	1b80      	subs	r0, r0, r6
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4298      	cmp	r0, r3
 800132a:	d9f2      	bls.n	8001312 <HAL_RCC_OscConfig+0x1aa>
 800132c:	e7d2      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800132e:	2320      	movs	r3, #32
 8001330:	68ea      	ldr	r2, [r5, #12]
 8001332:	439a      	bics	r2, r3
 8001334:	2a01      	cmp	r2, #1
 8001336:	d906      	bls.n	8001346 <HAL_RCC_OscConfig+0x1de>
 8001338:	2a09      	cmp	r2, #9
 800133a:	d004      	beq.n	8001346 <HAL_RCC_OscConfig+0x1de>
 800133c:	21ce      	movs	r1, #206	; 0xce
 800133e:	4859      	ldr	r0, [pc, #356]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 8001340:	0049      	lsls	r1, r1, #1
 8001342:	f001 fe2b 	bl	8002f9c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001346:	692b      	ldr	r3, [r5, #16]
 8001348:	2b1f      	cmp	r3, #31
 800134a:	d904      	bls.n	8001356 <HAL_RCC_OscConfig+0x1ee>
 800134c:	219e      	movs	r1, #158	; 0x9e
 800134e:	4855      	ldr	r0, [pc, #340]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 8001350:	31ff      	adds	r1, #255	; 0xff
 8001352:	f001 fe23 	bl	8002f9c <assert_failed>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001356:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001358:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800135a:	4213      	tst	r3, r2
 800135c:	d003      	beq.n	8001366 <HAL_RCC_OscConfig+0x1fe>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800135e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001360:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001362:	4311      	orrs	r1, r2
 8001364:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001366:	9a01      	ldr	r2, [sp, #4]
 8001368:	2a04      	cmp	r2, #4
 800136a:	d003      	beq.n	8001374 <HAL_RCC_OscConfig+0x20c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800136c:	2a0c      	cmp	r2, #12
 800136e:	d124      	bne.n	80013ba <HAL_RCC_OscConfig+0x252>
 8001370:	2f00      	cmp	r7, #0
 8001372:	d122      	bne.n	80013ba <HAL_RCC_OscConfig+0x252>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001374:	6822      	ldr	r2, [r4, #0]
 8001376:	0752      	lsls	r2, r2, #29
 8001378:	d502      	bpl.n	8001380 <HAL_RCC_OscConfig+0x218>
 800137a:	2b00      	cmp	r3, #0
 800137c:	d100      	bne.n	8001380 <HAL_RCC_OscConfig+0x218>
 800137e:	e6f8      	b.n	8001172 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	6861      	ldr	r1, [r4, #4]
 8001382:	692a      	ldr	r2, [r5, #16]
 8001384:	4851      	ldr	r0, [pc, #324]	; (80014cc <HAL_RCC_OscConfig+0x364>)
 8001386:	0212      	lsls	r2, r2, #8
 8001388:	4001      	ands	r1, r0
 800138a:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800138c:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001390:	6822      	ldr	r2, [r4, #0]
 8001392:	438a      	bics	r2, r1
 8001394:	4313      	orrs	r3, r2
 8001396:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001398:	f7ff feaa 	bl	80010f0 <HAL_RCC_GetSysClockFreq>
 800139c:	68e3      	ldr	r3, [r4, #12]
 800139e:	4a47      	ldr	r2, [pc, #284]	; (80014bc <HAL_RCC_OscConfig+0x354>)
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	0f1b      	lsrs	r3, r3, #28
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	40d8      	lsrs	r0, r3
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <HAL_RCC_OscConfig+0x358>)
 80013aa:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff f867 	bl	8000480 <HAL_InitTick>
      if(status != HAL_OK)
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d100      	bne.n	80013b8 <HAL_RCC_OscConfig+0x250>
 80013b6:	e6f9      	b.n	80011ac <HAL_RCC_OscConfig+0x44>
 80013b8:	e6dc      	b.n	8001174 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d019      	beq.n	80013f2 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013be:	2109      	movs	r1, #9
 80013c0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013c2:	2704      	movs	r7, #4
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013c4:	438a      	bics	r2, r1
 80013c6:	4313      	orrs	r3, r2
 80013c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013ca:	f7ff f88d 	bl	80004e8 <HAL_GetTick>
 80013ce:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	423b      	tst	r3, r7
 80013d4:	d007      	beq.n	80013e6 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	6862      	ldr	r2, [r4, #4]
 80013d8:	692b      	ldr	r3, [r5, #16]
 80013da:	493c      	ldr	r1, [pc, #240]	; (80014cc <HAL_RCC_OscConfig+0x364>)
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	400a      	ands	r2, r1
 80013e0:	4313      	orrs	r3, r2
 80013e2:	6063      	str	r3, [r4, #4]
 80013e4:	e6e2      	b.n	80011ac <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff f87f 	bl	80004e8 <HAL_GetTick>
 80013ea:	1b80      	subs	r0, r0, r6
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9ef      	bls.n	80013d0 <HAL_RCC_OscConfig+0x268>
 80013f0:	e770      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI_DISABLE();
 80013f2:	2201      	movs	r2, #1
 80013f4:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f6:	2704      	movs	r7, #4
        __HAL_RCC_HSI_DISABLE();
 80013f8:	4393      	bics	r3, r2
 80013fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013fc:	f7ff f874 	bl	80004e8 <HAL_GetTick>
 8001400:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	423b      	tst	r3, r7
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x2a2>
 8001408:	e6d0      	b.n	80011ac <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff f86d 	bl	80004e8 <HAL_GetTick>
 800140e:	1b80      	subs	r0, r0, r6
 8001410:	2802      	cmp	r0, #2
 8001412:	d9f6      	bls.n	8001402 <HAL_RCC_OscConfig+0x29a>
 8001414:	e75e      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8001416:	69eb      	ldr	r3, [r5, #28]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d904      	bls.n	8001426 <HAL_RCC_OscConfig+0x2be>
 800141c:	2186      	movs	r1, #134	; 0x86
 800141e:	4821      	ldr	r0, [pc, #132]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 8001420:	0089      	lsls	r1, r1, #2
 8001422:	f001 fdbb 	bl	8002f9c <assert_failed>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001426:	69eb      	ldr	r3, [r5, #28]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d053      	beq.n	80014d4 <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	6822      	ldr	r2, [r4, #0]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4313      	orrs	r3, r2
 8001434:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001436:	f7ff f857 	bl	80004e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800143a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800143c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800143e:	00bf      	lsls	r7, r7, #2
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	423b      	tst	r3, r7
 8001444:	d027      	beq.n	8001496 <HAL_RCC_OscConfig+0x32e>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8001446:	6a2b      	ldr	r3, [r5, #32]
 8001448:	2bff      	cmp	r3, #255	; 0xff
 800144a:	d904      	bls.n	8001456 <HAL_RCC_OscConfig+0x2ee>
 800144c:	218b      	movs	r1, #139	; 0x8b
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 8001450:	0089      	lsls	r1, r1, #2
 8001452:	f001 fda3 	bl	8002f9c <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8001456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <HAL_RCC_OscConfig+0x344>)
 800145a:	4915      	ldr	r1, [pc, #84]	; (80014b0 <HAL_RCC_OscConfig+0x348>)
 800145c:	401a      	ands	r2, r3
 800145e:	420b      	tst	r3, r1
 8001460:	d00b      	beq.n	800147a <HAL_RCC_OscConfig+0x312>
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	0209      	lsls	r1, r1, #8
 8001466:	428a      	cmp	r2, r1
 8001468:	d007      	beq.n	800147a <HAL_RCC_OscConfig+0x312>
 800146a:	22c0      	movs	r2, #192	; 0xc0
 800146c:	0212      	lsls	r2, r2, #8
 800146e:	4293      	cmp	r3, r2
 8001470:	d003      	beq.n	800147a <HAL_RCC_OscConfig+0x312>
 8001472:	4917      	ldr	r1, [pc, #92]	; (80014d0 <HAL_RCC_OscConfig+0x368>)
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x33c>)
 8001476:	f001 fd91 	bl	8002f9c <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147a:	6863      	ldr	r3, [r4, #4]
 800147c:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_RCC_OscConfig+0x350>)
 800147e:	4013      	ands	r3, r2
 8001480:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001482:	4313      	orrs	r3, r2
 8001484:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001486:	6862      	ldr	r2, [r4, #4]
 8001488:	6a2b      	ldr	r3, [r5, #32]
 800148a:	0212      	lsls	r2, r2, #8
 800148c:	061b      	lsls	r3, r3, #24
 800148e:	0a12      	lsrs	r2, r2, #8
 8001490:	4313      	orrs	r3, r2
 8001492:	6063      	str	r3, [r4, #4]
 8001494:	e6d1      	b.n	800123a <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001496:	f7ff f827 	bl	80004e8 <HAL_GetTick>
 800149a:	1b80      	subs	r0, r0, r6
 800149c:	2802      	cmp	r0, #2
 800149e:	d9cf      	bls.n	8001440 <HAL_RCC_OscConfig+0x2d8>
 80014a0:	e718      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	0800394e 	.word	0x0800394e
 80014a8:	40021000 	.word	0x40021000
 80014ac:	ffffdfff 	.word	0xffffdfff
 80014b0:	ffff9fff 	.word	0xffff9fff
 80014b4:	00000201 	.word	0x00000201
 80014b8:	ffff1fff 	.word	0xffff1fff
 80014bc:	08003aa6 	.word	0x08003aa6
 80014c0:	20000000 	.word	0x20000000
 80014c4:	fffeffff 	.word	0xfffeffff
 80014c8:	fffbffff 	.word	0xfffbffff
 80014cc:	ffffe0ff 	.word	0xffffe0ff
 80014d0:	0000022d 	.word	0x0000022d
        __HAL_RCC_MSI_DISABLE();
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	4ac0      	ldr	r2, [pc, #768]	; (80017d8 <HAL_RCC_OscConfig+0x670>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014d8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 80014da:	4013      	ands	r3, r2
 80014dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014de:	f7ff f803 	bl	80004e8 <HAL_GetTick>
 80014e2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014e4:	00bf      	lsls	r7, r7, #2
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	423b      	tst	r3, r7
 80014ea:	d100      	bne.n	80014ee <HAL_RCC_OscConfig+0x386>
 80014ec:	e6a5      	b.n	800123a <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ee:	f7fe fffb 	bl	80004e8 <HAL_GetTick>
 80014f2:	1b80      	subs	r0, r0, r6
 80014f4:	2802      	cmp	r0, #2
 80014f6:	d9f6      	bls.n	80014e6 <HAL_RCC_OscConfig+0x37e>
 80014f8:	e6ec      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80014fa:	696b      	ldr	r3, [r5, #20]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d903      	bls.n	8001508 <HAL_RCC_OscConfig+0x3a0>
 8001500:	49b6      	ldr	r1, [pc, #728]	; (80017dc <HAL_RCC_OscConfig+0x674>)
 8001502:	48b7      	ldr	r0, [pc, #732]	; (80017e0 <HAL_RCC_OscConfig+0x678>)
 8001504:	f001 fd4a 	bl	8002f9c <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001508:	696a      	ldr	r2, [r5, #20]
 800150a:	2301      	movs	r3, #1
 800150c:	2a00      	cmp	r2, #0
 800150e:	d010      	beq.n	8001532 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_LSI_ENABLE();
 8001510:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001512:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001514:	4313      	orrs	r3, r2
 8001516:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001518:	f7fe ffe6 	bl	80004e8 <HAL_GetTick>
 800151c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800151e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001520:	423b      	tst	r3, r7
 8001522:	d000      	beq.n	8001526 <HAL_RCC_OscConfig+0x3be>
 8001524:	e68d      	b.n	8001242 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001526:	f7fe ffdf 	bl	80004e8 <HAL_GetTick>
 800152a:	1b80      	subs	r0, r0, r6
 800152c:	2802      	cmp	r0, #2
 800152e:	d9f6      	bls.n	800151e <HAL_RCC_OscConfig+0x3b6>
 8001530:	e6d0      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_LSI_DISABLE();
 8001532:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001534:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001536:	439a      	bics	r2, r3
 8001538:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800153a:	f7fe ffd5 	bl	80004e8 <HAL_GetTick>
 800153e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001540:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001542:	423b      	tst	r3, r7
 8001544:	d100      	bne.n	8001548 <HAL_RCC_OscConfig+0x3e0>
 8001546:	e67c      	b.n	8001242 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001548:	f7fe ffce 	bl	80004e8 <HAL_GetTick>
 800154c:	1b80      	subs	r0, r0, r6
 800154e:	2802      	cmp	r0, #2
 8001550:	d9f6      	bls.n	8001540 <HAL_RCC_OscConfig+0x3d8>
 8001552:	e6bf      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001554:	68ab      	ldr	r3, [r5, #8]
 8001556:	4aa0      	ldr	r2, [pc, #640]	; (80017d8 <HAL_RCC_OscConfig+0x670>)
 8001558:	4213      	tst	r3, r2
 800155a:	d007      	beq.n	800156c <HAL_RCC_OscConfig+0x404>
 800155c:	22a0      	movs	r2, #160	; 0xa0
 800155e:	00d2      	lsls	r2, r2, #3
 8001560:	4293      	cmp	r3, r2
 8001562:	d003      	beq.n	800156c <HAL_RCC_OscConfig+0x404>
 8001564:	499f      	ldr	r1, [pc, #636]	; (80017e4 <HAL_RCC_OscConfig+0x67c>)
 8001566:	489e      	ldr	r0, [pc, #632]	; (80017e0 <HAL_RCC_OscConfig+0x678>)
 8001568:	f001 fd18 	bl	8002f9c <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800156e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001570:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001572:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001574:	9102      	str	r1, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	421a      	tst	r2, r3
 8001578:	d104      	bne.n	8001584 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800157c:	4313      	orrs	r3, r2
 800157e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001580:	2301      	movs	r3, #1
 8001582:	9302      	str	r3, [sp, #8]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	2780      	movs	r7, #128	; 0x80
 8001586:	4e98      	ldr	r6, [pc, #608]	; (80017e8 <HAL_RCC_OscConfig+0x680>)
 8001588:	007f      	lsls	r7, r7, #1
 800158a:	6833      	ldr	r3, [r6, #0]
 800158c:	423b      	tst	r3, r7
 800158e:	d008      	beq.n	80015a2 <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	68ab      	ldr	r3, [r5, #8]
 8001594:	0052      	lsls	r2, r2, #1
 8001596:	4293      	cmp	r3, r2
 8001598:	d113      	bne.n	80015c2 <HAL_RCC_OscConfig+0x45a>
 800159a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800159c:	4313      	orrs	r3, r2
 800159e:	6523      	str	r3, [r4, #80]	; 0x50
 80015a0:	e034      	b.n	800160c <HAL_RCC_OscConfig+0x4a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a2:	6833      	ldr	r3, [r6, #0]
 80015a4:	433b      	orrs	r3, r7
 80015a6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80015a8:	f7fe ff9e 	bl	80004e8 <HAL_GetTick>
 80015ac:	9003      	str	r0, [sp, #12]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	6833      	ldr	r3, [r6, #0]
 80015b0:	423b      	tst	r3, r7
 80015b2:	d1ed      	bne.n	8001590 <HAL_RCC_OscConfig+0x428>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b4:	f7fe ff98 	bl	80004e8 <HAL_GetTick>
 80015b8:	9b03      	ldr	r3, [sp, #12]
 80015ba:	1ac0      	subs	r0, r0, r3
 80015bc:	2864      	cmp	r0, #100	; 0x64
 80015be:	d9f6      	bls.n	80015ae <HAL_RCC_OscConfig+0x446>
 80015c0:	e688      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x48c>
 80015c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80015c8:	4a83      	ldr	r2, [pc, #524]	; (80017d8 <HAL_RCC_OscConfig+0x670>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015ca:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	4013      	ands	r3, r2
 80015ce:	6523      	str	r3, [r4, #80]	; 0x50
 80015d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80015d2:	4a86      	ldr	r2, [pc, #536]	; (80017ec <HAL_RCC_OscConfig+0x684>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015d4:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d6:	4013      	ands	r3, r2
 80015d8:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80015da:	f7fe ff85 	bl	80004e8 <HAL_GetTick>
 80015de:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80015e2:	423b      	tst	r3, r7
 80015e4:	d02a      	beq.n	800163c <HAL_RCC_OscConfig+0x4d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7fe ff7f 	bl	80004e8 <HAL_GetTick>
 80015ea:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <HAL_RCC_OscConfig+0x688>)
 80015ec:	1b80      	subs	r0, r0, r6
 80015ee:	4298      	cmp	r0, r3
 80015f0:	d9f6      	bls.n	80015e0 <HAL_RCC_OscConfig+0x478>
 80015f2:	e66f      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	21a0      	movs	r1, #160	; 0xa0
 80015f6:	00c9      	lsls	r1, r1, #3
 80015f8:	428b      	cmp	r3, r1
 80015fa:	d10d      	bne.n	8001618 <HAL_RCC_OscConfig+0x4b0>
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	430b      	orrs	r3, r1
 8001604:	6523      	str	r3, [r4, #80]	; 0x50
 8001606:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001608:	431a      	orrs	r2, r3
 800160a:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800160c:	f7fe ff6c 	bl	80004e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001610:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8001612:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001614:	00bf      	lsls	r7, r7, #2
 8001616:	e00e      	b.n	8001636 <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001618:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800161a:	4a6f      	ldr	r2, [pc, #444]	; (80017d8 <HAL_RCC_OscConfig+0x670>)
 800161c:	4013      	ands	r3, r2
 800161e:	6523      	str	r3, [r4, #80]	; 0x50
 8001620:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001622:	4a72      	ldr	r2, [pc, #456]	; (80017ec <HAL_RCC_OscConfig+0x684>)
 8001624:	4013      	ands	r3, r2
 8001626:	e7ba      	b.n	800159e <HAL_RCC_OscConfig+0x436>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7fe ff5e 	bl	80004e8 <HAL_GetTick>
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x688>)
 800162e:	1b80      	subs	r0, r0, r6
 8001630:	4298      	cmp	r0, r3
 8001632:	d900      	bls.n	8001636 <HAL_RCC_OscConfig+0x4ce>
 8001634:	e64e      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001636:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001638:	423b      	tst	r3, r7
 800163a:	d0f5      	beq.n	8001628 <HAL_RCC_OscConfig+0x4c0>
    if(pwrclkchanged == SET)
 800163c:	9b02      	ldr	r3, [sp, #8]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d000      	beq.n	8001644 <HAL_RCC_OscConfig+0x4dc>
 8001642:	e602      	b.n	800124a <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001646:	4a6b      	ldr	r2, [pc, #428]	; (80017f4 <HAL_RCC_OscConfig+0x68c>)
 8001648:	4013      	ands	r3, r2
 800164a:	63a3      	str	r3, [r4, #56]	; 0x38
 800164c:	e5fd      	b.n	800124a <HAL_RCC_OscConfig+0xe2>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800164e:	69ab      	ldr	r3, [r5, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d903      	bls.n	800165c <HAL_RCC_OscConfig+0x4f4>
 8001654:	4968      	ldr	r1, [pc, #416]	; (80017f8 <HAL_RCC_OscConfig+0x690>)
 8001656:	4862      	ldr	r0, [pc, #392]	; (80017e0 <HAL_RCC_OscConfig+0x678>)
 8001658:	f001 fca0 	bl	8002f9c <assert_failed>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800165c:	69a9      	ldr	r1, [r5, #24]
 800165e:	2301      	movs	r3, #1
 8001660:	4a66      	ldr	r2, [pc, #408]	; (80017fc <HAL_RCC_OscConfig+0x694>)
 8001662:	2900      	cmp	r1, #0
 8001664:	d018      	beq.n	8001698 <HAL_RCC_OscConfig+0x530>
        __HAL_RCC_HSI48_ENABLE();
 8001666:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001668:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 800166a:	4319      	orrs	r1, r3
 800166c:	60a1      	str	r1, [r4, #8]
 800166e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001670:	430b      	orrs	r3, r1
 8001672:	6363      	str	r3, [r4, #52]	; 0x34
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	6a11      	ldr	r1, [r2, #32]
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	430b      	orrs	r3, r1
 800167c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800167e:	f7fe ff33 	bl	80004e8 <HAL_GetTick>
 8001682:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001684:	68a3      	ldr	r3, [r4, #8]
 8001686:	423b      	tst	r3, r7
 8001688:	d000      	beq.n	800168c <HAL_RCC_OscConfig+0x524>
 800168a:	e5e2      	b.n	8001252 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800168c:	f7fe ff2c 	bl	80004e8 <HAL_GetTick>
 8001690:	1b80      	subs	r0, r0, r6
 8001692:	2802      	cmp	r0, #2
 8001694:	d9f6      	bls.n	8001684 <HAL_RCC_OscConfig+0x51c>
 8001696:	e61d      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI48_DISABLE();
 8001698:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800169a:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_DISABLE();
 800169c:	4399      	bics	r1, r3
 800169e:	60a1      	str	r1, [r4, #8]
 80016a0:	6a13      	ldr	r3, [r2, #32]
 80016a2:	4957      	ldr	r1, [pc, #348]	; (8001800 <HAL_RCC_OscConfig+0x698>)
 80016a4:	400b      	ands	r3, r1
 80016a6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80016a8:	f7fe ff1e 	bl	80004e8 <HAL_GetTick>
 80016ac:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ae:	68a3      	ldr	r3, [r4, #8]
 80016b0:	423b      	tst	r3, r7
 80016b2:	d100      	bne.n	80016b6 <HAL_RCC_OscConfig+0x54e>
 80016b4:	e5cd      	b.n	8001252 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b6:	f7fe ff17 	bl	80004e8 <HAL_GetTick>
 80016ba:	1b80      	subs	r0, r0, r6
 80016bc:	2802      	cmp	r0, #2
 80016be:	d9f6      	bls.n	80016ae <HAL_RCC_OscConfig+0x546>
 80016c0:	e608      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c2:	9a01      	ldr	r2, [sp, #4]
 80016c4:	2a0c      	cmp	r2, #12
 80016c6:	d06a      	beq.n	800179e <HAL_RCC_OscConfig+0x636>
 80016c8:	4e4e      	ldr	r6, [pc, #312]	; (8001804 <HAL_RCC_OscConfig+0x69c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d155      	bne.n	800177a <HAL_RCC_OscConfig+0x612>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80016ce:	4b4e      	ldr	r3, [pc, #312]	; (8001808 <HAL_RCC_OscConfig+0x6a0>)
 80016d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80016d2:	421a      	tst	r2, r3
 80016d4:	d003      	beq.n	80016de <HAL_RCC_OscConfig+0x576>
 80016d6:	494d      	ldr	r1, [pc, #308]	; (800180c <HAL_RCC_OscConfig+0x6a4>)
 80016d8:	4841      	ldr	r0, [pc, #260]	; (80017e0 <HAL_RCC_OscConfig+0x678>)
 80016da:	f001 fc5f 	bl	8002f9c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80016de:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80016e0:	4b4b      	ldr	r3, [pc, #300]	; (8001810 <HAL_RCC_OscConfig+0x6a8>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	d00b      	beq.n	80016fe <HAL_RCC_OscConfig+0x596>
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	0349      	lsls	r1, r1, #13
 80016ea:	428b      	cmp	r3, r1
 80016ec:	d007      	beq.n	80016fe <HAL_RCC_OscConfig+0x596>
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	039b      	lsls	r3, r3, #14
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_OscConfig+0x596>
 80016f6:	4947      	ldr	r1, [pc, #284]	; (8001814 <HAL_RCC_OscConfig+0x6ac>)
 80016f8:	4839      	ldr	r0, [pc, #228]	; (80017e0 <HAL_RCC_OscConfig+0x678>)
 80016fa:	f001 fc4f 	bl	8002f9c <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <HAL_RCC_OscConfig+0x6b0>)
 8001704:	03c9      	lsls	r1, r1, #15
 8001706:	4013      	ands	r3, r2
 8001708:	428b      	cmp	r3, r1
 800170a:	d007      	beq.n	800171c <HAL_RCC_OscConfig+0x5b4>
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	429a      	cmp	r2, r3
 8001712:	d003      	beq.n	800171c <HAL_RCC_OscConfig+0x5b4>
 8001714:	4941      	ldr	r1, [pc, #260]	; (800181c <HAL_RCC_OscConfig+0x6b4>)
 8001716:	4832      	ldr	r0, [pc, #200]	; (80017e0 <HAL_RCC_OscConfig+0x678>)
 8001718:	f001 fc40 	bl	8002f9c <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	401e      	ands	r6, r3
 8001720:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 8001722:	f7fe fee1 	bl	80004e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001726:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001728:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800172a:	04b6      	lsls	r6, r6, #18
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	4233      	tst	r3, r6
 8001730:	d11d      	bne.n	800176e <HAL_RCC_OscConfig+0x606>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001732:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001734:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001736:	68e2      	ldr	r2, [r4, #12]
 8001738:	430b      	orrs	r3, r1
 800173a:	4939      	ldr	r1, [pc, #228]	; (8001820 <HAL_RCC_OscConfig+0x6b8>)
 800173c:	400a      	ands	r2, r1
 800173e:	4313      	orrs	r3, r2
 8001740:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001742:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001744:	4313      	orrs	r3, r2
 8001746:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	6822      	ldr	r2, [r4, #0]
 800174c:	045b      	lsls	r3, r3, #17
 800174e:	4313      	orrs	r3, r2
 8001750:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001752:	f7fe fec9 	bl	80004e8 <HAL_GetTick>
 8001756:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001758:	04ad      	lsls	r5, r5, #18
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	422b      	tst	r3, r5
 800175e:	d000      	beq.n	8001762 <HAL_RCC_OscConfig+0x5fa>
 8001760:	e583      	b.n	800126a <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7fe fec1 	bl	80004e8 <HAL_GetTick>
 8001766:	1b80      	subs	r0, r0, r6
 8001768:	2802      	cmp	r0, #2
 800176a:	d9f6      	bls.n	800175a <HAL_RCC_OscConfig+0x5f2>
 800176c:	e5b2      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176e:	f7fe febb 	bl	80004e8 <HAL_GetTick>
 8001772:	1bc0      	subs	r0, r0, r7
 8001774:	2802      	cmp	r0, #2
 8001776:	d9d9      	bls.n	800172c <HAL_RCC_OscConfig+0x5c4>
 8001778:	e5ac      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 800177a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800177c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800177e:	401e      	ands	r6, r3
 8001780:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 8001782:	f7fe feb1 	bl	80004e8 <HAL_GetTick>
 8001786:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001788:	04ad      	lsls	r5, r5, #18
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	422b      	tst	r3, r5
 800178e:	d100      	bne.n	8001792 <HAL_RCC_OscConfig+0x62a>
 8001790:	e56b      	b.n	800126a <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001792:	f7fe fea9 	bl	80004e8 <HAL_GetTick>
 8001796:	1b80      	subs	r0, r0, r6
 8001798:	2802      	cmp	r0, #2
 800179a:	d9f6      	bls.n	800178a <HAL_RCC_OscConfig+0x622>
 800179c:	e59a      	b.n	80012d4 <HAL_RCC_OscConfig+0x16c>
        return HAL_ERROR;
 800179e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d100      	bne.n	80017a6 <HAL_RCC_OscConfig+0x63e>
 80017a4:	e4e6      	b.n	8001174 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80017a8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80017ac:	0252      	lsls	r2, r2, #9
 80017ae:	401a      	ands	r2, r3
        return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	428a      	cmp	r2, r1
 80017b4:	d000      	beq.n	80017b8 <HAL_RCC_OscConfig+0x650>
 80017b6:	e4dd      	b.n	8001174 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017b8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017bc:	0392      	lsls	r2, r2, #14
 80017be:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c0:	428a      	cmp	r2, r1
 80017c2:	d000      	beq.n	80017c6 <HAL_RCC_OscConfig+0x65e>
 80017c4:	e4d6      	b.n	8001174 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017c6:	20c0      	movs	r0, #192	; 0xc0
 80017c8:	0400      	lsls	r0, r0, #16
 80017ca:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017cc:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80017ce:	1a18      	subs	r0, r3, r0
 80017d0:	1e43      	subs	r3, r0, #1
 80017d2:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80017d4:	b2c0      	uxtb	r0, r0
 80017d6:	e4cd      	b.n	8001174 <HAL_RCC_OscConfig+0xc>
 80017d8:	fffffeff 	.word	0xfffffeff
 80017dc:	0000024b 	.word	0x0000024b
 80017e0:	0800394e 	.word	0x0800394e
 80017e4:	00000277 	.word	0x00000277
 80017e8:	40007000 	.word	0x40007000
 80017ec:	fffffbff 	.word	0xfffffbff
 80017f0:	00001388 	.word	0x00001388
 80017f4:	efffffff 	.word	0xefffffff
 80017f8:	000002be 	.word	0x000002be
 80017fc:	40010000 	.word	0x40010000
 8001800:	ffffdfff 	.word	0xffffdfff
 8001804:	feffffff 	.word	0xfeffffff
 8001808:	fffeffff 	.word	0xfffeffff
 800180c:	000002f1 	.word	0x000002f1
 8001810:	fff3ffff 	.word	0xfff3ffff
 8001814:	000002f2 	.word	0x000002f2
 8001818:	ff7fffff 	.word	0xff7fffff
 800181c:	000002f3 	.word	0x000002f3
 8001820:	ff02ffff 	.word	0xff02ffff

08001824 <HAL_RCC_ClockConfig>:
{
 8001824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001826:	0004      	movs	r4, r0
 8001828:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800182a:	2800      	cmp	r0, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800182e:	2001      	movs	r0, #1
}
 8001830:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001832:	6803      	ldr	r3, [r0, #0]
 8001834:	071b      	lsls	r3, r3, #28
 8001836:	d103      	bne.n	8001840 <HAL_RCC_ClockConfig+0x1c>
 8001838:	497c      	ldr	r1, [pc, #496]	; (8001a2c <HAL_RCC_ClockConfig+0x208>)
 800183a:	487d      	ldr	r0, [pc, #500]	; (8001a30 <HAL_RCC_ClockConfig+0x20c>)
 800183c:	f001 fbae 	bl	8002f9c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001840:	2f01      	cmp	r7, #1
 8001842:	d903      	bls.n	800184c <HAL_RCC_ClockConfig+0x28>
 8001844:	497b      	ldr	r1, [pc, #492]	; (8001a34 <HAL_RCC_ClockConfig+0x210>)
 8001846:	487a      	ldr	r0, [pc, #488]	; (8001a30 <HAL_RCC_ClockConfig+0x20c>)
 8001848:	f001 fba8 	bl	8002f9c <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	2201      	movs	r2, #1
 800184e:	4d7a      	ldr	r5, [pc, #488]	; (8001a38 <HAL_RCC_ClockConfig+0x214>)
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	4013      	ands	r3, r2
 8001854:	429f      	cmp	r7, r3
 8001856:	d83a      	bhi.n	80018ce <HAL_RCC_ClockConfig+0xaa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	079b      	lsls	r3, r3, #30
 800185c:	d440      	bmi.n	80018e0 <HAL_RCC_ClockConfig+0xbc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	07db      	lsls	r3, r3, #31
 8001862:	d45f      	bmi.n	8001924 <HAL_RCC_ClockConfig+0x100>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	2301      	movs	r3, #1
 8001866:	682a      	ldr	r2, [r5, #0]
 8001868:	401a      	ands	r2, r3
 800186a:	4297      	cmp	r7, r2
 800186c:	d200      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x4c>
 800186e:	e0bb      	b.n	80019e8 <HAL_RCC_ClockConfig+0x1c4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	4d72      	ldr	r5, [pc, #456]	; (8001a3c <HAL_RCC_ClockConfig+0x218>)
 8001874:	075b      	lsls	r3, r3, #29
 8001876:	d500      	bpl.n	800187a <HAL_RCC_ClockConfig+0x56>
 8001878:	e0be      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1d4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	071b      	lsls	r3, r3, #28
 800187e:	d518      	bpl.n	80018b2 <HAL_RCC_ClockConfig+0x8e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001880:	6923      	ldr	r3, [r4, #16]
 8001882:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <HAL_RCC_ClockConfig+0x21c>)
 8001884:	4213      	tst	r3, r2
 8001886:	d00d      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x80>
 8001888:	21a0      	movs	r1, #160	; 0xa0
 800188a:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_ClockConfig+0x220>)
 800188c:	00c9      	lsls	r1, r1, #3
 800188e:	401a      	ands	r2, r3
 8001890:	428a      	cmp	r2, r1
 8001892:	d007      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x80>
 8001894:	22c0      	movs	r2, #192	; 0xc0
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	4293      	cmp	r3, r2
 800189a:	d003      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x80>
 800189c:	496a      	ldr	r1, [pc, #424]	; (8001a48 <HAL_RCC_ClockConfig+0x224>)
 800189e:	4864      	ldr	r0, [pc, #400]	; (8001a30 <HAL_RCC_ClockConfig+0x20c>)
 80018a0:	f001 fb7c 	bl	8002f9c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a4:	68ea      	ldr	r2, [r5, #12]
 80018a6:	6923      	ldr	r3, [r4, #16]
 80018a8:	4968      	ldr	r1, [pc, #416]	; (8001a4c <HAL_RCC_ClockConfig+0x228>)
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	400a      	ands	r2, r1
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f7ff fc1d 	bl	80010f0 <HAL_RCC_GetSysClockFreq>
 80018b6:	68eb      	ldr	r3, [r5, #12]
 80018b8:	4a65      	ldr	r2, [pc, #404]	; (8001a50 <HAL_RCC_ClockConfig+0x22c>)
 80018ba:	061b      	lsls	r3, r3, #24
 80018bc:	0f1b      	lsrs	r3, r3, #28
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	40d8      	lsrs	r0, r3
 80018c2:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <HAL_RCC_ClockConfig+0x230>)
 80018c4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7fe fdda 	bl	8000480 <HAL_InitTick>
 80018cc:	e7b0      	b.n	8001830 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	4393      	bics	r3, r2
 80018d2:	433b      	orrs	r3, r7
 80018d4:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	4013      	ands	r3, r2
 80018da:	429f      	cmp	r7, r3
 80018dc:	d1a7      	bne.n	800182e <HAL_RCC_ClockConfig+0xa>
 80018de:	e7bb      	b.n	8001858 <HAL_RCC_ClockConfig+0x34>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80018e0:	68a3      	ldr	r3, [r4, #8]
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	0019      	movs	r1, r3
 80018e6:	4391      	bics	r1, r2
 80018e8:	d014      	beq.n	8001914 <HAL_RCC_ClockConfig+0xf0>
 80018ea:	2220      	movs	r2, #32
 80018ec:	0019      	movs	r1, r3
 80018ee:	4391      	bics	r1, r2
 80018f0:	2990      	cmp	r1, #144	; 0x90
 80018f2:	d00f      	beq.n	8001914 <HAL_RCC_ClockConfig+0xf0>
 80018f4:	2240      	movs	r2, #64	; 0x40
 80018f6:	0019      	movs	r1, r3
 80018f8:	4391      	bics	r1, r2
 80018fa:	29a0      	cmp	r1, #160	; 0xa0
 80018fc:	d00a      	beq.n	8001914 <HAL_RCC_ClockConfig+0xf0>
 80018fe:	2210      	movs	r2, #16
 8001900:	0019      	movs	r1, r3
 8001902:	4391      	bics	r1, r2
 8001904:	29c0      	cmp	r1, #192	; 0xc0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0xf0>
 8001908:	2bf0      	cmp	r3, #240	; 0xf0
 800190a:	d003      	beq.n	8001914 <HAL_RCC_ClockConfig+0xf0>
 800190c:	4952      	ldr	r1, [pc, #328]	; (8001a58 <HAL_RCC_ClockConfig+0x234>)
 800190e:	4848      	ldr	r0, [pc, #288]	; (8001a30 <HAL_RCC_ClockConfig+0x20c>)
 8001910:	f001 fb44 	bl	8002f9c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	21f0      	movs	r1, #240	; 0xf0
 8001916:	4a49      	ldr	r2, [pc, #292]	; (8001a3c <HAL_RCC_ClockConfig+0x218>)
 8001918:	68d3      	ldr	r3, [r2, #12]
 800191a:	438b      	bics	r3, r1
 800191c:	68a1      	ldr	r1, [r4, #8]
 800191e:	430b      	orrs	r3, r1
 8001920:	60d3      	str	r3, [r2, #12]
 8001922:	e79c      	b.n	800185e <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001924:	6863      	ldr	r3, [r4, #4]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d903      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
 800192a:	494c      	ldr	r1, [pc, #304]	; (8001a5c <HAL_RCC_ClockConfig+0x238>)
 800192c:	4840      	ldr	r0, [pc, #256]	; (8001a30 <HAL_RCC_ClockConfig+0x20c>)
 800192e:	f001 fb35 	bl	8002f9c <assert_failed>
 8001932:	4e42      	ldr	r6, [pc, #264]	; (8001a3c <HAL_RCC_ClockConfig+0x218>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001934:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001936:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001938:	2a02      	cmp	r2, #2
 800193a:	d11c      	bne.n	8001976 <HAL_RCC_ClockConfig+0x152>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800193c:	039b      	lsls	r3, r3, #14
 800193e:	d400      	bmi.n	8001942 <HAL_RCC_ClockConfig+0x11e>
 8001940:	e775      	b.n	800182e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	2103      	movs	r1, #3
 8001944:	68f3      	ldr	r3, [r6, #12]
 8001946:	438b      	bics	r3, r1
 8001948:	4313      	orrs	r3, r2
 800194a:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800194c:	f7fe fdcc 	bl	80004e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001950:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001952:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001954:	2b02      	cmp	r3, #2
 8001956:	d11b      	bne.n	8001990 <HAL_RCC_ClockConfig+0x16c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001958:	220c      	movs	r2, #12
 800195a:	68f3      	ldr	r3, [r6, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	2b08      	cmp	r3, #8
 8001960:	d100      	bne.n	8001964 <HAL_RCC_ClockConfig+0x140>
 8001962:	e77f      	b.n	8001864 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7fe fdc0 	bl	80004e8 <HAL_GetTick>
 8001968:	9b01      	ldr	r3, [sp, #4]
 800196a:	1ac0      	subs	r0, r0, r3
 800196c:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <HAL_RCC_ClockConfig+0x23c>)
 800196e:	4298      	cmp	r0, r3
 8001970:	d9f2      	bls.n	8001958 <HAL_RCC_ClockConfig+0x134>
          return HAL_TIMEOUT;
 8001972:	2003      	movs	r0, #3
 8001974:	e75c      	b.n	8001830 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001976:	2a03      	cmp	r2, #3
 8001978:	d102      	bne.n	8001980 <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800197a:	019b      	lsls	r3, r3, #6
 800197c:	d4e1      	bmi.n	8001942 <HAL_RCC_ClockConfig+0x11e>
 800197e:	e756      	b.n	800182e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001980:	2a01      	cmp	r2, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001984:	075b      	lsls	r3, r3, #29
 8001986:	d4dc      	bmi.n	8001942 <HAL_RCC_ClockConfig+0x11e>
 8001988:	e751      	b.n	800182e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800198a:	059b      	lsls	r3, r3, #22
 800198c:	d4d9      	bmi.n	8001942 <HAL_RCC_ClockConfig+0x11e>
 800198e:	e74e      	b.n	800182e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001990:	2b03      	cmp	r3, #3
 8001992:	d10d      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x18c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001994:	220c      	movs	r2, #12
 8001996:	68f3      	ldr	r3, [r6, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	4293      	cmp	r3, r2
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x17c>
 800199e:	e761      	b.n	8001864 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7fe fda2 	bl	80004e8 <HAL_GetTick>
 80019a4:	9b01      	ldr	r3, [sp, #4]
 80019a6:	1ac0      	subs	r0, r0, r3
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_ClockConfig+0x23c>)
 80019aa:	4298      	cmp	r0, r3
 80019ac:	d9f2      	bls.n	8001994 <HAL_RCC_ClockConfig+0x170>
 80019ae:	e7e0      	b.n	8001972 <HAL_RCC_ClockConfig+0x14e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d013      	beq.n	80019dc <HAL_RCC_ClockConfig+0x1b8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019b4:	220c      	movs	r2, #12
 80019b6:	68f3      	ldr	r3, [r6, #12]
 80019b8:	4213      	tst	r3, r2
 80019ba:	d100      	bne.n	80019be <HAL_RCC_ClockConfig+0x19a>
 80019bc:	e752      	b.n	8001864 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019be:	f7fe fd93 	bl	80004e8 <HAL_GetTick>
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	1ac0      	subs	r0, r0, r3
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_ClockConfig+0x23c>)
 80019c8:	4298      	cmp	r0, r3
 80019ca:	d9f3      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x190>
 80019cc:	e7d1      	b.n	8001972 <HAL_RCC_ClockConfig+0x14e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ce:	f7fe fd8b 	bl	80004e8 <HAL_GetTick>
 80019d2:	9b01      	ldr	r3, [sp, #4]
 80019d4:	1ac0      	subs	r0, r0, r3
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_RCC_ClockConfig+0x23c>)
 80019d8:	4298      	cmp	r0, r3
 80019da:	d8ca      	bhi.n	8001972 <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019dc:	220c      	movs	r2, #12
 80019de:	68f3      	ldr	r3, [r6, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d1f3      	bne.n	80019ce <HAL_RCC_ClockConfig+0x1aa>
 80019e6:	e73d      	b.n	8001864 <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e8:	682a      	ldr	r2, [r5, #0]
 80019ea:	439a      	bics	r2, r3
 80019ec:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	682a      	ldr	r2, [r5, #0]
 80019f0:	421a      	tst	r2, r3
 80019f2:	d000      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x1d2>
 80019f4:	e71b      	b.n	800182e <HAL_RCC_ClockConfig+0xa>
 80019f6:	e73b      	b.n	8001870 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80019f8:	68e3      	ldr	r3, [r4, #12]
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_RCC_ClockConfig+0x21c>)
 80019fc:	4213      	tst	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x1f8>
 8001a00:	21a0      	movs	r1, #160	; 0xa0
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_RCC_ClockConfig+0x220>)
 8001a04:	00c9      	lsls	r1, r1, #3
 8001a06:	401a      	ands	r2, r3
 8001a08:	428a      	cmp	r2, r1
 8001a0a:	d007      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x1f8>
 8001a0c:	22c0      	movs	r2, #192	; 0xc0
 8001a0e:	00d2      	lsls	r2, r2, #3
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d003      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x1f8>
 8001a14:	4913      	ldr	r1, [pc, #76]	; (8001a64 <HAL_RCC_ClockConfig+0x240>)
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <HAL_RCC_ClockConfig+0x20c>)
 8001a18:	f001 fac0 	bl	8002f9c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	68eb      	ldr	r3, [r5, #12]
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x244>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	68e2      	ldr	r2, [r4, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60eb      	str	r3, [r5, #12]
 8001a28:	e727      	b.n	800187a <HAL_RCC_ClockConfig+0x56>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	00000366 	.word	0x00000366
 8001a30:	0800394e 	.word	0x0800394e
 8001a34:	00000367 	.word	0x00000367
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	fffffbff 	.word	0xfffffbff
 8001a44:	fffffdff 	.word	0xfffffdff
 8001a48:	000003f1 	.word	0x000003f1
 8001a4c:	ffffc7ff 	.word	0xffffc7ff
 8001a50:	08003aa6 	.word	0x08003aa6
 8001a54:	20000000 	.word	0x20000000
 8001a58:	0000037e 	.word	0x0000037e
 8001a5c:	00000385 	.word	0x00000385
 8001a60:	00001388 	.word	0x00001388
 8001a64:	000003ea 	.word	0x000003ea
 8001a68:	fffff8ff 	.word	0xfffff8ff

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	055b      	lsls	r3, r3, #21
 8001a74:	0f5b      	lsrs	r3, r3, #29
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a7a:	6810      	ldr	r0, [r2, #0]
 8001a7c:	40d8      	lsrs	r0, r3
}
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08003ab6 	.word	0x08003ab6
 8001a88:	20000000 	.word	0x20000000

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	049b      	lsls	r3, r3, #18
 8001a94:	0f5b      	lsrs	r3, r3, #29
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a9a:	6810      	ldr	r0, [r2, #0]
 8001a9c:	40d8      	lsrs	r0, r3
}
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	08003ab6 	.word	0x08003ab6
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp_reg;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001aae:	4b93      	ldr	r3, [pc, #588]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ab0:	6802      	ldr	r2, [r0, #0]
{
 8001ab2:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d903      	bls.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8001ab8:	2167      	movs	r1, #103	; 0x67
 8001aba:	4891      	ldr	r0, [pc, #580]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001abc:	f001 fa6e 	bl	8002f9c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	069b      	lsls	r3, r3, #26
 8001ac4:	d54d      	bpl.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8001ac6:	6863      	ldr	r3, [r4, #4]
 8001ac8:	4a8e      	ldr	r2, [pc, #568]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001aca:	4213      	tst	r3, r2
 8001acc:	d00d      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001ace:	2198      	movs	r1, #152	; 0x98
 8001ad0:	4a8d      	ldr	r2, [pc, #564]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ad2:	0349      	lsls	r1, r1, #13
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	428a      	cmp	r2, r1
 8001ad8:	d007      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001ada:	228c      	movs	r2, #140	; 0x8c
 8001adc:	0392      	lsls	r2, r2, #14
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d003      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001ae2:	2173      	movs	r1, #115	; 0x73
 8001ae4:	4886      	ldr	r0, [pc, #536]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ae6:	f001 fa59 	bl	8002f9c <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001aec:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4d87      	ldr	r5, [pc, #540]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001af0:	055b      	lsls	r3, r3, #21
 8001af2:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001af4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	421a      	tst	r2, r3
 8001af8:	d104      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x58>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001afc:	4313      	orrs	r3, r2
 8001afe:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	2780      	movs	r7, #128	; 0x80
 8001b06:	4e82      	ldr	r6, [pc, #520]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b08:	007f      	lsls	r7, r7, #1
 8001b0a:	6833      	ldr	r3, [r6, #0]
 8001b0c:	423b      	tst	r3, r7
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001b10:	e0af      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b12:	22c0      	movs	r2, #192	; 0xc0
 8001b14:	21c0      	movs	r1, #192	; 0xc0
 8001b16:	6828      	ldr	r0, [r5, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b18:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b1a:	0392      	lsls	r2, r2, #14
 8001b1c:	4010      	ands	r0, r2
 8001b1e:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b20:	401a      	ands	r2, r3
 8001b22:	4290      	cmp	r0, r2
 8001b24:	d000      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001b26:	e0b6      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b28:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8001b2a:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b2c:	d000      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001b2e:	e0bd      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x200>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b30:	6861      	ldr	r1, [r4, #4]
 8001b32:	23c0      	movs	r3, #192	; 0xc0
 8001b34:	000a      	movs	r2, r1
 8001b36:	029b      	lsls	r3, r3, #10
 8001b38:	401a      	ands	r2, r3
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	4874      	ldr	r0, [pc, #464]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001b42:	4003      	ands	r3, r0
 8001b44:	20c0      	movs	r0, #192	; 0xc0
 8001b46:	0380      	lsls	r0, r0, #14
 8001b48:	4001      	ands	r1, r0
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	602b      	str	r3, [r5, #0]
 8001b4e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001b50:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b52:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b54:	652a      	str	r2, [r5, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d103      	bne.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b5c:	4a6e      	ldr	r2, [pc, #440]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	63ab      	str	r3, [r5, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	07db      	lsls	r3, r3, #31
 8001b66:	d50d      	bpl.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8001b68:	68a3      	ldr	r3, [r4, #8]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d903      	bls.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001b6e:	21de      	movs	r1, #222	; 0xde
 8001b70:	4863      	ldr	r0, [pc, #396]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b72:	f001 fa13 	bl	8002f9c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b76:	2103      	movs	r1, #3
 8001b78:	4a64      	ldr	r2, [pc, #400]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b7a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001b7c:	438b      	bics	r3, r1
 8001b7e:	68a1      	ldr	r1, [r4, #8]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	079b      	lsls	r3, r3, #30
 8001b88:	d50e      	bpl.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	68e2      	ldr	r2, [r4, #12]
 8001b8e:	439a      	bics	r2, r3
 8001b90:	d003      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8001b92:	21e9      	movs	r1, #233	; 0xe9
 8001b94:	485a      	ldr	r0, [pc, #360]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b96:	f001 fa01 	bl	8002f9c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b9a:	210c      	movs	r1, #12
 8001b9c:	4a5b      	ldr	r2, [pc, #364]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b9e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001ba0:	438b      	bics	r3, r1
 8001ba2:	68e1      	ldr	r1, [r4, #12]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	075b      	lsls	r3, r3, #29
 8001bac:	d50d      	bpl.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8001bae:	4d5b      	ldr	r5, [pc, #364]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8001bb0:	6923      	ldr	r3, [r4, #16]
 8001bb2:	422b      	tst	r3, r5
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001bb6:	21f3      	movs	r1, #243	; 0xf3
 8001bb8:	4851      	ldr	r0, [pc, #324]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001bba:	f001 f9ef 	bl	8002f9c <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001bbe:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bc0:	6921      	ldr	r1, [r4, #16]
 8001bc2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001bc4:	402b      	ands	r3, r5
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	071b      	lsls	r3, r3, #28
 8001bce:	d512      	bpl.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8001bd0:	6963      	ldr	r3, [r4, #20]
 8001bd2:	4a53      	ldr	r2, [pc, #332]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001bd4:	4213      	tst	r3, r2
 8001bd6:	d007      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	0192      	lsls	r2, r2, #6
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d003      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001be0:	21fd      	movs	r1, #253	; 0xfd
 8001be2:	4847      	ldr	r0, [pc, #284]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001be4:	f001 f9da 	bl	8002f9c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bea:	494e      	ldr	r1, [pc, #312]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8001bec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001bee:	400b      	ands	r3, r1
 8001bf0:	6961      	ldr	r1, [r4, #20]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	05db      	lsls	r3, r3, #23
 8001bfa:	d513      	bpl.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8001bfc:	69a3      	ldr	r3, [r4, #24]
 8001bfe:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c00:	4213      	tst	r3, r2
 8001c02:	d008      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	0292      	lsls	r2, r2, #10
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d004      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001c0c:	2184      	movs	r1, #132	; 0x84
 8001c0e:	483c      	ldr	r0, [pc, #240]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c10:	0049      	lsls	r1, r1, #1
 8001c12:	f001 f9c3 	bl	8002f9c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c16:	4a3d      	ldr	r2, [pc, #244]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c18:	493a      	ldr	r1, [pc, #232]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c1a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	69a1      	ldr	r1, [r4, #24]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	065b      	lsls	r3, r3, #25
 8001c28:	d50e      	bpl.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001c2a:	4d40      	ldr	r5, [pc, #256]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8001c2c:	6a23      	ldr	r3, [r4, #32]
 8001c2e:	422b      	tst	r3, r5
 8001c30:	d004      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001c32:	2114      	movs	r1, #20
 8001c34:	4832      	ldr	r0, [pc, #200]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c36:	31ff      	adds	r1, #255	; 0xff
 8001c38:	f001 f9b0 	bl	8002f9c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c3c:	4a33      	ldr	r2, [pc, #204]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c3e:	6a21      	ldr	r1, [r4, #32]
 8001c40:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001c42:	402b      	ands	r3, r5
 8001c44:	430b      	orrs	r3, r1
 8001c46:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c48:	6823      	ldr	r3, [r4, #0]
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001c4a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	d521      	bpl.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c50:	4d37      	ldr	r5, [pc, #220]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8001c52:	69e3      	ldr	r3, [r4, #28]
 8001c54:	422b      	tst	r3, r5
 8001c56:	d004      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8001c58:	211c      	movs	r1, #28
 8001c5a:	4829      	ldr	r0, [pc, #164]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c5c:	31ff      	adds	r1, #255	; 0xff
 8001c5e:	f001 f99d 	bl	8002f9c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c62:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c64:	69e1      	ldr	r1, [r4, #28]
 8001c66:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  return HAL_OK;
 8001c68:	2000      	movs	r0, #0
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c6a:	402b      	ands	r3, r5
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c70:	e010      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	6833      	ldr	r3, [r6, #0]
 8001c74:	433b      	orrs	r3, r7
 8001c76:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c78:	f7fe fc36 	bl	80004e8 <HAL_GetTick>
 8001c7c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	6833      	ldr	r3, [r6, #0]
 8001c80:	423b      	tst	r3, r7
 8001c82:	d000      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8001c84:	e745      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x66>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7fe fc2f 	bl	80004e8 <HAL_GetTick>
 8001c8a:	9b01      	ldr	r3, [sp, #4]
 8001c8c:	1ac0      	subs	r0, r0, r3
 8001c8e:	2864      	cmp	r0, #100	; 0x64
 8001c90:	d9f5      	bls.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          return HAL_TIMEOUT;
 8001c92:	2003      	movs	r0, #3
}
 8001c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c96:	001a      	movs	r2, r3
 8001c98:	400a      	ands	r2, r1
 8001c9a:	428a      	cmp	r2, r1
 8001c9c:	d000      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001c9e:	e743      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ca0:	682a      	ldr	r2, [r5, #0]
          return HAL_ERROR;
 8001ca2:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ca4:	0392      	lsls	r2, r2, #14
 8001ca6:	d400      	bmi.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8001ca8:	e73e      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001caa:	e7f3      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cac:	400b      	ands	r3, r1
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d100      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001cb2:	e73d      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x84>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	069b      	lsls	r3, r3, #26
 8001cb8:	d400      	bmi.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001cba:	e739      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cbc:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cbe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cc0:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8001cc2:	031b      	lsls	r3, r3, #12
 8001cc4:	4303      	orrs	r3, r0
 8001cc6:	652b      	str	r3, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ccc:	4819      	ldr	r0, [pc, #100]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cce:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd0:	4003      	ands	r3, r0
 8001cd2:	652b      	str	r3, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001cd4:	6529      	str	r1, [r5, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cd6:	05d3      	lsls	r3, r2, #23
 8001cd8:	d400      	bmi.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8001cda:	e729      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x84>
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fc04 	bl	80004e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ce0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001ce2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ce4:	00bf      	lsls	r7, r7, #2
 8001ce6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001ce8:	423b      	tst	r3, r7
 8001cea:	d000      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x242>
 8001cec:	e720      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x84>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7fe fbfb 	bl	80004e8 <HAL_GetTick>
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001cf4:	1b80      	subs	r0, r0, r6
 8001cf6:	4298      	cmp	r0, r3
 8001cf8:	d9f5      	bls.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8001cfa:	e7ca      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8001cfc:	000001ff 	.word	0x000001ff
 8001d00:	08003986 	.word	0x08003986
 8001d04:	fffcffff 	.word	0xfffcffff
 8001d08:	ffdfffff 	.word	0xffdfffff
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40007000 	.word	0x40007000
 8001d14:	ffcfffff 	.word	0xffcfffff
 8001d18:	efffffff 	.word	0xefffffff
 8001d1c:	fffff3ff 	.word	0xfffff3ff
 8001d20:	ffffefff 	.word	0xffffefff
 8001d24:	ffffcfff 	.word	0xffffcfff
 8001d28:	fffeffff 	.word	0xfffeffff
 8001d2c:	fbffffff 	.word	0xfbffffff
 8001d30:	fff3ffff 	.word	0xfff3ffff
 8001d34:	fff7ffff 	.word	0xfff7ffff
 8001d38:	00001388 	.word	0x00001388

08001d3c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d3c:	6803      	ldr	r3, [r0, #0]
 8001d3e:	4907      	ldr	r1, [pc, #28]	; (8001d5c <UART_EndRxTransfer+0x20>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	400a      	ands	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	3123      	adds	r1, #35	; 0x23
 8001d4a:	31ff      	adds	r1, #255	; 0xff
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d50:	2320      	movs	r3, #32
 8001d52:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001d58:	4770      	bx	lr
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	fffffedf 	.word	0xfffffedf

08001d60 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d60:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001d62:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d64:	2b21      	cmp	r3, #33	; 0x21
 8001d66:	d10d      	bne.n	8001d84 <UART_TxISR_16BIT+0x24>
  {
    if (huart->TxXferCount == 0U)
 8001d68:	0001      	movs	r1, r0
 8001d6a:	3152      	adds	r1, #82	; 0x52
 8001d6c:	880a      	ldrh	r2, [r1, #0]
 8001d6e:	6803      	ldr	r3, [r0, #0]
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d108      	bne.n	8001d86 <UART_TxISR_16BIT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	438a      	bics	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001d84:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d86:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001d88:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 8001d8a:	3402      	adds	r4, #2
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001d8c:	05d2      	lsls	r2, r2, #23
 8001d8e:	0dd2      	lsrs	r2, r2, #23
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8001d92:	64c4      	str	r4, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001d94:	880b      	ldrh	r3, [r1, #0]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	800b      	strh	r3, [r1, #0]
}
 8001d9c:	e7f2      	b.n	8001d84 <UART_TxISR_16BIT+0x24>

08001d9e <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d9e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001da0:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001da2:	2b21      	cmp	r3, #33	; 0x21
 8001da4:	d10d      	bne.n	8001dc2 <UART_TxISR_8BIT+0x24>
    if (huart->TxXferCount == 0U)
 8001da6:	0001      	movs	r1, r0
 8001da8:	3152      	adds	r1, #82	; 0x52
 8001daa:	880a      	ldrh	r2, [r1, #0]
 8001dac:	6803      	ldr	r3, [r0, #0]
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d108      	bne.n	8001dc4 <UART_TxISR_8BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	438a      	bics	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
}
 8001dc2:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001dc4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001dc6:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8001dc8:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001dca:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8001dcc:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001dce:	880b      	ldrh	r3, [r1, #0]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	800b      	strh	r3, [r1, #0]
}
 8001dd6:	e7f4      	b.n	8001dc2 <UART_TxISR_8BIT+0x24>

08001dd8 <HAL_UART_Transmit_IT>:
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8001dda:	6f44      	ldr	r4, [r0, #116]	; 0x74
{
 8001ddc:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001dde:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001de0:	2c20      	cmp	r4, #32
 8001de2:	d130      	bne.n	8001e46 <HAL_UART_Transmit_IT+0x6e>
      return HAL_ERROR;
 8001de4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001de6:	2900      	cmp	r1, #0
 8001de8:	d02d      	beq.n	8001e46 <HAL_UART_Transmit_IT+0x6e>
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d02b      	beq.n	8001e46 <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dee:	2480      	movs	r4, #128	; 0x80
 8001df0:	689d      	ldr	r5, [r3, #8]
 8001df2:	0164      	lsls	r4, r4, #5
 8001df4:	42a5      	cmp	r5, r4
 8001df6:	d104      	bne.n	8001e02 <HAL_UART_Transmit_IT+0x2a>
 8001df8:	691c      	ldr	r4, [r3, #16]
 8001dfa:	2c00      	cmp	r4, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8001dfe:	4201      	tst	r1, r0
 8001e00:	d121      	bne.n	8001e46 <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 8001e02:	001c      	movs	r4, r3
 8001e04:	3470      	adds	r4, #112	; 0x70
 8001e06:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8001e08:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001e0a:	2e01      	cmp	r6, #1
 8001e0c:	d01b      	beq.n	8001e46 <HAL_UART_Transmit_IT+0x6e>
 8001e0e:	3801      	subs	r0, #1
 8001e10:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8001e12:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001e14:	0019      	movs	r1, r3
 8001e16:	3150      	adds	r1, #80	; 0x50
 8001e18:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8001e1a:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8001e1c:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->TxISR       = NULL;
 8001e20:	665a      	str	r2, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e22:	3221      	adds	r2, #33	; 0x21
 8001e24:	675a      	str	r2, [r3, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	0152      	lsls	r2, r2, #5
 8001e2a:	4295      	cmp	r5, r2
 8001e2c:	d10c      	bne.n	8001e48 <HAL_UART_Transmit_IT+0x70>
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	d109      	bne.n	8001e48 <HAL_UART_Transmit_IT+0x70>
      huart->TxISR = UART_TxISR_16BIT;
 8001e34:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <HAL_UART_Transmit_IT+0x74>)
      huart->TxISR = UART_TxISR_8BIT;
 8001e36:	665a      	str	r2, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 8001e3c:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e3e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8001e40:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e42:	430b      	orrs	r3, r1
 8001e44:	6013      	str	r3, [r2, #0]
}
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 8001e48:	4a01      	ldr	r2, [pc, #4]	; (8001e50 <HAL_UART_Transmit_IT+0x78>)
 8001e4a:	e7f4      	b.n	8001e36 <HAL_UART_Transmit_IT+0x5e>
 8001e4c:	08001d61 	.word	0x08001d61
 8001e50:	08001d9f 	.word	0x08001d9f

08001e54 <HAL_UART_Receive_IT>:
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e56:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8001e58:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001e5a:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e5c:	2c20      	cmp	r4, #32
 8001e5e:	d141      	bne.n	8001ee4 <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8001e60:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001e62:	2900      	cmp	r1, #0
 8001e64:	d03e      	beq.n	8001ee4 <HAL_UART_Receive_IT+0x90>
 8001e66:	2a00      	cmp	r2, #0
 8001e68:	d03c      	beq.n	8001ee4 <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e6a:	2580      	movs	r5, #128	; 0x80
 8001e6c:	689c      	ldr	r4, [r3, #8]
 8001e6e:	016d      	lsls	r5, r5, #5
 8001e70:	42ac      	cmp	r4, r5
 8001e72:	d104      	bne.n	8001e7e <HAL_UART_Receive_IT+0x2a>
 8001e74:	691d      	ldr	r5, [r3, #16]
 8001e76:	2d00      	cmp	r5, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8001e7a:	4201      	tst	r1, r0
 8001e7c:	d132      	bne.n	8001ee4 <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8001e7e:	001d      	movs	r5, r3
 8001e80:	3570      	adds	r5, #112	; 0x70
 8001e82:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8001e84:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001e86:	2e01      	cmp	r6, #1
 8001e88:	d02c      	beq.n	8001ee4 <HAL_UART_Receive_IT+0x90>
 8001e8a:	3801      	subs	r0, #1
 8001e8c:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8001e8e:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001e90:	0019      	movs	r1, r3
 8001e92:	3158      	adds	r1, #88	; 0x58
 8001e94:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8001e96:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001e98:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001ea0:	0140      	lsls	r0, r0, #5
 8001ea2:	325c      	adds	r2, #92	; 0x5c
 8001ea4:	4284      	cmp	r4, r0
 8001ea6:	d120      	bne.n	8001eea <HAL_UART_Receive_IT+0x96>
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	d11b      	bne.n	8001ee6 <HAL_UART_Receive_IT+0x92>
 8001eae:	4918      	ldr	r1, [pc, #96]	; (8001f10 <HAL_UART_Receive_IT+0xbc>)
 8001eb0:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb2:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb4:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001eb8:	3222      	adds	r2, #34	; 0x22
 8001eba:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	6890      	ldr	r0, [r2, #8]
 8001ec0:	4301      	orrs	r1, r0
 8001ec2:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0149      	lsls	r1, r1, #5
 8001ec8:	428c      	cmp	r4, r1
 8001eca:	d11e      	bne.n	8001f0a <HAL_UART_Receive_IT+0xb6>
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	2900      	cmp	r1, #0
 8001ed0:	d11b      	bne.n	8001f0a <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 8001ed2:	4910      	ldr	r1, [pc, #64]	; (8001f14 <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 8001ed4:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001ed6:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8001ed8:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001eda:	6811      	ldr	r1, [r2, #0]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8001ee0:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 8001ee6:	21ff      	movs	r1, #255	; 0xff
 8001ee8:	e7e2      	b.n	8001eb0 <HAL_UART_Receive_IT+0x5c>
 8001eea:	2c00      	cmp	r4, #0
 8001eec:	d104      	bne.n	8001ef8 <HAL_UART_Receive_IT+0xa4>
 8001eee:	6919      	ldr	r1, [r3, #16]
 8001ef0:	2900      	cmp	r1, #0
 8001ef2:	d0f8      	beq.n	8001ee6 <HAL_UART_Receive_IT+0x92>
 8001ef4:	217f      	movs	r1, #127	; 0x7f
 8001ef6:	e7db      	b.n	8001eb0 <HAL_UART_Receive_IT+0x5c>
 8001ef8:	2080      	movs	r0, #128	; 0x80
 8001efa:	0540      	lsls	r0, r0, #21
 8001efc:	4284      	cmp	r4, r0
 8001efe:	d1d7      	bne.n	8001eb0 <HAL_UART_Receive_IT+0x5c>
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	2900      	cmp	r1, #0
 8001f04:	d0f6      	beq.n	8001ef4 <HAL_UART_Receive_IT+0xa0>
 8001f06:	213f      	movs	r1, #63	; 0x3f
 8001f08:	e7d2      	b.n	8001eb0 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8001f0a:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_UART_Receive_IT+0xc4>)
 8001f0c:	e7e2      	b.n	8001ed4 <HAL_UART_Receive_IT+0x80>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	000001ff 	.word	0x000001ff
 8001f14:	08001f7d 	.word	0x08001f7d
 8001f18:	08001f1d 	.word	0x08001f1d

08001f1c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f1c:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001f1e:	b510      	push	{r4, lr}
 8001f20:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f22:	2a22      	cmp	r2, #34	; 0x22
 8001f24:	d123      	bne.n	8001f6e <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8001f26:	0002      	movs	r2, r0
 8001f28:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001f2c:	8812      	ldrh	r2, [r2, #0]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001f32:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8001f34:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8001f36:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001f38:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001f3e:	8813      	ldrh	r3, [r2, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8001f46:	8813      	ldrh	r3, [r2, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10e      	bne.n	8001f6c <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f4e:	6802      	ldr	r2, [r0, #0]
 8001f50:	4c09      	ldr	r4, [pc, #36]	; (8001f78 <UART_RxISR_8BIT+0x5c>)
 8001f52:	6811      	ldr	r1, [r2, #0]
 8001f54:	4021      	ands	r1, r4
 8001f56:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f58:	6891      	ldr	r1, [r2, #8]
 8001f5a:	3423      	adds	r4, #35	; 0x23
 8001f5c:	34ff      	adds	r4, #255	; 0xff
 8001f5e:	43a1      	bics	r1, r4
 8001f60:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f62:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001f64:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001f66:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f68:	f001 f812 	bl	8002f90 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001f6c:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001f6e:	2208      	movs	r2, #8
 8001f70:	6999      	ldr	r1, [r3, #24]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	e7f9      	b.n	8001f6c <UART_RxISR_8BIT+0x50>
 8001f78:	fffffedf 	.word	0xfffffedf

08001f7c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f7c:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001f7e:	b510      	push	{r4, lr}
 8001f80:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f82:	2a22      	cmp	r2, #34	; 0x22
 8001f84:	d121      	bne.n	8001fca <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 8001f86:	0004      	movs	r4, r0
 8001f88:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001f8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001f8c:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001f8e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001f90:	4021      	ands	r1, r4
 8001f92:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8001f94:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8001f96:	3202      	adds	r2, #2
 8001f98:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001f9a:	315a      	adds	r1, #90	; 0x5a
 8001f9c:	880a      	ldrh	r2, [r1, #0]
 8001f9e:	3a01      	subs	r2, #1
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8001fa4:	880a      	ldrh	r2, [r1, #0]
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	2a00      	cmp	r2, #0
 8001faa:	d10d      	bne.n	8001fc8 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	4c09      	ldr	r4, [pc, #36]	; (8001fd4 <UART_RxISR_16BIT+0x58>)
 8001fb0:	4021      	ands	r1, r4
 8001fb2:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb4:	6899      	ldr	r1, [r3, #8]
 8001fb6:	3423      	adds	r4, #35	; 0x23
 8001fb8:	34ff      	adds	r4, #255	; 0xff
 8001fba:	43a1      	bics	r1, r4
 8001fbc:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fbe:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001fc0:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001fc2:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001fc4:	f000 ffe4 	bl	8002f90 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001fc8:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001fca:	2208      	movs	r2, #8
 8001fcc:	6999      	ldr	r1, [r3, #24]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	e7f9      	b.n	8001fc8 <UART_RxISR_16BIT+0x4c>
 8001fd4:	fffffedf 	.word	0xfffffedf

08001fd8 <HAL_UART_ErrorCallback>:
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_UART_IRQHandler>:
{
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001fde:	6803      	ldr	r3, [r0, #0]
{
 8001fe0:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001fe2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fe4:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fe6:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8001fe8:	0711      	lsls	r1, r2, #28
 8001fea:	d10a      	bne.n	8002002 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fec:	2120      	movs	r1, #32
 8001fee:	420a      	tst	r2, r1
 8001ff0:	d100      	bne.n	8001ff4 <HAL_UART_IRQHandler+0x18>
 8001ff2:	e06a      	b.n	80020ca <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ff4:	4208      	tst	r0, r1
 8001ff6:	d068      	beq.n	80020ca <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8001ff8:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8001ffa:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d15a      	bne.n	80020b6 <HAL_UART_IRQHandler+0xda>
 8002000:	e05a      	b.n	80020b8 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002002:	2101      	movs	r1, #1
 8002004:	0035      	movs	r5, r6
 8002006:	400d      	ands	r5, r1
 8002008:	d103      	bne.n	8002012 <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800200a:	2790      	movs	r7, #144	; 0x90
 800200c:	007f      	lsls	r7, r7, #1
 800200e:	4238      	tst	r0, r7
 8002010:	d05b      	beq.n	80020ca <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002012:	420a      	tst	r2, r1
 8002014:	d005      	beq.n	8002022 <HAL_UART_IRQHandler+0x46>
 8002016:	05c6      	lsls	r6, r0, #23
 8002018:	d503      	bpl.n	8002022 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800201a:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800201c:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800201e:	4331      	orrs	r1, r6
 8002020:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002022:	2102      	movs	r1, #2
 8002024:	420a      	tst	r2, r1
 8002026:	d006      	beq.n	8002036 <HAL_UART_IRQHandler+0x5a>
 8002028:	2d00      	cmp	r5, #0
 800202a:	d004      	beq.n	8002036 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800202c:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800202e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002030:	1849      	adds	r1, r1, r1
 8002032:	4331      	orrs	r1, r6
 8002034:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002036:	2104      	movs	r1, #4
 8002038:	420a      	tst	r2, r1
 800203a:	d006      	beq.n	800204a <HAL_UART_IRQHandler+0x6e>
 800203c:	2d00      	cmp	r5, #0
 800203e:	d004      	beq.n	800204a <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002040:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002042:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002044:	3902      	subs	r1, #2
 8002046:	4331      	orrs	r1, r6
 8002048:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800204a:	0711      	lsls	r1, r2, #28
 800204c:	d508      	bpl.n	8002060 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800204e:	0681      	lsls	r1, r0, #26
 8002050:	d401      	bmi.n	8002056 <HAL_UART_IRQHandler+0x7a>
 8002052:	2d00      	cmp	r5, #0
 8002054:	d004      	beq.n	8002060 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002056:	2108      	movs	r1, #8
 8002058:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800205a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800205c:	4319      	orrs	r1, r3
 800205e:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002060:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002062:	2b00      	cmp	r3, #0
 8002064:	d028      	beq.n	80020b8 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002066:	2320      	movs	r3, #32
 8002068:	421a      	tst	r2, r3
 800206a:	d006      	beq.n	800207a <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800206c:	4218      	tst	r0, r3
 800206e:	d004      	beq.n	800207a <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8002070:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 8002076:	0020      	movs	r0, r4
 8002078:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800207a:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800207c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800207e:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8002080:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002082:	065b      	lsls	r3, r3, #25
 8002084:	d402      	bmi.n	800208c <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002086:	2308      	movs	r3, #8
 8002088:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800208a:	d01a      	beq.n	80020c2 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 800208c:	f7ff fe56 	bl	8001d3c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002090:	2140      	movs	r1, #64	; 0x40
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	420a      	tst	r2, r1
 8002098:	d00f      	beq.n	80020ba <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800209a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800209c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800209e:	438a      	bics	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d009      	beq.n	80020ba <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_UART_IRQHandler+0x134>)
 80020a8:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020aa:	f7fe fd4b 	bl	8000b44 <HAL_DMA_Abort_IT>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020b2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80020b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80020b6:	4798      	blx	r3
}
 80020b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80020ba:	0020      	movs	r0, r4
 80020bc:	f7ff ff8c 	bl	8001fd8 <HAL_UART_ErrorCallback>
 80020c0:	e7fa      	b.n	80020b8 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 80020c2:	f7ff ff89 	bl	8001fd8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c6:	67e5      	str	r5, [r4, #124]	; 0x7c
 80020c8:	e7f6      	b.n	80020b8 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	0349      	lsls	r1, r1, #13
 80020ce:	420a      	tst	r2, r1
 80020d0:	d006      	beq.n	80020e0 <HAL_UART_IRQHandler+0x104>
 80020d2:	0275      	lsls	r5, r6, #9
 80020d4:	d504      	bpl.n	80020e0 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80020d6:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80020d8:	0020      	movs	r0, r4
 80020da:	f000 fc5d 	bl	8002998 <HAL_UARTEx_WakeupCallback>
    return;
 80020de:	e7eb      	b.n	80020b8 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	420a      	tst	r2, r1
 80020e4:	d003      	beq.n	80020ee <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80020e6:	4208      	tst	r0, r1
 80020e8:	d001      	beq.n	80020ee <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 80020ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020ec:	e785      	b.n	8001ffa <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80020ee:	2140      	movs	r1, #64	; 0x40
 80020f0:	420a      	tst	r2, r1
 80020f2:	d0e1      	beq.n	80020b8 <HAL_UART_IRQHandler+0xdc>
 80020f4:	4208      	tst	r0, r1
 80020f6:	d0df      	beq.n	80020b8 <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80020f8:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80020fa:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002100:	2320      	movs	r3, #32
 8002102:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8002104:	2300      	movs	r3, #0
 8002106:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8002108:	f000 ff3c 	bl	8002f84 <HAL_UART_TxCpltCallback>
 800210c:	e7d4      	b.n	80020b8 <HAL_UART_IRQHandler+0xdc>
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	08002115 	.word	0x08002115

08002114 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002114:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	0002      	movs	r2, r0
{
 800211a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800211c:	325a      	adds	r2, #90	; 0x5a
 800211e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002120:	3a08      	subs	r2, #8
 8002122:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8002124:	f7ff ff58 	bl	8001fd8 <HAL_UART_ErrorCallback>
}
 8002128:	bd10      	pop	{r4, pc}
	...

0800212c <UART_SetConfig>:
{
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800212e:	6842      	ldr	r2, [r0, #4]
 8002130:	4baf      	ldr	r3, [pc, #700]	; (80023f0 <UART_SetConfig+0x2c4>)
{
 8002132:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002134:	429a      	cmp	r2, r3
 8002136:	d903      	bls.n	8002140 <UART_SetConfig+0x14>
 8002138:	49ae      	ldr	r1, [pc, #696]	; (80023f4 <UART_SetConfig+0x2c8>)
 800213a:	48af      	ldr	r0, [pc, #700]	; (80023f8 <UART_SetConfig+0x2cc>)
 800213c:	f000 ff2e 	bl	8002f9c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	68a3      	ldr	r3, [r4, #8]
 8002144:	0552      	lsls	r2, r2, #21
 8002146:	4293      	cmp	r3, r2
 8002148:	d006      	beq.n	8002158 <UART_SetConfig+0x2c>
 800214a:	4aac      	ldr	r2, [pc, #688]	; (80023fc <UART_SetConfig+0x2d0>)
 800214c:	4213      	tst	r3, r2
 800214e:	d003      	beq.n	8002158 <UART_SetConfig+0x2c>
 8002150:	49ab      	ldr	r1, [pc, #684]	; (8002400 <UART_SetConfig+0x2d4>)
 8002152:	48a9      	ldr	r0, [pc, #676]	; (80023f8 <UART_SetConfig+0x2cc>)
 8002154:	f000 ff22 	bl	8002f9c <assert_failed>
 8002158:	4daa      	ldr	r5, [pc, #680]	; (8002404 <UART_SetConfig+0x2d8>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800215a:	6822      	ldr	r2, [r4, #0]
 800215c:	68e3      	ldr	r3, [r4, #12]
 800215e:	4eaa      	ldr	r6, [pc, #680]	; (8002408 <UART_SetConfig+0x2dc>)
 8002160:	42aa      	cmp	r2, r5
 8002162:	d160      	bne.n	8002226 <UART_SetConfig+0xfa>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8002164:	4aa9      	ldr	r2, [pc, #676]	; (800240c <UART_SetConfig+0x2e0>)
 8002166:	4213      	tst	r3, r2
 8002168:	d003      	beq.n	8002172 <UART_SetConfig+0x46>
 800216a:	49a9      	ldr	r1, [pc, #676]	; (8002410 <UART_SetConfig+0x2e4>)
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800216c:	48a2      	ldr	r0, [pc, #648]	; (80023f8 <UART_SetConfig+0x2cc>)
 800216e:	f000 ff15 	bl	8002f9c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002172:	6923      	ldr	r3, [r4, #16]
 8002174:	4aa7      	ldr	r2, [pc, #668]	; (8002414 <UART_SetConfig+0x2e8>)
 8002176:	4213      	tst	r3, r2
 8002178:	d007      	beq.n	800218a <UART_SetConfig+0x5e>
 800217a:	22c0      	movs	r2, #192	; 0xc0
 800217c:	00d2      	lsls	r2, r2, #3
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <UART_SetConfig+0x5e>
 8002182:	49a5      	ldr	r1, [pc, #660]	; (8002418 <UART_SetConfig+0x2ec>)
 8002184:	489c      	ldr	r0, [pc, #624]	; (80023f8 <UART_SetConfig+0x2cc>)
 8002186:	f000 ff09 	bl	8002f9c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800218a:	6963      	ldr	r3, [r4, #20]
 800218c:	220c      	movs	r2, #12
 800218e:	0019      	movs	r1, r3
 8002190:	4391      	bics	r1, r2
 8002192:	d101      	bne.n	8002198 <UART_SetConfig+0x6c>
 8002194:	2b00      	cmp	r3, #0
 8002196:	d103      	bne.n	80021a0 <UART_SetConfig+0x74>
 8002198:	49a0      	ldr	r1, [pc, #640]	; (800241c <UART_SetConfig+0x2f0>)
 800219a:	4897      	ldr	r0, [pc, #604]	; (80023f8 <UART_SetConfig+0x2cc>)
 800219c:	f000 fefe 	bl	8002f9c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80021a0:	4b9f      	ldr	r3, [pc, #636]	; (8002420 <UART_SetConfig+0x2f4>)
 80021a2:	69a2      	ldr	r2, [r4, #24]
 80021a4:	421a      	tst	r2, r3
 80021a6:	d003      	beq.n	80021b0 <UART_SetConfig+0x84>
 80021a8:	499e      	ldr	r1, [pc, #632]	; (8002424 <UART_SetConfig+0x2f8>)
 80021aa:	4893      	ldr	r0, [pc, #588]	; (80023f8 <UART_SetConfig+0x2cc>)
 80021ac:	f000 fef6 	bl	8002f9c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80021b0:	4b9d      	ldr	r3, [pc, #628]	; (8002428 <UART_SetConfig+0x2fc>)
 80021b2:	69e2      	ldr	r2, [r4, #28]
 80021b4:	421a      	tst	r2, r3
 80021b6:	d003      	beq.n	80021c0 <UART_SetConfig+0x94>
 80021b8:	499c      	ldr	r1, [pc, #624]	; (800242c <UART_SetConfig+0x300>)
 80021ba:	488f      	ldr	r0, [pc, #572]	; (80023f8 <UART_SetConfig+0x2cc>)
 80021bc:	f000 feee 	bl	8002f9c <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021c0:	6927      	ldr	r7, [r4, #16]
 80021c2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021c4:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021c6:	433a      	orrs	r2, r7
 80021c8:	6967      	ldr	r7, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021ca:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021cc:	69e1      	ldr	r1, [r4, #28]
 80021ce:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021d0:	4f97      	ldr	r7, [pc, #604]	; (8002430 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021d2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021d4:	4038      	ands	r0, r7
 80021d6:	4302      	orrs	r2, r0
 80021d8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021da:	685a      	ldr	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021dc:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021de:	4016      	ands	r6, r2
 80021e0:	68e2      	ldr	r2, [r4, #12]
 80021e2:	4316      	orrs	r6, r2
 80021e4:	605e      	str	r6, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021e6:	42ab      	cmp	r3, r5
 80021e8:	d001      	beq.n	80021ee <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
 80021ea:	6a22      	ldr	r2, [r4, #32]
 80021ec:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	4e90      	ldr	r6, [pc, #576]	; (8002434 <UART_SetConfig+0x308>)
 80021f2:	4032      	ands	r2, r6
 80021f4:	4302      	orrs	r2, r0
 80021f6:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021f8:	4a8f      	ldr	r2, [pc, #572]	; (8002438 <UART_SetConfig+0x30c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d120      	bne.n	8002240 <UART_SetConfig+0x114>
 80021fe:	2203      	movs	r2, #3
 8002200:	4b8e      	ldr	r3, [pc, #568]	; (800243c <UART_SetConfig+0x310>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002204:	4013      	ands	r3, r2
 8002206:	4a8e      	ldr	r2, [pc, #568]	; (8002440 <UART_SetConfig+0x314>)
 8002208:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	4299      	cmp	r1, r3
 8002210:	d100      	bne.n	8002214 <UART_SetConfig+0xe8>
 8002212:	e0de      	b.n	80023d2 <UART_SetConfig+0x2a6>
    switch (clocksource)
 8002214:	2808      	cmp	r0, #8
 8002216:	d833      	bhi.n	8002280 <UART_SetConfig+0x154>
 8002218:	f7fd ff88 	bl	800012c <__gnu_thumb1_case_uqi>
 800221c:	32a5a29b 	.word	0x32a5a29b
 8002220:	323232c0 	.word	0x323232c0
 8002224:	c3          	.byte	0xc3
 8002225:	00          	.byte	0x00
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002226:	4233      	tst	r3, r6
 8002228:	d004      	beq.n	8002234 <UART_SetConfig+0x108>
 800222a:	21ad      	movs	r1, #173	; 0xad
 800222c:	4872      	ldr	r0, [pc, #456]	; (80023f8 <UART_SetConfig+0x2cc>)
 800222e:	0109      	lsls	r1, r1, #4
 8002230:	f000 feb4 	bl	8002f9c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8002234:	4b83      	ldr	r3, [pc, #524]	; (8002444 <UART_SetConfig+0x318>)
 8002236:	6a22      	ldr	r2, [r4, #32]
 8002238:	421a      	tst	r2, r3
 800223a:	d09a      	beq.n	8002172 <UART_SetConfig+0x46>
 800223c:	4982      	ldr	r1, [pc, #520]	; (8002448 <UART_SetConfig+0x31c>)
 800223e:	e795      	b.n	800216c <UART_SetConfig+0x40>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002240:	4a82      	ldr	r2, [pc, #520]	; (800244c <UART_SetConfig+0x320>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d105      	bne.n	8002252 <UART_SetConfig+0x126>
 8002246:	220c      	movs	r2, #12
 8002248:	4b7c      	ldr	r3, [pc, #496]	; (800243c <UART_SetConfig+0x310>)
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	4013      	ands	r3, r2
 800224e:	4a80      	ldr	r2, [pc, #512]	; (8002450 <UART_SetConfig+0x324>)
 8002250:	e7da      	b.n	8002208 <UART_SetConfig+0xdc>
 8002252:	4a80      	ldr	r2, [pc, #512]	; (8002454 <UART_SetConfig+0x328>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d100      	bne.n	800225a <UART_SetConfig+0x12e>
 8002258:	e0af      	b.n	80023ba <UART_SetConfig+0x28e>
 800225a:	4a7f      	ldr	r2, [pc, #508]	; (8002458 <UART_SetConfig+0x32c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d100      	bne.n	8002262 <UART_SetConfig+0x136>
 8002260:	e0ab      	b.n	80023ba <UART_SetConfig+0x28e>
 8002262:	42ab      	cmp	r3, r5
 8002264:	d000      	beq.n	8002268 <UART_SetConfig+0x13c>
 8002266:	e0a1      	b.n	80023ac <UART_SetConfig+0x280>
 8002268:	21c0      	movs	r1, #192	; 0xc0
 800226a:	2080      	movs	r0, #128	; 0x80
 800226c:	4a73      	ldr	r2, [pc, #460]	; (800243c <UART_SetConfig+0x310>)
 800226e:	0109      	lsls	r1, r1, #4
 8002270:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002272:	00c0      	lsls	r0, r0, #3
 8002274:	400b      	ands	r3, r1
 8002276:	4283      	cmp	r3, r0
 8002278:	d038      	beq.n	80022ec <UART_SetConfig+0x1c0>
 800227a:	d803      	bhi.n	8002284 <UART_SetConfig+0x158>
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8002280:	2501      	movs	r5, #1
 8002282:	e00d      	b.n	80022a0 <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002284:	2080      	movs	r0, #128	; 0x80
 8002286:	0100      	lsls	r0, r0, #4
 8002288:	4283      	cmp	r3, r0
 800228a:	d00e      	beq.n	80022aa <UART_SetConfig+0x17e>
 800228c:	428b      	cmp	r3, r1
 800228e:	d1f7      	bne.n	8002280 <UART_SetConfig+0x154>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002290:	2080      	movs	r0, #128	; 0x80
 8002292:	0200      	lsls	r0, r0, #8
 8002294:	e00d      	b.n	80022b2 <UART_SetConfig+0x186>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002296:	f7ff fbe9 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 800229a:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 800229c:	42a8      	cmp	r0, r5
 800229e:	d108      	bne.n	80022b2 <UART_SetConfig+0x186>
  huart->RxISR = NULL;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 80022a4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80022a6:	6663      	str	r3, [r4, #100]	; 0x64
}
 80022a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	06db      	lsls	r3, r3, #27
 80022ae:	d520      	bpl.n	80022f2 <UART_SetConfig+0x1c6>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80022b0:	484f      	ldr	r0, [pc, #316]	; (80023f0 <UART_SetConfig+0x2c4>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022b2:	2203      	movs	r2, #3
 80022b4:	6863      	ldr	r3, [r4, #4]
 80022b6:	435a      	muls	r2, r3
 80022b8:	4282      	cmp	r2, r0
 80022ba:	d8e1      	bhi.n	8002280 <UART_SetConfig+0x154>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80022bc:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022be:	4282      	cmp	r2, r0
 80022c0:	d3de      	bcc.n	8002280 <UART_SetConfig+0x154>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80022c2:	2700      	movs	r7, #0
 80022c4:	0e02      	lsrs	r2, r0, #24
 80022c6:	0201      	lsls	r1, r0, #8
 80022c8:	085e      	lsrs	r6, r3, #1
 80022ca:	1989      	adds	r1, r1, r6
 80022cc:	417a      	adcs	r2, r7
 80022ce:	0008      	movs	r0, r1
 80022d0:	0011      	movs	r1, r2
 80022d2:	001a      	movs	r2, r3
 80022d4:	003b      	movs	r3, r7
 80022d6:	f7fd ffc9 	bl	800026c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022da:	4b60      	ldr	r3, [pc, #384]	; (800245c <UART_SetConfig+0x330>)
 80022dc:	18c2      	adds	r2, r0, r3
 80022de:	4b60      	ldr	r3, [pc, #384]	; (8002460 <UART_SetConfig+0x334>)
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8cd      	bhi.n	8002280 <UART_SetConfig+0x154>
          huart->Instance->BRR = usartdiv;
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	003d      	movs	r5, r7
 80022e8:	60d8      	str	r0, [r3, #12]
 80022ea:	e7d9      	b.n	80022a0 <UART_SetConfig+0x174>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80022ec:	f7fe ff00 	bl	80010f0 <HAL_RCC_GetSysClockFreq>
        break;
 80022f0:	e7d3      	b.n	800229a <UART_SetConfig+0x16e>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80022f2:	485c      	ldr	r0, [pc, #368]	; (8002464 <UART_SetConfig+0x338>)
 80022f4:	e7dd      	b.n	80022b2 <UART_SetConfig+0x186>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022f6:	f7ff fbc9 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 80022fa:	e064      	b.n	80023c6 <UART_SetConfig+0x29a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022fc:	2510      	movs	r5, #16
 80022fe:	4b4f      	ldr	r3, [pc, #316]	; (800243c <UART_SetConfig+0x310>)
 8002300:	6861      	ldr	r1, [r4, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002304:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002306:	4015      	ands	r5, r2
 8002308:	d006      	beq.n	8002318 <UART_SetConfig+0x1ec>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800230a:	4b57      	ldr	r3, [pc, #348]	; (8002468 <UART_SetConfig+0x33c>)
 800230c:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800230e:	f7fd ff21 	bl	8000154 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002312:	2500      	movs	r5, #0
 8002314:	b283      	uxth	r3, r0
        break;
 8002316:	e004      	b.n	8002322 <UART_SetConfig+0x1f6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002318:	4b54      	ldr	r3, [pc, #336]	; (800246c <UART_SetConfig+0x340>)
 800231a:	18c0      	adds	r0, r0, r3
 800231c:	f7fd ff1a 	bl	8000154 <__udivsi3>
 8002320:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002322:	0019      	movs	r1, r3
 8002324:	4852      	ldr	r0, [pc, #328]	; (8002470 <UART_SetConfig+0x344>)
 8002326:	3910      	subs	r1, #16
 8002328:	4281      	cmp	r1, r0
 800232a:	d8a9      	bhi.n	8002280 <UART_SetConfig+0x154>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800232c:	210f      	movs	r1, #15
 800232e:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002330:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002332:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002334:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8002336:	6821      	ldr	r1, [r4, #0]
 8002338:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 800233a:	60cb      	str	r3, [r1, #12]
 800233c:	e7b0      	b.n	80022a0 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800233e:	f7fe fed7 	bl	80010f0 <HAL_RCC_GetSysClockFreq>
 8002342:	e040      	b.n	80023c6 <UART_SetConfig+0x29a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	0858      	lsrs	r0, r3, #1
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	e03e      	b.n	80023cc <UART_SetConfig+0x2a0>
  uint32_t usartdiv                   = 0x00000000U;
 800234e:	2300      	movs	r3, #0
 8002350:	e7e7      	b.n	8002322 <UART_SetConfig+0x1f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002352:	f7ff fb8b 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002356:	6863      	ldr	r3, [r4, #4]
 8002358:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800235a:	18c0      	adds	r0, r0, r3
 800235c:	6861      	ldr	r1, [r4, #4]
 800235e:	e00b      	b.n	8002378 <UART_SetConfig+0x24c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002360:	f7ff fb94 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002364:	e7f7      	b.n	8002356 <UART_SetConfig+0x22a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002366:	2510      	movs	r5, #16
 8002368:	4b34      	ldr	r3, [pc, #208]	; (800243c <UART_SetConfig+0x310>)
 800236a:	6861      	ldr	r1, [r4, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800236e:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002370:	4015      	ands	r5, r2
 8002372:	d006      	beq.n	8002382 <UART_SetConfig+0x256>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <UART_SetConfig+0x2c4>)
 8002376:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002378:	f7fd feec 	bl	8000154 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800237c:	2500      	movs	r5, #0
 800237e:	b283      	uxth	r3, r0
        break;
 8002380:	e004      	b.n	800238c <UART_SetConfig+0x260>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <UART_SetConfig+0x338>)
 8002384:	18c0      	adds	r0, r0, r3
 8002386:	f7fd fee5 	bl	8000154 <__udivsi3>
 800238a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800238c:	0019      	movs	r1, r3
 800238e:	4838      	ldr	r0, [pc, #224]	; (8002470 <UART_SetConfig+0x344>)
 8002390:	3910      	subs	r1, #16
 8002392:	4281      	cmp	r1, r0
 8002394:	d900      	bls.n	8002398 <UART_SetConfig+0x26c>
 8002396:	e773      	b.n	8002280 <UART_SetConfig+0x154>
      huart->Instance->BRR = usartdiv;
 8002398:	6821      	ldr	r1, [r4, #0]
 800239a:	e7ce      	b.n	800233a <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800239c:	f7fe fea8 	bl	80010f0 <HAL_RCC_GetSysClockFreq>
 80023a0:	e7d9      	b.n	8002356 <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023a2:	6863      	ldr	r3, [r4, #4]
 80023a4:	0858      	lsrs	r0, r3, #1
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	e7d6      	b.n	800235a <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ac:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 80023ae:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	4299      	cmp	r1, r3
 80023b4:	d0cb      	beq.n	800234e <UART_SetConfig+0x222>
  uint32_t usartdiv                   = 0x00000000U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e7e8      	b.n	800238c <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	4299      	cmp	r1, r3
 80023c0:	d1c7      	bne.n	8002352 <UART_SetConfig+0x226>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023c2:	f7ff fb53 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023c6:	6863      	ldr	r3, [r4, #4]
 80023c8:	0040      	lsls	r0, r0, #1
 80023ca:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023cc:	18c0      	adds	r0, r0, r3
 80023ce:	6861      	ldr	r1, [r4, #4]
 80023d0:	e79d      	b.n	800230e <UART_SetConfig+0x1e2>
    switch (clocksource)
 80023d2:	2808      	cmp	r0, #8
 80023d4:	d900      	bls.n	80023d8 <UART_SetConfig+0x2ac>
 80023d6:	e753      	b.n	8002280 <UART_SetConfig+0x154>
 80023d8:	f7fd feb2 	bl	8000140 <__gnu_thumb1_case_shi>
 80023dc:	ff8dfff3 	.word	0xff8dfff3
 80023e0:	ff52ff90 	.word	0xff52ff90
 80023e4:	ff52ffb1 	.word	0xff52ffb1
 80023e8:	ff52ff52 	.word	0xff52ff52
 80023ec:	ffb4      	.short	0xffb4
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	003d0900 	.word	0x003d0900
 80023f4:	00000ac8 	.word	0x00000ac8
 80023f8:	080039d2 	.word	0x080039d2
 80023fc:	ffffefff 	.word	0xffffefff
 8002400:	00000ac9 	.word	0x00000ac9
 8002404:	40004800 	.word	0x40004800
 8002408:	ffffcfff 	.word	0xffffcfff
 800240c:	ffffdfff 	.word	0xffffdfff
 8002410:	00000acc 	.word	0x00000acc
 8002414:	fffffbff 	.word	0xfffffbff
 8002418:	00000ad4 	.word	0x00000ad4
 800241c:	00000ad5 	.word	0x00000ad5
 8002420:	fffffcff 	.word	0xfffffcff
 8002424:	00000ad6 	.word	0x00000ad6
 8002428:	ffff7fff 	.word	0xffff7fff
 800242c:	00000ad7 	.word	0x00000ad7
 8002430:	efff69f3 	.word	0xefff69f3
 8002434:	fffff4ff 	.word	0xfffff4ff
 8002438:	40013800 	.word	0x40013800
 800243c:	40021000 	.word	0x40021000
 8002440:	080039c1 	.word	0x080039c1
 8002444:	fffff7ff 	.word	0xfffff7ff
 8002448:	00000ad1 	.word	0x00000ad1
 800244c:	40004400 	.word	0x40004400
 8002450:	080039c5 	.word	0x080039c5
 8002454:	40004c00 	.word	0x40004c00
 8002458:	40005000 	.word	0x40005000
 800245c:	fffffd00 	.word	0xfffffd00
 8002460:	000ffcff 	.word	0x000ffcff
 8002464:	00f42400 	.word	0x00f42400
 8002468:	007a1200 	.word	0x007a1200
 800246c:	01e84800 	.word	0x01e84800
 8002470:	0000ffef 	.word	0x0000ffef

08002474 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8002474:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002476:	b570      	push	{r4, r5, r6, lr}
 8002478:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800247a:	2bff      	cmp	r3, #255	; 0xff
 800247c:	d903      	bls.n	8002486 <UART_AdvFeatureConfig+0x12>
 800247e:	4955      	ldr	r1, [pc, #340]	; (80025d4 <UART_AdvFeatureConfig+0x160>)
 8002480:	4855      	ldr	r0, [pc, #340]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 8002482:	f000 fd8b 	bl	8002f9c <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002488:	07db      	lsls	r3, r3, #31
 800248a:	d50d      	bpl.n	80024a8 <UART_AdvFeatureConfig+0x34>
 800248c:	4d53      	ldr	r5, [pc, #332]	; (80025dc <UART_AdvFeatureConfig+0x168>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800248e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002490:	422b      	tst	r3, r5
 8002492:	d003      	beq.n	800249c <UART_AdvFeatureConfig+0x28>
 8002494:	4952      	ldr	r1, [pc, #328]	; (80025e0 <UART_AdvFeatureConfig+0x16c>)
 8002496:	4850      	ldr	r0, [pc, #320]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 8002498:	f000 fd80 	bl	8002f9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800249c:	6822      	ldr	r2, [r4, #0]
 800249e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80024a0:	6853      	ldr	r3, [r2, #4]
 80024a2:	402b      	ands	r3, r5
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024aa:	079b      	lsls	r3, r3, #30
 80024ac:	d50d      	bpl.n	80024ca <UART_AdvFeatureConfig+0x56>
 80024ae:	4d4d      	ldr	r5, [pc, #308]	; (80025e4 <UART_AdvFeatureConfig+0x170>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80024b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024b2:	422b      	tst	r3, r5
 80024b4:	d003      	beq.n	80024be <UART_AdvFeatureConfig+0x4a>
 80024b6:	494c      	ldr	r1, [pc, #304]	; (80025e8 <UART_AdvFeatureConfig+0x174>)
 80024b8:	4847      	ldr	r0, [pc, #284]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 80024ba:	f000 fd6f 	bl	8002f9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024be:	6822      	ldr	r2, [r4, #0]
 80024c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80024c2:	6853      	ldr	r3, [r2, #4]
 80024c4:	402b      	ands	r3, r5
 80024c6:	430b      	orrs	r3, r1
 80024c8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024cc:	075b      	lsls	r3, r3, #29
 80024ce:	d50d      	bpl.n	80024ec <UART_AdvFeatureConfig+0x78>
 80024d0:	4d46      	ldr	r5, [pc, #280]	; (80025ec <UART_AdvFeatureConfig+0x178>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80024d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024d4:	422b      	tst	r3, r5
 80024d6:	d003      	beq.n	80024e0 <UART_AdvFeatureConfig+0x6c>
 80024d8:	4945      	ldr	r1, [pc, #276]	; (80025f0 <UART_AdvFeatureConfig+0x17c>)
 80024da:	483f      	ldr	r0, [pc, #252]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 80024dc:	f000 fd5e 	bl	8002f9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024e0:	6822      	ldr	r2, [r4, #0]
 80024e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80024e4:	6853      	ldr	r3, [r2, #4]
 80024e6:	402b      	ands	r3, r5
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ee:	071b      	lsls	r3, r3, #28
 80024f0:	d50d      	bpl.n	800250e <UART_AdvFeatureConfig+0x9a>
 80024f2:	4d40      	ldr	r5, [pc, #256]	; (80025f4 <UART_AdvFeatureConfig+0x180>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80024f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024f6:	422b      	tst	r3, r5
 80024f8:	d003      	beq.n	8002502 <UART_AdvFeatureConfig+0x8e>
 80024fa:	493f      	ldr	r1, [pc, #252]	; (80025f8 <UART_AdvFeatureConfig+0x184>)
 80024fc:	4836      	ldr	r0, [pc, #216]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 80024fe:	f000 fd4d 	bl	8002f9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002506:	6853      	ldr	r3, [r2, #4]
 8002508:	402b      	ands	r3, r5
 800250a:	430b      	orrs	r3, r1
 800250c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800250e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002510:	06db      	lsls	r3, r3, #27
 8002512:	d50d      	bpl.n	8002530 <UART_AdvFeatureConfig+0xbc>
 8002514:	4d39      	ldr	r5, [pc, #228]	; (80025fc <UART_AdvFeatureConfig+0x188>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8002516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002518:	422b      	tst	r3, r5
 800251a:	d003      	beq.n	8002524 <UART_AdvFeatureConfig+0xb0>
 800251c:	4938      	ldr	r1, [pc, #224]	; (8002600 <UART_AdvFeatureConfig+0x18c>)
 800251e:	482e      	ldr	r0, [pc, #184]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 8002520:	f000 fd3c 	bl	8002f9c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002524:	6822      	ldr	r2, [r4, #0]
 8002526:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002528:	6893      	ldr	r3, [r2, #8]
 800252a:	402b      	ands	r3, r5
 800252c:	430b      	orrs	r3, r1
 800252e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002532:	069b      	lsls	r3, r3, #26
 8002534:	d50d      	bpl.n	8002552 <UART_AdvFeatureConfig+0xde>
 8002536:	4d33      	ldr	r5, [pc, #204]	; (8002604 <UART_AdvFeatureConfig+0x190>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8002538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800253a:	422b      	tst	r3, r5
 800253c:	d003      	beq.n	8002546 <UART_AdvFeatureConfig+0xd2>
 800253e:	4932      	ldr	r1, [pc, #200]	; (8002608 <UART_AdvFeatureConfig+0x194>)
 8002540:	4825      	ldr	r0, [pc, #148]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 8002542:	f000 fd2b 	bl	8002f9c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002546:	6822      	ldr	r2, [r4, #0]
 8002548:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800254a:	6893      	ldr	r3, [r2, #8]
 800254c:	402b      	ands	r3, r5
 800254e:	430b      	orrs	r3, r1
 8002550:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002554:	065b      	lsls	r3, r3, #25
 8002556:	d52a      	bpl.n	80025ae <UART_AdvFeatureConfig+0x13a>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	4a2c      	ldr	r2, [pc, #176]	; (800260c <UART_AdvFeatureConfig+0x198>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d006      	beq.n	800256e <UART_AdvFeatureConfig+0xfa>
 8002560:	4a2b      	ldr	r2, [pc, #172]	; (8002610 <UART_AdvFeatureConfig+0x19c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <UART_AdvFeatureConfig+0xfa>
 8002566:	492b      	ldr	r1, [pc, #172]	; (8002614 <UART_AdvFeatureConfig+0x1a0>)
 8002568:	481b      	ldr	r0, [pc, #108]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 800256a:	f000 fd17 	bl	8002f9c <assert_failed>
 800256e:	4d2a      	ldr	r5, [pc, #168]	; (8002618 <UART_AdvFeatureConfig+0x1a4>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8002570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002572:	422b      	tst	r3, r5
 8002574:	d003      	beq.n	800257e <UART_AdvFeatureConfig+0x10a>
 8002576:	4929      	ldr	r1, [pc, #164]	; (800261c <UART_AdvFeatureConfig+0x1a8>)
 8002578:	4817      	ldr	r0, [pc, #92]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 800257a:	f000 fd0f 	bl	8002f9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800257e:	6821      	ldr	r1, [r4, #0]
 8002580:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002582:	684b      	ldr	r3, [r1, #4]
 8002584:	402b      	ands	r3, r5
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	035b      	lsls	r3, r3, #13
 800258e:	429a      	cmp	r2, r3
 8002590:	d10d      	bne.n	80025ae <UART_AdvFeatureConfig+0x13a>
 8002592:	4d23      	ldr	r5, [pc, #140]	; (8002620 <UART_AdvFeatureConfig+0x1ac>)
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8002594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002596:	422b      	tst	r3, r5
 8002598:	d003      	beq.n	80025a2 <UART_AdvFeatureConfig+0x12e>
 800259a:	4922      	ldr	r1, [pc, #136]	; (8002624 <UART_AdvFeatureConfig+0x1b0>)
 800259c:	480e      	ldr	r0, [pc, #56]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 800259e:	f000 fcfd 	bl	8002f9c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025a2:	6822      	ldr	r2, [r4, #0]
 80025a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80025a6:	6853      	ldr	r3, [r2, #4]
 80025a8:	402b      	ands	r3, r5
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025b0:	061b      	lsls	r3, r3, #24
 80025b2:	d50d      	bpl.n	80025d0 <UART_AdvFeatureConfig+0x15c>
 80025b4:	4d1c      	ldr	r5, [pc, #112]	; (8002628 <UART_AdvFeatureConfig+0x1b4>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80025b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025b8:	422b      	tst	r3, r5
 80025ba:	d003      	beq.n	80025c4 <UART_AdvFeatureConfig+0x150>
 80025bc:	491b      	ldr	r1, [pc, #108]	; (800262c <UART_AdvFeatureConfig+0x1b8>)
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <UART_AdvFeatureConfig+0x164>)
 80025c0:	f000 fcec 	bl	8002f9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80025c8:	6853      	ldr	r3, [r2, #4]
 80025ca:	402b      	ands	r3, r5
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6053      	str	r3, [r2, #4]
}
 80025d0:	bd70      	pop	{r4, r5, r6, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	00000b9a 	.word	0x00000b9a
 80025d8:	080039d2 	.word	0x080039d2
 80025dc:	fffdffff 	.word	0xfffdffff
 80025e0:	00000b9f 	.word	0x00000b9f
 80025e4:	fffeffff 	.word	0xfffeffff
 80025e8:	00000ba6 	.word	0x00000ba6
 80025ec:	fffbffff 	.word	0xfffbffff
 80025f0:	00000bad 	.word	0x00000bad
 80025f4:	ffff7fff 	.word	0xffff7fff
 80025f8:	00000bb4 	.word	0x00000bb4
 80025fc:	ffffefff 	.word	0xffffefff
 8002600:	00000bbb 	.word	0x00000bbb
 8002604:	ffffdfff 	.word	0xffffdfff
 8002608:	00000bc2 	.word	0x00000bc2
 800260c:	40013800 	.word	0x40013800
 8002610:	40004400 	.word	0x40004400
 8002614:	00000bc9 	.word	0x00000bc9
 8002618:	ffefffff 	.word	0xffefffff
 800261c:	00000bca 	.word	0x00000bca
 8002620:	ff9fffff 	.word	0xff9fffff
 8002624:	00000bcf 	.word	0x00000bcf
 8002628:	fff7ffff 	.word	0xfff7ffff
 800262c:	00000bd7 	.word	0x00000bd7

08002630 <UART_WaitOnFlagUntilTimeout>:
{
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	0004      	movs	r4, r0
 8002634:	000e      	movs	r6, r1
 8002636:	0015      	movs	r5, r2
 8002638:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	69d3      	ldr	r3, [r2, #28]
 800263e:	4033      	ands	r3, r6
 8002640:	1b9b      	subs	r3, r3, r6
 8002642:	4259      	negs	r1, r3
 8002644:	414b      	adcs	r3, r1
 8002646:	42ab      	cmp	r3, r5
 8002648:	d001      	beq.n	800264e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800264a:	2000      	movs	r0, #0
 800264c:	e01b      	b.n	8002686 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800264e:	9b06      	ldr	r3, [sp, #24]
 8002650:	3301      	adds	r3, #1
 8002652:	d0f3      	beq.n	800263c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002654:	f7fd ff48 	bl	80004e8 <HAL_GetTick>
 8002658:	9b06      	ldr	r3, [sp, #24]
 800265a:	1bc0      	subs	r0, r0, r7
 800265c:	4283      	cmp	r3, r0
 800265e:	d301      	bcc.n	8002664 <UART_WaitOnFlagUntilTimeout+0x34>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ea      	bne.n	800263a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <UART_WaitOnFlagUntilTimeout+0x58>)
 8002668:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800266a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266c:	400a      	ands	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	31a3      	adds	r1, #163	; 0xa3
 8002674:	31ff      	adds	r1, #255	; 0xff
 8002676:	438a      	bics	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800267a:	2320      	movs	r3, #32
 800267c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800267e:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002680:	2300      	movs	r3, #0
 8002682:	3470      	adds	r4, #112	; 0x70
 8002684:	7023      	strb	r3, [r4, #0]
}
 8002686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002688:	fffffe5f 	.word	0xfffffe5f

0800268c <HAL_UART_Transmit>:
{
 800268c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268e:	b087      	sub	sp, #28
 8002690:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002692:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002694:	0004      	movs	r4, r0
 8002696:	000d      	movs	r5, r1
 8002698:	0017      	movs	r7, r2
    return HAL_BUSY;
 800269a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800269c:	2b20      	cmp	r3, #32
 800269e:	d149      	bne.n	8002734 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 80026a0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80026a2:	2900      	cmp	r1, #0
 80026a4:	d046      	beq.n	8002734 <HAL_UART_Transmit+0xa8>
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d044      	beq.n	8002734 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	68a2      	ldr	r2, [r4, #8]
 80026ae:	015b      	lsls	r3, r3, #5
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d104      	bne.n	80026be <HAL_UART_Transmit+0x32>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 80026ba:	4201      	tst	r1, r0
 80026bc:	d13a      	bne.n	8002734 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80026be:	0023      	movs	r3, r4
 80026c0:	3370      	adds	r3, #112	; 0x70
 80026c2:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80026c4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80026c6:	2a01      	cmp	r2, #1
 80026c8:	d034      	beq.n	8002734 <HAL_UART_Transmit+0xa8>
 80026ca:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80026ce:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d4:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80026d6:	f7fd ff07 	bl	80004e8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80026da:	0023      	movs	r3, r4
 80026dc:	3350      	adds	r3, #80	; 0x50
 80026de:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80026e0:	3302      	adds	r3, #2
 80026e2:	9303      	str	r3, [sp, #12]
 80026e4:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80026ea:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ec:	015b      	lsls	r3, r3, #5
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d104      	bne.n	80026fc <HAL_UART_Transmit+0x70>
 80026f2:	6923      	ldr	r3, [r4, #16]
 80026f4:	42b3      	cmp	r3, r6
 80026f6:	d101      	bne.n	80026fc <HAL_UART_Transmit+0x70>
 80026f8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80026fa:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80026fc:	0023      	movs	r3, r4
 80026fe:	3352      	adds	r3, #82	; 0x52
 8002700:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002702:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002704:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800270a:	2a00      	cmp	r2, #0
 800270c:	d10a      	bne.n	8002724 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800270e:	2140      	movs	r1, #64	; 0x40
 8002710:	0020      	movs	r0, r4
 8002712:	f7ff ff8d 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 8002716:	2800      	cmp	r0, #0
 8002718:	d10b      	bne.n	8002732 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 800271a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800271c:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800271e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8002720:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002722:	e007      	b.n	8002734 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002724:	2200      	movs	r2, #0
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	0020      	movs	r0, r4
 800272a:	f7ff ff81 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 800272e:	2800      	cmp	r0, #0
 8002730:	d002      	beq.n	8002738 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8002732:	2003      	movs	r0, #3
}
 8002734:	b007      	add	sp, #28
 8002736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002738:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800273a:	2d00      	cmp	r5, #0
 800273c:	d10b      	bne.n	8002756 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800273e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002740:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	0ddb      	lsrs	r3, r3, #23
 8002746:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002748:	9b03      	ldr	r3, [sp, #12]
 800274a:	9a03      	ldr	r2, [sp, #12]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	3b01      	subs	r3, #1
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]
 8002754:	e7d2      	b.n	80026fc <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002756:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002758:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800275a:	6293      	str	r3, [r2, #40]	; 0x28
 800275c:	e7f4      	b.n	8002748 <HAL_UART_Transmit+0xbc>
	...

08002760 <HAL_UART_Receive>:
{
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	b087      	sub	sp, #28
 8002764:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8002766:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8002768:	0004      	movs	r4, r0
 800276a:	000d      	movs	r5, r1
 800276c:	0016      	movs	r6, r2
    return HAL_BUSY;
 800276e:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002770:	2b20      	cmp	r3, #32
 8002772:	d143      	bne.n	80027fc <HAL_UART_Receive+0x9c>
      return  HAL_ERROR;
 8002774:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002776:	2900      	cmp	r1, #0
 8002778:	d040      	beq.n	80027fc <HAL_UART_Receive+0x9c>
 800277a:	2a00      	cmp	r2, #0
 800277c:	d03e      	beq.n	80027fc <HAL_UART_Receive+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	68a2      	ldr	r2, [r4, #8]
 8002782:	015b      	lsls	r3, r3, #5
 8002784:	429a      	cmp	r2, r3
 8002786:	d104      	bne.n	8002792 <HAL_UART_Receive+0x32>
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 800278e:	4201      	tst	r1, r0
 8002790:	d134      	bne.n	80027fc <HAL_UART_Receive+0x9c>
    __HAL_LOCK(huart);
 8002792:	0023      	movs	r3, r4
 8002794:	3370      	adds	r3, #112	; 0x70
 8002796:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002798:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800279a:	2a01      	cmp	r2, #1
 800279c:	d02e      	beq.n	80027fc <HAL_UART_Receive+0x9c>
 800279e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80027a2:	701a      	strb	r2, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027a4:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a6:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027a8:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80027aa:	f7fd fe9d 	bl	80004e8 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80027ae:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80027b0:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 80027b2:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80027b4:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 80027b6:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80027b8:	3302      	adds	r3, #2
 80027ba:	9303      	str	r3, [sp, #12]
 80027bc:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80027be:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 80027c0:	0149      	lsls	r1, r1, #5
 80027c2:	3302      	adds	r3, #2
 80027c4:	428a      	cmp	r2, r1
 80027c6:	d11d      	bne.n	8002804 <HAL_UART_Receive+0xa4>
 80027c8:	6921      	ldr	r1, [r4, #16]
 80027ca:	42b9      	cmp	r1, r7
 80027cc:	d118      	bne.n	8002800 <HAL_UART_Receive+0xa0>
 80027ce:	4925      	ldr	r1, [pc, #148]	; (8002864 <HAL_UART_Receive+0x104>)
 80027d0:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 80027d2:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d4:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80027d6:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d8:	015b      	lsls	r3, r3, #5
 80027da:	429a      	cmp	r2, r3
 80027dc:	d104      	bne.n	80027e8 <HAL_UART_Receive+0x88>
 80027de:	6923      	ldr	r3, [r4, #16]
 80027e0:	42b3      	cmp	r3, r6
 80027e2:	d101      	bne.n	80027e8 <HAL_UART_Receive+0x88>
 80027e4:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80027e6:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 80027e8:	0023      	movs	r3, r4
 80027ea:	335a      	adds	r3, #90	; 0x5a
 80027ec:	8818      	ldrh	r0, [r3, #0]
 80027ee:	b280      	uxth	r0, r0
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d119      	bne.n	8002828 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 80027f4:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80027f6:	3470      	adds	r4, #112	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 80027f8:	60a3      	str	r3, [r4, #8]
    __HAL_UNLOCK(huart);
 80027fa:	7020      	strb	r0, [r4, #0]
}
 80027fc:	b007      	add	sp, #28
 80027fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8002800:	21ff      	movs	r1, #255	; 0xff
 8002802:	e7e5      	b.n	80027d0 <HAL_UART_Receive+0x70>
 8002804:	2a00      	cmp	r2, #0
 8002806:	d104      	bne.n	8002812 <HAL_UART_Receive+0xb2>
 8002808:	6921      	ldr	r1, [r4, #16]
 800280a:	2900      	cmp	r1, #0
 800280c:	d0f8      	beq.n	8002800 <HAL_UART_Receive+0xa0>
 800280e:	217f      	movs	r1, #127	; 0x7f
 8002810:	e7de      	b.n	80027d0 <HAL_UART_Receive+0x70>
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	0549      	lsls	r1, r1, #21
 8002816:	428a      	cmp	r2, r1
 8002818:	d104      	bne.n	8002824 <HAL_UART_Receive+0xc4>
 800281a:	6921      	ldr	r1, [r4, #16]
 800281c:	2900      	cmp	r1, #0
 800281e:	d0f6      	beq.n	800280e <HAL_UART_Receive+0xae>
 8002820:	213f      	movs	r1, #63	; 0x3f
 8002822:	e7d5      	b.n	80027d0 <HAL_UART_Receive+0x70>
 8002824:	801f      	strh	r7, [r3, #0]
 8002826:	e7d4      	b.n	80027d2 <HAL_UART_Receive+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002828:	9b05      	ldr	r3, [sp, #20]
 800282a:	2200      	movs	r2, #0
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2120      	movs	r1, #32
 8002830:	9b04      	ldr	r3, [sp, #16]
 8002832:	0020      	movs	r0, r4
 8002834:	f7ff fefc 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 8002838:	2800      	cmp	r0, #0
 800283a:	d110      	bne.n	800285e <HAL_UART_Receive+0xfe>
 800283c:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8002842:	2d00      	cmp	r5, #0
 8002844:	d108      	bne.n	8002858 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002846:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8002848:	3602      	adds	r6, #2
      huart->RxXferCount--;
 800284a:	9b03      	ldr	r3, [sp, #12]
 800284c:	9a03      	ldr	r2, [sp, #12]
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	3b01      	subs	r3, #1
 8002852:	b29b      	uxth	r3, r3
 8002854:	8013      	strh	r3, [r2, #0]
 8002856:	e7c7      	b.n	80027e8 <HAL_UART_Receive+0x88>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002858:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800285a:	3501      	adds	r5, #1
 800285c:	e7f5      	b.n	800284a <HAL_UART_Receive+0xea>
        return HAL_TIMEOUT;
 800285e:	2003      	movs	r0, #3
 8002860:	e7cc      	b.n	80027fc <HAL_UART_Receive+0x9c>
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	000001ff 	.word	0x000001ff

08002868 <UART_CheckIdleState>:
{
 8002868:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286a:	2600      	movs	r6, #0
{
 800286c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286e:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002870:	f7fd fe3a 	bl	80004e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002874:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002876:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	071b      	lsls	r3, r3, #28
 800287c:	d415      	bmi.n	80028aa <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	075b      	lsls	r3, r3, #29
 8002884:	d50a      	bpl.n	800289c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <UART_CheckIdleState+0x5c>)
 800288a:	2200      	movs	r2, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	03c9      	lsls	r1, r1, #15
 8002890:	002b      	movs	r3, r5
 8002892:	0020      	movs	r0, r4
 8002894:	f7ff fecc 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 8002898:	2800      	cmp	r0, #0
 800289a:	d111      	bne.n	80028c0 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800289c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800289e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80028a0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80028a2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80028a4:	3470      	adds	r4, #112	; 0x70
 80028a6:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80028a8:	e00b      	b.n	80028c2 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <UART_CheckIdleState+0x5c>)
 80028ae:	0032      	movs	r2, r6
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	0389      	lsls	r1, r1, #14
 80028b4:	0003      	movs	r3, r0
 80028b6:	0020      	movs	r0, r4
 80028b8:	f7ff feba 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 80028bc:	2800      	cmp	r0, #0
 80028be:	d0de      	beq.n	800287e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80028c0:	2003      	movs	r0, #3
}
 80028c2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80028c4:	01ffffff 	.word	0x01ffffff

080028c8 <HAL_UART_Init>:
{
 80028c8:	b510      	push	{r4, lr}
 80028ca:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
}
 80028d0:	bd10      	pop	{r4, pc}
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80028d2:	6981      	ldr	r1, [r0, #24]
 80028d4:	6803      	ldr	r3, [r0, #0]
 80028d6:	4a29      	ldr	r2, [pc, #164]	; (800297c <HAL_UART_Init+0xb4>)
 80028d8:	2900      	cmp	r1, #0
 80028da:	d03e      	beq.n	800295a <HAL_UART_Init+0x92>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80028dc:	4293      	cmp	r3, r2
 80028de:	d010      	beq.n	8002902 <HAL_UART_Init+0x3a>
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_UART_Init+0xb8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_UART_Init+0x3a>
 80028e6:	4a27      	ldr	r2, [pc, #156]	; (8002984 <HAL_UART_Init+0xbc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00a      	beq.n	8002902 <HAL_UART_Init+0x3a>
 80028ec:	4a26      	ldr	r2, [pc, #152]	; (8002988 <HAL_UART_Init+0xc0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <HAL_UART_Init+0x3a>
 80028f2:	4a26      	ldr	r2, [pc, #152]	; (800298c <HAL_UART_Init+0xc4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_UART_Init+0x3a>
 80028f8:	2130      	movs	r1, #48	; 0x30
 80028fa:	31ff      	adds	r1, #255	; 0xff
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80028fc:	4824      	ldr	r0, [pc, #144]	; (8002990 <HAL_UART_Init+0xc8>)
 80028fe:	f000 fb4d 	bl	8002f9c <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002902:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_UART_Init+0x4c>
    huart->Lock = HAL_UNLOCKED;
 8002908:	0022      	movs	r2, r4
 800290a:	3270      	adds	r2, #112	; 0x70
 800290c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800290e:	0020      	movs	r0, r4
 8002910:	f000 fd1c 	bl	800334c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002914:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002916:	2101      	movs	r1, #1
 8002918:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800291a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800291c:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800291e:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002920:	438b      	bics	r3, r1
 8002922:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002924:	f7ff fc02 	bl	800212c <UART_SetConfig>
 8002928:	2801      	cmp	r0, #1
 800292a:	d0d0      	beq.n	80028ce <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800292c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_UART_Init+0x70>
    UART_AdvFeatureConfig(huart);
 8002932:	0020      	movs	r0, r4
 8002934:	f7ff fd9e 	bl	8002474 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	4916      	ldr	r1, [pc, #88]	; (8002994 <HAL_UART_Init+0xcc>)
 800293c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800293e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002940:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002942:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002944:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	438a      	bics	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800294c:	2201      	movs	r2, #1
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002954:	f7ff ff88 	bl	8002868 <UART_CheckIdleState>
 8002958:	e7ba      	b.n	80028d0 <HAL_UART_Init+0x8>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800295a:	4293      	cmp	r3, r2
 800295c:	d0d1      	beq.n	8002902 <HAL_UART_Init+0x3a>
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_UART_Init+0xb8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d0ce      	beq.n	8002902 <HAL_UART_Init+0x3a>
 8002964:	4a07      	ldr	r2, [pc, #28]	; (8002984 <HAL_UART_Init+0xbc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d0cb      	beq.n	8002902 <HAL_UART_Init+0x3a>
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_UART_Init+0xc0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d0c8      	beq.n	8002902 <HAL_UART_Init+0x3a>
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <HAL_UART_Init+0xc4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d0c5      	beq.n	8002902 <HAL_UART_Init+0x3a>
 8002976:	219a      	movs	r1, #154	; 0x9a
 8002978:	0049      	lsls	r1, r1, #1
 800297a:	e7bf      	b.n	80028fc <HAL_UART_Init+0x34>
 800297c:	40013800 	.word	0x40013800
 8002980:	40004400 	.word	0x40004400
 8002984:	40004c00 	.word	0x40004c00
 8002988:	40005000 	.word	0x40005000
 800298c:	40004800 	.word	0x40004800
 8002990:	080039d2 	.word	0x080039d2
 8002994:	ffffb7ff 	.word	0xffffb7ff

08002998 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002998:	4770      	bx	lr
	...

0800299c <decHex>:
		len--;
	}
	return decimal;
}

void decHex(int number, char buff[7]) {
 800299c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800299e:	000d      	movs	r5, r1
 80029a0:	0004      	movs	r4, r0

	char hex[7]; /*bcoz it contains characters A to F*/
	memset(buff, 0x00, 7);//sizeof(buff));
 80029a2:	2207      	movs	r2, #7
 80029a4:	2100      	movs	r1, #0
 80029a6:	0028      	movs	r0, r5
 80029a8:	f000 fe4b 	bl	8003642 <memset>
	memset(hex, 0x00, 7);//sizeof(buff));
 80029ac:	2207      	movs	r2, #7
 80029ae:	2100      	movs	r1, #0
 80029b0:	4668      	mov	r0, sp
 80029b2:	f000 fe46 	bl	8003642 <memset>
	int cnt, i;
	cnt = 0; /*initialize index to zero*/
	if (number == 0) {
 80029b6:	2c00      	cmp	r4, #0
 80029b8:	d015      	beq.n	80029e6 <decHex+0x4a>
 80029ba:	0023      	movs	r3, r4
			break;
		case 14:
			hex[cnt] = 'E';
			break;
		case 15:
			hex[cnt] = 'F';
 80029bc:	2146      	movs	r1, #70	; 0x46
	if (number == 0) {
 80029be:	2400      	movs	r4, #0
			hex[cnt] = 'E';
 80029c0:	2645      	movs	r6, #69	; 0x45
			hex[cnt] = 'D';
 80029c2:	2744      	movs	r7, #68	; 0x44
	while (number > 0) {
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	dd12      	ble.n	80029ee <decHex+0x52>
		switch (number % 16) {
 80029c8:	220f      	movs	r2, #15
 80029ca:	0018      	movs	r0, r3
 80029cc:	4010      	ands	r0, r2
 80029ce:	3a19      	subs	r2, #25
 80029d0:	4694      	mov	ip, r2
 80029d2:	4484      	add	ip, r0
 80029d4:	4662      	mov	r2, ip
 80029d6:	2a05      	cmp	r2, #5
 80029d8:	d820      	bhi.n	8002a1c <decHex+0x80>
 80029da:	4660      	mov	r0, ip
 80029dc:	f7fd fba6 	bl	800012c <__gnu_thumb1_case_uqi>
 80029e0:	13110f0b 	.word	0x13110f0b
 80029e4:	1b18      	.short	0x1b18
		strcpy(buff, "0");
 80029e6:	4911      	ldr	r1, [pc, #68]	; (8002a2c <decHex+0x90>)
 80029e8:	0028      	movs	r0, r5
 80029ea:	f000 fe3f 	bl	800366c <strcpy>
			hex[cnt] = (number % 16) + 0x30; /*converted into char value*/
		}
		number = number / 16;
		cnt++;
	}
	for (i = (cnt - 1); i >= 0; i--) {
 80029ee:	3c01      	subs	r4, #1
 80029f0:	1c63      	adds	r3, r4, #1
 80029f2:	d115      	bne.n	8002a20 <decHex+0x84>
		int j = cnt - 1 - i;
		buff[j] = hex[i];
	}
}
 80029f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			hex[cnt] = 'A';
 80029f6:	2041      	movs	r0, #65	; 0x41
			hex[cnt] = (number % 16) + 0x30; /*converted into char value*/
 80029f8:	466a      	mov	r2, sp
 80029fa:	5510      	strb	r0, [r2, r4]
 80029fc:	e005      	b.n	8002a0a <decHex+0x6e>
			hex[cnt] = 'B';
 80029fe:	2042      	movs	r0, #66	; 0x42
 8002a00:	e7fa      	b.n	80029f8 <decHex+0x5c>
			hex[cnt] = 'C';
 8002a02:	2043      	movs	r0, #67	; 0x43
 8002a04:	e7f8      	b.n	80029f8 <decHex+0x5c>
			hex[cnt] = 'D';
 8002a06:	466a      	mov	r2, sp
 8002a08:	5517      	strb	r7, [r2, r4]
		number = number / 16;
 8002a0a:	111b      	asrs	r3, r3, #4
		cnt++;
 8002a0c:	3401      	adds	r4, #1
 8002a0e:	e7d9      	b.n	80029c4 <decHex+0x28>
			hex[cnt] = 'E';
 8002a10:	466a      	mov	r2, sp
 8002a12:	5516      	strb	r6, [r2, r4]
			break;
 8002a14:	e7f9      	b.n	8002a0a <decHex+0x6e>
			hex[cnt] = 'F';
 8002a16:	466a      	mov	r2, sp
 8002a18:	5511      	strb	r1, [r2, r4]
			break;
 8002a1a:	e7f6      	b.n	8002a0a <decHex+0x6e>
			hex[cnt] = (number % 16) + 0x30; /*converted into char value*/
 8002a1c:	3030      	adds	r0, #48	; 0x30
 8002a1e:	e7eb      	b.n	80029f8 <decHex+0x5c>
		buff[j] = hex[i];
 8002a20:	466b      	mov	r3, sp
 8002a22:	5d1b      	ldrb	r3, [r3, r4]
	for (i = (cnt - 1); i >= 0; i--) {
 8002a24:	3c01      	subs	r4, #1
		buff[j] = hex[i];
 8002a26:	702b      	strb	r3, [r5, #0]
 8002a28:	3501      	adds	r5, #1
 8002a2a:	e7e1      	b.n	80029f0 <decHex+0x54>
 8002a2c:	08003a0b 	.word	0x08003a0b

08002a30 <check_size_info>:
	}
	*i = 0;

}

void check_size_info(int size, char*buff) {
 8002a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a32:	000c      	movs	r4, r1
	if(size == 2){
 8002a34:	2802      	cmp	r0, #2
 8002a36:	d114      	bne.n	8002a62 <check_size_info+0x32>
		char dado[4] = "";
 8002a38:	2500      	movs	r5, #0
		switch (strlen(buff)) {
 8002a3a:	0008      	movs	r0, r1
		char dado[4] = "";
 8002a3c:	9500      	str	r5, [sp, #0]
		switch (strlen(buff)) {
 8002a3e:	f7fd fb63 	bl	8000108 <strlen>
 8002a42:	2802      	cmp	r0, #2
 8002a44:	d057      	beq.n	8002af6 <check_size_info+0xc6>
 8002a46:	2803      	cmp	r0, #3
 8002a48:	d00a      	beq.n	8002a60 <check_size_info+0x30>
 8002a4a:	2330      	movs	r3, #48	; 0x30
 8002a4c:	2801      	cmp	r0, #1
 8002a4e:	d103      	bne.n	8002a58 <check_size_info+0x28>
			dado[2] = 48;
			strcat(dado, buff);
			strcpy(buff, dado);
			break;
		case (4):
			dado[0] = 48;
 8002a50:	466a      	mov	r2, sp
 8002a52:	7013      	strb	r3, [r2, #0]
			dado[1] = 48;
 8002a54:	7053      	strb	r3, [r2, #1]
 8002a56:	e036      	b.n	8002ac6 <check_size_info+0x96>
			buff[0] = 48;
 8002a58:	7023      	strb	r3, [r4, #0]
			buff[1] = 48;
 8002a5a:	7063      	strb	r3, [r4, #1]
			buff[2] = 48;
 8002a5c:	70a3      	strb	r3, [r4, #2]
			buff[3] = 0;
 8002a5e:	70e5      	strb	r5, [r4, #3]
			buff[6] = 0;
			break;
		}

		}
}
 8002a60:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		else if (size==4){
 8002a62:	2804      	cmp	r0, #4
 8002a64:	d114      	bne.n	8002a90 <check_size_info+0x60>
		char dado[5] = "";
 8002a66:	2500      	movs	r5, #0
 8002a68:	466b      	mov	r3, sp
		switch (strlen(buff)) {
 8002a6a:	0008      	movs	r0, r1
		char dado[5] = "";
 8002a6c:	9500      	str	r5, [sp, #0]
 8002a6e:	711d      	strb	r5, [r3, #4]
		switch (strlen(buff)) {
 8002a70:	f7fd fb4a 	bl	8000108 <strlen>
 8002a74:	3801      	subs	r0, #1
 8002a76:	2803      	cmp	r0, #3
 8002a78:	d803      	bhi.n	8002a82 <check_size_info+0x52>
 8002a7a:	f7fd fb4d 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002a7e:	3a34      	.short	0x3a34
 8002a80:	f13c      	.short	0xf13c
			buff[0] = 48;
 8002a82:	2330      	movs	r3, #48	; 0x30
			buff[4] = 0;
 8002a84:	7125      	strb	r5, [r4, #4]
			buff[0] = 48;
 8002a86:	7023      	strb	r3, [r4, #0]
			buff[1] = 48;
 8002a88:	7063      	strb	r3, [r4, #1]
			buff[2] = 48;
 8002a8a:	70a3      	strb	r3, [r4, #2]
			buff[3] = 48;
 8002a8c:	70e3      	strb	r3, [r4, #3]
			break;
 8002a8e:	e7e7      	b.n	8002a60 <check_size_info+0x30>
		else if (size==6){
 8002a90:	2806      	cmp	r0, #6
 8002a92:	d1e5      	bne.n	8002a60 <check_size_info+0x30>
		char dado[7] = "";
 8002a94:	2500      	movs	r5, #0
 8002a96:	2203      	movs	r2, #3
 8002a98:	0029      	movs	r1, r5
 8002a9a:	a801      	add	r0, sp, #4
 8002a9c:	9500      	str	r5, [sp, #0]
 8002a9e:	f000 fdd0 	bl	8003642 <memset>
		switch (strlen(buff)) {
 8002aa2:	0020      	movs	r0, r4
 8002aa4:	f7fd fb30 	bl	8000108 <strlen>
 8002aa8:	3801      	subs	r0, #1
 8002aaa:	2805      	cmp	r0, #5
 8002aac:	d827      	bhi.n	8002afe <check_size_info+0xce>
 8002aae:	f7fd fb33 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002ab2:	1303      	.short	0x1303
 8002ab4:	d722201a 	.word	0xd722201a
			dado[0] = 48;
 8002ab8:	2330      	movs	r3, #48	; 0x30
 8002aba:	466a      	mov	r2, sp
 8002abc:	7013      	strb	r3, [r2, #0]
			dado[1] = 48;
 8002abe:	7053      	strb	r3, [r2, #1]
			dado[2] = 48;
 8002ac0:	7093      	strb	r3, [r2, #2]
			dado[3] = 48;
 8002ac2:	70d3      	strb	r3, [r2, #3]
			dado[4] = 48;
 8002ac4:	7113      	strb	r3, [r2, #4]
			strcat(dado, buff);
 8002ac6:	0021      	movs	r1, r4
 8002ac8:	4668      	mov	r0, sp
 8002aca:	f000 fdc2 	bl	8003652 <strcat>
			strcpy(buff, dado);
 8002ace:	4669      	mov	r1, sp
 8002ad0:	0020      	movs	r0, r4
 8002ad2:	f000 fdcb 	bl	800366c <strcpy>
			break;
 8002ad6:	e7c3      	b.n	8002a60 <check_size_info+0x30>
			dado[0] = 48;
 8002ad8:	2330      	movs	r3, #48	; 0x30
 8002ada:	466a      	mov	r2, sp
 8002adc:	7013      	strb	r3, [r2, #0]
			dado[1] = 48;
 8002ade:	7053      	strb	r3, [r2, #1]
			dado[2] = 48;
 8002ae0:	7093      	strb	r3, [r2, #2]
			dado[3] = 48;
 8002ae2:	70d3      	strb	r3, [r2, #3]
 8002ae4:	e7ef      	b.n	8002ac6 <check_size_info+0x96>
			dado[0] = 48;
 8002ae6:	2330      	movs	r3, #48	; 0x30
 8002ae8:	466a      	mov	r2, sp
 8002aea:	7013      	strb	r3, [r2, #0]
			dado[1] = 48;
 8002aec:	7053      	strb	r3, [r2, #1]
			dado[2] = 48;
 8002aee:	7093      	strb	r3, [r2, #2]
 8002af0:	e7e9      	b.n	8002ac6 <check_size_info+0x96>
			dado[0] = 48;
 8002af2:	2330      	movs	r3, #48	; 0x30
 8002af4:	e7ac      	b.n	8002a50 <check_size_info+0x20>
			dado[0] = 48;
 8002af6:	2330      	movs	r3, #48	; 0x30
 8002af8:	466a      	mov	r2, sp
 8002afa:	7013      	strb	r3, [r2, #0]
 8002afc:	e7e3      	b.n	8002ac6 <check_size_info+0x96>
			buff[0] = 48;
 8002afe:	2330      	movs	r3, #48	; 0x30
			buff[6] = 0;
 8002b00:	71a5      	strb	r5, [r4, #6]
			buff[0] = 48;
 8002b02:	7023      	strb	r3, [r4, #0]
			buff[1] = 48;
 8002b04:	7063      	strb	r3, [r4, #1]
			buff[2] = 48;
 8002b06:	70a3      	strb	r3, [r4, #2]
			buff[3] = 48;
 8002b08:	70e3      	strb	r3, [r4, #3]
			buff[4] = 48;
 8002b0a:	7123      	strb	r3, [r4, #4]
			buff[5] = 48;
 8002b0c:	7163      	strb	r3, [r4, #5]
}
 8002b0e:	e7a7      	b.n	8002a60 <check_size_info+0x30>

08002b10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b10:	b530      	push	{r4, r5, lr}
 8002b12:	b09d      	sub	sp, #116	; 0x74
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b14:	2238      	movs	r2, #56	; 0x38
 8002b16:	2100      	movs	r1, #0
 8002b18:	a80e      	add	r0, sp, #56	; 0x38
 8002b1a:	f000 fd92 	bl	8003642 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b1e:	2214      	movs	r2, #20
 8002b20:	2100      	movs	r1, #0
 8002b22:	4668      	mov	r0, sp
 8002b24:	f000 fd8d 	bl	8003642 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002b28:	2224      	movs	r2, #36	; 0x24
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	a805      	add	r0, sp, #20
 8002b2e:	f000 fd88 	bl	8003642 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b32:	4914      	ldr	r1, [pc, #80]	; (8002b84 <SystemClock_Config+0x74>)
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <SystemClock_Config+0x78>)
 8002b36:	680b      	ldr	r3, [r1, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b38:	2400      	movs	r4, #0
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002b44:	2310      	movs	r3, #16
 8002b46:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b48:	3b0f      	subs	r3, #15
 8002b4a:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002b4e:	250f      	movs	r5, #15
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002b50:	021b      	lsls	r3, r3, #8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002b52:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002b54:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b56:	9416      	str	r4, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b58:	9418      	str	r4, [sp, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002b5a:	f7fe fb05 	bl	8001168 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002b5e:	0021      	movs	r1, r4
 8002b60:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002b62:	9500      	str	r5, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002b64:	9401      	str	r4, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b66:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b68:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b6a:	9404      	str	r4, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002b6c:	f7fe fe5a 	bl	8001824 <HAL_RCC_ClockConfig>
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002b70:	a805      	add	r0, sp, #20
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002b72:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b74:	9407      	str	r4, [sp, #28]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b76:	9408      	str	r4, [sp, #32]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b78:	9409      	str	r4, [sp, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b7a:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002b7c:	f7fe ff96 	bl	8001aac <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8002b80:	b01d      	add	sp, #116	; 0x74
 8002b82:	bd30      	pop	{r4, r5, pc}
 8002b84:	40007000 	.word	0x40007000
 8002b88:	ffffe7ff 	.word	0xffffe7ff

08002b8c <blink>:

}

/* USER CODE BEGIN 4 */

void blink(uint8_t times) {
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int var = 0; var < times; ++var) {
		LED_ON
 8002b8e:	2580      	movs	r5, #128	; 0x80
 8002b90:	26a0      	movs	r6, #160	; 0xa0
void blink(uint8_t times) {
 8002b92:	0007      	movs	r7, r0
	for (int var = 0; var < times; ++var) {
 8002b94:	2400      	movs	r4, #0
		LED_ON
 8002b96:	006d      	lsls	r5, r5, #1
 8002b98:	05f6      	lsls	r6, r6, #23
	for (int var = 0; var < times; ++var) {
 8002b9a:	42bc      	cmp	r4, r7
 8002b9c:	db00      	blt.n	8002ba0 <blink+0x14>
		HAL_Delay(25);
		LED_OFF
		HAL_Delay(25);
	}

}
 8002b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LED_ON
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	0029      	movs	r1, r5
 8002ba4:	0030      	movs	r0, r6
 8002ba6:	f7fe f929 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8002baa:	2019      	movs	r0, #25
 8002bac:	f7fd fca2 	bl	80004f4 <HAL_Delay>
		LED_OFF
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	0029      	movs	r1, r5
 8002bb4:	0030      	movs	r0, r6
 8002bb6:	f7fe f921 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8002bba:	2019      	movs	r0, #25
 8002bbc:	f7fd fc9a 	bl	80004f4 <HAL_Delay>
	for (int var = 0; var < times; ++var) {
 8002bc0:	3401      	adds	r4, #1
 8002bc2:	e7ea      	b.n	8002b9a <blink+0xe>

08002bc4 <fn_fprint>:

void fn_fprint(char *data) {
 8002bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	0005      	movs	r5, r0
	int tamanho = strlen(data);
 8002bca:	f7fd fa9d 	bl	8000108 <strlen>
	char new_command[tamanho];
 8002bce:	466a      	mov	r2, sp
 8002bd0:	1dc3      	adds	r3, r0, #7
 8002bd2:	08db      	lsrs	r3, r3, #3
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	469d      	mov	sp, r3
	strcpy(new_command, data);
 8002bda:	0029      	movs	r1, r5
	int tamanho = strlen(data);
 8002bdc:	0004      	movs	r4, r0
	strcpy(new_command, data);
 8002bde:	4668      	mov	r0, sp
 8002be0:	f000 fd44 	bl	800366c <strcpy>
 8002be4:	466e      	mov	r6, sp
	char new_com[1]; // (uint8_t*)new_command;
	for (int var = 0; var < tamanho; ++var) {
 8002be6:	466d      	mov	r5, sp
 8002be8:	1bab      	subs	r3, r5, r6
 8002bea:	429c      	cmp	r4, r3
 8002bec:	dc01      	bgt.n	8002bf2 <fn_fprint+0x2e>
		new_com[0] = new_command[var];
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
	}
}
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		new_com[0] = new_command[var];
 8002bf2:	782b      	ldrb	r3, [r5, #0]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8002bf4:	2201      	movs	r2, #1
		new_com[0] = new_command[var];
 8002bf6:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8002bf8:	1d39      	adds	r1, r7, #4
 8002bfa:	230a      	movs	r3, #10
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <fn_fprint+0x44>)
 8002bfe:	f7ff fd45 	bl	800268c <HAL_UART_Transmit>
 8002c02:	3501      	adds	r5, #1
 8002c04:	e7f0      	b.n	8002be8 <fn_fprint+0x24>
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	20000390 	.word	0x20000390

08002c0c <main>:
int main(void) {
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002c0e:	2604      	movs	r6, #4
int main(void) {
 8002c10:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8002c12:	f7fd fc4d 	bl	80004b0 <HAL_Init>
	SystemClock_Config();
 8002c16:	f7ff ff7b 	bl	8002b10 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c1a:	2214      	movs	r2, #20
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	a805      	add	r0, sp, #20
 8002c20:	f000 fd0f 	bl	8003642 <memset>
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8002c24:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002c26:	4bb4      	ldr	r3, [pc, #720]	; (8002ef8 <main+0x2ec>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002c28:	2501      	movs	r5, #1
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin | WISOL_RST_Pin, GPIO_PIN_SET);
 8002c2c:	27c0      	movs	r7, #192	; 0xc0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002c2e:	4332      	orrs	r2, r6
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin | WISOL_RST_Pin, GPIO_PIN_SET);
 8002c34:	023f      	lsls	r7, r7, #8
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002c36:	4032      	ands	r2, r6
 8002c38:	9201      	str	r2, [sp, #4]
 8002c3a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8002c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3e:	2400      	movs	r4, #0
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8002c40:	4301      	orrs	r1, r0
 8002c42:	62d9      	str	r1, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002c44:	2102      	movs	r1, #2
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	4002      	ands	r2, r0
 8002c4a:	9202      	str	r2, [sp, #8]
 8002c4c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8002c50:	48aa      	ldr	r0, [pc, #680]	; (8002efc <main+0x2f0>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002c52:	432a      	orrs	r2, r5
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	402a      	ands	r2, r5
 8002c5a:	9203      	str	r2, [sp, #12]
 8002c5c:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	430a      	orrs	r2, r1
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8002c66:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002c68:	400b      	ands	r3, r1
 8002c6a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8002c6c:	3122      	adds	r1, #34	; 0x22
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002c6e:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8002c70:	f7fe f8c4 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin | WISOL_RST_Pin, GPIO_PIN_SET);
 8002c74:	002a      	movs	r2, r5
 8002c76:	0039      	movs	r1, r7
 8002c78:	48a0      	ldr	r0, [pc, #640]	; (8002efc <main+0x2f0>)
 8002c7a:	f7fe f8bf 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,
 8002c7e:	219f      	movs	r1, #159	; 0x9f
 8002c80:	20a0      	movs	r0, #160	; 0xa0
 8002c82:	2200      	movs	r2, #0
 8002c84:	0209      	lsls	r1, r1, #8
 8002c86:	05c0      	lsls	r0, r0, #23
 8002c88:	f7fe f8b8 	bl	8000dfc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8002c8c:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8002c8e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8002c90:	019b      	lsls	r3, r3, #6
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8002c92:	489b      	ldr	r0, [pc, #620]	; (8002f00 <main+0x2f4>)
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8002c94:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c96:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8002c9a:	f7fd ff79 	bl	8000b90 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8002c9e:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca0:	2703      	movs	r7, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca2:	a905      	add	r1, sp, #20
 8002ca4:	4896      	ldr	r0, [pc, #600]	; (8002f00 <main+0x2f4>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca6:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002caa:	f7fd ff71 	bl	8000b90 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cae:	a905      	add	r1, sp, #20
 8002cb0:	4894      	ldr	r0, [pc, #592]	; (8002f04 <main+0x2f8>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002cb2:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb4:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cb8:	f7fd ff6a 	bl	8000b90 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = HC_SR04_TRG_Pin | HC_SR04_PULSE_Pin;
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	a905      	add	r1, sp, #20
 8002cc2:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = HC_SR04_TRG_Pin | HC_SR04_PULSE_Pin;
 8002cc4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc6:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cca:	f7fd ff61 	bl	8000b90 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EXT_INT1_XL_Pin | EXT_INT_MAG_Pin | GPS_EXTI_Pin
 8002cce:	4b8e      	ldr	r3, [pc, #568]	; (8002f08 <main+0x2fc>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = EXT_INT1_XL_Pin | EXT_INT_MAG_Pin | GPS_EXTI_Pin
 8002cd2:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd4:	4b8d      	ldr	r3, [pc, #564]	; (8002f0c <main+0x300>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	4889      	ldr	r0, [pc, #548]	; (8002efc <main+0x2f0>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd8:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cdc:	f7fd ff58 	bl	8000b90 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin
 8002ce0:	4b8b      	ldr	r3, [pc, #556]	; (8002f10 <main+0x304>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce2:	a905      	add	r1, sp, #20
 8002ce4:	4885      	ldr	r0, [pc, #532]	; (8002efc <main+0x2f0>)
	GPIO_InitStruct.Pin = GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin
 8002ce6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce8:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	f7fd ff4f 	bl	8000b90 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_LED_Pin | EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin
 8002cf2:	239f      	movs	r3, #159	; 0x9f
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = GPIO_LED_Pin | EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin
 8002cf6:	021b      	lsls	r3, r3, #8
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	a905      	add	r1, sp, #20
 8002cfa:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = GPIO_LED_Pin | EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin
 8002cfc:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfe:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d04:	f7fd ff44 	bl	8000b90 <HAL_GPIO_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002d08:	2208      	movs	r2, #8
 8002d0a:	0021      	movs	r1, r4
 8002d0c:	a805      	add	r0, sp, #20
 8002d0e:	f000 fc98 	bl	8003642 <memset>
	hadc.Instance = ADC1;
 8002d12:	4f80      	ldr	r7, [pc, #512]	; (8002f14 <main+0x308>)
 8002d14:	4b80      	ldr	r3, [pc, #512]	; (8002f18 <main+0x30c>)
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8002d16:	0038      	movs	r0, r7
	hadc.Instance = ADC1;
 8002d18:	603b      	str	r3, [r7, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002d1a:	23c0      	movs	r3, #192	; 0xc0
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	607b      	str	r3, [r7, #4]
	hadc.Init.ContinuousConvMode = DISABLE;
 8002d20:	197b      	adds	r3, r7, r5
 8002d22:	77dc      	strb	r4, [r3, #31]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8002d24:	1cbb      	adds	r3, r7, #2
 8002d26:	77dc      	strb	r4, [r3, #31]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d28:	23c2      	movs	r3, #194	; 0xc2
 8002d2a:	33ff      	adds	r3, #255	; 0xff
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8002d2e:	003b      	movs	r3, r7
 8002d30:	332c      	adds	r3, #44	; 0x2c
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002d32:	613d      	str	r5, [r7, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d34:	617e      	str	r6, [r7, #20]
	hadc.Init.OversamplingMode = DISABLE;
 8002d36:	63fc      	str	r4, [r7, #60]	; 0x3c
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002d38:	60bc      	str	r4, [r7, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d3a:	63bc      	str	r4, [r7, #56]	; 0x38
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d3c:	60fc      	str	r4, [r7, #12]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d3e:	62bc      	str	r4, [r7, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8002d40:	701c      	strb	r4, [r3, #0]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d42:	633c      	str	r4, [r7, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8002d44:	61bc      	str	r4, [r7, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002d46:	637c      	str	r4, [r7, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002d48:	61fc      	str	r4, [r7, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8002d4a:	f7fd fbf9 	bl	8000540 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_4;
 8002d4e:	4b73      	ldr	r3, [pc, #460]	; (8002f1c <main+0x310>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002d50:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_4;
 8002d52:	9305      	str	r3, [sp, #20]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002d54:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002d56:	0038      	movs	r0, r7
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002d58:	015b      	lsls	r3, r3, #5
 8002d5a:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002d5c:	f7fd fdc0 	bl	80008e0 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_5;
 8002d60:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <main+0x314>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002d62:	a905      	add	r1, sp, #20
 8002d64:	0038      	movs	r0, r7
	sConfig.Channel = ADC_CHANNEL_5;
 8002d66:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002d68:	f7fd fdba 	bl	80008e0 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002d6c:	4b6d      	ldr	r3, [pc, #436]	; (8002f24 <main+0x318>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002d6e:	a905      	add	r1, sp, #20
 8002d70:	0038      	movs	r0, r7
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002d72:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002d74:	f7fd fdb4 	bl	80008e0 <HAL_ADC_ConfigChannel>
	hi2c1.Instance = I2C1;
 8002d78:	4e6b      	ldr	r6, [pc, #428]	; (8002f28 <main+0x31c>)
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <main+0x320>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002d7c:	0030      	movs	r0, r6
	hi2c1.Instance = I2C1;
 8002d7e:	6033      	str	r3, [r6, #0]
	hi2c1.Init.Timing = 0x00000708;
 8002d80:	23e1      	movs	r3, #225	; 0xe1
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	6073      	str	r3, [r6, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d86:	60f5      	str	r5, [r6, #12]
	hi2c1.Init.OwnAddress1 = 0;
 8002d88:	60b4      	str	r4, [r6, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d8a:	6134      	str	r4, [r6, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002d8c:	6174      	str	r4, [r6, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d8e:	61b4      	str	r4, [r6, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d90:	61f4      	str	r4, [r6, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d92:	6234      	str	r4, [r6, #32]
	hlpuart1.Init.BaudRate = 9600;
 8002d94:	2796      	movs	r7, #150	; 0x96
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002d96:	f7fe f873 	bl	8000e80 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002d9a:	0021      	movs	r1, r4
 8002d9c:	0030      	movs	r0, r6
 8002d9e:	f7fe f91f 	bl	8000fe0 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002da2:	0030      	movs	r0, r6
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002da4:	260c      	movs	r6, #12
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002da6:	0021      	movs	r1, r4
 8002da8:	f7fe f960 	bl	800106c <HAL_I2CEx_ConfigDigitalFilter>
	hlpuart1.Instance = LPUART1;
 8002dac:	4860      	ldr	r0, [pc, #384]	; (8002f30 <main+0x324>)
 8002dae:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <main+0x328>)
	hlpuart1.Init.BaudRate = 9600;
 8002db0:	01bf      	lsls	r7, r7, #6
	hlpuart1.Instance = LPUART1;
 8002db2:	6003      	str	r3, [r0, #0]
	hlpuart1.Init.BaudRate = 9600;
 8002db4:	6047      	str	r7, [r0, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002db6:	6084      	str	r4, [r0, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002db8:	60c4      	str	r4, [r0, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002dba:	6104      	str	r4, [r0, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002dbc:	6146      	str	r6, [r0, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dbe:	6184      	str	r4, [r0, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dc0:	6204      	str	r4, [r0, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dc2:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8002dc4:	f7ff fd80 	bl	80028c8 <HAL_UART_Init>
	huart1.Instance = USART1;
 8002dc8:	485b      	ldr	r0, [pc, #364]	; (8002f38 <main+0x32c>)
 8002dca:	4b5c      	ldr	r3, [pc, #368]	; (8002f3c <main+0x330>)
	huart1.Init.BaudRate = 9600;
 8002dcc:	6047      	str	r7, [r0, #4]
	huart1.Instance = USART1;
 8002dce:	6003      	str	r3, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd0:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002dd2:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002dd4:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002dd6:	6146      	str	r6, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd8:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dda:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ddc:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dde:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002de0:	f7ff fd72 	bl	80028c8 <HAL_UART_Init>
	huart2.Instance = USART2;
 8002de4:	4856      	ldr	r0, [pc, #344]	; (8002f40 <main+0x334>)
 8002de6:	4b57      	ldr	r3, [pc, #348]	; (8002f44 <main+0x338>)
	huart2.Init.BaudRate = 9600;
 8002de8:	6047      	str	r7, [r0, #4]
	huart2.Instance = USART2;
 8002dea:	6003      	str	r3, [r0, #0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dec:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002dee:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002df0:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002df2:	6146      	str	r6, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df4:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df6:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df8:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dfa:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002dfc:	f7ff fd64 	bl	80028c8 <HAL_UART_Init>
	huart4.Instance = USART4;
 8002e00:	4851      	ldr	r0, [pc, #324]	; (8002f48 <main+0x33c>)
 8002e02:	4b52      	ldr	r3, [pc, #328]	; (8002f4c <main+0x340>)
	huart4.Init.BaudRate = 9600;
 8002e04:	6047      	str	r7, [r0, #4]
	huart4.Instance = USART4;
 8002e06:	6003      	str	r3, [r0, #0]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e08:	6084      	str	r4, [r0, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002e0a:	60c4      	str	r4, [r0, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002e0c:	6104      	str	r4, [r0, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002e0e:	6146      	str	r6, [r0, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e10:	6184      	str	r4, [r0, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e12:	61c4      	str	r4, [r0, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e14:	6204      	str	r4, [r0, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e16:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002e18:	f7ff fd56 	bl	80028c8 <HAL_UART_Init>
	huart5.Instance = USART5;
 8002e1c:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <main+0x344>)
 8002e1e:	484d      	ldr	r0, [pc, #308]	; (8002f54 <main+0x348>)
 8002e20:	6003      	str	r3, [r0, #0]
	huart5.Init.BaudRate = 9600;
 8002e22:	6047      	str	r7, [r0, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e24:	6084      	str	r4, [r0, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002e26:	60c4      	str	r4, [r0, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8002e28:	6104      	str	r4, [r0, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002e2a:	6146      	str	r6, [r0, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2c:	6184      	str	r4, [r0, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e2e:	61c4      	str	r4, [r0, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e30:	6204      	str	r4, [r0, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e32:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002e34:	f7ff fd48 	bl	80028c8 <HAL_UART_Init>
	blink(10);
 8002e38:	200a      	movs	r0, #10
 8002e3a:	f7ff fea7 	bl	8002b8c <blink>
	fn_fprint("START PROGRAM\r\n");
 8002e3e:	4846      	ldr	r0, [pc, #280]	; (8002f58 <main+0x34c>)
 8002e40:	f7ff fec0 	bl	8002bc4 <fn_fprint>
	SIGFOX_ON
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	20a0      	movs	r0, #160	; 0xa0
 8002e48:	002a      	movs	r2, r5
 8002e4a:	0209      	lsls	r1, r1, #8
 8002e4c:	05c0      	lsls	r0, r0, #23
 8002e4e:	f7fd ffd5 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002e52:	20fa      	movs	r0, #250	; 0xfa
 8002e54:	0080      	lsls	r0, r0, #2
 8002e56:	f7fd fb4d 	bl	80004f4 <HAL_Delay>
	fn_at_sigfox();
 8002e5a:	f000 f927 	bl	80030ac <fn_at_sigfox>
	HAL_Delay(100);
 8002e5e:	2064      	movs	r0, #100	; 0x64
 8002e60:	f7fd fb48 	bl	80004f4 <HAL_Delay>
	fn_init_sigfox();
 8002e64:	f000 f89c 	bl	8002fa0 <fn_init_sigfox>
	HAL_Delay(100);
 8002e68:	2064      	movs	r0, #100	; 0x64
 8002e6a:	f7fd fb43 	bl	80004f4 <HAL_Delay>
	fn_get_id_sigfox();
 8002e6e:	f000 f8f1 	bl	8003054 <fn_get_id_sigfox>
	fn_fprint("SIGFOX ID: ");
 8002e72:	483a      	ldr	r0, [pc, #232]	; (8002f5c <main+0x350>)
 8002e74:	f7ff fea6 	bl	8002bc4 <fn_fprint>
	fn_fprint(st_sigfox_parameters.id);
 8002e78:	4839      	ldr	r0, [pc, #228]	; (8002f60 <main+0x354>)
 8002e7a:	f7ff fea3 	bl	8002bc4 <fn_fprint>
	fn_fprint("\r\n");
 8002e7e:	4d39      	ldr	r5, [pc, #228]	; (8002f64 <main+0x358>)
 8002e80:	0028      	movs	r0, r5
 8002e82:	f7ff fe9f 	bl	8002bc4 <fn_fprint>
	HAL_Delay(100);
 8002e86:	2064      	movs	r0, #100	; 0x64
 8002e88:	f7fd fb34 	bl	80004f4 <HAL_Delay>
	fn_get_temperature_sigfox();
 8002e8c:	f000 f954 	bl	8003138 <fn_get_temperature_sigfox>
	fn_fprint("SIGFOX TEMPERATURE: ");
 8002e90:	4835      	ldr	r0, [pc, #212]	; (8002f68 <main+0x35c>)
 8002e92:	f7ff fe97 	bl	8002bc4 <fn_fprint>
	fn_fprint(st_sigfox_parameters.temperature);
 8002e96:	4835      	ldr	r0, [pc, #212]	; (8002f6c <main+0x360>)
 8002e98:	f7ff fe94 	bl	8002bc4 <fn_fprint>
	fn_fprint("\r\n");
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	f7ff fe91 	bl	8002bc4 <fn_fprint>
	HAL_Delay(100);
 8002ea2:	2064      	movs	r0, #100	; 0x64
 8002ea4:	f7fd fb26 	bl	80004f4 <HAL_Delay>
	fn_get_volt_sigfox();
 8002ea8:	f000 f918 	bl	80030dc <fn_get_volt_sigfox>
	fn_fprint("SIGFOX VOLTS: ");
 8002eac:	4830      	ldr	r0, [pc, #192]	; (8002f70 <main+0x364>)
 8002eae:	f7ff fe89 	bl	8002bc4 <fn_fprint>
	fn_fprint(st_sigfox_parameters.volts);
 8002eb2:	4830      	ldr	r0, [pc, #192]	; (8002f74 <main+0x368>)
 8002eb4:	f7ff fe86 	bl	8002bc4 <fn_fprint>
	fn_fprint("\r\n");
 8002eb8:	0028      	movs	r0, r5
 8002eba:	f7ff fe83 	bl	8002bc4 <fn_fprint>
	HAL_Delay(100);
 8002ebe:	2064      	movs	r0, #100	; 0x64
 8002ec0:	f7fd fb18 	bl	80004f4 <HAL_Delay>
	SIGFOX_OFF
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	20a0      	movs	r0, #160	; 0xa0
 8002ec8:	0022      	movs	r2, r4
 8002eca:	0209      	lsls	r1, r1, #8
 8002ecc:	05c0      	lsls	r0, r0, #23
 8002ece:	f7fd ff95 	bl	8000dfc <HAL_GPIO_WritePin>
		blink(10);
 8002ed2:	200a      	movs	r0, #10
 8002ed4:	f7ff fe5a 	bl	8002b8c <blink>
		fn_send_start_frame_sigfox();
 8002ed8:	f000 f95a 	bl	8003190 <fn_send_start_frame_sigfox>
		fn_fprint("SIGFOX SEND FRAME: ");
 8002edc:	4826      	ldr	r0, [pc, #152]	; (8002f78 <main+0x36c>)
 8002ede:	f7ff fe71 	bl	8002bc4 <fn_fprint>
		fn_fprint(st_sigfox_frame.test);
 8002ee2:	4826      	ldr	r0, [pc, #152]	; (8002f7c <main+0x370>)
 8002ee4:	f7ff fe6e 	bl	8002bc4 <fn_fprint>
		fn_fprint("\r\n");
 8002ee8:	0028      	movs	r0, r5
 8002eea:	f7ff fe6b 	bl	8002bc4 <fn_fprint>
		HAL_Delay(600000);
 8002eee:	4824      	ldr	r0, [pc, #144]	; (8002f80 <main+0x374>)
 8002ef0:	f7fd fb00 	bl	80004f4 <HAL_Delay>
 8002ef4:	e7ed      	b.n	8002ed2 <main+0x2c6>
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	50000400 	.word	0x50000400
 8002f00:	50000800 	.word	0x50000800
 8002f04:	50001c00 	.word	0x50001c00
 8002f08:	00003003 	.word	0x00003003
 8002f0c:	10110000 	.word	0x10110000
 8002f10:	0000c024 	.word	0x0000c024
 8002f14:	20000510 	.word	0x20000510
 8002f18:	40012400 	.word	0x40012400
 8002f1c:	10000010 	.word	0x10000010
 8002f20:	14000020 	.word	0x14000020
 8002f24:	48040000 	.word	0x48040000
 8002f28:	20000344 	.word	0x20000344
 8002f2c:	40005400 	.word	0x40005400
 8002f30:	20000390 	.word	0x20000390
 8002f34:	40004800 	.word	0x40004800
 8002f38:	20000228 	.word	0x20000228
 8002f3c:	40013800 	.word	0x40013800
 8002f40:	20000490 	.word	0x20000490
 8002f44:	40004400 	.word	0x40004400
 8002f48:	20000410 	.word	0x20000410
 8002f4c:	40004c00 	.word	0x40004c00
 8002f50:	40005000 	.word	0x40005000
 8002f54:	200002c4 	.word	0x200002c4
 8002f58:	08003a0d 	.word	0x08003a0d
 8002f5c:	08003a1d 	.word	0x08003a1d
 8002f60:	200001f4 	.word	0x200001f4
 8002f64:	08003a93 	.word	0x08003a93
 8002f68:	08003a29 	.word	0x08003a29
 8002f6c:	20000210 	.word	0x20000210
 8002f70:	08003a3e 	.word	0x08003a3e
 8002f74:	20000217 	.word	0x20000217
 8002f78:	08003a4d 	.word	0x08003a4d
 8002f7c:	200002ac 	.word	0x200002ac
 8002f80:	000927c0 	.word	0x000927c0

08002f84 <HAL_UART_TxCpltCallback>:
 8002f84:	2201      	movs	r2, #1
 8002f86:	4b01      	ldr	r3, [pc, #4]	; (8002f8c <HAL_UART_TxCpltCallback+0x8>)
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	4770      	bx	lr
 8002f8c:	20000221 	.word	0x20000221

08002f90 <HAL_UART_RxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	UartReady = SET;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	UartReady = SET;
 8002f90:	2201      	movs	r2, #1
 8002f92:	4b01      	ldr	r3, [pc, #4]	; (8002f98 <HAL_UART_RxCpltCallback+0x8>)
 8002f94:	701a      	strb	r2, [r3, #0]
}
 8002f96:	4770      	bx	lr
 8002f98:	20000221 	.word	0x20000221

08002f9c <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8002f9c:	4770      	bx	lr
	...

08002fa0 <fn_init_sigfox>:
/*
 fn_init_sigfox
 funcao de configuracoes para a rede sigfox na regiao 2 e 4 alem da possibilidade de utilizar na dongle com downlink
 parta tal deve-se definir a DONGLE_KEY
 */
void fn_init_sigfox() {
 8002fa0:	b513      	push	{r0, r1, r4, lr}
	char ok[4];
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$P=0\r\n", 8, 100);
 8002fa2:	4c26      	ldr	r4, [pc, #152]	; (800303c <fn_init_sigfox+0x9c>)
 8002fa4:	2364      	movs	r3, #100	; 0x64
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	4925      	ldr	r1, [pc, #148]	; (8003040 <fn_init_sigfox+0xa0>)
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7ff fb6e 	bl	800268c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8002fb0:	a901      	add	r1, sp, #4
 8002fb2:	2364      	movs	r3, #100	; 0x64
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	0020      	movs	r0, r4
 8002fb8:	f7ff fbd2 	bl	8002760 <HAL_UART_Receive>
	HAL_Delay(10);
 8002fbc:	200a      	movs	r0, #10
 8002fbe:	f7fd fa99 	bl	80004f4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$DR=905200000\r\n", 17, 100);
 8002fc2:	2364      	movs	r3, #100	; 0x64
 8002fc4:	2211      	movs	r2, #17
 8002fc6:	491f      	ldr	r1, [pc, #124]	; (8003044 <fn_init_sigfox+0xa4>)
 8002fc8:	0020      	movs	r0, r4
 8002fca:	f7ff fb5f 	bl	800268c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8002fce:	a901      	add	r1, sp, #4
 8002fd0:	2364      	movs	r3, #100	; 0x64
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	0020      	movs	r0, r4
 8002fd6:	f7ff fbc3 	bl	8002760 <HAL_UART_Receive>
	HAL_Delay(10);
 8002fda:	200a      	movs	r0, #10
 8002fdc:	f7fd fa8a 	bl	80004f4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$IF=902200000\r\n", 17, 100);
 8002fe0:	2364      	movs	r3, #100	; 0x64
 8002fe2:	2211      	movs	r2, #17
 8002fe4:	4918      	ldr	r1, [pc, #96]	; (8003048 <fn_init_sigfox+0xa8>)
 8002fe6:	0020      	movs	r0, r4
 8002fe8:	f7ff fb50 	bl	800268c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8002fec:	a901      	add	r1, sp, #4
 8002fee:	2364      	movs	r3, #100	; 0x64
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	0020      	movs	r0, r4
 8002ff4:	f7ff fbb4 	bl	8002760 <HAL_UART_Receive>
	HAL_Delay(10);
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f7fd fa7b 	bl	80004f4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$WR\r\n", 7, 100);
 8002ffe:	2364      	movs	r3, #100	; 0x64
 8003000:	2207      	movs	r2, #7
 8003002:	4912      	ldr	r1, [pc, #72]	; (800304c <fn_init_sigfox+0xac>)
 8003004:	0020      	movs	r0, r4
 8003006:	f7ff fb41 	bl	800268c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 800300a:	a901      	add	r1, sp, #4
 800300c:	2364      	movs	r3, #100	; 0x64
 800300e:	2204      	movs	r2, #4
 8003010:	0020      	movs	r0, r4
 8003012:	f7ff fba5 	bl	8002760 <HAL_UART_Receive>
	HAL_Delay(10);
 8003016:	200a      	movs	r0, #10
 8003018:	f7fd fa6c 	bl	80004f4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$RC\r\n", 7, 100);
 800301c:	2364      	movs	r3, #100	; 0x64
 800301e:	2207      	movs	r2, #7
 8003020:	490b      	ldr	r1, [pc, #44]	; (8003050 <fn_init_sigfox+0xb0>)
 8003022:	0020      	movs	r0, r4
 8003024:	f7ff fb32 	bl	800268c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8003028:	2364      	movs	r3, #100	; 0x64
 800302a:	2204      	movs	r2, #4
 800302c:	a901      	add	r1, sp, #4
 800302e:	0020      	movs	r0, r4
 8003030:	f7ff fb96 	bl	8002760 <HAL_UART_Receive>
	HAL_Delay(10);
 8003034:	200a      	movs	r0, #10
 8003036:	f7fd fa5d 	bl	80004f4 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)"ATS410=1\r\n",11);//ATS410=1 private key ; ATS410=0 public key
	//HAL_UART_Receive_IT(&huart1,(uint8_t*)ok,4,10);
	HAL_Delay(500);
#endif

}
 800303a:	bd13      	pop	{r0, r1, r4, pc}
 800303c:	20000228 	.word	0x20000228
 8003040:	08003a69 	.word	0x08003a69
 8003044:	08003a72 	.word	0x08003a72
 8003048:	08003a84 	.word	0x08003a84
 800304c:	08003a96 	.word	0x08003a96
 8003050:	08003a9e 	.word	0x08003a9e

08003054 <fn_get_id_sigfox>:

//pegar id
void fn_get_id_sigfox() {
 8003054:	b530      	push	{r4, r5, lr}
 8003056:	b085      	sub	sp, #20

	char command[9] = "AT$I=10\r\n";
 8003058:	2209      	movs	r2, #9
 800305a:	4910      	ldr	r1, [pc, #64]	; (800309c <fn_get_id_sigfox+0x48>)
 800305c:	a801      	add	r0, sp, #4
 800305e:	f000 fae7 	bl	8003630 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 9);
 8003062:	4d0f      	ldr	r5, [pc, #60]	; (80030a0 <fn_get_id_sigfox+0x4c>)
 8003064:	2209      	movs	r2, #9
 8003066:	a901      	add	r1, sp, #4
 8003068:	0028      	movs	r0, r5
 800306a:	f7fe feb5 	bl	8001dd8 <HAL_UART_Transmit_IT>
	while (UartReady != SET) {
 800306e:	4c0d      	ldr	r4, [pc, #52]	; (80030a4 <fn_get_id_sigfox+0x50>)
 8003070:	7823      	ldrb	r3, [r4, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d1fc      	bne.n	8003070 <fn_get_id_sigfox+0x1c>
	}
	//Reset transmission flag
	UartReady = RESET;
 8003076:	2300      	movs	r3, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.id, 10);
 8003078:	220a      	movs	r2, #10
 800307a:	490b      	ldr	r1, [pc, #44]	; (80030a8 <fn_get_id_sigfox+0x54>)
 800307c:	0028      	movs	r0, r5
	UartReady = RESET;
 800307e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.id, 10);
 8003080:	f7fe fee8 	bl	8001e54 <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 8003084:	7823      	ldrb	r3, [r4, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d103      	bne.n	8003092 <fn_get_id_sigfox+0x3e>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	7023      	strb	r3, [r4, #0]

}
 800308e:	b005      	add	sp, #20
 8003090:	bd30      	pop	{r4, r5, pc}
		blink(2);
 8003092:	2002      	movs	r0, #2
 8003094:	f7ff fd7a 	bl	8002b8c <blink>
 8003098:	e7f4      	b.n	8003084 <fn_get_id_sigfox+0x30>
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	0800380c 	.word	0x0800380c
 80030a0:	20000228 	.word	0x20000228
 80030a4:	20000221 	.word	0x20000221
 80030a8:	200001f4 	.word	0x200001f4

080030ac <fn_at_sigfox>:
	//Reset transmission flag8
	UartReady = RESET;
}

//dumy command
void fn_at_sigfox() {
 80030ac:	b513      	push	{r0, r1, r4, lr}

	char command[4] = "AT\r\n";
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <fn_at_sigfox+0x24>)
	//int at = 0;
	HAL_UART_Transmit(&huart1, (uint8_t*) command, 4, 100);
 80030b0:	4c08      	ldr	r4, [pc, #32]	; (80030d4 <fn_at_sigfox+0x28>)
	char command[4] = "AT\r\n";
 80030b2:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) command, 4, 100);
 80030b4:	a901      	add	r1, sp, #4
 80030b6:	2364      	movs	r3, #100	; 0x64
 80030b8:	2204      	movs	r2, #4
 80030ba:	0020      	movs	r0, r4
 80030bc:	f7ff fae6 	bl	800268c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) st_sigfox_parameters.at, 4, 100);
 80030c0:	2364      	movs	r3, #100	; 0x64
 80030c2:	2204      	movs	r2, #4
 80030c4:	4904      	ldr	r1, [pc, #16]	; (80030d8 <fn_at_sigfox+0x2c>)
 80030c6:	0020      	movs	r0, r4
 80030c8:	f7ff fb4a 	bl	8002760 <HAL_UART_Receive>
	/*		if (st_sigfox_parameters.at[0] == 79
	 && st_sigfox_parameters.at[1] == 85) {
	 at = 1;
	 }
	 return at;*/
}
 80030cc:	bd13      	pop	{r0, r1, r4, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	0a0d5441 	.word	0x0a0d5441
 80030d4:	20000228 	.word	0x20000228
 80030d8:	2000021d 	.word	0x2000021d

080030dc <fn_get_volt_sigfox>:

//pegar a tensao no modulo sigfox
void fn_get_volt_sigfox() {
 80030dc:	b537      	push	{r0, r1, r2, r4, r5, lr}

	char command[7] = "AT$V?\r\n";
 80030de:	4911      	ldr	r1, [pc, #68]	; (8003124 <fn_get_volt_sigfox+0x48>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	3114      	adds	r1, #20
 80030e4:	4668      	mov	r0, sp
 80030e6:	f000 faa3 	bl	8003630 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 7);
 80030ea:	4d0f      	ldr	r5, [pc, #60]	; (8003128 <fn_get_volt_sigfox+0x4c>)
 80030ec:	2207      	movs	r2, #7
 80030ee:	4669      	mov	r1, sp
 80030f0:	0028      	movs	r0, r5
 80030f2:	f7fe fe71 	bl	8001dd8 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.volts, 6);
 80030f6:	4c0d      	ldr	r4, [pc, #52]	; (800312c <fn_get_volt_sigfox+0x50>)
 80030f8:	2206      	movs	r2, #6
 80030fa:	0021      	movs	r1, r4
 80030fc:	0028      	movs	r0, r5
 80030fe:	f7fe fea9 	bl	8001e54 <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <fn_get_volt_sigfox+0x54>)
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	2a01      	cmp	r2, #1
 8003108:	d107      	bne.n	800311a <fn_get_volt_sigfox+0x3e>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 800310a:	2200      	movs	r2, #0

	int_volt_sigfox = atoi(st_sigfox_parameters.volts);
 800310c:	0020      	movs	r0, r4
	UartReady = RESET;
 800310e:	701a      	strb	r2, [r3, #0]
	int_volt_sigfox = atoi(st_sigfox_parameters.volts);
 8003110:	f000 fa63 	bl	80035da <atoi>
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <fn_get_volt_sigfox+0x58>)
 8003116:	6018      	str	r0, [r3, #0]
}
 8003118:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		blink(2);
 800311a:	2002      	movs	r0, #2
 800311c:	f7ff fd36 	bl	8002b8c <blink>
 8003120:	e7ef      	b.n	8003102 <fn_get_volt_sigfox+0x26>
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	0800380c 	.word	0x0800380c
 8003128:	20000228 	.word	0x20000228
 800312c:	20000217 	.word	0x20000217
 8003130:	20000221 	.word	0x20000221
 8003134:	200002a8 	.word	0x200002a8

08003138 <fn_get_temperature_sigfox>:

//pegar a temperatura no mudulo sigfox
void fn_get_temperature_sigfox() {
 8003138:	b537      	push	{r0, r1, r2, r4, r5, lr}

	char command[8] = "AT$T?\r\n";
 800313a:	2208      	movs	r2, #8
 800313c:	490f      	ldr	r1, [pc, #60]	; (800317c <fn_get_temperature_sigfox+0x44>)
 800313e:	4668      	mov	r0, sp
 8003140:	f000 fa76 	bl	8003630 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 8);
 8003144:	4d0e      	ldr	r5, [pc, #56]	; (8003180 <fn_get_temperature_sigfox+0x48>)
 8003146:	2208      	movs	r2, #8
 8003148:	4669      	mov	r1, sp
 800314a:	0028      	movs	r0, r5
 800314c:	f7fe fe44 	bl	8001dd8 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.temperature,
 8003150:	4c0c      	ldr	r4, [pc, #48]	; (8003184 <fn_get_temperature_sigfox+0x4c>)
 8003152:	2207      	movs	r2, #7
 8003154:	0021      	movs	r1, r4
 8003156:	0028      	movs	r0, r5
 8003158:	f7fe fe7c 	bl	8001e54 <HAL_UART_Receive_IT>
			7);
	while (UartReady != SET) {
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <fn_get_temperature_sigfox+0x50>)
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	2a01      	cmp	r2, #1
 8003162:	d107      	bne.n	8003174 <fn_get_temperature_sigfox+0x3c>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 8003164:	2200      	movs	r2, #0

	int_temp_sigfox = atoi(st_sigfox_parameters.temperature);
 8003166:	0020      	movs	r0, r4
	UartReady = RESET;
 8003168:	701a      	strb	r2, [r3, #0]
	int_temp_sigfox = atoi(st_sigfox_parameters.temperature);
 800316a:	f000 fa36 	bl	80035da <atoi>
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <fn_get_temperature_sigfox+0x54>)
 8003170:	6018      	str	r0, [r3, #0]

}
 8003172:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		blink(2);
 8003174:	2002      	movs	r0, #2
 8003176:	f7ff fd09 	bl	8002b8c <blink>
 800317a:	e7ef      	b.n	800315c <fn_get_temperature_sigfox+0x24>
 800317c:	08003a61 	.word	0x08003a61
 8003180:	20000228 	.word	0x20000228
 8003184:	20000210 	.word	0x20000210
 8003188:	20000221 	.word	0x20000221
 800318c:	20000224 	.word	0x20000224

08003190 <fn_send_start_frame_sigfox>:

	strcpy(st_sigfox_frame.test, frame);
}

void fn_send_start_frame_sigfox() {
	SIGFOX_ON
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	20a0      	movs	r0, #160	; 0xa0
void fn_send_start_frame_sigfox() {
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
	fn_init_sigfox();
	fn_get_temperature_sigfox();
	fn_get_volt_sigfox();

	char start_machine_frame[15] = { 0 };
 8003196:	270f      	movs	r7, #15
	char ok[4] = { 0 };
 8003198:	2500      	movs	r5, #0
void fn_send_start_frame_sigfox() {
 800319a:	b089      	sub	sp, #36	; 0x24
	SIGFOX_ON
 800319c:	2201      	movs	r2, #1
 800319e:	0209      	lsls	r1, r1, #8
 80031a0:	05c0      	lsls	r0, r0, #23
	char start_machine_frame[15] = { 0 };
 80031a2:	ac04      	add	r4, sp, #16
	SIGFOX_ON
 80031a4:	f7fd fe2a 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80031a8:	2064      	movs	r0, #100	; 0x64
 80031aa:	f7fd f9a3 	bl	80004f4 <HAL_Delay>
	fn_init_sigfox();
 80031ae:	f7ff fef7 	bl	8002fa0 <fn_init_sigfox>
	fn_get_temperature_sigfox();
 80031b2:	f7ff ffc1 	bl	8003138 <fn_get_temperature_sigfox>
	fn_get_volt_sigfox();
 80031b6:	f7ff ff91 	bl	80030dc <fn_get_volt_sigfox>
	char start_machine_frame[15] = { 0 };
 80031ba:	003a      	movs	r2, r7
 80031bc:	2100      	movs	r1, #0
 80031be:	0020      	movs	r0, r4
 80031c0:	f000 fa3f 	bl	8003642 <memset>
	char buffer_start[7]={0};
 80031c4:	2207      	movs	r2, #7
 80031c6:	0029      	movs	r1, r5
 80031c8:	a802      	add	r0, sp, #8
	char ok[4] = { 0 };
 80031ca:	9501      	str	r5, [sp, #4]
	char buffer_start[7]={0};
 80031cc:	f000 fa39 	bl	8003642 <memset>

	start_machine_frame[0] = 65;
 80031d0:	2341      	movs	r3, #65	; 0x41
 80031d2:	7023      	strb	r3, [r4, #0]
	start_machine_frame[1] = 84;
 80031d4:	3313      	adds	r3, #19
 80031d6:	7063      	strb	r3, [r4, #1]
	start_machine_frame[2] = 36;
 80031d8:	3b30      	subs	r3, #48	; 0x30
 80031da:	70a3      	strb	r3, [r4, #2]
	start_machine_frame[3] = 83;
 80031dc:	332f      	adds	r3, #47	; 0x2f
 80031de:	70e3      	strb	r3, [r4, #3]
	start_machine_frame[4] = 70;
 80031e0:	3b0d      	subs	r3, #13
 80031e2:	7123      	strb	r3, [r4, #4]
	start_machine_frame[5] = 61;
 80031e4:	3b09      	subs	r3, #9
 80031e6:	7163      	strb	r3, [r4, #5]
	start_machine_frame[6] = 48;
 80031e8:	3b0d      	subs	r3, #13
 80031ea:	71a3      	strb	r3, [r4, #6]
	start_machine_frame[7] = 50;
 80031ec:	3302      	adds	r3, #2
 80031ee:	71e3      	strb	r3, [r4, #7]

	decHex(int_volt_sigfox,buffer_start);
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <fn_send_start_frame_sigfox+0xdc>)
 80031f2:	a902      	add	r1, sp, #8
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	f7ff fbd1 	bl	800299c <decHex>
	check_size_info(2,buffer_start);
 80031fa:	a902      	add	r1, sp, #8
 80031fc:	2002      	movs	r0, #2
 80031fe:	f7ff fc17 	bl	8002a30 <check_size_info>
	strcat(start_machine_frame,buffer_start);
 8003202:	a902      	add	r1, sp, #8
 8003204:	0020      	movs	r0, r4
 8003206:	f000 fa24 	bl	8003652 <strcat>

	decHex(int_temp_sigfox,buffer_start);
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <fn_send_start_frame_sigfox+0xe0>)
 800320c:	a902      	add	r1, sp, #8
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	f7ff fbc4 	bl	800299c <decHex>
	check_size_info(2,buffer_start);
 8003214:	a902      	add	r1, sp, #8
 8003216:	2002      	movs	r0, #2
 8003218:	f7ff fc0a 	bl	8002a30 <check_size_info>
	strcat(start_machine_frame,buffer_start);
 800321c:	a902      	add	r1, sp, #8
 800321e:	0020      	movs	r0, r4
 8003220:	f000 fa17 	bl	8003652 <strcat>

	start_machine_frame[12] = 13;
 8003224:	230d      	movs	r3, #13
	start_machine_frame[13] = 10;
	start_machine_frame[14] = 0;
	HAL_UART_Transmit(&huart1, (uint8_t*) start_machine_frame, 15,200);
 8003226:	4e13      	ldr	r6, [pc, #76]	; (8003274 <fn_send_start_frame_sigfox+0xe4>)
	start_machine_frame[12] = 13;
 8003228:	7323      	strb	r3, [r4, #12]
	start_machine_frame[13] = 10;
 800322a:	3b03      	subs	r3, #3
	HAL_UART_Transmit(&huart1, (uint8_t*) start_machine_frame, 15,200);
 800322c:	003a      	movs	r2, r7
 800322e:	0021      	movs	r1, r4
	start_machine_frame[13] = 10;
 8003230:	7363      	strb	r3, [r4, #13]
	HAL_UART_Transmit(&huart1, (uint8_t*) start_machine_frame, 15,200);
 8003232:	0030      	movs	r0, r6
 8003234:	33be      	adds	r3, #190	; 0xbe
	start_machine_frame[14] = 0;
 8003236:	73a5      	strb	r5, [r4, #14]
	HAL_UART_Transmit(&huart1, (uint8_t*) start_machine_frame, 15,200);
 8003238:	f7ff fa28 	bl	800268c <HAL_UART_Transmit>
	HAL_Delay(500);
 800323c:	20fa      	movs	r0, #250	; 0xfa
 800323e:	0040      	lsls	r0, r0, #1
 8003240:	f7fd f958 	bl	80004f4 <HAL_Delay>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4,200);
 8003244:	23c8      	movs	r3, #200	; 0xc8
 8003246:	a901      	add	r1, sp, #4
 8003248:	2204      	movs	r2, #4
 800324a:	0030      	movs	r0, r6
 800324c:	f7ff fa88 	bl	8002760 <HAL_UART_Receive>

	HAL_Delay(1000);
 8003250:	20fa      	movs	r0, #250	; 0xfa
 8003252:	0080      	lsls	r0, r0, #2
 8003254:	f7fd f94e 	bl	80004f4 <HAL_Delay>
	SIGFOX_OFF
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	20a0      	movs	r0, #160	; 0xa0
 800325c:	002a      	movs	r2, r5
 800325e:	0209      	lsls	r1, r1, #8
 8003260:	05c0      	lsls	r0, r0, #23
 8003262:	f7fd fdcb 	bl	8000dfc <HAL_GPIO_WritePin>
}
 8003266:	b009      	add	sp, #36	; 0x24
 8003268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	200002a8 	.word	0x200002a8
 8003270:	20000224 	.word	0x20000224
 8003274:	20000228 	.word	0x20000228

08003278 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003278:	2201      	movs	r2, #1
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_MspInit+0x18>)
 800327c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800327e:	430a      	orrs	r2, r1
 8003280:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003286:	0552      	lsls	r2, r2, #21
 8003288:	430a      	orrs	r2, r1
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800328c:	4770      	bx	lr
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003294:	b510      	push	{r4, lr}
 8003296:	0004      	movs	r4, r0
 8003298:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329a:	2214      	movs	r2, #20
 800329c:	2100      	movs	r1, #0
 800329e:	a801      	add	r0, sp, #4
 80032a0:	f000 f9cf 	bl	8003642 <memset>
  if(hadc->Instance==ADC1)
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_ADC_MspInit+0x4c>)
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d116      	bne.n	80032da <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <HAL_ADC_MspInit+0x50>)
 80032b0:	0092      	lsls	r2, r2, #2
 80032b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032b6:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b8:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	430a      	orrs	r2, r1
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	400b      	ands	r3, r1
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 80032cc:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 80032d0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032d2:	3b2d      	subs	r3, #45	; 0x2d
 80032d4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d6:	f7fd fc5b 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032da:	b006      	add	sp, #24
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	40012400 	.word	0x40012400
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032e8:	b510      	push	{r4, lr}
 80032ea:	0004      	movs	r4, r0
 80032ec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ee:	2214      	movs	r2, #20
 80032f0:	2100      	movs	r1, #0
 80032f2:	a801      	add	r0, sp, #4
 80032f4:	f000 f9a5 	bl	8003642 <memset>
  if(hi2c->Instance==I2C1)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_I2C_MspInit+0x58>)
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d11c      	bne.n	800333a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003300:	2102      	movs	r1, #2
 8003302:	4c10      	ldr	r4, [pc, #64]	; (8003344 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003304:	4810      	ldr	r0, [pc, #64]	; (8003348 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003306:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003308:	430a      	orrs	r2, r1
 800330a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800330c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800330e:	400b      	ands	r3, r1
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800331a:	2312      	movs	r3, #18
 800331c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800331e:	3b11      	subs	r3, #17
 8003320:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	185b      	adds	r3, r3, r1
 8003324:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003326:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003328:	3301      	adds	r3, #1
 800332a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332c:	f7fd fc30 	bl	8000b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003334:	039b      	lsls	r3, r3, #14
 8003336:	4313      	orrs	r3, r2
 8003338:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800333a:	b006      	add	sp, #24
 800333c:	bd10      	pop	{r4, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	40005400 	.word	0x40005400
 8003344:	40021000 	.word	0x40021000
 8003348:	50000400 	.word	0x50000400

0800334c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800334c:	b510      	push	{r4, lr}
 800334e:	0004      	movs	r4, r0
 8003350:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003352:	2214      	movs	r2, #20
 8003354:	2100      	movs	r1, #0
 8003356:	a805      	add	r0, sp, #20
 8003358:	f000 f973 	bl	8003642 <memset>
  if(huart->Instance==LPUART1)
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	4a56      	ldr	r2, [pc, #344]	; (80034b8 <HAL_UART_MspInit+0x16c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d123      	bne.n	80033ac <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	4b55      	ldr	r3, [pc, #340]	; (80034bc <HAL_UART_MspInit+0x170>)
 8003368:	02d2      	lsls	r2, r2, #11
 800336a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336c:	4854      	ldr	r0, [pc, #336]	; (80034c0 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800336e:	430a      	orrs	r2, r1
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	2202      	movs	r2, #2
 8003374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003376:	4311      	orrs	r1, r2
 8003378:	62d9      	str	r1, [r3, #44]	; 0x2c
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337e:	4013      	ands	r3, r2
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
 8003384:	23c0      	movs	r3, #192	; 0xc0
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338a:	2303      	movs	r3, #3
 800338c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 800338e:	3301      	adds	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8003392:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003394:	f7fd fbfc 	bl	8000b90 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8003398:	2200      	movs	r2, #0
 800339a:	201d      	movs	r0, #29
 800339c:	0011      	movs	r1, r2
 800339e:	f7fd fb6b 	bl	8000a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 80033a2:	201d      	movs	r0, #29
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART5 interrupt Init */
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80033a4:	f7fd fba2 	bl	8000aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80033a8:	b00a      	add	sp, #40	; 0x28
 80033aa:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 80033ac:	4a45      	ldr	r2, [pc, #276]	; (80034c4 <HAL_UART_MspInit+0x178>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d11d      	bne.n	80033ee <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	4b41      	ldr	r3, [pc, #260]	; (80034bc <HAL_UART_MspInit+0x170>)
 80033b6:	01d2      	lsls	r2, r2, #7
 80033b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ba:	4841      	ldr	r0, [pc, #260]	; (80034c0 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80033bc:	430a      	orrs	r2, r1
 80033be:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c0:	2202      	movs	r2, #2
 80033c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c4:	4311      	orrs	r1, r2
 80033c6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ca:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033cc:	4013      	ands	r3, r2
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SFOX_RX_Pin|SFOX_TX_Pin;
 80033d2:	23c0      	movs	r3, #192	; 0xc0
 80033d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d6:	3bbd      	subs	r3, #189	; 0xbd
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033da:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033dc:	f7fd fbd8 	bl	8000b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	201b      	movs	r0, #27
 80033e4:	0011      	movs	r1, r2
 80033e6:	f7fd fb47 	bl	8000a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033ea:	201b      	movs	r0, #27
 80033ec:	e7da      	b.n	80033a4 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART2)
 80033ee:	4a36      	ldr	r2, [pc, #216]	; (80034c8 <HAL_UART_MspInit+0x17c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d121      	bne.n	8003438 <HAL_UART_MspInit+0xec>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_UART_MspInit+0x170>)
 80033f8:	0292      	lsls	r2, r2, #10
 80033fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80033fe:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003400:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003408:	430a      	orrs	r2, r1
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	400b      	ands	r3, r1
 8003410:	9302      	str	r3, [sp, #8]
 8003412:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = US_RX_Pin|US_TX_Pin;
 8003414:	230c      	movs	r3, #12
 8003416:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	3b0a      	subs	r3, #10
 800341a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341c:	185b      	adds	r3, r3, r1
 800341e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003420:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003424:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f7fd fbb3 	bl	8000b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	201c      	movs	r0, #28
 800342e:	0011      	movs	r1, r2
 8003430:	f7fd fb22 	bl	8000a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003434:	201c      	movs	r0, #28
 8003436:	e7b5      	b.n	80033a4 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART4)
 8003438:	4a24      	ldr	r2, [pc, #144]	; (80034cc <HAL_UART_MspInit+0x180>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d120      	bne.n	8003480 <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART4_CLK_ENABLE();
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_UART_MspInit+0x170>)
 8003442:	0312      	lsls	r2, r2, #12
 8003444:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003446:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART4_CLK_ENABLE();
 8003448:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	2101      	movs	r1, #1
    __HAL_RCC_USART4_CLK_ENABLE();
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003452:	430a      	orrs	r2, r1
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	400b      	ands	r3, r1
 800345c:	9303      	str	r3, [sp, #12]
 800345e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 8003460:	2303      	movs	r3, #3
 8003462:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8003466:	18db      	adds	r3, r3, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800346a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	a905      	add	r1, sp, #20
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346e:	f7fd fb8f 	bl	8000b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	200e      	movs	r0, #14
 8003476:	0011      	movs	r1, r2
 8003478:	f7fd fafe 	bl	8000a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800347c:	200e      	movs	r0, #14
 800347e:	e791      	b.n	80033a4 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART5)
 8003480:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <HAL_UART_MspInit+0x184>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d000      	beq.n	8003488 <HAL_UART_MspInit+0x13c>
 8003486:	e78f      	b.n	80033a8 <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_UART_MspInit+0x170>)
 800348c:	0352      	lsls	r2, r2, #13
 800348e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003490:	480b      	ldr	r0, [pc, #44]	; (80034c0 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART5_CLK_ENABLE();
 8003492:	430a      	orrs	r2, r1
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003496:	2202      	movs	r2, #2
 8003498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800349a:	4311      	orrs	r1, r2
 800349c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	4013      	ands	r3, r2
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPRS_RX_Pin|GPRS_TX_Pin;
 80034a8:	2318      	movs	r3, #24
 80034aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	3b15      	subs	r3, #21
 80034ae:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80034b0:	3303      	adds	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80034b4:	9309      	str	r3, [sp, #36]	; 0x24
 80034b6:	e7da      	b.n	800346e <HAL_UART_MspInit+0x122>
 80034b8:	40004800 	.word	0x40004800
 80034bc:	40021000 	.word	0x40021000
 80034c0:	50000400 	.word	0x50000400
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40004400 	.word	0x40004400
 80034cc:	40004c00 	.word	0x40004c00
 80034d0:	40005000 	.word	0x40005000

080034d4 <NMI_Handler>:
 80034d4:	4770      	bx	lr

080034d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d6:	e7fe      	b.n	80034d6 <HardFault_Handler>

080034d8 <SVC_Handler>:
 80034d8:	4770      	bx	lr

080034da <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034da:	4770      	bx	lr

080034dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034de:	f7fc fffb 	bl	80004d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e2:	bd10      	pop	{r4, pc}

080034e4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80034e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80034e6:	4803      	ldr	r0, [pc, #12]	; (80034f4 <USART4_5_IRQHandler+0x10>)
 80034e8:	f7fe fd78 	bl	8001fdc <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <USART4_5_IRQHandler+0x14>)
 80034ee:	f7fe fd75 	bl	8001fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80034f2:	bd10      	pop	{r4, pc}
 80034f4:	20000410 	.word	0x20000410
 80034f8:	200002c4 	.word	0x200002c4

080034fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80034fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034fe:	4802      	ldr	r0, [pc, #8]	; (8003508 <USART1_IRQHandler+0xc>)
 8003500:	f7fe fd6c 	bl	8001fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003504:	bd10      	pop	{r4, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	20000228 	.word	0x20000228

0800350c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800350c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800350e:	4802      	ldr	r0, [pc, #8]	; (8003518 <USART2_IRQHandler+0xc>)
 8003510:	f7fe fd64 	bl	8001fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003514:	bd10      	pop	{r4, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	20000490 	.word	0x20000490

0800351c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 800351c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800351e:	4802      	ldr	r0, [pc, #8]	; (8003528 <RNG_LPUART1_IRQHandler+0xc>)
 8003520:	f7fe fd5c 	bl	8001fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8003524:	bd10      	pop	{r4, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000390 	.word	0x20000390

0800352c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <SystemInit+0x44>)
 8003530:	0052      	lsls	r2, r2, #1
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	490e      	ldr	r1, [pc, #56]	; (8003574 <SystemInit+0x48>)
 800353c:	400a      	ands	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	490d      	ldr	r1, [pc, #52]	; (8003578 <SystemInit+0x4c>)
 8003544:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003546:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003548:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	438a      	bics	r2, r1
 800354e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <SystemInit+0x50>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	4909      	ldr	r1, [pc, #36]	; (8003580 <SystemInit+0x54>)
 800355c:	400a      	ands	r2, r1
 800355e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <SystemInit+0x58>)
 8003568:	0512      	lsls	r2, r2, #20
 800356a:	609a      	str	r2, [r3, #8]
#endif
}
 800356c:	4770      	bx	lr
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	40021000 	.word	0x40021000
 8003574:	88ff400c 	.word	0x88ff400c
 8003578:	fef6fff6 	.word	0xfef6fff6
 800357c:	fffbffff 	.word	0xfffbffff
 8003580:	ff02ffff 	.word	0xff02ffff
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003588:	480d      	ldr	r0, [pc, #52]	; (80035c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800358a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800358c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800358e:	e003      	b.n	8003598 <LoopCopyDataInit>

08003590 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003592:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003594:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003596:	3104      	adds	r1, #4

08003598 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003598:	480b      	ldr	r0, [pc, #44]	; (80035c8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <LoopForever+0xe>)
  adds  r2, r0, r1
 800359c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800359e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035a0:	d3f6      	bcc.n	8003590 <CopyDataInit>
  ldr  r2, =_sbss
 80035a2:	4a0b      	ldr	r2, [pc, #44]	; (80035d0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80035a4:	e002      	b.n	80035ac <LoopFillZerobss>

080035a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80035a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80035a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035aa:	3204      	adds	r2, #4

080035ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <LoopForever+0x16>)
  cmp  r2, r3
 80035ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035b0:	d3f9      	bcc.n	80035a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80035b2:	f7ff ffbb 	bl	800352c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035b6:	f000 f817 	bl	80035e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ba:	f7ff fb27 	bl	8002c0c <main>

080035be <LoopForever>:

LoopForever:
    b LoopForever
 80035be:	e7fe      	b.n	80035be <LoopForever>
   ldr   r0, =_estack
 80035c0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80035c4:	08003be4 	.word	0x08003be4
  ldr  r0, =_sdata
 80035c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035cc:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 80035d0:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 80035d4:	2000056c 	.word	0x2000056c

080035d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035d8:	e7fe      	b.n	80035d8 <ADC1_COMP_IRQHandler>

080035da <atoi>:
 80035da:	b510      	push	{r4, lr}
 80035dc:	220a      	movs	r2, #10
 80035de:	2100      	movs	r1, #0
 80035e0:	f000 f8d2 	bl	8003788 <strtol>
 80035e4:	bd10      	pop	{r4, pc}
	...

080035e8 <__libc_init_array>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	2600      	movs	r6, #0
 80035ec:	4d0c      	ldr	r5, [pc, #48]	; (8003620 <__libc_init_array+0x38>)
 80035ee:	4c0d      	ldr	r4, [pc, #52]	; (8003624 <__libc_init_array+0x3c>)
 80035f0:	1b64      	subs	r4, r4, r5
 80035f2:	10a4      	asrs	r4, r4, #2
 80035f4:	42a6      	cmp	r6, r4
 80035f6:	d109      	bne.n	800360c <__libc_init_array+0x24>
 80035f8:	2600      	movs	r6, #0
 80035fa:	f000 f8fb 	bl	80037f4 <_init>
 80035fe:	4d0a      	ldr	r5, [pc, #40]	; (8003628 <__libc_init_array+0x40>)
 8003600:	4c0a      	ldr	r4, [pc, #40]	; (800362c <__libc_init_array+0x44>)
 8003602:	1b64      	subs	r4, r4, r5
 8003604:	10a4      	asrs	r4, r4, #2
 8003606:	42a6      	cmp	r6, r4
 8003608:	d105      	bne.n	8003616 <__libc_init_array+0x2e>
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	00b3      	lsls	r3, r6, #2
 800360e:	58eb      	ldr	r3, [r5, r3]
 8003610:	4798      	blx	r3
 8003612:	3601      	adds	r6, #1
 8003614:	e7ee      	b.n	80035f4 <__libc_init_array+0xc>
 8003616:	00b3      	lsls	r3, r6, #2
 8003618:	58eb      	ldr	r3, [r5, r3]
 800361a:	4798      	blx	r3
 800361c:	3601      	adds	r6, #1
 800361e:	e7f2      	b.n	8003606 <__libc_init_array+0x1e>
 8003620:	08003bdc 	.word	0x08003bdc
 8003624:	08003bdc 	.word	0x08003bdc
 8003628:	08003bdc 	.word	0x08003bdc
 800362c:	08003be0 	.word	0x08003be0

08003630 <memcpy>:
 8003630:	2300      	movs	r3, #0
 8003632:	b510      	push	{r4, lr}
 8003634:	429a      	cmp	r2, r3
 8003636:	d100      	bne.n	800363a <memcpy+0xa>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	5ccc      	ldrb	r4, [r1, r3]
 800363c:	54c4      	strb	r4, [r0, r3]
 800363e:	3301      	adds	r3, #1
 8003640:	e7f8      	b.n	8003634 <memcpy+0x4>

08003642 <memset>:
 8003642:	0003      	movs	r3, r0
 8003644:	1882      	adds	r2, r0, r2
 8003646:	4293      	cmp	r3, r2
 8003648:	d100      	bne.n	800364c <memset+0xa>
 800364a:	4770      	bx	lr
 800364c:	7019      	strb	r1, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	e7f9      	b.n	8003646 <memset+0x4>

08003652 <strcat>:
 8003652:	0002      	movs	r2, r0
 8003654:	b510      	push	{r4, lr}
 8003656:	7813      	ldrb	r3, [r2, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <strcat+0x16>
 800365c:	5ccc      	ldrb	r4, [r1, r3]
 800365e:	54d4      	strb	r4, [r2, r3]
 8003660:	3301      	adds	r3, #1
 8003662:	2c00      	cmp	r4, #0
 8003664:	d1fa      	bne.n	800365c <strcat+0xa>
 8003666:	bd10      	pop	{r4, pc}
 8003668:	3201      	adds	r2, #1
 800366a:	e7f4      	b.n	8003656 <strcat+0x4>

0800366c <strcpy>:
 800366c:	1c03      	adds	r3, r0, #0
 800366e:	780a      	ldrb	r2, [r1, #0]
 8003670:	3101      	adds	r1, #1
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	2a00      	cmp	r2, #0
 8003678:	d1f9      	bne.n	800366e <strcpy+0x2>
 800367a:	4770      	bx	lr

0800367c <_strtol_l.isra.0>:
 800367c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367e:	001f      	movs	r7, r3
 8003680:	000e      	movs	r6, r1
 8003682:	b087      	sub	sp, #28
 8003684:	9005      	str	r0, [sp, #20]
 8003686:	9103      	str	r1, [sp, #12]
 8003688:	9202      	str	r2, [sp, #8]
 800368a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800368c:	7834      	ldrb	r4, [r6, #0]
 800368e:	f000 f88f 	bl	80037b0 <__locale_ctype_ptr_l>
 8003692:	2208      	movs	r2, #8
 8003694:	1900      	adds	r0, r0, r4
 8003696:	7843      	ldrb	r3, [r0, #1]
 8003698:	1c75      	adds	r5, r6, #1
 800369a:	4013      	ands	r3, r2
 800369c:	d10c      	bne.n	80036b8 <_strtol_l.isra.0+0x3c>
 800369e:	2c2d      	cmp	r4, #45	; 0x2d
 80036a0:	d10c      	bne.n	80036bc <_strtol_l.isra.0+0x40>
 80036a2:	3301      	adds	r3, #1
 80036a4:	782c      	ldrb	r4, [r5, #0]
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	1cb5      	adds	r5, r6, #2
 80036aa:	2f00      	cmp	r7, #0
 80036ac:	d00c      	beq.n	80036c8 <_strtol_l.isra.0+0x4c>
 80036ae:	2f10      	cmp	r7, #16
 80036b0:	d114      	bne.n	80036dc <_strtol_l.isra.0+0x60>
 80036b2:	2c30      	cmp	r4, #48	; 0x30
 80036b4:	d00a      	beq.n	80036cc <_strtol_l.isra.0+0x50>
 80036b6:	e011      	b.n	80036dc <_strtol_l.isra.0+0x60>
 80036b8:	002e      	movs	r6, r5
 80036ba:	e7e6      	b.n	800368a <_strtol_l.isra.0+0xe>
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	2c2b      	cmp	r4, #43	; 0x2b
 80036c0:	d1f3      	bne.n	80036aa <_strtol_l.isra.0+0x2e>
 80036c2:	782c      	ldrb	r4, [r5, #0]
 80036c4:	1cb5      	adds	r5, r6, #2
 80036c6:	e7f0      	b.n	80036aa <_strtol_l.isra.0+0x2e>
 80036c8:	2c30      	cmp	r4, #48	; 0x30
 80036ca:	d12f      	bne.n	800372c <_strtol_l.isra.0+0xb0>
 80036cc:	2220      	movs	r2, #32
 80036ce:	782b      	ldrb	r3, [r5, #0]
 80036d0:	4393      	bics	r3, r2
 80036d2:	2b58      	cmp	r3, #88	; 0x58
 80036d4:	d151      	bne.n	800377a <_strtol_l.isra.0+0xfe>
 80036d6:	2710      	movs	r7, #16
 80036d8:	786c      	ldrb	r4, [r5, #1]
 80036da:	3502      	adds	r5, #2
 80036dc:	9b01      	ldr	r3, [sp, #4]
 80036de:	4a29      	ldr	r2, [pc, #164]	; (8003784 <_strtol_l.isra.0+0x108>)
 80036e0:	0039      	movs	r1, r7
 80036e2:	189e      	adds	r6, r3, r2
 80036e4:	0030      	movs	r0, r6
 80036e6:	f7fc fdbb 	bl	8000260 <__aeabi_uidivmod>
 80036ea:	0030      	movs	r0, r6
 80036ec:	9104      	str	r1, [sp, #16]
 80036ee:	0039      	movs	r1, r7
 80036f0:	f7fc fd30 	bl	8000154 <__udivsi3>
 80036f4:	2101      	movs	r1, #1
 80036f6:	2300      	movs	r3, #0
 80036f8:	4249      	negs	r1, r1
 80036fa:	0002      	movs	r2, r0
 80036fc:	468c      	mov	ip, r1
 80036fe:	0018      	movs	r0, r3
 8003700:	0021      	movs	r1, r4
 8003702:	3930      	subs	r1, #48	; 0x30
 8003704:	2909      	cmp	r1, #9
 8003706:	d813      	bhi.n	8003730 <_strtol_l.isra.0+0xb4>
 8003708:	000c      	movs	r4, r1
 800370a:	42a7      	cmp	r7, r4
 800370c:	dd1c      	ble.n	8003748 <_strtol_l.isra.0+0xcc>
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	d009      	beq.n	8003726 <_strtol_l.isra.0+0xaa>
 8003712:	4663      	mov	r3, ip
 8003714:	4282      	cmp	r2, r0
 8003716:	d306      	bcc.n	8003726 <_strtol_l.isra.0+0xaa>
 8003718:	d102      	bne.n	8003720 <_strtol_l.isra.0+0xa4>
 800371a:	9904      	ldr	r1, [sp, #16]
 800371c:	42a1      	cmp	r1, r4
 800371e:	db02      	blt.n	8003726 <_strtol_l.isra.0+0xaa>
 8003720:	2301      	movs	r3, #1
 8003722:	4378      	muls	r0, r7
 8003724:	1820      	adds	r0, r4, r0
 8003726:	782c      	ldrb	r4, [r5, #0]
 8003728:	3501      	adds	r5, #1
 800372a:	e7e9      	b.n	8003700 <_strtol_l.isra.0+0x84>
 800372c:	270a      	movs	r7, #10
 800372e:	e7d5      	b.n	80036dc <_strtol_l.isra.0+0x60>
 8003730:	0021      	movs	r1, r4
 8003732:	3941      	subs	r1, #65	; 0x41
 8003734:	2919      	cmp	r1, #25
 8003736:	d801      	bhi.n	800373c <_strtol_l.isra.0+0xc0>
 8003738:	3c37      	subs	r4, #55	; 0x37
 800373a:	e7e6      	b.n	800370a <_strtol_l.isra.0+0x8e>
 800373c:	0021      	movs	r1, r4
 800373e:	3961      	subs	r1, #97	; 0x61
 8003740:	2919      	cmp	r1, #25
 8003742:	d801      	bhi.n	8003748 <_strtol_l.isra.0+0xcc>
 8003744:	3c57      	subs	r4, #87	; 0x57
 8003746:	e7e0      	b.n	800370a <_strtol_l.isra.0+0x8e>
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	d108      	bne.n	800375e <_strtol_l.isra.0+0xe2>
 800374c:	9a05      	ldr	r2, [sp, #20]
 800374e:	3323      	adds	r3, #35	; 0x23
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	9b02      	ldr	r3, [sp, #8]
 8003754:	0030      	movs	r0, r6
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <_strtol_l.isra.0+0xf6>
 800375a:	b007      	add	sp, #28
 800375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375e:	9a01      	ldr	r2, [sp, #4]
 8003760:	2a00      	cmp	r2, #0
 8003762:	d000      	beq.n	8003766 <_strtol_l.isra.0+0xea>
 8003764:	4240      	negs	r0, r0
 8003766:	9a02      	ldr	r2, [sp, #8]
 8003768:	2a00      	cmp	r2, #0
 800376a:	d0f6      	beq.n	800375a <_strtol_l.isra.0+0xde>
 800376c:	9a03      	ldr	r2, [sp, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d000      	beq.n	8003774 <_strtol_l.isra.0+0xf8>
 8003772:	1e6a      	subs	r2, r5, #1
 8003774:	9b02      	ldr	r3, [sp, #8]
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e7ef      	b.n	800375a <_strtol_l.isra.0+0xde>
 800377a:	2430      	movs	r4, #48	; 0x30
 800377c:	2f00      	cmp	r7, #0
 800377e:	d1ad      	bne.n	80036dc <_strtol_l.isra.0+0x60>
 8003780:	3708      	adds	r7, #8
 8003782:	e7ab      	b.n	80036dc <_strtol_l.isra.0+0x60>
 8003784:	7fffffff 	.word	0x7fffffff

08003788 <strtol>:
 8003788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800378a:	0013      	movs	r3, r2
 800378c:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <strtol+0x20>)
 800378e:	0005      	movs	r5, r0
 8003790:	6810      	ldr	r0, [r2, #0]
 8003792:	6a04      	ldr	r4, [r0, #32]
 8003794:	2c00      	cmp	r4, #0
 8003796:	d100      	bne.n	800379a <strtol+0x12>
 8003798:	4c04      	ldr	r4, [pc, #16]	; (80037ac <strtol+0x24>)
 800379a:	000a      	movs	r2, r1
 800379c:	9400      	str	r4, [sp, #0]
 800379e:	0029      	movs	r1, r5
 80037a0:	f7ff ff6c 	bl	800367c <_strtol_l.isra.0>
 80037a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	20000004 	.word	0x20000004
 80037ac:	20000068 	.word	0x20000068

080037b0 <__locale_ctype_ptr_l>:
 80037b0:	30ec      	adds	r0, #236	; 0xec
 80037b2:	6800      	ldr	r0, [r0, #0]
 80037b4:	4770      	bx	lr

080037b6 <__ascii_mbtowc>:
 80037b6:	b082      	sub	sp, #8
 80037b8:	2900      	cmp	r1, #0
 80037ba:	d100      	bne.n	80037be <__ascii_mbtowc+0x8>
 80037bc:	a901      	add	r1, sp, #4
 80037be:	1e10      	subs	r0, r2, #0
 80037c0:	d006      	beq.n	80037d0 <__ascii_mbtowc+0x1a>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <__ascii_mbtowc+0x1e>
 80037c6:	7813      	ldrb	r3, [r2, #0]
 80037c8:	600b      	str	r3, [r1, #0]
 80037ca:	7810      	ldrb	r0, [r2, #0]
 80037cc:	1e43      	subs	r3, r0, #1
 80037ce:	4198      	sbcs	r0, r3
 80037d0:	b002      	add	sp, #8
 80037d2:	4770      	bx	lr
 80037d4:	2002      	movs	r0, #2
 80037d6:	4240      	negs	r0, r0
 80037d8:	e7fa      	b.n	80037d0 <__ascii_mbtowc+0x1a>

080037da <__ascii_wctomb>:
 80037da:	1e0b      	subs	r3, r1, #0
 80037dc:	d004      	beq.n	80037e8 <__ascii_wctomb+0xe>
 80037de:	2aff      	cmp	r2, #255	; 0xff
 80037e0:	d904      	bls.n	80037ec <__ascii_wctomb+0x12>
 80037e2:	238a      	movs	r3, #138	; 0x8a
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	3b8b      	subs	r3, #139	; 0x8b
 80037e8:	0018      	movs	r0, r3
 80037ea:	4770      	bx	lr
 80037ec:	700a      	strb	r2, [r1, #0]
 80037ee:	2301      	movs	r3, #1
 80037f0:	e7fa      	b.n	80037e8 <__ascii_wctomb+0xe>
	...

080037f4 <_init>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr

08003800 <_fini>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr
