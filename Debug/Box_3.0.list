
Box_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006510  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  080065d0  080065d0  000165d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08006930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000878  2000006c  0800699c  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008e4  0800699c  000208e4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dfb5  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002fae  00000000  00000000  0003e049  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c89f  00000000  00000000  00040ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001050  00000000  00000000  0004d898  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001428  00000000  00000000  0004e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008f1b  00000000  00000000  0004fd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000629b  00000000  00000000  00058c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005eec6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003928  00000000  00000000  0005ef44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065b8 	.word	0x080065b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080065b8 	.word	0x080065b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_cdrcmple>:
 8000258:	4684      	mov	ip, r0
 800025a:	1c10      	adds	r0, r2, #0
 800025c:	4662      	mov	r2, ip
 800025e:	468c      	mov	ip, r1
 8000260:	1c19      	adds	r1, r3, #0
 8000262:	4663      	mov	r3, ip
 8000264:	e000      	b.n	8000268 <__aeabi_cdcmpeq>
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_cdcmpeq>:
 8000268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800026a:	f001 f985 	bl	8001578 <__ledf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	d401      	bmi.n	8000276 <__aeabi_cdcmpeq+0xe>
 8000272:	2100      	movs	r1, #0
 8000274:	42c8      	cmn	r0, r1
 8000276:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000278 <__aeabi_dcmpeq>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f001 f8df 	bl	800143c <__eqdf2>
 800027e:	4240      	negs	r0, r0
 8000280:	3001      	adds	r0, #1
 8000282:	bd10      	pop	{r4, pc}

08000284 <__aeabi_dcmplt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 f977 	bl	8001578 <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	db01      	blt.n	8000292 <__aeabi_dcmplt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmple>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 f96d 	bl	8001578 <__ledf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dd01      	ble.n	80002a6 <__aeabi_dcmple+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_dcmpgt>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f001 f8ff 	bl	80014b0 <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	dc01      	bgt.n	80002ba <__aeabi_dcmpgt+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			; (mov r8, r8)

080002c0 <__aeabi_dcmpge>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f001 f8f5 	bl	80014b0 <__gedf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	da01      	bge.n	80002ce <__aeabi_dcmpge+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_uldivmod>:
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d111      	bne.n	80002fc <__aeabi_uldivmod+0x28>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	d10f      	bne.n	80002fc <__aeabi_uldivmod+0x28>
 80002dc:	2900      	cmp	r1, #0
 80002de:	d100      	bne.n	80002e2 <__aeabi_uldivmod+0xe>
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d002      	beq.n	80002ea <__aeabi_uldivmod+0x16>
 80002e4:	2100      	movs	r1, #0
 80002e6:	43c9      	mvns	r1, r1
 80002e8:	1c08      	adds	r0, r1, #0
 80002ea:	b407      	push	{r0, r1, r2}
 80002ec:	4802      	ldr	r0, [pc, #8]	; (80002f8 <__aeabi_uldivmod+0x24>)
 80002ee:	a102      	add	r1, pc, #8	; (adr r1, 80002f8 <__aeabi_uldivmod+0x24>)
 80002f0:	1840      	adds	r0, r0, r1
 80002f2:	9002      	str	r0, [sp, #8]
 80002f4:	bd03      	pop	{r0, r1, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	ffffff5d 	.word	0xffffff5d
 80002fc:	b403      	push	{r0, r1}
 80002fe:	4668      	mov	r0, sp
 8000300:	b501      	push	{r0, lr}
 8000302:	9802      	ldr	r0, [sp, #8]
 8000304:	f000 f806 	bl	8000314 <__udivmoddi4>
 8000308:	9b01      	ldr	r3, [sp, #4]
 800030a:	469e      	mov	lr, r3
 800030c:	b002      	add	sp, #8
 800030e:	bc0c      	pop	{r2, r3}
 8000310:	4770      	bx	lr
 8000312:	46c0      	nop			; (mov r8, r8)

08000314 <__udivmoddi4>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	4657      	mov	r7, sl
 8000318:	464e      	mov	r6, r9
 800031a:	4645      	mov	r5, r8
 800031c:	46de      	mov	lr, fp
 800031e:	b5e0      	push	{r5, r6, r7, lr}
 8000320:	0004      	movs	r4, r0
 8000322:	b083      	sub	sp, #12
 8000324:	000d      	movs	r5, r1
 8000326:	4692      	mov	sl, r2
 8000328:	4699      	mov	r9, r3
 800032a:	428b      	cmp	r3, r1
 800032c:	d82f      	bhi.n	800038e <__udivmoddi4+0x7a>
 800032e:	d02c      	beq.n	800038a <__udivmoddi4+0x76>
 8000330:	4649      	mov	r1, r9
 8000332:	4650      	mov	r0, sl
 8000334:	f001 ffcc 	bl	80022d0 <__clzdi2>
 8000338:	0029      	movs	r1, r5
 800033a:	0006      	movs	r6, r0
 800033c:	0020      	movs	r0, r4
 800033e:	f001 ffc7 	bl	80022d0 <__clzdi2>
 8000342:	1a33      	subs	r3, r6, r0
 8000344:	4698      	mov	r8, r3
 8000346:	3b20      	subs	r3, #32
 8000348:	469b      	mov	fp, r3
 800034a:	d500      	bpl.n	800034e <__udivmoddi4+0x3a>
 800034c:	e074      	b.n	8000438 <__udivmoddi4+0x124>
 800034e:	4653      	mov	r3, sl
 8000350:	465a      	mov	r2, fp
 8000352:	4093      	lsls	r3, r2
 8000354:	001f      	movs	r7, r3
 8000356:	4653      	mov	r3, sl
 8000358:	4642      	mov	r2, r8
 800035a:	4093      	lsls	r3, r2
 800035c:	001e      	movs	r6, r3
 800035e:	42af      	cmp	r7, r5
 8000360:	d829      	bhi.n	80003b6 <__udivmoddi4+0xa2>
 8000362:	d026      	beq.n	80003b2 <__udivmoddi4+0x9e>
 8000364:	465b      	mov	r3, fp
 8000366:	1ba4      	subs	r4, r4, r6
 8000368:	41bd      	sbcs	r5, r7
 800036a:	2b00      	cmp	r3, #0
 800036c:	da00      	bge.n	8000370 <__udivmoddi4+0x5c>
 800036e:	e079      	b.n	8000464 <__udivmoddi4+0x150>
 8000370:	2200      	movs	r2, #0
 8000372:	2300      	movs	r3, #0
 8000374:	9200      	str	r2, [sp, #0]
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	2301      	movs	r3, #1
 800037a:	465a      	mov	r2, fp
 800037c:	4093      	lsls	r3, r2
 800037e:	9301      	str	r3, [sp, #4]
 8000380:	2301      	movs	r3, #1
 8000382:	4642      	mov	r2, r8
 8000384:	4093      	lsls	r3, r2
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	e019      	b.n	80003be <__udivmoddi4+0xaa>
 800038a:	4282      	cmp	r2, r0
 800038c:	d9d0      	bls.n	8000330 <__udivmoddi4+0x1c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <__udivmoddi4+0x8c>
 800039c:	601c      	str	r4, [r3, #0]
 800039e:	605d      	str	r5, [r3, #4]
 80003a0:	9800      	ldr	r0, [sp, #0]
 80003a2:	9901      	ldr	r1, [sp, #4]
 80003a4:	b003      	add	sp, #12
 80003a6:	bc3c      	pop	{r2, r3, r4, r5}
 80003a8:	4690      	mov	r8, r2
 80003aa:	4699      	mov	r9, r3
 80003ac:	46a2      	mov	sl, r4
 80003ae:	46ab      	mov	fp, r5
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d9d6      	bls.n	8000364 <__udivmoddi4+0x50>
 80003b6:	2200      	movs	r2, #0
 80003b8:	2300      	movs	r3, #0
 80003ba:	9200      	str	r2, [sp, #0]
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	4643      	mov	r3, r8
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0e8      	beq.n	8000396 <__udivmoddi4+0x82>
 80003c4:	07fb      	lsls	r3, r7, #31
 80003c6:	0872      	lsrs	r2, r6, #1
 80003c8:	431a      	orrs	r2, r3
 80003ca:	4646      	mov	r6, r8
 80003cc:	087b      	lsrs	r3, r7, #1
 80003ce:	e00e      	b.n	80003ee <__udivmoddi4+0xda>
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d101      	bne.n	80003d8 <__udivmoddi4+0xc4>
 80003d4:	42a2      	cmp	r2, r4
 80003d6:	d80c      	bhi.n	80003f2 <__udivmoddi4+0xde>
 80003d8:	1aa4      	subs	r4, r4, r2
 80003da:	419d      	sbcs	r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	1924      	adds	r4, r4, r4
 80003e0:	416d      	adcs	r5, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	3e01      	subs	r6, #1
 80003e6:	1824      	adds	r4, r4, r0
 80003e8:	414d      	adcs	r5, r1
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d006      	beq.n	80003fc <__udivmoddi4+0xe8>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d9ee      	bls.n	80003d0 <__udivmoddi4+0xbc>
 80003f2:	3e01      	subs	r6, #1
 80003f4:	1924      	adds	r4, r4, r4
 80003f6:	416d      	adcs	r5, r5
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d1f8      	bne.n	80003ee <__udivmoddi4+0xda>
 80003fc:	465b      	mov	r3, fp
 80003fe:	9800      	ldr	r0, [sp, #0]
 8000400:	9901      	ldr	r1, [sp, #4]
 8000402:	1900      	adds	r0, r0, r4
 8000404:	4169      	adcs	r1, r5
 8000406:	2b00      	cmp	r3, #0
 8000408:	db22      	blt.n	8000450 <__udivmoddi4+0x13c>
 800040a:	002b      	movs	r3, r5
 800040c:	465a      	mov	r2, fp
 800040e:	40d3      	lsrs	r3, r2
 8000410:	002a      	movs	r2, r5
 8000412:	4644      	mov	r4, r8
 8000414:	40e2      	lsrs	r2, r4
 8000416:	001c      	movs	r4, r3
 8000418:	465b      	mov	r3, fp
 800041a:	0015      	movs	r5, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	db2c      	blt.n	800047a <__udivmoddi4+0x166>
 8000420:	0026      	movs	r6, r4
 8000422:	409e      	lsls	r6, r3
 8000424:	0033      	movs	r3, r6
 8000426:	0026      	movs	r6, r4
 8000428:	4647      	mov	r7, r8
 800042a:	40be      	lsls	r6, r7
 800042c:	0032      	movs	r2, r6
 800042e:	1a80      	subs	r0, r0, r2
 8000430:	4199      	sbcs	r1, r3
 8000432:	9000      	str	r0, [sp, #0]
 8000434:	9101      	str	r1, [sp, #4]
 8000436:	e7ae      	b.n	8000396 <__udivmoddi4+0x82>
 8000438:	4642      	mov	r2, r8
 800043a:	2320      	movs	r3, #32
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	4652      	mov	r2, sl
 8000440:	40da      	lsrs	r2, r3
 8000442:	4641      	mov	r1, r8
 8000444:	0013      	movs	r3, r2
 8000446:	464a      	mov	r2, r9
 8000448:	408a      	lsls	r2, r1
 800044a:	0017      	movs	r7, r2
 800044c:	431f      	orrs	r7, r3
 800044e:	e782      	b.n	8000356 <__udivmoddi4+0x42>
 8000450:	4642      	mov	r2, r8
 8000452:	2320      	movs	r3, #32
 8000454:	1a9b      	subs	r3, r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	4646      	mov	r6, r8
 800045a:	409a      	lsls	r2, r3
 800045c:	0023      	movs	r3, r4
 800045e:	40f3      	lsrs	r3, r6
 8000460:	4313      	orrs	r3, r2
 8000462:	e7d5      	b.n	8000410 <__udivmoddi4+0xfc>
 8000464:	4642      	mov	r2, r8
 8000466:	2320      	movs	r3, #32
 8000468:	2100      	movs	r1, #0
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	2200      	movs	r2, #0
 800046e:	9100      	str	r1, [sp, #0]
 8000470:	9201      	str	r2, [sp, #4]
 8000472:	2201      	movs	r2, #1
 8000474:	40da      	lsrs	r2, r3
 8000476:	9201      	str	r2, [sp, #4]
 8000478:	e782      	b.n	8000380 <__udivmoddi4+0x6c>
 800047a:	4642      	mov	r2, r8
 800047c:	2320      	movs	r3, #32
 800047e:	0026      	movs	r6, r4
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	40de      	lsrs	r6, r3
 8000484:	002f      	movs	r7, r5
 8000486:	46b4      	mov	ip, r6
 8000488:	4097      	lsls	r7, r2
 800048a:	4666      	mov	r6, ip
 800048c:	003b      	movs	r3, r7
 800048e:	4333      	orrs	r3, r6
 8000490:	e7c9      	b.n	8000426 <__udivmoddi4+0x112>
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_fmul>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	0247      	lsls	r7, r0, #9
 80004a2:	0046      	lsls	r6, r0, #1
 80004a4:	4688      	mov	r8, r1
 80004a6:	0a7f      	lsrs	r7, r7, #9
 80004a8:	0e36      	lsrs	r6, r6, #24
 80004aa:	0fc4      	lsrs	r4, r0, #31
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d047      	beq.n	8000540 <__aeabi_fmul+0xac>
 80004b0:	2eff      	cmp	r6, #255	; 0xff
 80004b2:	d024      	beq.n	80004fe <__aeabi_fmul+0x6a>
 80004b4:	00fb      	lsls	r3, r7, #3
 80004b6:	2780      	movs	r7, #128	; 0x80
 80004b8:	04ff      	lsls	r7, r7, #19
 80004ba:	431f      	orrs	r7, r3
 80004bc:	2300      	movs	r3, #0
 80004be:	4699      	mov	r9, r3
 80004c0:	469a      	mov	sl, r3
 80004c2:	3e7f      	subs	r6, #127	; 0x7f
 80004c4:	4643      	mov	r3, r8
 80004c6:	025d      	lsls	r5, r3, #9
 80004c8:	0058      	lsls	r0, r3, #1
 80004ca:	0fdb      	lsrs	r3, r3, #31
 80004cc:	0a6d      	lsrs	r5, r5, #9
 80004ce:	0e00      	lsrs	r0, r0, #24
 80004d0:	4698      	mov	r8, r3
 80004d2:	d043      	beq.n	800055c <__aeabi_fmul+0xc8>
 80004d4:	28ff      	cmp	r0, #255	; 0xff
 80004d6:	d03b      	beq.n	8000550 <__aeabi_fmul+0xbc>
 80004d8:	00eb      	lsls	r3, r5, #3
 80004da:	2580      	movs	r5, #128	; 0x80
 80004dc:	2200      	movs	r2, #0
 80004de:	04ed      	lsls	r5, r5, #19
 80004e0:	431d      	orrs	r5, r3
 80004e2:	387f      	subs	r0, #127	; 0x7f
 80004e4:	1836      	adds	r6, r6, r0
 80004e6:	1c73      	adds	r3, r6, #1
 80004e8:	4641      	mov	r1, r8
 80004ea:	469b      	mov	fp, r3
 80004ec:	464b      	mov	r3, r9
 80004ee:	4061      	eors	r1, r4
 80004f0:	4313      	orrs	r3, r2
 80004f2:	2b0f      	cmp	r3, #15
 80004f4:	d864      	bhi.n	80005c0 <__aeabi_fmul+0x12c>
 80004f6:	4875      	ldr	r0, [pc, #468]	; (80006cc <__aeabi_fmul+0x238>)
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	58c3      	ldr	r3, [r0, r3]
 80004fc:	469f      	mov	pc, r3
 80004fe:	2f00      	cmp	r7, #0
 8000500:	d142      	bne.n	8000588 <__aeabi_fmul+0xf4>
 8000502:	2308      	movs	r3, #8
 8000504:	4699      	mov	r9, r3
 8000506:	3b06      	subs	r3, #6
 8000508:	26ff      	movs	r6, #255	; 0xff
 800050a:	469a      	mov	sl, r3
 800050c:	e7da      	b.n	80004c4 <__aeabi_fmul+0x30>
 800050e:	4641      	mov	r1, r8
 8000510:	2a02      	cmp	r2, #2
 8000512:	d028      	beq.n	8000566 <__aeabi_fmul+0xd2>
 8000514:	2a03      	cmp	r2, #3
 8000516:	d100      	bne.n	800051a <__aeabi_fmul+0x86>
 8000518:	e0ce      	b.n	80006b8 <__aeabi_fmul+0x224>
 800051a:	2a01      	cmp	r2, #1
 800051c:	d000      	beq.n	8000520 <__aeabi_fmul+0x8c>
 800051e:	e0ac      	b.n	800067a <__aeabi_fmul+0x1e6>
 8000520:	4011      	ands	r1, r2
 8000522:	2000      	movs	r0, #0
 8000524:	2200      	movs	r2, #0
 8000526:	b2cc      	uxtb	r4, r1
 8000528:	0240      	lsls	r0, r0, #9
 800052a:	05d2      	lsls	r2, r2, #23
 800052c:	0a40      	lsrs	r0, r0, #9
 800052e:	07e4      	lsls	r4, r4, #31
 8000530:	4310      	orrs	r0, r2
 8000532:	4320      	orrs	r0, r4
 8000534:	bc3c      	pop	{r2, r3, r4, r5}
 8000536:	4690      	mov	r8, r2
 8000538:	4699      	mov	r9, r3
 800053a:	46a2      	mov	sl, r4
 800053c:	46ab      	mov	fp, r5
 800053e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000540:	2f00      	cmp	r7, #0
 8000542:	d115      	bne.n	8000570 <__aeabi_fmul+0xdc>
 8000544:	2304      	movs	r3, #4
 8000546:	4699      	mov	r9, r3
 8000548:	3b03      	subs	r3, #3
 800054a:	2600      	movs	r6, #0
 800054c:	469a      	mov	sl, r3
 800054e:	e7b9      	b.n	80004c4 <__aeabi_fmul+0x30>
 8000550:	20ff      	movs	r0, #255	; 0xff
 8000552:	2202      	movs	r2, #2
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0c5      	beq.n	80004e4 <__aeabi_fmul+0x50>
 8000558:	2203      	movs	r2, #3
 800055a:	e7c3      	b.n	80004e4 <__aeabi_fmul+0x50>
 800055c:	2d00      	cmp	r5, #0
 800055e:	d119      	bne.n	8000594 <__aeabi_fmul+0x100>
 8000560:	2000      	movs	r0, #0
 8000562:	2201      	movs	r2, #1
 8000564:	e7be      	b.n	80004e4 <__aeabi_fmul+0x50>
 8000566:	2401      	movs	r4, #1
 8000568:	22ff      	movs	r2, #255	; 0xff
 800056a:	400c      	ands	r4, r1
 800056c:	2000      	movs	r0, #0
 800056e:	e7db      	b.n	8000528 <__aeabi_fmul+0x94>
 8000570:	0038      	movs	r0, r7
 8000572:	f001 fe8f 	bl	8002294 <__clzsi2>
 8000576:	2676      	movs	r6, #118	; 0x76
 8000578:	1f43      	subs	r3, r0, #5
 800057a:	409f      	lsls	r7, r3
 800057c:	2300      	movs	r3, #0
 800057e:	4276      	negs	r6, r6
 8000580:	1a36      	subs	r6, r6, r0
 8000582:	4699      	mov	r9, r3
 8000584:	469a      	mov	sl, r3
 8000586:	e79d      	b.n	80004c4 <__aeabi_fmul+0x30>
 8000588:	230c      	movs	r3, #12
 800058a:	4699      	mov	r9, r3
 800058c:	3b09      	subs	r3, #9
 800058e:	26ff      	movs	r6, #255	; 0xff
 8000590:	469a      	mov	sl, r3
 8000592:	e797      	b.n	80004c4 <__aeabi_fmul+0x30>
 8000594:	0028      	movs	r0, r5
 8000596:	f001 fe7d 	bl	8002294 <__clzsi2>
 800059a:	1f43      	subs	r3, r0, #5
 800059c:	409d      	lsls	r5, r3
 800059e:	2376      	movs	r3, #118	; 0x76
 80005a0:	425b      	negs	r3, r3
 80005a2:	1a18      	subs	r0, r3, r0
 80005a4:	2200      	movs	r2, #0
 80005a6:	e79d      	b.n	80004e4 <__aeabi_fmul+0x50>
 80005a8:	2080      	movs	r0, #128	; 0x80
 80005aa:	2400      	movs	r4, #0
 80005ac:	03c0      	lsls	r0, r0, #15
 80005ae:	22ff      	movs	r2, #255	; 0xff
 80005b0:	e7ba      	b.n	8000528 <__aeabi_fmul+0x94>
 80005b2:	003d      	movs	r5, r7
 80005b4:	4652      	mov	r2, sl
 80005b6:	e7ab      	b.n	8000510 <__aeabi_fmul+0x7c>
 80005b8:	003d      	movs	r5, r7
 80005ba:	0021      	movs	r1, r4
 80005bc:	4652      	mov	r2, sl
 80005be:	e7a7      	b.n	8000510 <__aeabi_fmul+0x7c>
 80005c0:	0c3b      	lsrs	r3, r7, #16
 80005c2:	469c      	mov	ip, r3
 80005c4:	042a      	lsls	r2, r5, #16
 80005c6:	0c12      	lsrs	r2, r2, #16
 80005c8:	0c2b      	lsrs	r3, r5, #16
 80005ca:	0014      	movs	r4, r2
 80005cc:	4660      	mov	r0, ip
 80005ce:	4665      	mov	r5, ip
 80005d0:	043f      	lsls	r7, r7, #16
 80005d2:	0c3f      	lsrs	r7, r7, #16
 80005d4:	437c      	muls	r4, r7
 80005d6:	4342      	muls	r2, r0
 80005d8:	435d      	muls	r5, r3
 80005da:	437b      	muls	r3, r7
 80005dc:	0c27      	lsrs	r7, r4, #16
 80005de:	189b      	adds	r3, r3, r2
 80005e0:	18ff      	adds	r7, r7, r3
 80005e2:	42ba      	cmp	r2, r7
 80005e4:	d903      	bls.n	80005ee <__aeabi_fmul+0x15a>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	025b      	lsls	r3, r3, #9
 80005ea:	469c      	mov	ip, r3
 80005ec:	4465      	add	r5, ip
 80005ee:	0424      	lsls	r4, r4, #16
 80005f0:	043a      	lsls	r2, r7, #16
 80005f2:	0c24      	lsrs	r4, r4, #16
 80005f4:	1912      	adds	r2, r2, r4
 80005f6:	0193      	lsls	r3, r2, #6
 80005f8:	1e5c      	subs	r4, r3, #1
 80005fa:	41a3      	sbcs	r3, r4
 80005fc:	0c3f      	lsrs	r7, r7, #16
 80005fe:	0e92      	lsrs	r2, r2, #26
 8000600:	197d      	adds	r5, r7, r5
 8000602:	431a      	orrs	r2, r3
 8000604:	01ad      	lsls	r5, r5, #6
 8000606:	4315      	orrs	r5, r2
 8000608:	012b      	lsls	r3, r5, #4
 800060a:	d504      	bpl.n	8000616 <__aeabi_fmul+0x182>
 800060c:	2301      	movs	r3, #1
 800060e:	465e      	mov	r6, fp
 8000610:	086a      	lsrs	r2, r5, #1
 8000612:	401d      	ands	r5, r3
 8000614:	4315      	orrs	r5, r2
 8000616:	0032      	movs	r2, r6
 8000618:	327f      	adds	r2, #127	; 0x7f
 800061a:	2a00      	cmp	r2, #0
 800061c:	dd25      	ble.n	800066a <__aeabi_fmul+0x1d6>
 800061e:	076b      	lsls	r3, r5, #29
 8000620:	d004      	beq.n	800062c <__aeabi_fmul+0x198>
 8000622:	230f      	movs	r3, #15
 8000624:	402b      	ands	r3, r5
 8000626:	2b04      	cmp	r3, #4
 8000628:	d000      	beq.n	800062c <__aeabi_fmul+0x198>
 800062a:	3504      	adds	r5, #4
 800062c:	012b      	lsls	r3, r5, #4
 800062e:	d503      	bpl.n	8000638 <__aeabi_fmul+0x1a4>
 8000630:	0032      	movs	r2, r6
 8000632:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <__aeabi_fmul+0x23c>)
 8000634:	3280      	adds	r2, #128	; 0x80
 8000636:	401d      	ands	r5, r3
 8000638:	2afe      	cmp	r2, #254	; 0xfe
 800063a:	dc94      	bgt.n	8000566 <__aeabi_fmul+0xd2>
 800063c:	2401      	movs	r4, #1
 800063e:	01a8      	lsls	r0, r5, #6
 8000640:	0a40      	lsrs	r0, r0, #9
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	400c      	ands	r4, r1
 8000646:	e76f      	b.n	8000528 <__aeabi_fmul+0x94>
 8000648:	2080      	movs	r0, #128	; 0x80
 800064a:	03c0      	lsls	r0, r0, #15
 800064c:	4207      	tst	r7, r0
 800064e:	d007      	beq.n	8000660 <__aeabi_fmul+0x1cc>
 8000650:	4205      	tst	r5, r0
 8000652:	d105      	bne.n	8000660 <__aeabi_fmul+0x1cc>
 8000654:	4328      	orrs	r0, r5
 8000656:	0240      	lsls	r0, r0, #9
 8000658:	0a40      	lsrs	r0, r0, #9
 800065a:	4644      	mov	r4, r8
 800065c:	22ff      	movs	r2, #255	; 0xff
 800065e:	e763      	b.n	8000528 <__aeabi_fmul+0x94>
 8000660:	4338      	orrs	r0, r7
 8000662:	0240      	lsls	r0, r0, #9
 8000664:	0a40      	lsrs	r0, r0, #9
 8000666:	22ff      	movs	r2, #255	; 0xff
 8000668:	e75e      	b.n	8000528 <__aeabi_fmul+0x94>
 800066a:	2401      	movs	r4, #1
 800066c:	1aa3      	subs	r3, r4, r2
 800066e:	2b1b      	cmp	r3, #27
 8000670:	dd05      	ble.n	800067e <__aeabi_fmul+0x1ea>
 8000672:	400c      	ands	r4, r1
 8000674:	2200      	movs	r2, #0
 8000676:	2000      	movs	r0, #0
 8000678:	e756      	b.n	8000528 <__aeabi_fmul+0x94>
 800067a:	465e      	mov	r6, fp
 800067c:	e7cb      	b.n	8000616 <__aeabi_fmul+0x182>
 800067e:	002a      	movs	r2, r5
 8000680:	2020      	movs	r0, #32
 8000682:	40da      	lsrs	r2, r3
 8000684:	1ac3      	subs	r3, r0, r3
 8000686:	409d      	lsls	r5, r3
 8000688:	002b      	movs	r3, r5
 800068a:	1e5d      	subs	r5, r3, #1
 800068c:	41ab      	sbcs	r3, r5
 800068e:	4313      	orrs	r3, r2
 8000690:	075a      	lsls	r2, r3, #29
 8000692:	d004      	beq.n	800069e <__aeabi_fmul+0x20a>
 8000694:	220f      	movs	r2, #15
 8000696:	401a      	ands	r2, r3
 8000698:	2a04      	cmp	r2, #4
 800069a:	d000      	beq.n	800069e <__aeabi_fmul+0x20a>
 800069c:	3304      	adds	r3, #4
 800069e:	015a      	lsls	r2, r3, #5
 80006a0:	d504      	bpl.n	80006ac <__aeabi_fmul+0x218>
 80006a2:	2401      	movs	r4, #1
 80006a4:	2201      	movs	r2, #1
 80006a6:	400c      	ands	r4, r1
 80006a8:	2000      	movs	r0, #0
 80006aa:	e73d      	b.n	8000528 <__aeabi_fmul+0x94>
 80006ac:	2401      	movs	r4, #1
 80006ae:	019b      	lsls	r3, r3, #6
 80006b0:	0a58      	lsrs	r0, r3, #9
 80006b2:	400c      	ands	r4, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	e737      	b.n	8000528 <__aeabi_fmul+0x94>
 80006b8:	2080      	movs	r0, #128	; 0x80
 80006ba:	2401      	movs	r4, #1
 80006bc:	03c0      	lsls	r0, r0, #15
 80006be:	4328      	orrs	r0, r5
 80006c0:	0240      	lsls	r0, r0, #9
 80006c2:	0a40      	lsrs	r0, r0, #9
 80006c4:	400c      	ands	r4, r1
 80006c6:	22ff      	movs	r2, #255	; 0xff
 80006c8:	e72e      	b.n	8000528 <__aeabi_fmul+0x94>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	080065d0 	.word	0x080065d0
 80006d0:	f7ffffff 	.word	0xf7ffffff

080006d4 <__aeabi_f2iz>:
 80006d4:	0241      	lsls	r1, r0, #9
 80006d6:	0043      	lsls	r3, r0, #1
 80006d8:	0fc2      	lsrs	r2, r0, #31
 80006da:	0a49      	lsrs	r1, r1, #9
 80006dc:	0e1b      	lsrs	r3, r3, #24
 80006de:	2000      	movs	r0, #0
 80006e0:	2b7e      	cmp	r3, #126	; 0x7e
 80006e2:	dd0d      	ble.n	8000700 <__aeabi_f2iz+0x2c>
 80006e4:	2b9d      	cmp	r3, #157	; 0x9d
 80006e6:	dc0c      	bgt.n	8000702 <__aeabi_f2iz+0x2e>
 80006e8:	2080      	movs	r0, #128	; 0x80
 80006ea:	0400      	lsls	r0, r0, #16
 80006ec:	4301      	orrs	r1, r0
 80006ee:	2b95      	cmp	r3, #149	; 0x95
 80006f0:	dc0a      	bgt.n	8000708 <__aeabi_f2iz+0x34>
 80006f2:	2096      	movs	r0, #150	; 0x96
 80006f4:	1ac3      	subs	r3, r0, r3
 80006f6:	40d9      	lsrs	r1, r3
 80006f8:	4248      	negs	r0, r1
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_f2iz+0x2c>
 80006fe:	0008      	movs	r0, r1
 8000700:	4770      	bx	lr
 8000702:	4b03      	ldr	r3, [pc, #12]	; (8000710 <__aeabi_f2iz+0x3c>)
 8000704:	18d0      	adds	r0, r2, r3
 8000706:	e7fb      	b.n	8000700 <__aeabi_f2iz+0x2c>
 8000708:	3b96      	subs	r3, #150	; 0x96
 800070a:	4099      	lsls	r1, r3
 800070c:	e7f4      	b.n	80006f8 <__aeabi_f2iz+0x24>
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	7fffffff 	.word	0x7fffffff

08000714 <__aeabi_i2f>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	2800      	cmp	r0, #0
 8000718:	d030      	beq.n	800077c <__aeabi_i2f+0x68>
 800071a:	17c3      	asrs	r3, r0, #31
 800071c:	18c4      	adds	r4, r0, r3
 800071e:	405c      	eors	r4, r3
 8000720:	0fc5      	lsrs	r5, r0, #31
 8000722:	0020      	movs	r0, r4
 8000724:	f001 fdb6 	bl	8002294 <__clzsi2>
 8000728:	239e      	movs	r3, #158	; 0x9e
 800072a:	1a1b      	subs	r3, r3, r0
 800072c:	2b96      	cmp	r3, #150	; 0x96
 800072e:	dc0d      	bgt.n	800074c <__aeabi_i2f+0x38>
 8000730:	2296      	movs	r2, #150	; 0x96
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	4094      	lsls	r4, r2
 8000736:	002a      	movs	r2, r5
 8000738:	0264      	lsls	r4, r4, #9
 800073a:	0a64      	lsrs	r4, r4, #9
 800073c:	b2db      	uxtb	r3, r3
 800073e:	0264      	lsls	r4, r4, #9
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	0a60      	lsrs	r0, r4, #9
 8000744:	07d2      	lsls	r2, r2, #31
 8000746:	4318      	orrs	r0, r3
 8000748:	4310      	orrs	r0, r2
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	2b99      	cmp	r3, #153	; 0x99
 800074e:	dc19      	bgt.n	8000784 <__aeabi_i2f+0x70>
 8000750:	2299      	movs	r2, #153	; 0x99
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	2a00      	cmp	r2, #0
 8000756:	dd29      	ble.n	80007ac <__aeabi_i2f+0x98>
 8000758:	4094      	lsls	r4, r2
 800075a:	0022      	movs	r2, r4
 800075c:	4c14      	ldr	r4, [pc, #80]	; (80007b0 <__aeabi_i2f+0x9c>)
 800075e:	4014      	ands	r4, r2
 8000760:	0751      	lsls	r1, r2, #29
 8000762:	d004      	beq.n	800076e <__aeabi_i2f+0x5a>
 8000764:	210f      	movs	r1, #15
 8000766:	400a      	ands	r2, r1
 8000768:	2a04      	cmp	r2, #4
 800076a:	d000      	beq.n	800076e <__aeabi_i2f+0x5a>
 800076c:	3404      	adds	r4, #4
 800076e:	0162      	lsls	r2, r4, #5
 8000770:	d413      	bmi.n	800079a <__aeabi_i2f+0x86>
 8000772:	01a4      	lsls	r4, r4, #6
 8000774:	0a64      	lsrs	r4, r4, #9
 8000776:	b2db      	uxtb	r3, r3
 8000778:	002a      	movs	r2, r5
 800077a:	e7e0      	b.n	800073e <__aeabi_i2f+0x2a>
 800077c:	2200      	movs	r2, #0
 800077e:	2300      	movs	r3, #0
 8000780:	2400      	movs	r4, #0
 8000782:	e7dc      	b.n	800073e <__aeabi_i2f+0x2a>
 8000784:	2205      	movs	r2, #5
 8000786:	0021      	movs	r1, r4
 8000788:	1a12      	subs	r2, r2, r0
 800078a:	40d1      	lsrs	r1, r2
 800078c:	22b9      	movs	r2, #185	; 0xb9
 800078e:	1ad2      	subs	r2, r2, r3
 8000790:	4094      	lsls	r4, r2
 8000792:	1e62      	subs	r2, r4, #1
 8000794:	4194      	sbcs	r4, r2
 8000796:	430c      	orrs	r4, r1
 8000798:	e7da      	b.n	8000750 <__aeabi_i2f+0x3c>
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <__aeabi_i2f+0x9c>)
 800079c:	002a      	movs	r2, r5
 800079e:	401c      	ands	r4, r3
 80007a0:	239f      	movs	r3, #159	; 0x9f
 80007a2:	01a4      	lsls	r4, r4, #6
 80007a4:	1a1b      	subs	r3, r3, r0
 80007a6:	0a64      	lsrs	r4, r4, #9
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	e7c8      	b.n	800073e <__aeabi_i2f+0x2a>
 80007ac:	0022      	movs	r2, r4
 80007ae:	e7d5      	b.n	800075c <__aeabi_i2f+0x48>
 80007b0:	fbffffff 	.word	0xfbffffff

080007b4 <__aeabi_dadd>:
 80007b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b6:	4645      	mov	r5, r8
 80007b8:	46de      	mov	lr, fp
 80007ba:	4657      	mov	r7, sl
 80007bc:	464e      	mov	r6, r9
 80007be:	030c      	lsls	r4, r1, #12
 80007c0:	b5e0      	push	{r5, r6, r7, lr}
 80007c2:	004e      	lsls	r6, r1, #1
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	4688      	mov	r8, r1
 80007c8:	000d      	movs	r5, r1
 80007ca:	0a61      	lsrs	r1, r4, #9
 80007cc:	0f44      	lsrs	r4, r0, #29
 80007ce:	430c      	orrs	r4, r1
 80007d0:	00c7      	lsls	r7, r0, #3
 80007d2:	0319      	lsls	r1, r3, #12
 80007d4:	0058      	lsls	r0, r3, #1
 80007d6:	0fdb      	lsrs	r3, r3, #31
 80007d8:	469b      	mov	fp, r3
 80007da:	0a4b      	lsrs	r3, r1, #9
 80007dc:	0f51      	lsrs	r1, r2, #29
 80007de:	430b      	orrs	r3, r1
 80007e0:	0d76      	lsrs	r6, r6, #21
 80007e2:	0d40      	lsrs	r0, r0, #21
 80007e4:	0019      	movs	r1, r3
 80007e6:	00d2      	lsls	r2, r2, #3
 80007e8:	45d8      	cmp	r8, fp
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x3a>
 80007ec:	e0ae      	b.n	800094c <__aeabi_dadd+0x198>
 80007ee:	1a35      	subs	r5, r6, r0
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_dadd+0x42>
 80007f4:	e0f6      	b.n	80009e4 <__aeabi_dadd+0x230>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dadd+0x66>
 80007fa:	4313      	orrs	r3, r2
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x4c>
 80007fe:	e0db      	b.n	80009b8 <__aeabi_dadd+0x204>
 8000800:	1e6b      	subs	r3, r5, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <__aeabi_dadd+0x54>
 8000806:	e137      	b.n	8000a78 <__aeabi_dadd+0x2c4>
 8000808:	1aba      	subs	r2, r7, r2
 800080a:	4297      	cmp	r7, r2
 800080c:	41bf      	sbcs	r7, r7
 800080e:	1a64      	subs	r4, r4, r1
 8000810:	427f      	negs	r7, r7
 8000812:	1be4      	subs	r4, r4, r7
 8000814:	2601      	movs	r6, #1
 8000816:	0017      	movs	r7, r2
 8000818:	e024      	b.n	8000864 <__aeabi_dadd+0xb0>
 800081a:	4bc6      	ldr	r3, [pc, #792]	; (8000b34 <__aeabi_dadd+0x380>)
 800081c:	429e      	cmp	r6, r3
 800081e:	d04d      	beq.n	80008bc <__aeabi_dadd+0x108>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	041b      	lsls	r3, r3, #16
 8000824:	4319      	orrs	r1, r3
 8000826:	2d38      	cmp	r5, #56	; 0x38
 8000828:	dd00      	ble.n	800082c <__aeabi_dadd+0x78>
 800082a:	e107      	b.n	8000a3c <__aeabi_dadd+0x288>
 800082c:	2d1f      	cmp	r5, #31
 800082e:	dd00      	ble.n	8000832 <__aeabi_dadd+0x7e>
 8000830:	e138      	b.n	8000aa4 <__aeabi_dadd+0x2f0>
 8000832:	2020      	movs	r0, #32
 8000834:	1b43      	subs	r3, r0, r5
 8000836:	469a      	mov	sl, r3
 8000838:	000b      	movs	r3, r1
 800083a:	4650      	mov	r0, sl
 800083c:	4083      	lsls	r3, r0
 800083e:	4699      	mov	r9, r3
 8000840:	0013      	movs	r3, r2
 8000842:	4648      	mov	r0, r9
 8000844:	40eb      	lsrs	r3, r5
 8000846:	4318      	orrs	r0, r3
 8000848:	0003      	movs	r3, r0
 800084a:	4650      	mov	r0, sl
 800084c:	4082      	lsls	r2, r0
 800084e:	1e50      	subs	r0, r2, #1
 8000850:	4182      	sbcs	r2, r0
 8000852:	40e9      	lsrs	r1, r5
 8000854:	431a      	orrs	r2, r3
 8000856:	1aba      	subs	r2, r7, r2
 8000858:	1a61      	subs	r1, r4, r1
 800085a:	4297      	cmp	r7, r2
 800085c:	41a4      	sbcs	r4, r4
 800085e:	0017      	movs	r7, r2
 8000860:	4264      	negs	r4, r4
 8000862:	1b0c      	subs	r4, r1, r4
 8000864:	0223      	lsls	r3, r4, #8
 8000866:	d562      	bpl.n	800092e <__aeabi_dadd+0x17a>
 8000868:	0264      	lsls	r4, r4, #9
 800086a:	0a65      	lsrs	r5, r4, #9
 800086c:	2d00      	cmp	r5, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0xbe>
 8000870:	e0df      	b.n	8000a32 <__aeabi_dadd+0x27e>
 8000872:	0028      	movs	r0, r5
 8000874:	f001 fd0e 	bl	8002294 <__clzsi2>
 8000878:	0003      	movs	r3, r0
 800087a:	3b08      	subs	r3, #8
 800087c:	2b1f      	cmp	r3, #31
 800087e:	dd00      	ble.n	8000882 <__aeabi_dadd+0xce>
 8000880:	e0d2      	b.n	8000a28 <__aeabi_dadd+0x274>
 8000882:	2220      	movs	r2, #32
 8000884:	003c      	movs	r4, r7
 8000886:	1ad2      	subs	r2, r2, r3
 8000888:	409d      	lsls	r5, r3
 800088a:	40d4      	lsrs	r4, r2
 800088c:	409f      	lsls	r7, r3
 800088e:	4325      	orrs	r5, r4
 8000890:	429e      	cmp	r6, r3
 8000892:	dd00      	ble.n	8000896 <__aeabi_dadd+0xe2>
 8000894:	e0c4      	b.n	8000a20 <__aeabi_dadd+0x26c>
 8000896:	1b9e      	subs	r6, r3, r6
 8000898:	1c73      	adds	r3, r6, #1
 800089a:	2b1f      	cmp	r3, #31
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dadd+0xec>
 800089e:	e0f1      	b.n	8000a84 <__aeabi_dadd+0x2d0>
 80008a0:	2220      	movs	r2, #32
 80008a2:	0038      	movs	r0, r7
 80008a4:	0029      	movs	r1, r5
 80008a6:	1ad2      	subs	r2, r2, r3
 80008a8:	40d8      	lsrs	r0, r3
 80008aa:	4091      	lsls	r1, r2
 80008ac:	4097      	lsls	r7, r2
 80008ae:	002c      	movs	r4, r5
 80008b0:	4301      	orrs	r1, r0
 80008b2:	1e78      	subs	r0, r7, #1
 80008b4:	4187      	sbcs	r7, r0
 80008b6:	40dc      	lsrs	r4, r3
 80008b8:	2600      	movs	r6, #0
 80008ba:	430f      	orrs	r7, r1
 80008bc:	077b      	lsls	r3, r7, #29
 80008be:	d009      	beq.n	80008d4 <__aeabi_dadd+0x120>
 80008c0:	230f      	movs	r3, #15
 80008c2:	403b      	ands	r3, r7
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d005      	beq.n	80008d4 <__aeabi_dadd+0x120>
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	42bb      	cmp	r3, r7
 80008cc:	41bf      	sbcs	r7, r7
 80008ce:	427f      	negs	r7, r7
 80008d0:	19e4      	adds	r4, r4, r7
 80008d2:	001f      	movs	r7, r3
 80008d4:	0223      	lsls	r3, r4, #8
 80008d6:	d52c      	bpl.n	8000932 <__aeabi_dadd+0x17e>
 80008d8:	4b96      	ldr	r3, [pc, #600]	; (8000b34 <__aeabi_dadd+0x380>)
 80008da:	3601      	adds	r6, #1
 80008dc:	429e      	cmp	r6, r3
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x12e>
 80008e0:	e09a      	b.n	8000a18 <__aeabi_dadd+0x264>
 80008e2:	4645      	mov	r5, r8
 80008e4:	4b94      	ldr	r3, [pc, #592]	; (8000b38 <__aeabi_dadd+0x384>)
 80008e6:	08ff      	lsrs	r7, r7, #3
 80008e8:	401c      	ands	r4, r3
 80008ea:	0760      	lsls	r0, r4, #29
 80008ec:	0576      	lsls	r6, r6, #21
 80008ee:	0264      	lsls	r4, r4, #9
 80008f0:	4307      	orrs	r7, r0
 80008f2:	0b24      	lsrs	r4, r4, #12
 80008f4:	0d76      	lsrs	r6, r6, #21
 80008f6:	2100      	movs	r1, #0
 80008f8:	0324      	lsls	r4, r4, #12
 80008fa:	0b23      	lsrs	r3, r4, #12
 80008fc:	0d0c      	lsrs	r4, r1, #20
 80008fe:	4a8f      	ldr	r2, [pc, #572]	; (8000b3c <__aeabi_dadd+0x388>)
 8000900:	0524      	lsls	r4, r4, #20
 8000902:	431c      	orrs	r4, r3
 8000904:	4014      	ands	r4, r2
 8000906:	0533      	lsls	r3, r6, #20
 8000908:	4323      	orrs	r3, r4
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	07ed      	lsls	r5, r5, #31
 800090e:	085b      	lsrs	r3, r3, #1
 8000910:	432b      	orrs	r3, r5
 8000912:	0038      	movs	r0, r7
 8000914:	0019      	movs	r1, r3
 8000916:	bc3c      	pop	{r2, r3, r4, r5}
 8000918:	4690      	mov	r8, r2
 800091a:	4699      	mov	r9, r3
 800091c:	46a2      	mov	sl, r4
 800091e:	46ab      	mov	fp, r5
 8000920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000922:	4664      	mov	r4, ip
 8000924:	4304      	orrs	r4, r0
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x176>
 8000928:	e211      	b.n	8000d4e <__aeabi_dadd+0x59a>
 800092a:	0004      	movs	r4, r0
 800092c:	4667      	mov	r7, ip
 800092e:	077b      	lsls	r3, r7, #29
 8000930:	d1c6      	bne.n	80008c0 <__aeabi_dadd+0x10c>
 8000932:	4645      	mov	r5, r8
 8000934:	0760      	lsls	r0, r4, #29
 8000936:	08ff      	lsrs	r7, r7, #3
 8000938:	4307      	orrs	r7, r0
 800093a:	08e4      	lsrs	r4, r4, #3
 800093c:	4b7d      	ldr	r3, [pc, #500]	; (8000b34 <__aeabi_dadd+0x380>)
 800093e:	429e      	cmp	r6, r3
 8000940:	d030      	beq.n	80009a4 <__aeabi_dadd+0x1f0>
 8000942:	0324      	lsls	r4, r4, #12
 8000944:	0576      	lsls	r6, r6, #21
 8000946:	0b24      	lsrs	r4, r4, #12
 8000948:	0d76      	lsrs	r6, r6, #21
 800094a:	e7d4      	b.n	80008f6 <__aeabi_dadd+0x142>
 800094c:	1a33      	subs	r3, r6, r0
 800094e:	469a      	mov	sl, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	dd78      	ble.n	8000a46 <__aeabi_dadd+0x292>
 8000954:	2800      	cmp	r0, #0
 8000956:	d031      	beq.n	80009bc <__aeabi_dadd+0x208>
 8000958:	4876      	ldr	r0, [pc, #472]	; (8000b34 <__aeabi_dadd+0x380>)
 800095a:	4286      	cmp	r6, r0
 800095c:	d0ae      	beq.n	80008bc <__aeabi_dadd+0x108>
 800095e:	2080      	movs	r0, #128	; 0x80
 8000960:	0400      	lsls	r0, r0, #16
 8000962:	4301      	orrs	r1, r0
 8000964:	4653      	mov	r3, sl
 8000966:	2b38      	cmp	r3, #56	; 0x38
 8000968:	dc00      	bgt.n	800096c <__aeabi_dadd+0x1b8>
 800096a:	e0e9      	b.n	8000b40 <__aeabi_dadd+0x38c>
 800096c:	430a      	orrs	r2, r1
 800096e:	1e51      	subs	r1, r2, #1
 8000970:	418a      	sbcs	r2, r1
 8000972:	2100      	movs	r1, #0
 8000974:	19d2      	adds	r2, r2, r7
 8000976:	42ba      	cmp	r2, r7
 8000978:	41bf      	sbcs	r7, r7
 800097a:	1909      	adds	r1, r1, r4
 800097c:	427c      	negs	r4, r7
 800097e:	0017      	movs	r7, r2
 8000980:	190c      	adds	r4, r1, r4
 8000982:	0223      	lsls	r3, r4, #8
 8000984:	d5d3      	bpl.n	800092e <__aeabi_dadd+0x17a>
 8000986:	4b6b      	ldr	r3, [pc, #428]	; (8000b34 <__aeabi_dadd+0x380>)
 8000988:	3601      	adds	r6, #1
 800098a:	429e      	cmp	r6, r3
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1dc>
 800098e:	e13a      	b.n	8000c06 <__aeabi_dadd+0x452>
 8000990:	2001      	movs	r0, #1
 8000992:	4b69      	ldr	r3, [pc, #420]	; (8000b38 <__aeabi_dadd+0x384>)
 8000994:	401c      	ands	r4, r3
 8000996:	087b      	lsrs	r3, r7, #1
 8000998:	4007      	ands	r7, r0
 800099a:	431f      	orrs	r7, r3
 800099c:	07e0      	lsls	r0, r4, #31
 800099e:	4307      	orrs	r7, r0
 80009a0:	0864      	lsrs	r4, r4, #1
 80009a2:	e78b      	b.n	80008bc <__aeabi_dadd+0x108>
 80009a4:	0023      	movs	r3, r4
 80009a6:	433b      	orrs	r3, r7
 80009a8:	d100      	bne.n	80009ac <__aeabi_dadd+0x1f8>
 80009aa:	e1cb      	b.n	8000d44 <__aeabi_dadd+0x590>
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	0312      	lsls	r2, r2, #12
 80009b0:	4314      	orrs	r4, r2
 80009b2:	0324      	lsls	r4, r4, #12
 80009b4:	0b24      	lsrs	r4, r4, #12
 80009b6:	e79e      	b.n	80008f6 <__aeabi_dadd+0x142>
 80009b8:	002e      	movs	r6, r5
 80009ba:	e77f      	b.n	80008bc <__aeabi_dadd+0x108>
 80009bc:	0008      	movs	r0, r1
 80009be:	4310      	orrs	r0, r2
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x210>
 80009c2:	e0b4      	b.n	8000b2e <__aeabi_dadd+0x37a>
 80009c4:	1e58      	subs	r0, r3, #1
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x218>
 80009ca:	e0de      	b.n	8000b8a <__aeabi_dadd+0x3d6>
 80009cc:	18ba      	adds	r2, r7, r2
 80009ce:	42ba      	cmp	r2, r7
 80009d0:	419b      	sbcs	r3, r3
 80009d2:	1864      	adds	r4, r4, r1
 80009d4:	425b      	negs	r3, r3
 80009d6:	18e4      	adds	r4, r4, r3
 80009d8:	0017      	movs	r7, r2
 80009da:	2601      	movs	r6, #1
 80009dc:	0223      	lsls	r3, r4, #8
 80009de:	d5a6      	bpl.n	800092e <__aeabi_dadd+0x17a>
 80009e0:	2602      	movs	r6, #2
 80009e2:	e7d5      	b.n	8000990 <__aeabi_dadd+0x1dc>
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d16e      	bne.n	8000ac6 <__aeabi_dadd+0x312>
 80009e8:	1c70      	adds	r0, r6, #1
 80009ea:	0540      	lsls	r0, r0, #21
 80009ec:	0d40      	lsrs	r0, r0, #21
 80009ee:	2801      	cmp	r0, #1
 80009f0:	dc00      	bgt.n	80009f4 <__aeabi_dadd+0x240>
 80009f2:	e0f9      	b.n	8000be8 <__aeabi_dadd+0x434>
 80009f4:	1ab8      	subs	r0, r7, r2
 80009f6:	4684      	mov	ip, r0
 80009f8:	4287      	cmp	r7, r0
 80009fa:	4180      	sbcs	r0, r0
 80009fc:	1ae5      	subs	r5, r4, r3
 80009fe:	4240      	negs	r0, r0
 8000a00:	1a2d      	subs	r5, r5, r0
 8000a02:	0228      	lsls	r0, r5, #8
 8000a04:	d400      	bmi.n	8000a08 <__aeabi_dadd+0x254>
 8000a06:	e089      	b.n	8000b1c <__aeabi_dadd+0x368>
 8000a08:	1bd7      	subs	r7, r2, r7
 8000a0a:	42ba      	cmp	r2, r7
 8000a0c:	4192      	sbcs	r2, r2
 8000a0e:	1b1c      	subs	r4, r3, r4
 8000a10:	4252      	negs	r2, r2
 8000a12:	1aa5      	subs	r5, r4, r2
 8000a14:	46d8      	mov	r8, fp
 8000a16:	e729      	b.n	800086c <__aeabi_dadd+0xb8>
 8000a18:	4645      	mov	r5, r8
 8000a1a:	2400      	movs	r4, #0
 8000a1c:	2700      	movs	r7, #0
 8000a1e:	e76a      	b.n	80008f6 <__aeabi_dadd+0x142>
 8000a20:	4c45      	ldr	r4, [pc, #276]	; (8000b38 <__aeabi_dadd+0x384>)
 8000a22:	1af6      	subs	r6, r6, r3
 8000a24:	402c      	ands	r4, r5
 8000a26:	e749      	b.n	80008bc <__aeabi_dadd+0x108>
 8000a28:	003d      	movs	r5, r7
 8000a2a:	3828      	subs	r0, #40	; 0x28
 8000a2c:	4085      	lsls	r5, r0
 8000a2e:	2700      	movs	r7, #0
 8000a30:	e72e      	b.n	8000890 <__aeabi_dadd+0xdc>
 8000a32:	0038      	movs	r0, r7
 8000a34:	f001 fc2e 	bl	8002294 <__clzsi2>
 8000a38:	3020      	adds	r0, #32
 8000a3a:	e71d      	b.n	8000878 <__aeabi_dadd+0xc4>
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	1e51      	subs	r1, r2, #1
 8000a40:	418a      	sbcs	r2, r1
 8000a42:	2100      	movs	r1, #0
 8000a44:	e707      	b.n	8000856 <__aeabi_dadd+0xa2>
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x298>
 8000a4a:	e0f3      	b.n	8000c34 <__aeabi_dadd+0x480>
 8000a4c:	1c70      	adds	r0, r6, #1
 8000a4e:	0543      	lsls	r3, r0, #21
 8000a50:	0d5b      	lsrs	r3, r3, #21
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	dc00      	bgt.n	8000a58 <__aeabi_dadd+0x2a4>
 8000a56:	e0ad      	b.n	8000bb4 <__aeabi_dadd+0x400>
 8000a58:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <__aeabi_dadd+0x380>)
 8000a5a:	4298      	cmp	r0, r3
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dadd+0x2ac>
 8000a5e:	e0d1      	b.n	8000c04 <__aeabi_dadd+0x450>
 8000a60:	18ba      	adds	r2, r7, r2
 8000a62:	42ba      	cmp	r2, r7
 8000a64:	41bf      	sbcs	r7, r7
 8000a66:	1864      	adds	r4, r4, r1
 8000a68:	427f      	negs	r7, r7
 8000a6a:	19e4      	adds	r4, r4, r7
 8000a6c:	07e7      	lsls	r7, r4, #31
 8000a6e:	0852      	lsrs	r2, r2, #1
 8000a70:	4317      	orrs	r7, r2
 8000a72:	0864      	lsrs	r4, r4, #1
 8000a74:	0006      	movs	r6, r0
 8000a76:	e721      	b.n	80008bc <__aeabi_dadd+0x108>
 8000a78:	482e      	ldr	r0, [pc, #184]	; (8000b34 <__aeabi_dadd+0x380>)
 8000a7a:	4285      	cmp	r5, r0
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x2cc>
 8000a7e:	e093      	b.n	8000ba8 <__aeabi_dadd+0x3f4>
 8000a80:	001d      	movs	r5, r3
 8000a82:	e6d0      	b.n	8000826 <__aeabi_dadd+0x72>
 8000a84:	0029      	movs	r1, r5
 8000a86:	3e1f      	subs	r6, #31
 8000a88:	40f1      	lsrs	r1, r6
 8000a8a:	2b20      	cmp	r3, #32
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x2dc>
 8000a8e:	e08d      	b.n	8000bac <__aeabi_dadd+0x3f8>
 8000a90:	2240      	movs	r2, #64	; 0x40
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	409d      	lsls	r5, r3
 8000a96:	432f      	orrs	r7, r5
 8000a98:	1e7d      	subs	r5, r7, #1
 8000a9a:	41af      	sbcs	r7, r5
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	430f      	orrs	r7, r1
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e744      	b.n	800092e <__aeabi_dadd+0x17a>
 8000aa4:	002b      	movs	r3, r5
 8000aa6:	0008      	movs	r0, r1
 8000aa8:	3b20      	subs	r3, #32
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	0003      	movs	r3, r0
 8000aae:	2d20      	cmp	r5, #32
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x300>
 8000ab2:	e07d      	b.n	8000bb0 <__aeabi_dadd+0x3fc>
 8000ab4:	2040      	movs	r0, #64	; 0x40
 8000ab6:	1b45      	subs	r5, r0, r5
 8000ab8:	40a9      	lsls	r1, r5
 8000aba:	430a      	orrs	r2, r1
 8000abc:	1e51      	subs	r1, r2, #1
 8000abe:	418a      	sbcs	r2, r1
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	e6c7      	b.n	8000856 <__aeabi_dadd+0xa2>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d050      	beq.n	8000b6c <__aeabi_dadd+0x3b8>
 8000aca:	4e1a      	ldr	r6, [pc, #104]	; (8000b34 <__aeabi_dadd+0x380>)
 8000acc:	42b0      	cmp	r0, r6
 8000ace:	d057      	beq.n	8000b80 <__aeabi_dadd+0x3cc>
 8000ad0:	2680      	movs	r6, #128	; 0x80
 8000ad2:	426b      	negs	r3, r5
 8000ad4:	4699      	mov	r9, r3
 8000ad6:	0436      	lsls	r6, r6, #16
 8000ad8:	4334      	orrs	r4, r6
 8000ada:	464b      	mov	r3, r9
 8000adc:	2b38      	cmp	r3, #56	; 0x38
 8000ade:	dd00      	ble.n	8000ae2 <__aeabi_dadd+0x32e>
 8000ae0:	e0d6      	b.n	8000c90 <__aeabi_dadd+0x4dc>
 8000ae2:	2b1f      	cmp	r3, #31
 8000ae4:	dd00      	ble.n	8000ae8 <__aeabi_dadd+0x334>
 8000ae6:	e135      	b.n	8000d54 <__aeabi_dadd+0x5a0>
 8000ae8:	2620      	movs	r6, #32
 8000aea:	1af5      	subs	r5, r6, r3
 8000aec:	0026      	movs	r6, r4
 8000aee:	40ae      	lsls	r6, r5
 8000af0:	46b2      	mov	sl, r6
 8000af2:	003e      	movs	r6, r7
 8000af4:	40de      	lsrs	r6, r3
 8000af6:	46ac      	mov	ip, r5
 8000af8:	0035      	movs	r5, r6
 8000afa:	4656      	mov	r6, sl
 8000afc:	432e      	orrs	r6, r5
 8000afe:	4665      	mov	r5, ip
 8000b00:	40af      	lsls	r7, r5
 8000b02:	1e7d      	subs	r5, r7, #1
 8000b04:	41af      	sbcs	r7, r5
 8000b06:	40dc      	lsrs	r4, r3
 8000b08:	4337      	orrs	r7, r6
 8000b0a:	1bd7      	subs	r7, r2, r7
 8000b0c:	42ba      	cmp	r2, r7
 8000b0e:	4192      	sbcs	r2, r2
 8000b10:	1b0c      	subs	r4, r1, r4
 8000b12:	4252      	negs	r2, r2
 8000b14:	1aa4      	subs	r4, r4, r2
 8000b16:	0006      	movs	r6, r0
 8000b18:	46d8      	mov	r8, fp
 8000b1a:	e6a3      	b.n	8000864 <__aeabi_dadd+0xb0>
 8000b1c:	4664      	mov	r4, ip
 8000b1e:	4667      	mov	r7, ip
 8000b20:	432c      	orrs	r4, r5
 8000b22:	d000      	beq.n	8000b26 <__aeabi_dadd+0x372>
 8000b24:	e6a2      	b.n	800086c <__aeabi_dadd+0xb8>
 8000b26:	2500      	movs	r5, #0
 8000b28:	2600      	movs	r6, #0
 8000b2a:	2700      	movs	r7, #0
 8000b2c:	e706      	b.n	800093c <__aeabi_dadd+0x188>
 8000b2e:	001e      	movs	r6, r3
 8000b30:	e6c4      	b.n	80008bc <__aeabi_dadd+0x108>
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	000007ff 	.word	0x000007ff
 8000b38:	ff7fffff 	.word	0xff7fffff
 8000b3c:	800fffff 	.word	0x800fffff
 8000b40:	2b1f      	cmp	r3, #31
 8000b42:	dc63      	bgt.n	8000c0c <__aeabi_dadd+0x458>
 8000b44:	2020      	movs	r0, #32
 8000b46:	1ac3      	subs	r3, r0, r3
 8000b48:	0008      	movs	r0, r1
 8000b4a:	4098      	lsls	r0, r3
 8000b4c:	469c      	mov	ip, r3
 8000b4e:	4683      	mov	fp, r0
 8000b50:	4653      	mov	r3, sl
 8000b52:	0010      	movs	r0, r2
 8000b54:	40d8      	lsrs	r0, r3
 8000b56:	0003      	movs	r3, r0
 8000b58:	4658      	mov	r0, fp
 8000b5a:	4318      	orrs	r0, r3
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	1e53      	subs	r3, r2, #1
 8000b62:	419a      	sbcs	r2, r3
 8000b64:	4653      	mov	r3, sl
 8000b66:	4302      	orrs	r2, r0
 8000b68:	40d9      	lsrs	r1, r3
 8000b6a:	e703      	b.n	8000974 <__aeabi_dadd+0x1c0>
 8000b6c:	0026      	movs	r6, r4
 8000b6e:	433e      	orrs	r6, r7
 8000b70:	d006      	beq.n	8000b80 <__aeabi_dadd+0x3cc>
 8000b72:	43eb      	mvns	r3, r5
 8000b74:	4699      	mov	r9, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0c7      	beq.n	8000b0a <__aeabi_dadd+0x356>
 8000b7a:	4e94      	ldr	r6, [pc, #592]	; (8000dcc <__aeabi_dadd+0x618>)
 8000b7c:	42b0      	cmp	r0, r6
 8000b7e:	d1ac      	bne.n	8000ada <__aeabi_dadd+0x326>
 8000b80:	000c      	movs	r4, r1
 8000b82:	0017      	movs	r7, r2
 8000b84:	0006      	movs	r6, r0
 8000b86:	46d8      	mov	r8, fp
 8000b88:	e698      	b.n	80008bc <__aeabi_dadd+0x108>
 8000b8a:	4b90      	ldr	r3, [pc, #576]	; (8000dcc <__aeabi_dadd+0x618>)
 8000b8c:	459a      	cmp	sl, r3
 8000b8e:	d00b      	beq.n	8000ba8 <__aeabi_dadd+0x3f4>
 8000b90:	4682      	mov	sl, r0
 8000b92:	e6e7      	b.n	8000964 <__aeabi_dadd+0x1b0>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d000      	beq.n	8000b9a <__aeabi_dadd+0x3e6>
 8000b98:	e09e      	b.n	8000cd8 <__aeabi_dadd+0x524>
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	4310      	orrs	r0, r2
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x3ee>
 8000ba0:	e0e9      	b.n	8000d76 <__aeabi_dadd+0x5c2>
 8000ba2:	001c      	movs	r4, r3
 8000ba4:	0017      	movs	r7, r2
 8000ba6:	46d8      	mov	r8, fp
 8000ba8:	4e88      	ldr	r6, [pc, #544]	; (8000dcc <__aeabi_dadd+0x618>)
 8000baa:	e687      	b.n	80008bc <__aeabi_dadd+0x108>
 8000bac:	2500      	movs	r5, #0
 8000bae:	e772      	b.n	8000a96 <__aeabi_dadd+0x2e2>
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	e782      	b.n	8000aba <__aeabi_dadd+0x306>
 8000bb4:	0023      	movs	r3, r4
 8000bb6:	433b      	orrs	r3, r7
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d000      	beq.n	8000bbe <__aeabi_dadd+0x40a>
 8000bbc:	e0ab      	b.n	8000d16 <__aeabi_dadd+0x562>
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x410>
 8000bc2:	e0e7      	b.n	8000d94 <__aeabi_dadd+0x5e0>
 8000bc4:	000b      	movs	r3, r1
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x418>
 8000bca:	e677      	b.n	80008bc <__aeabi_dadd+0x108>
 8000bcc:	18ba      	adds	r2, r7, r2
 8000bce:	42ba      	cmp	r2, r7
 8000bd0:	41bf      	sbcs	r7, r7
 8000bd2:	1864      	adds	r4, r4, r1
 8000bd4:	427f      	negs	r7, r7
 8000bd6:	19e4      	adds	r4, r4, r7
 8000bd8:	0223      	lsls	r3, r4, #8
 8000bda:	d400      	bmi.n	8000bde <__aeabi_dadd+0x42a>
 8000bdc:	e0f2      	b.n	8000dc4 <__aeabi_dadd+0x610>
 8000bde:	4b7c      	ldr	r3, [pc, #496]	; (8000dd0 <__aeabi_dadd+0x61c>)
 8000be0:	0017      	movs	r7, r2
 8000be2:	401c      	ands	r4, r3
 8000be4:	0006      	movs	r6, r0
 8000be6:	e669      	b.n	80008bc <__aeabi_dadd+0x108>
 8000be8:	0020      	movs	r0, r4
 8000bea:	4338      	orrs	r0, r7
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d1d1      	bne.n	8000b94 <__aeabi_dadd+0x3e0>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	d15b      	bne.n	8000cac <__aeabi_dadd+0x4f8>
 8000bf4:	001c      	movs	r4, r3
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0x448>
 8000bfa:	e0a8      	b.n	8000d4e <__aeabi_dadd+0x59a>
 8000bfc:	001c      	movs	r4, r3
 8000bfe:	0017      	movs	r7, r2
 8000c00:	46d8      	mov	r8, fp
 8000c02:	e65b      	b.n	80008bc <__aeabi_dadd+0x108>
 8000c04:	0006      	movs	r6, r0
 8000c06:	2400      	movs	r4, #0
 8000c08:	2700      	movs	r7, #0
 8000c0a:	e697      	b.n	800093c <__aeabi_dadd+0x188>
 8000c0c:	4650      	mov	r0, sl
 8000c0e:	000b      	movs	r3, r1
 8000c10:	3820      	subs	r0, #32
 8000c12:	40c3      	lsrs	r3, r0
 8000c14:	4699      	mov	r9, r3
 8000c16:	4653      	mov	r3, sl
 8000c18:	2b20      	cmp	r3, #32
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x46a>
 8000c1c:	e095      	b.n	8000d4a <__aeabi_dadd+0x596>
 8000c1e:	2340      	movs	r3, #64	; 0x40
 8000c20:	4650      	mov	r0, sl
 8000c22:	1a1b      	subs	r3, r3, r0
 8000c24:	4099      	lsls	r1, r3
 8000c26:	430a      	orrs	r2, r1
 8000c28:	1e51      	subs	r1, r2, #1
 8000c2a:	418a      	sbcs	r2, r1
 8000c2c:	464b      	mov	r3, r9
 8000c2e:	2100      	movs	r1, #0
 8000c30:	431a      	orrs	r2, r3
 8000c32:	e69f      	b.n	8000974 <__aeabi_dadd+0x1c0>
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d130      	bne.n	8000c9a <__aeabi_dadd+0x4e6>
 8000c38:	0026      	movs	r6, r4
 8000c3a:	433e      	orrs	r6, r7
 8000c3c:	d067      	beq.n	8000d0e <__aeabi_dadd+0x55a>
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	469a      	mov	sl, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01c      	beq.n	8000c80 <__aeabi_dadd+0x4cc>
 8000c46:	4e61      	ldr	r6, [pc, #388]	; (8000dcc <__aeabi_dadd+0x618>)
 8000c48:	42b0      	cmp	r0, r6
 8000c4a:	d060      	beq.n	8000d0e <__aeabi_dadd+0x55a>
 8000c4c:	4653      	mov	r3, sl
 8000c4e:	2b38      	cmp	r3, #56	; 0x38
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_dadd+0x4a0>
 8000c52:	e096      	b.n	8000d82 <__aeabi_dadd+0x5ce>
 8000c54:	2b1f      	cmp	r3, #31
 8000c56:	dd00      	ble.n	8000c5a <__aeabi_dadd+0x4a6>
 8000c58:	e09f      	b.n	8000d9a <__aeabi_dadd+0x5e6>
 8000c5a:	2620      	movs	r6, #32
 8000c5c:	1af3      	subs	r3, r6, r3
 8000c5e:	0026      	movs	r6, r4
 8000c60:	409e      	lsls	r6, r3
 8000c62:	469c      	mov	ip, r3
 8000c64:	46b3      	mov	fp, r6
 8000c66:	4653      	mov	r3, sl
 8000c68:	003e      	movs	r6, r7
 8000c6a:	40de      	lsrs	r6, r3
 8000c6c:	0033      	movs	r3, r6
 8000c6e:	465e      	mov	r6, fp
 8000c70:	431e      	orrs	r6, r3
 8000c72:	4663      	mov	r3, ip
 8000c74:	409f      	lsls	r7, r3
 8000c76:	1e7b      	subs	r3, r7, #1
 8000c78:	419f      	sbcs	r7, r3
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	40dc      	lsrs	r4, r3
 8000c7e:	4337      	orrs	r7, r6
 8000c80:	18bf      	adds	r7, r7, r2
 8000c82:	4297      	cmp	r7, r2
 8000c84:	4192      	sbcs	r2, r2
 8000c86:	1864      	adds	r4, r4, r1
 8000c88:	4252      	negs	r2, r2
 8000c8a:	18a4      	adds	r4, r4, r2
 8000c8c:	0006      	movs	r6, r0
 8000c8e:	e678      	b.n	8000982 <__aeabi_dadd+0x1ce>
 8000c90:	4327      	orrs	r7, r4
 8000c92:	1e7c      	subs	r4, r7, #1
 8000c94:	41a7      	sbcs	r7, r4
 8000c96:	2400      	movs	r4, #0
 8000c98:	e737      	b.n	8000b0a <__aeabi_dadd+0x356>
 8000c9a:	4e4c      	ldr	r6, [pc, #304]	; (8000dcc <__aeabi_dadd+0x618>)
 8000c9c:	42b0      	cmp	r0, r6
 8000c9e:	d036      	beq.n	8000d0e <__aeabi_dadd+0x55a>
 8000ca0:	2680      	movs	r6, #128	; 0x80
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	0436      	lsls	r6, r6, #16
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	4334      	orrs	r4, r6
 8000caa:	e7cf      	b.n	8000c4c <__aeabi_dadd+0x498>
 8000cac:	0018      	movs	r0, r3
 8000cae:	4310      	orrs	r0, r2
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_dadd+0x500>
 8000cb2:	e603      	b.n	80008bc <__aeabi_dadd+0x108>
 8000cb4:	1ab8      	subs	r0, r7, r2
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	4567      	cmp	r7, ip
 8000cba:	41ad      	sbcs	r5, r5
 8000cbc:	1ae0      	subs	r0, r4, r3
 8000cbe:	426d      	negs	r5, r5
 8000cc0:	1b40      	subs	r0, r0, r5
 8000cc2:	0205      	lsls	r5, r0, #8
 8000cc4:	d400      	bmi.n	8000cc8 <__aeabi_dadd+0x514>
 8000cc6:	e62c      	b.n	8000922 <__aeabi_dadd+0x16e>
 8000cc8:	1bd7      	subs	r7, r2, r7
 8000cca:	42ba      	cmp	r2, r7
 8000ccc:	4192      	sbcs	r2, r2
 8000cce:	1b1c      	subs	r4, r3, r4
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	1aa4      	subs	r4, r4, r2
 8000cd4:	46d8      	mov	r8, fp
 8000cd6:	e5f1      	b.n	80008bc <__aeabi_dadd+0x108>
 8000cd8:	0018      	movs	r0, r3
 8000cda:	4310      	orrs	r0, r2
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dadd+0x52c>
 8000cde:	e763      	b.n	8000ba8 <__aeabi_dadd+0x3f4>
 8000ce0:	08f8      	lsrs	r0, r7, #3
 8000ce2:	0767      	lsls	r7, r4, #29
 8000ce4:	4307      	orrs	r7, r0
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	08e4      	lsrs	r4, r4, #3
 8000cea:	0300      	lsls	r0, r0, #12
 8000cec:	4204      	tst	r4, r0
 8000cee:	d008      	beq.n	8000d02 <__aeabi_dadd+0x54e>
 8000cf0:	08dd      	lsrs	r5, r3, #3
 8000cf2:	4205      	tst	r5, r0
 8000cf4:	d105      	bne.n	8000d02 <__aeabi_dadd+0x54e>
 8000cf6:	08d2      	lsrs	r2, r2, #3
 8000cf8:	0759      	lsls	r1, r3, #29
 8000cfa:	4311      	orrs	r1, r2
 8000cfc:	000f      	movs	r7, r1
 8000cfe:	002c      	movs	r4, r5
 8000d00:	46d8      	mov	r8, fp
 8000d02:	0f7b      	lsrs	r3, r7, #29
 8000d04:	00e4      	lsls	r4, r4, #3
 8000d06:	431c      	orrs	r4, r3
 8000d08:	00ff      	lsls	r7, r7, #3
 8000d0a:	4e30      	ldr	r6, [pc, #192]	; (8000dcc <__aeabi_dadd+0x618>)
 8000d0c:	e5d6      	b.n	80008bc <__aeabi_dadd+0x108>
 8000d0e:	000c      	movs	r4, r1
 8000d10:	0017      	movs	r7, r2
 8000d12:	0006      	movs	r6, r0
 8000d14:	e5d2      	b.n	80008bc <__aeabi_dadd+0x108>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d038      	beq.n	8000d8c <__aeabi_dadd+0x5d8>
 8000d1a:	000b      	movs	r3, r1
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dadd+0x56e>
 8000d20:	e742      	b.n	8000ba8 <__aeabi_dadd+0x3f4>
 8000d22:	08f8      	lsrs	r0, r7, #3
 8000d24:	0767      	lsls	r7, r4, #29
 8000d26:	4307      	orrs	r7, r0
 8000d28:	2080      	movs	r0, #128	; 0x80
 8000d2a:	08e4      	lsrs	r4, r4, #3
 8000d2c:	0300      	lsls	r0, r0, #12
 8000d2e:	4204      	tst	r4, r0
 8000d30:	d0e7      	beq.n	8000d02 <__aeabi_dadd+0x54e>
 8000d32:	08cb      	lsrs	r3, r1, #3
 8000d34:	4203      	tst	r3, r0
 8000d36:	d1e4      	bne.n	8000d02 <__aeabi_dadd+0x54e>
 8000d38:	08d2      	lsrs	r2, r2, #3
 8000d3a:	0749      	lsls	r1, r1, #29
 8000d3c:	4311      	orrs	r1, r2
 8000d3e:	000f      	movs	r7, r1
 8000d40:	001c      	movs	r4, r3
 8000d42:	e7de      	b.n	8000d02 <__aeabi_dadd+0x54e>
 8000d44:	2700      	movs	r7, #0
 8000d46:	2400      	movs	r4, #0
 8000d48:	e5d5      	b.n	80008f6 <__aeabi_dadd+0x142>
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	e76b      	b.n	8000c26 <__aeabi_dadd+0x472>
 8000d4e:	2500      	movs	r5, #0
 8000d50:	2700      	movs	r7, #0
 8000d52:	e5f3      	b.n	800093c <__aeabi_dadd+0x188>
 8000d54:	464e      	mov	r6, r9
 8000d56:	0025      	movs	r5, r4
 8000d58:	3e20      	subs	r6, #32
 8000d5a:	40f5      	lsrs	r5, r6
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	002e      	movs	r6, r5
 8000d60:	2b20      	cmp	r3, #32
 8000d62:	d02d      	beq.n	8000dc0 <__aeabi_dadd+0x60c>
 8000d64:	2540      	movs	r5, #64	; 0x40
 8000d66:	1aed      	subs	r5, r5, r3
 8000d68:	40ac      	lsls	r4, r5
 8000d6a:	4327      	orrs	r7, r4
 8000d6c:	1e7c      	subs	r4, r7, #1
 8000d6e:	41a7      	sbcs	r7, r4
 8000d70:	2400      	movs	r4, #0
 8000d72:	4337      	orrs	r7, r6
 8000d74:	e6c9      	b.n	8000b0a <__aeabi_dadd+0x356>
 8000d76:	2480      	movs	r4, #128	; 0x80
 8000d78:	2500      	movs	r5, #0
 8000d7a:	0324      	lsls	r4, r4, #12
 8000d7c:	4e13      	ldr	r6, [pc, #76]	; (8000dcc <__aeabi_dadd+0x618>)
 8000d7e:	2700      	movs	r7, #0
 8000d80:	e5dc      	b.n	800093c <__aeabi_dadd+0x188>
 8000d82:	4327      	orrs	r7, r4
 8000d84:	1e7c      	subs	r4, r7, #1
 8000d86:	41a7      	sbcs	r7, r4
 8000d88:	2400      	movs	r4, #0
 8000d8a:	e779      	b.n	8000c80 <__aeabi_dadd+0x4cc>
 8000d8c:	000c      	movs	r4, r1
 8000d8e:	0017      	movs	r7, r2
 8000d90:	4e0e      	ldr	r6, [pc, #56]	; (8000dcc <__aeabi_dadd+0x618>)
 8000d92:	e593      	b.n	80008bc <__aeabi_dadd+0x108>
 8000d94:	000c      	movs	r4, r1
 8000d96:	0017      	movs	r7, r2
 8000d98:	e590      	b.n	80008bc <__aeabi_dadd+0x108>
 8000d9a:	4656      	mov	r6, sl
 8000d9c:	0023      	movs	r3, r4
 8000d9e:	3e20      	subs	r6, #32
 8000da0:	40f3      	lsrs	r3, r6
 8000da2:	4699      	mov	r9, r3
 8000da4:	4653      	mov	r3, sl
 8000da6:	2b20      	cmp	r3, #32
 8000da8:	d00e      	beq.n	8000dc8 <__aeabi_dadd+0x614>
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	4656      	mov	r6, sl
 8000dae:	1b9b      	subs	r3, r3, r6
 8000db0:	409c      	lsls	r4, r3
 8000db2:	4327      	orrs	r7, r4
 8000db4:	1e7c      	subs	r4, r7, #1
 8000db6:	41a7      	sbcs	r7, r4
 8000db8:	464b      	mov	r3, r9
 8000dba:	2400      	movs	r4, #0
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e75f      	b.n	8000c80 <__aeabi_dadd+0x4cc>
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	e7d2      	b.n	8000d6a <__aeabi_dadd+0x5b6>
 8000dc4:	0017      	movs	r7, r2
 8000dc6:	e5b2      	b.n	800092e <__aeabi_dadd+0x17a>
 8000dc8:	2400      	movs	r4, #0
 8000dca:	e7f2      	b.n	8000db2 <__aeabi_dadd+0x5fe>
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	ff7fffff 	.word	0xff7fffff

08000dd4 <__aeabi_ddiv>:
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	4657      	mov	r7, sl
 8000dd8:	4645      	mov	r5, r8
 8000dda:	46de      	mov	lr, fp
 8000ddc:	464e      	mov	r6, r9
 8000dde:	b5e0      	push	{r5, r6, r7, lr}
 8000de0:	004c      	lsls	r4, r1, #1
 8000de2:	030e      	lsls	r6, r1, #12
 8000de4:	b087      	sub	sp, #28
 8000de6:	4683      	mov	fp, r0
 8000de8:	4692      	mov	sl, r2
 8000dea:	001d      	movs	r5, r3
 8000dec:	4680      	mov	r8, r0
 8000dee:	0b36      	lsrs	r6, r6, #12
 8000df0:	0d64      	lsrs	r4, r4, #21
 8000df2:	0fcf      	lsrs	r7, r1, #31
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d04f      	beq.n	8000e98 <__aeabi_ddiv+0xc4>
 8000df8:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <__aeabi_ddiv+0x1e4>)
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	d035      	beq.n	8000e6a <__aeabi_ddiv+0x96>
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	0f42      	lsrs	r2, r0, #29
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	00f6      	lsls	r6, r6, #3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	4333      	orrs	r3, r6
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	00c3      	lsls	r3, r0, #3
 8000e0e:	4698      	mov	r8, r3
 8000e10:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <__aeabi_ddiv+0x1e8>)
 8000e12:	2600      	movs	r6, #0
 8000e14:	469c      	mov	ip, r3
 8000e16:	2300      	movs	r3, #0
 8000e18:	4464      	add	r4, ip
 8000e1a:	9303      	str	r3, [sp, #12]
 8000e1c:	032b      	lsls	r3, r5, #12
 8000e1e:	0b1b      	lsrs	r3, r3, #12
 8000e20:	469b      	mov	fp, r3
 8000e22:	006b      	lsls	r3, r5, #1
 8000e24:	0fed      	lsrs	r5, r5, #31
 8000e26:	4650      	mov	r0, sl
 8000e28:	0d5b      	lsrs	r3, r3, #21
 8000e2a:	9501      	str	r5, [sp, #4]
 8000e2c:	d05e      	beq.n	8000eec <__aeabi_ddiv+0x118>
 8000e2e:	4a62      	ldr	r2, [pc, #392]	; (8000fb8 <__aeabi_ddiv+0x1e4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d053      	beq.n	8000edc <__aeabi_ddiv+0x108>
 8000e34:	465a      	mov	r2, fp
 8000e36:	00d1      	lsls	r1, r2, #3
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0f40      	lsrs	r0, r0, #29
 8000e3c:	0412      	lsls	r2, r2, #16
 8000e3e:	4302      	orrs	r2, r0
 8000e40:	430a      	orrs	r2, r1
 8000e42:	4693      	mov	fp, r2
 8000e44:	4652      	mov	r2, sl
 8000e46:	00d1      	lsls	r1, r2, #3
 8000e48:	4a5c      	ldr	r2, [pc, #368]	; (8000fbc <__aeabi_ddiv+0x1e8>)
 8000e4a:	4694      	mov	ip, r2
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4463      	add	r3, ip
 8000e50:	0038      	movs	r0, r7
 8000e52:	4068      	eors	r0, r5
 8000e54:	4684      	mov	ip, r0
 8000e56:	9002      	str	r0, [sp, #8]
 8000e58:	1ae4      	subs	r4, r4, r3
 8000e5a:	4316      	orrs	r6, r2
 8000e5c:	2e0f      	cmp	r6, #15
 8000e5e:	d900      	bls.n	8000e62 <__aeabi_ddiv+0x8e>
 8000e60:	e0b4      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 8000e62:	4b57      	ldr	r3, [pc, #348]	; (8000fc0 <__aeabi_ddiv+0x1ec>)
 8000e64:	00b6      	lsls	r6, r6, #2
 8000e66:	599b      	ldr	r3, [r3, r6]
 8000e68:	469f      	mov	pc, r3
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	4333      	orrs	r3, r6
 8000e6e:	4699      	mov	r9, r3
 8000e70:	d16c      	bne.n	8000f4c <__aeabi_ddiv+0x178>
 8000e72:	2300      	movs	r3, #0
 8000e74:	4698      	mov	r8, r3
 8000e76:	3302      	adds	r3, #2
 8000e78:	2608      	movs	r6, #8
 8000e7a:	9303      	str	r3, [sp, #12]
 8000e7c:	e7ce      	b.n	8000e1c <__aeabi_ddiv+0x48>
 8000e7e:	46cb      	mov	fp, r9
 8000e80:	4641      	mov	r1, r8
 8000e82:	9a03      	ldr	r2, [sp, #12]
 8000e84:	9701      	str	r7, [sp, #4]
 8000e86:	2a02      	cmp	r2, #2
 8000e88:	d165      	bne.n	8000f56 <__aeabi_ddiv+0x182>
 8000e8a:	9b01      	ldr	r3, [sp, #4]
 8000e8c:	4c4a      	ldr	r4, [pc, #296]	; (8000fb8 <__aeabi_ddiv+0x1e4>)
 8000e8e:	469c      	mov	ip, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	4698      	mov	r8, r3
 8000e96:	e06b      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	4333      	orrs	r3, r6
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	d04e      	beq.n	8000f3e <__aeabi_ddiv+0x16a>
 8000ea0:	2e00      	cmp	r6, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0xd2>
 8000ea4:	e1bc      	b.n	8001220 <__aeabi_ddiv+0x44c>
 8000ea6:	0030      	movs	r0, r6
 8000ea8:	f001 f9f4 	bl	8002294 <__clzsi2>
 8000eac:	0003      	movs	r3, r0
 8000eae:	3b0b      	subs	r3, #11
 8000eb0:	2b1c      	cmp	r3, #28
 8000eb2:	dd00      	ble.n	8000eb6 <__aeabi_ddiv+0xe2>
 8000eb4:	e1ac      	b.n	8001210 <__aeabi_ddiv+0x43c>
 8000eb6:	221d      	movs	r2, #29
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	465a      	mov	r2, fp
 8000ebc:	0001      	movs	r1, r0
 8000ebe:	40da      	lsrs	r2, r3
 8000ec0:	3908      	subs	r1, #8
 8000ec2:	408e      	lsls	r6, r1
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	4333      	orrs	r3, r6
 8000ec8:	4699      	mov	r9, r3
 8000eca:	465b      	mov	r3, fp
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	4698      	mov	r8, r3
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4c3c      	ldr	r4, [pc, #240]	; (8000fc4 <__aeabi_ddiv+0x1f0>)
 8000ed4:	2600      	movs	r6, #0
 8000ed6:	1a24      	subs	r4, r4, r0
 8000ed8:	9303      	str	r3, [sp, #12]
 8000eda:	e79f      	b.n	8000e1c <__aeabi_ddiv+0x48>
 8000edc:	4651      	mov	r1, sl
 8000ede:	465a      	mov	r2, fp
 8000ee0:	4311      	orrs	r1, r2
 8000ee2:	d129      	bne.n	8000f38 <__aeabi_ddiv+0x164>
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4693      	mov	fp, r2
 8000ee8:	3202      	adds	r2, #2
 8000eea:	e7b1      	b.n	8000e50 <__aeabi_ddiv+0x7c>
 8000eec:	4659      	mov	r1, fp
 8000eee:	4301      	orrs	r1, r0
 8000ef0:	d01e      	beq.n	8000f30 <__aeabi_ddiv+0x15c>
 8000ef2:	465b      	mov	r3, fp
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d100      	bne.n	8000efa <__aeabi_ddiv+0x126>
 8000ef8:	e19e      	b.n	8001238 <__aeabi_ddiv+0x464>
 8000efa:	4658      	mov	r0, fp
 8000efc:	f001 f9ca 	bl	8002294 <__clzsi2>
 8000f00:	0003      	movs	r3, r0
 8000f02:	3b0b      	subs	r3, #11
 8000f04:	2b1c      	cmp	r3, #28
 8000f06:	dd00      	ble.n	8000f0a <__aeabi_ddiv+0x136>
 8000f08:	e18f      	b.n	800122a <__aeabi_ddiv+0x456>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	4659      	mov	r1, fp
 8000f0e:	3a08      	subs	r2, #8
 8000f10:	4091      	lsls	r1, r2
 8000f12:	468b      	mov	fp, r1
 8000f14:	211d      	movs	r1, #29
 8000f16:	1acb      	subs	r3, r1, r3
 8000f18:	4651      	mov	r1, sl
 8000f1a:	40d9      	lsrs	r1, r3
 8000f1c:	000b      	movs	r3, r1
 8000f1e:	4659      	mov	r1, fp
 8000f20:	430b      	orrs	r3, r1
 8000f22:	4651      	mov	r1, sl
 8000f24:	469b      	mov	fp, r3
 8000f26:	4091      	lsls	r1, r2
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <__aeabi_ddiv+0x1f0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	1a1b      	subs	r3, r3, r0
 8000f2e:	e78f      	b.n	8000e50 <__aeabi_ddiv+0x7c>
 8000f30:	2300      	movs	r3, #0
 8000f32:	2201      	movs	r2, #1
 8000f34:	469b      	mov	fp, r3
 8000f36:	e78b      	b.n	8000e50 <__aeabi_ddiv+0x7c>
 8000f38:	4651      	mov	r1, sl
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	e788      	b.n	8000e50 <__aeabi_ddiv+0x7c>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	4698      	mov	r8, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	2604      	movs	r6, #4
 8000f46:	2400      	movs	r4, #0
 8000f48:	9303      	str	r3, [sp, #12]
 8000f4a:	e767      	b.n	8000e1c <__aeabi_ddiv+0x48>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	46b1      	mov	r9, r6
 8000f50:	9303      	str	r3, [sp, #12]
 8000f52:	260c      	movs	r6, #12
 8000f54:	e762      	b.n	8000e1c <__aeabi_ddiv+0x48>
 8000f56:	2a03      	cmp	r2, #3
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x188>
 8000f5a:	e25c      	b.n	8001416 <__aeabi_ddiv+0x642>
 8000f5c:	9b01      	ldr	r3, [sp, #4]
 8000f5e:	2a01      	cmp	r2, #1
 8000f60:	d000      	beq.n	8000f64 <__aeabi_ddiv+0x190>
 8000f62:	e1e4      	b.n	800132e <__aeabi_ddiv+0x55a>
 8000f64:	4013      	ands	r3, r2
 8000f66:	469c      	mov	ip, r3
 8000f68:	2300      	movs	r3, #0
 8000f6a:	2400      	movs	r4, #0
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4698      	mov	r8, r3
 8000f70:	2100      	movs	r1, #0
 8000f72:	0312      	lsls	r2, r2, #12
 8000f74:	0b13      	lsrs	r3, r2, #12
 8000f76:	0d0a      	lsrs	r2, r1, #20
 8000f78:	0512      	lsls	r2, r2, #20
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	0523      	lsls	r3, r4, #20
 8000f7e:	4c12      	ldr	r4, [pc, #72]	; (8000fc8 <__aeabi_ddiv+0x1f4>)
 8000f80:	4640      	mov	r0, r8
 8000f82:	4022      	ands	r2, r4
 8000f84:	4313      	orrs	r3, r2
 8000f86:	4662      	mov	r2, ip
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	07d2      	lsls	r2, r2, #31
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	b007      	add	sp, #28
 8000f94:	bc3c      	pop	{r2, r3, r4, r5}
 8000f96:	4690      	mov	r8, r2
 8000f98:	4699      	mov	r9, r3
 8000f9a:	46a2      	mov	sl, r4
 8000f9c:	46ab      	mov	fp, r5
 8000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	469c      	mov	ip, r3
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	4698      	mov	r8, r3
 8000faa:	4c03      	ldr	r4, [pc, #12]	; (8000fb8 <__aeabi_ddiv+0x1e4>)
 8000fac:	e7e0      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	4c01      	ldr	r4, [pc, #4]	; (8000fb8 <__aeabi_ddiv+0x1e4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	e7db      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 8000fb8:	000007ff 	.word	0x000007ff
 8000fbc:	fffffc01 	.word	0xfffffc01
 8000fc0:	08006610 	.word	0x08006610
 8000fc4:	fffffc0d 	.word	0xfffffc0d
 8000fc8:	800fffff 	.word	0x800fffff
 8000fcc:	45d9      	cmp	r9, fp
 8000fce:	d900      	bls.n	8000fd2 <__aeabi_ddiv+0x1fe>
 8000fd0:	e139      	b.n	8001246 <__aeabi_ddiv+0x472>
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x202>
 8000fd4:	e134      	b.n	8001240 <__aeabi_ddiv+0x46c>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	4646      	mov	r6, r8
 8000fda:	464d      	mov	r5, r9
 8000fdc:	469a      	mov	sl, r3
 8000fde:	3c01      	subs	r4, #1
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	0e0a      	lsrs	r2, r1, #24
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	020b      	lsls	r3, r1, #8
 8000fea:	0c17      	lsrs	r7, r2, #16
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	0413      	lsls	r3, r2, #16
 8000ff0:	0c1b      	lsrs	r3, r3, #16
 8000ff2:	0039      	movs	r1, r7
 8000ff4:	0028      	movs	r0, r5
 8000ff6:	4690      	mov	r8, r2
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f7ff f8a1 	bl	8000140 <__udivsi3>
 8000ffe:	0002      	movs	r2, r0
 8001000:	9b01      	ldr	r3, [sp, #4]
 8001002:	4683      	mov	fp, r0
 8001004:	435a      	muls	r2, r3
 8001006:	0028      	movs	r0, r5
 8001008:	0039      	movs	r1, r7
 800100a:	4691      	mov	r9, r2
 800100c:	f7ff f91e 	bl	800024c <__aeabi_uidivmod>
 8001010:	0c35      	lsrs	r5, r6, #16
 8001012:	0409      	lsls	r1, r1, #16
 8001014:	430d      	orrs	r5, r1
 8001016:	45a9      	cmp	r9, r5
 8001018:	d90d      	bls.n	8001036 <__aeabi_ddiv+0x262>
 800101a:	465b      	mov	r3, fp
 800101c:	4445      	add	r5, r8
 800101e:	3b01      	subs	r3, #1
 8001020:	45a8      	cmp	r8, r5
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x252>
 8001024:	e13a      	b.n	800129c <__aeabi_ddiv+0x4c8>
 8001026:	45a9      	cmp	r9, r5
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x258>
 800102a:	e137      	b.n	800129c <__aeabi_ddiv+0x4c8>
 800102c:	2302      	movs	r3, #2
 800102e:	425b      	negs	r3, r3
 8001030:	469c      	mov	ip, r3
 8001032:	4445      	add	r5, r8
 8001034:	44e3      	add	fp, ip
 8001036:	464b      	mov	r3, r9
 8001038:	1aeb      	subs	r3, r5, r3
 800103a:	0039      	movs	r1, r7
 800103c:	0018      	movs	r0, r3
 800103e:	9304      	str	r3, [sp, #16]
 8001040:	f7ff f87e 	bl	8000140 <__udivsi3>
 8001044:	9b01      	ldr	r3, [sp, #4]
 8001046:	0005      	movs	r5, r0
 8001048:	4343      	muls	r3, r0
 800104a:	0039      	movs	r1, r7
 800104c:	9804      	ldr	r0, [sp, #16]
 800104e:	4699      	mov	r9, r3
 8001050:	f7ff f8fc 	bl	800024c <__aeabi_uidivmod>
 8001054:	0433      	lsls	r3, r6, #16
 8001056:	0409      	lsls	r1, r1, #16
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	430b      	orrs	r3, r1
 800105c:	4599      	cmp	r9, r3
 800105e:	d909      	bls.n	8001074 <__aeabi_ddiv+0x2a0>
 8001060:	4443      	add	r3, r8
 8001062:	1e6a      	subs	r2, r5, #1
 8001064:	4598      	cmp	r8, r3
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x296>
 8001068:	e11a      	b.n	80012a0 <__aeabi_ddiv+0x4cc>
 800106a:	4599      	cmp	r9, r3
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x29c>
 800106e:	e117      	b.n	80012a0 <__aeabi_ddiv+0x4cc>
 8001070:	3d02      	subs	r5, #2
 8001072:	4443      	add	r3, r8
 8001074:	464a      	mov	r2, r9
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	465a      	mov	r2, fp
 800107a:	0412      	lsls	r2, r2, #16
 800107c:	432a      	orrs	r2, r5
 800107e:	9903      	ldr	r1, [sp, #12]
 8001080:	4693      	mov	fp, r2
 8001082:	0c10      	lsrs	r0, r2, #16
 8001084:	0c0a      	lsrs	r2, r1, #16
 8001086:	4691      	mov	r9, r2
 8001088:	0409      	lsls	r1, r1, #16
 800108a:	465a      	mov	r2, fp
 800108c:	0c09      	lsrs	r1, r1, #16
 800108e:	464e      	mov	r6, r9
 8001090:	000d      	movs	r5, r1
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4345      	muls	r5, r0
 8001098:	9105      	str	r1, [sp, #20]
 800109a:	4351      	muls	r1, r2
 800109c:	4372      	muls	r2, r6
 800109e:	4370      	muls	r0, r6
 80010a0:	1952      	adds	r2, r2, r5
 80010a2:	0c0e      	lsrs	r6, r1, #16
 80010a4:	18b2      	adds	r2, r6, r2
 80010a6:	4295      	cmp	r5, r2
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x2de>
 80010aa:	2580      	movs	r5, #128	; 0x80
 80010ac:	026d      	lsls	r5, r5, #9
 80010ae:	46ac      	mov	ip, r5
 80010b0:	4460      	add	r0, ip
 80010b2:	0c15      	lsrs	r5, r2, #16
 80010b4:	0409      	lsls	r1, r1, #16
 80010b6:	0412      	lsls	r2, r2, #16
 80010b8:	0c09      	lsrs	r1, r1, #16
 80010ba:	1828      	adds	r0, r5, r0
 80010bc:	1852      	adds	r2, r2, r1
 80010be:	4283      	cmp	r3, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x2f0>
 80010c2:	e0ce      	b.n	8001262 <__aeabi_ddiv+0x48e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x2f4>
 80010c6:	e0c8      	b.n	800125a <__aeabi_ddiv+0x486>
 80010c8:	1a1d      	subs	r5, r3, r0
 80010ca:	4653      	mov	r3, sl
 80010cc:	1a9e      	subs	r6, r3, r2
 80010ce:	45b2      	cmp	sl, r6
 80010d0:	4192      	sbcs	r2, r2
 80010d2:	4252      	negs	r2, r2
 80010d4:	1aab      	subs	r3, r5, r2
 80010d6:	469a      	mov	sl, r3
 80010d8:	4598      	cmp	r8, r3
 80010da:	d100      	bne.n	80010de <__aeabi_ddiv+0x30a>
 80010dc:	e117      	b.n	800130e <__aeabi_ddiv+0x53a>
 80010de:	0039      	movs	r1, r7
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff f82d 	bl	8000140 <__udivsi3>
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	0005      	movs	r5, r0
 80010ea:	4343      	muls	r3, r0
 80010ec:	0039      	movs	r1, r7
 80010ee:	4650      	mov	r0, sl
 80010f0:	9304      	str	r3, [sp, #16]
 80010f2:	f7ff f8ab 	bl	800024c <__aeabi_uidivmod>
 80010f6:	9804      	ldr	r0, [sp, #16]
 80010f8:	040b      	lsls	r3, r1, #16
 80010fa:	0c31      	lsrs	r1, r6, #16
 80010fc:	4319      	orrs	r1, r3
 80010fe:	4288      	cmp	r0, r1
 8001100:	d909      	bls.n	8001116 <__aeabi_ddiv+0x342>
 8001102:	4441      	add	r1, r8
 8001104:	1e6b      	subs	r3, r5, #1
 8001106:	4588      	cmp	r8, r1
 8001108:	d900      	bls.n	800110c <__aeabi_ddiv+0x338>
 800110a:	e107      	b.n	800131c <__aeabi_ddiv+0x548>
 800110c:	4288      	cmp	r0, r1
 800110e:	d800      	bhi.n	8001112 <__aeabi_ddiv+0x33e>
 8001110:	e104      	b.n	800131c <__aeabi_ddiv+0x548>
 8001112:	3d02      	subs	r5, #2
 8001114:	4441      	add	r1, r8
 8001116:	9b04      	ldr	r3, [sp, #16]
 8001118:	1acb      	subs	r3, r1, r3
 800111a:	0018      	movs	r0, r3
 800111c:	0039      	movs	r1, r7
 800111e:	9304      	str	r3, [sp, #16]
 8001120:	f7ff f80e 	bl	8000140 <__udivsi3>
 8001124:	9b01      	ldr	r3, [sp, #4]
 8001126:	4682      	mov	sl, r0
 8001128:	4343      	muls	r3, r0
 800112a:	0039      	movs	r1, r7
 800112c:	9804      	ldr	r0, [sp, #16]
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f7ff f88c 	bl	800024c <__aeabi_uidivmod>
 8001134:	9801      	ldr	r0, [sp, #4]
 8001136:	040b      	lsls	r3, r1, #16
 8001138:	0431      	lsls	r1, r6, #16
 800113a:	0c09      	lsrs	r1, r1, #16
 800113c:	4319      	orrs	r1, r3
 800113e:	4288      	cmp	r0, r1
 8001140:	d90d      	bls.n	800115e <__aeabi_ddiv+0x38a>
 8001142:	4653      	mov	r3, sl
 8001144:	4441      	add	r1, r8
 8001146:	3b01      	subs	r3, #1
 8001148:	4588      	cmp	r8, r1
 800114a:	d900      	bls.n	800114e <__aeabi_ddiv+0x37a>
 800114c:	e0e8      	b.n	8001320 <__aeabi_ddiv+0x54c>
 800114e:	4288      	cmp	r0, r1
 8001150:	d800      	bhi.n	8001154 <__aeabi_ddiv+0x380>
 8001152:	e0e5      	b.n	8001320 <__aeabi_ddiv+0x54c>
 8001154:	2302      	movs	r3, #2
 8001156:	425b      	negs	r3, r3
 8001158:	469c      	mov	ip, r3
 800115a:	4441      	add	r1, r8
 800115c:	44e2      	add	sl, ip
 800115e:	9b01      	ldr	r3, [sp, #4]
 8001160:	042d      	lsls	r5, r5, #16
 8001162:	1ace      	subs	r6, r1, r3
 8001164:	4651      	mov	r1, sl
 8001166:	4329      	orrs	r1, r5
 8001168:	9d05      	ldr	r5, [sp, #20]
 800116a:	464f      	mov	r7, r9
 800116c:	002a      	movs	r2, r5
 800116e:	040b      	lsls	r3, r1, #16
 8001170:	0c08      	lsrs	r0, r1, #16
 8001172:	0c1b      	lsrs	r3, r3, #16
 8001174:	435a      	muls	r2, r3
 8001176:	4345      	muls	r5, r0
 8001178:	437b      	muls	r3, r7
 800117a:	4378      	muls	r0, r7
 800117c:	195b      	adds	r3, r3, r5
 800117e:	0c17      	lsrs	r7, r2, #16
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	429d      	cmp	r5, r3
 8001184:	d903      	bls.n	800118e <__aeabi_ddiv+0x3ba>
 8001186:	2580      	movs	r5, #128	; 0x80
 8001188:	026d      	lsls	r5, r5, #9
 800118a:	46ac      	mov	ip, r5
 800118c:	4460      	add	r0, ip
 800118e:	0c1d      	lsrs	r5, r3, #16
 8001190:	0412      	lsls	r2, r2, #16
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	0c12      	lsrs	r2, r2, #16
 8001196:	1828      	adds	r0, r5, r0
 8001198:	189b      	adds	r3, r3, r2
 800119a:	4286      	cmp	r6, r0
 800119c:	d200      	bcs.n	80011a0 <__aeabi_ddiv+0x3cc>
 800119e:	e093      	b.n	80012c8 <__aeabi_ddiv+0x4f4>
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x3d0>
 80011a2:	e08e      	b.n	80012c2 <__aeabi_ddiv+0x4ee>
 80011a4:	2301      	movs	r3, #1
 80011a6:	4319      	orrs	r1, r3
 80011a8:	4ba0      	ldr	r3, [pc, #640]	; (800142c <__aeabi_ddiv+0x658>)
 80011aa:	18e3      	adds	r3, r4, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dc00      	bgt.n	80011b2 <__aeabi_ddiv+0x3de>
 80011b0:	e099      	b.n	80012e6 <__aeabi_ddiv+0x512>
 80011b2:	074a      	lsls	r2, r1, #29
 80011b4:	d000      	beq.n	80011b8 <__aeabi_ddiv+0x3e4>
 80011b6:	e09e      	b.n	80012f6 <__aeabi_ddiv+0x522>
 80011b8:	465a      	mov	r2, fp
 80011ba:	01d2      	lsls	r2, r2, #7
 80011bc:	d506      	bpl.n	80011cc <__aeabi_ddiv+0x3f8>
 80011be:	465a      	mov	r2, fp
 80011c0:	4b9b      	ldr	r3, [pc, #620]	; (8001430 <__aeabi_ddiv+0x65c>)
 80011c2:	401a      	ands	r2, r3
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	4693      	mov	fp, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	18e3      	adds	r3, r4, r3
 80011cc:	4a99      	ldr	r2, [pc, #612]	; (8001434 <__aeabi_ddiv+0x660>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	dd68      	ble.n	80012a4 <__aeabi_ddiv+0x4d0>
 80011d2:	2301      	movs	r3, #1
 80011d4:	9a02      	ldr	r2, [sp, #8]
 80011d6:	4c98      	ldr	r4, [pc, #608]	; (8001438 <__aeabi_ddiv+0x664>)
 80011d8:	401a      	ands	r2, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	4694      	mov	ip, r2
 80011de:	4698      	mov	r8, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	e6c5      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	464b      	mov	r3, r9
 80011e8:	0312      	lsls	r2, r2, #12
 80011ea:	4213      	tst	r3, r2
 80011ec:	d00a      	beq.n	8001204 <__aeabi_ddiv+0x430>
 80011ee:	465b      	mov	r3, fp
 80011f0:	4213      	tst	r3, r2
 80011f2:	d106      	bne.n	8001202 <__aeabi_ddiv+0x42e>
 80011f4:	431a      	orrs	r2, r3
 80011f6:	0312      	lsls	r2, r2, #12
 80011f8:	0b12      	lsrs	r2, r2, #12
 80011fa:	46ac      	mov	ip, r5
 80011fc:	4688      	mov	r8, r1
 80011fe:	4c8e      	ldr	r4, [pc, #568]	; (8001438 <__aeabi_ddiv+0x664>)
 8001200:	e6b6      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 8001202:	464b      	mov	r3, r9
 8001204:	431a      	orrs	r2, r3
 8001206:	0312      	lsls	r2, r2, #12
 8001208:	0b12      	lsrs	r2, r2, #12
 800120a:	46bc      	mov	ip, r7
 800120c:	4c8a      	ldr	r4, [pc, #552]	; (8001438 <__aeabi_ddiv+0x664>)
 800120e:	e6af      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 8001210:	0003      	movs	r3, r0
 8001212:	465a      	mov	r2, fp
 8001214:	3b28      	subs	r3, #40	; 0x28
 8001216:	409a      	lsls	r2, r3
 8001218:	2300      	movs	r3, #0
 800121a:	4691      	mov	r9, r2
 800121c:	4698      	mov	r8, r3
 800121e:	e657      	b.n	8000ed0 <__aeabi_ddiv+0xfc>
 8001220:	4658      	mov	r0, fp
 8001222:	f001 f837 	bl	8002294 <__clzsi2>
 8001226:	3020      	adds	r0, #32
 8001228:	e640      	b.n	8000eac <__aeabi_ddiv+0xd8>
 800122a:	0003      	movs	r3, r0
 800122c:	4652      	mov	r2, sl
 800122e:	3b28      	subs	r3, #40	; 0x28
 8001230:	409a      	lsls	r2, r3
 8001232:	2100      	movs	r1, #0
 8001234:	4693      	mov	fp, r2
 8001236:	e677      	b.n	8000f28 <__aeabi_ddiv+0x154>
 8001238:	f001 f82c 	bl	8002294 <__clzsi2>
 800123c:	3020      	adds	r0, #32
 800123e:	e65f      	b.n	8000f00 <__aeabi_ddiv+0x12c>
 8001240:	4588      	cmp	r8, r1
 8001242:	d200      	bcs.n	8001246 <__aeabi_ddiv+0x472>
 8001244:	e6c7      	b.n	8000fd6 <__aeabi_ddiv+0x202>
 8001246:	464b      	mov	r3, r9
 8001248:	07de      	lsls	r6, r3, #31
 800124a:	085d      	lsrs	r5, r3, #1
 800124c:	4643      	mov	r3, r8
 800124e:	085b      	lsrs	r3, r3, #1
 8001250:	431e      	orrs	r6, r3
 8001252:	4643      	mov	r3, r8
 8001254:	07db      	lsls	r3, r3, #31
 8001256:	469a      	mov	sl, r3
 8001258:	e6c2      	b.n	8000fe0 <__aeabi_ddiv+0x20c>
 800125a:	2500      	movs	r5, #0
 800125c:	4592      	cmp	sl, r2
 800125e:	d300      	bcc.n	8001262 <__aeabi_ddiv+0x48e>
 8001260:	e733      	b.n	80010ca <__aeabi_ddiv+0x2f6>
 8001262:	9e03      	ldr	r6, [sp, #12]
 8001264:	4659      	mov	r1, fp
 8001266:	46b4      	mov	ip, r6
 8001268:	44e2      	add	sl, ip
 800126a:	45b2      	cmp	sl, r6
 800126c:	41ad      	sbcs	r5, r5
 800126e:	426d      	negs	r5, r5
 8001270:	4445      	add	r5, r8
 8001272:	18eb      	adds	r3, r5, r3
 8001274:	3901      	subs	r1, #1
 8001276:	4598      	cmp	r8, r3
 8001278:	d207      	bcs.n	800128a <__aeabi_ddiv+0x4b6>
 800127a:	4298      	cmp	r0, r3
 800127c:	d900      	bls.n	8001280 <__aeabi_ddiv+0x4ac>
 800127e:	e07f      	b.n	8001380 <__aeabi_ddiv+0x5ac>
 8001280:	d100      	bne.n	8001284 <__aeabi_ddiv+0x4b0>
 8001282:	e0bc      	b.n	80013fe <__aeabi_ddiv+0x62a>
 8001284:	1a1d      	subs	r5, r3, r0
 8001286:	468b      	mov	fp, r1
 8001288:	e71f      	b.n	80010ca <__aeabi_ddiv+0x2f6>
 800128a:	4598      	cmp	r8, r3
 800128c:	d1fa      	bne.n	8001284 <__aeabi_ddiv+0x4b0>
 800128e:	9d03      	ldr	r5, [sp, #12]
 8001290:	4555      	cmp	r5, sl
 8001292:	d9f2      	bls.n	800127a <__aeabi_ddiv+0x4a6>
 8001294:	4643      	mov	r3, r8
 8001296:	468b      	mov	fp, r1
 8001298:	1a1d      	subs	r5, r3, r0
 800129a:	e716      	b.n	80010ca <__aeabi_ddiv+0x2f6>
 800129c:	469b      	mov	fp, r3
 800129e:	e6ca      	b.n	8001036 <__aeabi_ddiv+0x262>
 80012a0:	0015      	movs	r5, r2
 80012a2:	e6e7      	b.n	8001074 <__aeabi_ddiv+0x2a0>
 80012a4:	465a      	mov	r2, fp
 80012a6:	08c9      	lsrs	r1, r1, #3
 80012a8:	0752      	lsls	r2, r2, #29
 80012aa:	430a      	orrs	r2, r1
 80012ac:	055b      	lsls	r3, r3, #21
 80012ae:	4690      	mov	r8, r2
 80012b0:	0d5c      	lsrs	r4, r3, #21
 80012b2:	465a      	mov	r2, fp
 80012b4:	2301      	movs	r3, #1
 80012b6:	9902      	ldr	r1, [sp, #8]
 80012b8:	0252      	lsls	r2, r2, #9
 80012ba:	4019      	ands	r1, r3
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	468c      	mov	ip, r1
 80012c0:	e656      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d100      	bne.n	80012c8 <__aeabi_ddiv+0x4f4>
 80012c6:	e76f      	b.n	80011a8 <__aeabi_ddiv+0x3d4>
 80012c8:	4446      	add	r6, r8
 80012ca:	1e4a      	subs	r2, r1, #1
 80012cc:	45b0      	cmp	r8, r6
 80012ce:	d929      	bls.n	8001324 <__aeabi_ddiv+0x550>
 80012d0:	0011      	movs	r1, r2
 80012d2:	4286      	cmp	r6, r0
 80012d4:	d000      	beq.n	80012d8 <__aeabi_ddiv+0x504>
 80012d6:	e765      	b.n	80011a4 <__aeabi_ddiv+0x3d0>
 80012d8:	9a03      	ldr	r2, [sp, #12]
 80012da:	4293      	cmp	r3, r2
 80012dc:	d000      	beq.n	80012e0 <__aeabi_ddiv+0x50c>
 80012de:	e761      	b.n	80011a4 <__aeabi_ddiv+0x3d0>
 80012e0:	e762      	b.n	80011a8 <__aeabi_ddiv+0x3d4>
 80012e2:	2101      	movs	r1, #1
 80012e4:	4249      	negs	r1, r1
 80012e6:	2001      	movs	r0, #1
 80012e8:	1ac2      	subs	r2, r0, r3
 80012ea:	2a38      	cmp	r2, #56	; 0x38
 80012ec:	dd21      	ble.n	8001332 <__aeabi_ddiv+0x55e>
 80012ee:	9b02      	ldr	r3, [sp, #8]
 80012f0:	4003      	ands	r3, r0
 80012f2:	469c      	mov	ip, r3
 80012f4:	e638      	b.n	8000f68 <__aeabi_ddiv+0x194>
 80012f6:	220f      	movs	r2, #15
 80012f8:	400a      	ands	r2, r1
 80012fa:	2a04      	cmp	r2, #4
 80012fc:	d100      	bne.n	8001300 <__aeabi_ddiv+0x52c>
 80012fe:	e75b      	b.n	80011b8 <__aeabi_ddiv+0x3e4>
 8001300:	000a      	movs	r2, r1
 8001302:	1d11      	adds	r1, r2, #4
 8001304:	4291      	cmp	r1, r2
 8001306:	4192      	sbcs	r2, r2
 8001308:	4252      	negs	r2, r2
 800130a:	4493      	add	fp, r2
 800130c:	e754      	b.n	80011b8 <__aeabi_ddiv+0x3e4>
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <__aeabi_ddiv+0x658>)
 8001310:	18e3      	adds	r3, r4, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	dde5      	ble.n	80012e2 <__aeabi_ddiv+0x50e>
 8001316:	2201      	movs	r2, #1
 8001318:	4252      	negs	r2, r2
 800131a:	e7f2      	b.n	8001302 <__aeabi_ddiv+0x52e>
 800131c:	001d      	movs	r5, r3
 800131e:	e6fa      	b.n	8001116 <__aeabi_ddiv+0x342>
 8001320:	469a      	mov	sl, r3
 8001322:	e71c      	b.n	800115e <__aeabi_ddiv+0x38a>
 8001324:	42b0      	cmp	r0, r6
 8001326:	d839      	bhi.n	800139c <__aeabi_ddiv+0x5c8>
 8001328:	d06e      	beq.n	8001408 <__aeabi_ddiv+0x634>
 800132a:	0011      	movs	r1, r2
 800132c:	e73a      	b.n	80011a4 <__aeabi_ddiv+0x3d0>
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	e73a      	b.n	80011a8 <__aeabi_ddiv+0x3d4>
 8001332:	2a1f      	cmp	r2, #31
 8001334:	dc3c      	bgt.n	80013b0 <__aeabi_ddiv+0x5dc>
 8001336:	2320      	movs	r3, #32
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	000c      	movs	r4, r1
 800133c:	4658      	mov	r0, fp
 800133e:	4099      	lsls	r1, r3
 8001340:	4098      	lsls	r0, r3
 8001342:	1e4b      	subs	r3, r1, #1
 8001344:	4199      	sbcs	r1, r3
 8001346:	465b      	mov	r3, fp
 8001348:	40d4      	lsrs	r4, r2
 800134a:	40d3      	lsrs	r3, r2
 800134c:	4320      	orrs	r0, r4
 800134e:	4308      	orrs	r0, r1
 8001350:	001a      	movs	r2, r3
 8001352:	0743      	lsls	r3, r0, #29
 8001354:	d009      	beq.n	800136a <__aeabi_ddiv+0x596>
 8001356:	230f      	movs	r3, #15
 8001358:	4003      	ands	r3, r0
 800135a:	2b04      	cmp	r3, #4
 800135c:	d005      	beq.n	800136a <__aeabi_ddiv+0x596>
 800135e:	0001      	movs	r1, r0
 8001360:	1d08      	adds	r0, r1, #4
 8001362:	4288      	cmp	r0, r1
 8001364:	419b      	sbcs	r3, r3
 8001366:	425b      	negs	r3, r3
 8001368:	18d2      	adds	r2, r2, r3
 800136a:	0213      	lsls	r3, r2, #8
 800136c:	d53a      	bpl.n	80013e4 <__aeabi_ddiv+0x610>
 800136e:	2301      	movs	r3, #1
 8001370:	9a02      	ldr	r2, [sp, #8]
 8001372:	2401      	movs	r4, #1
 8001374:	401a      	ands	r2, r3
 8001376:	2300      	movs	r3, #0
 8001378:	4694      	mov	ip, r2
 800137a:	4698      	mov	r8, r3
 800137c:	2200      	movs	r2, #0
 800137e:	e5f7      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 8001380:	2102      	movs	r1, #2
 8001382:	4249      	negs	r1, r1
 8001384:	468c      	mov	ip, r1
 8001386:	9d03      	ldr	r5, [sp, #12]
 8001388:	44e3      	add	fp, ip
 800138a:	46ac      	mov	ip, r5
 800138c:	44e2      	add	sl, ip
 800138e:	45aa      	cmp	sl, r5
 8001390:	41ad      	sbcs	r5, r5
 8001392:	426d      	negs	r5, r5
 8001394:	4445      	add	r5, r8
 8001396:	18ed      	adds	r5, r5, r3
 8001398:	1a2d      	subs	r5, r5, r0
 800139a:	e696      	b.n	80010ca <__aeabi_ddiv+0x2f6>
 800139c:	1e8a      	subs	r2, r1, #2
 800139e:	9903      	ldr	r1, [sp, #12]
 80013a0:	004d      	lsls	r5, r1, #1
 80013a2:	428d      	cmp	r5, r1
 80013a4:	4189      	sbcs	r1, r1
 80013a6:	4249      	negs	r1, r1
 80013a8:	4441      	add	r1, r8
 80013aa:	1876      	adds	r6, r6, r1
 80013ac:	9503      	str	r5, [sp, #12]
 80013ae:	e78f      	b.n	80012d0 <__aeabi_ddiv+0x4fc>
 80013b0:	201f      	movs	r0, #31
 80013b2:	4240      	negs	r0, r0
 80013b4:	1ac3      	subs	r3, r0, r3
 80013b6:	4658      	mov	r0, fp
 80013b8:	40d8      	lsrs	r0, r3
 80013ba:	0003      	movs	r3, r0
 80013bc:	2a20      	cmp	r2, #32
 80013be:	d028      	beq.n	8001412 <__aeabi_ddiv+0x63e>
 80013c0:	2040      	movs	r0, #64	; 0x40
 80013c2:	465d      	mov	r5, fp
 80013c4:	1a82      	subs	r2, r0, r2
 80013c6:	4095      	lsls	r5, r2
 80013c8:	4329      	orrs	r1, r5
 80013ca:	1e4a      	subs	r2, r1, #1
 80013cc:	4191      	sbcs	r1, r2
 80013ce:	4319      	orrs	r1, r3
 80013d0:	2307      	movs	r3, #7
 80013d2:	2200      	movs	r2, #0
 80013d4:	400b      	ands	r3, r1
 80013d6:	d009      	beq.n	80013ec <__aeabi_ddiv+0x618>
 80013d8:	230f      	movs	r3, #15
 80013da:	2200      	movs	r2, #0
 80013dc:	400b      	ands	r3, r1
 80013de:	0008      	movs	r0, r1
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d1bd      	bne.n	8001360 <__aeabi_ddiv+0x58c>
 80013e4:	0001      	movs	r1, r0
 80013e6:	0753      	lsls	r3, r2, #29
 80013e8:	0252      	lsls	r2, r2, #9
 80013ea:	0b12      	lsrs	r2, r2, #12
 80013ec:	08c9      	lsrs	r1, r1, #3
 80013ee:	4319      	orrs	r1, r3
 80013f0:	2301      	movs	r3, #1
 80013f2:	4688      	mov	r8, r1
 80013f4:	9902      	ldr	r1, [sp, #8]
 80013f6:	2400      	movs	r4, #0
 80013f8:	4019      	ands	r1, r3
 80013fa:	468c      	mov	ip, r1
 80013fc:	e5b8      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 80013fe:	4552      	cmp	r2, sl
 8001400:	d8be      	bhi.n	8001380 <__aeabi_ddiv+0x5ac>
 8001402:	468b      	mov	fp, r1
 8001404:	2500      	movs	r5, #0
 8001406:	e660      	b.n	80010ca <__aeabi_ddiv+0x2f6>
 8001408:	9d03      	ldr	r5, [sp, #12]
 800140a:	429d      	cmp	r5, r3
 800140c:	d3c6      	bcc.n	800139c <__aeabi_ddiv+0x5c8>
 800140e:	0011      	movs	r1, r2
 8001410:	e762      	b.n	80012d8 <__aeabi_ddiv+0x504>
 8001412:	2500      	movs	r5, #0
 8001414:	e7d8      	b.n	80013c8 <__aeabi_ddiv+0x5f4>
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	465b      	mov	r3, fp
 800141a:	0312      	lsls	r2, r2, #12
 800141c:	431a      	orrs	r2, r3
 800141e:	9b01      	ldr	r3, [sp, #4]
 8001420:	0312      	lsls	r2, r2, #12
 8001422:	0b12      	lsrs	r2, r2, #12
 8001424:	469c      	mov	ip, r3
 8001426:	4688      	mov	r8, r1
 8001428:	4c03      	ldr	r4, [pc, #12]	; (8001438 <__aeabi_ddiv+0x664>)
 800142a:	e5a1      	b.n	8000f70 <__aeabi_ddiv+0x19c>
 800142c:	000003ff 	.word	0x000003ff
 8001430:	feffffff 	.word	0xfeffffff
 8001434:	000007fe 	.word	0x000007fe
 8001438:	000007ff 	.word	0x000007ff

0800143c <__eqdf2>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	464f      	mov	r7, r9
 8001440:	4646      	mov	r6, r8
 8001442:	46d6      	mov	lr, sl
 8001444:	005c      	lsls	r4, r3, #1
 8001446:	b5c0      	push	{r6, r7, lr}
 8001448:	031f      	lsls	r7, r3, #12
 800144a:	0fdb      	lsrs	r3, r3, #31
 800144c:	469a      	mov	sl, r3
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <__eqdf2+0x70>)
 8001450:	030e      	lsls	r6, r1, #12
 8001452:	004d      	lsls	r5, r1, #1
 8001454:	4684      	mov	ip, r0
 8001456:	4680      	mov	r8, r0
 8001458:	0b36      	lsrs	r6, r6, #12
 800145a:	0d6d      	lsrs	r5, r5, #21
 800145c:	0fc9      	lsrs	r1, r1, #31
 800145e:	4691      	mov	r9, r2
 8001460:	0b3f      	lsrs	r7, r7, #12
 8001462:	0d64      	lsrs	r4, r4, #21
 8001464:	2001      	movs	r0, #1
 8001466:	429d      	cmp	r5, r3
 8001468:	d008      	beq.n	800147c <__eqdf2+0x40>
 800146a:	429c      	cmp	r4, r3
 800146c:	d001      	beq.n	8001472 <__eqdf2+0x36>
 800146e:	42a5      	cmp	r5, r4
 8001470:	d00b      	beq.n	800148a <__eqdf2+0x4e>
 8001472:	bc1c      	pop	{r2, r3, r4}
 8001474:	4690      	mov	r8, r2
 8001476:	4699      	mov	r9, r3
 8001478:	46a2      	mov	sl, r4
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147c:	4663      	mov	r3, ip
 800147e:	4333      	orrs	r3, r6
 8001480:	d1f7      	bne.n	8001472 <__eqdf2+0x36>
 8001482:	42ac      	cmp	r4, r5
 8001484:	d1f5      	bne.n	8001472 <__eqdf2+0x36>
 8001486:	433a      	orrs	r2, r7
 8001488:	d1f3      	bne.n	8001472 <__eqdf2+0x36>
 800148a:	2001      	movs	r0, #1
 800148c:	42be      	cmp	r6, r7
 800148e:	d1f0      	bne.n	8001472 <__eqdf2+0x36>
 8001490:	45c8      	cmp	r8, r9
 8001492:	d1ee      	bne.n	8001472 <__eqdf2+0x36>
 8001494:	4551      	cmp	r1, sl
 8001496:	d007      	beq.n	80014a8 <__eqdf2+0x6c>
 8001498:	2d00      	cmp	r5, #0
 800149a:	d1ea      	bne.n	8001472 <__eqdf2+0x36>
 800149c:	4663      	mov	r3, ip
 800149e:	431e      	orrs	r6, r3
 80014a0:	0030      	movs	r0, r6
 80014a2:	1e46      	subs	r6, r0, #1
 80014a4:	41b0      	sbcs	r0, r6
 80014a6:	e7e4      	b.n	8001472 <__eqdf2+0x36>
 80014a8:	2000      	movs	r0, #0
 80014aa:	e7e2      	b.n	8001472 <__eqdf2+0x36>
 80014ac:	000007ff 	.word	0x000007ff

080014b0 <__gedf2>:
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	4645      	mov	r5, r8
 80014b4:	46de      	mov	lr, fp
 80014b6:	4657      	mov	r7, sl
 80014b8:	464e      	mov	r6, r9
 80014ba:	b5e0      	push	{r5, r6, r7, lr}
 80014bc:	031f      	lsls	r7, r3, #12
 80014be:	0b3d      	lsrs	r5, r7, #12
 80014c0:	4f2c      	ldr	r7, [pc, #176]	; (8001574 <__gedf2+0xc4>)
 80014c2:	030e      	lsls	r6, r1, #12
 80014c4:	004c      	lsls	r4, r1, #1
 80014c6:	46ab      	mov	fp, r5
 80014c8:	005d      	lsls	r5, r3, #1
 80014ca:	4684      	mov	ip, r0
 80014cc:	0b36      	lsrs	r6, r6, #12
 80014ce:	0d64      	lsrs	r4, r4, #21
 80014d0:	0fc9      	lsrs	r1, r1, #31
 80014d2:	4690      	mov	r8, r2
 80014d4:	0d6d      	lsrs	r5, r5, #21
 80014d6:	0fdb      	lsrs	r3, r3, #31
 80014d8:	42bc      	cmp	r4, r7
 80014da:	d02a      	beq.n	8001532 <__gedf2+0x82>
 80014dc:	4f25      	ldr	r7, [pc, #148]	; (8001574 <__gedf2+0xc4>)
 80014de:	42bd      	cmp	r5, r7
 80014e0:	d02d      	beq.n	800153e <__gedf2+0x8e>
 80014e2:	2c00      	cmp	r4, #0
 80014e4:	d10f      	bne.n	8001506 <__gedf2+0x56>
 80014e6:	4330      	orrs	r0, r6
 80014e8:	0007      	movs	r7, r0
 80014ea:	4681      	mov	r9, r0
 80014ec:	4278      	negs	r0, r7
 80014ee:	4178      	adcs	r0, r7
 80014f0:	b2c0      	uxtb	r0, r0
 80014f2:	2d00      	cmp	r5, #0
 80014f4:	d117      	bne.n	8001526 <__gedf2+0x76>
 80014f6:	465f      	mov	r7, fp
 80014f8:	433a      	orrs	r2, r7
 80014fa:	d114      	bne.n	8001526 <__gedf2+0x76>
 80014fc:	464b      	mov	r3, r9
 80014fe:	2000      	movs	r0, #0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <__gedf2+0x6a>
 8001504:	e006      	b.n	8001514 <__gedf2+0x64>
 8001506:	2d00      	cmp	r5, #0
 8001508:	d102      	bne.n	8001510 <__gedf2+0x60>
 800150a:	4658      	mov	r0, fp
 800150c:	4302      	orrs	r2, r0
 800150e:	d001      	beq.n	8001514 <__gedf2+0x64>
 8001510:	4299      	cmp	r1, r3
 8001512:	d018      	beq.n	8001546 <__gedf2+0x96>
 8001514:	4248      	negs	r0, r1
 8001516:	2101      	movs	r1, #1
 8001518:	4308      	orrs	r0, r1
 800151a:	bc3c      	pop	{r2, r3, r4, r5}
 800151c:	4690      	mov	r8, r2
 800151e:	4699      	mov	r9, r3
 8001520:	46a2      	mov	sl, r4
 8001522:	46ab      	mov	fp, r5
 8001524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001526:	2800      	cmp	r0, #0
 8001528:	d0f2      	beq.n	8001510 <__gedf2+0x60>
 800152a:	2001      	movs	r0, #1
 800152c:	3b01      	subs	r3, #1
 800152e:	4318      	orrs	r0, r3
 8001530:	e7f3      	b.n	800151a <__gedf2+0x6a>
 8001532:	0037      	movs	r7, r6
 8001534:	4307      	orrs	r7, r0
 8001536:	d0d1      	beq.n	80014dc <__gedf2+0x2c>
 8001538:	2002      	movs	r0, #2
 800153a:	4240      	negs	r0, r0
 800153c:	e7ed      	b.n	800151a <__gedf2+0x6a>
 800153e:	465f      	mov	r7, fp
 8001540:	4317      	orrs	r7, r2
 8001542:	d0ce      	beq.n	80014e2 <__gedf2+0x32>
 8001544:	e7f8      	b.n	8001538 <__gedf2+0x88>
 8001546:	42ac      	cmp	r4, r5
 8001548:	dce4      	bgt.n	8001514 <__gedf2+0x64>
 800154a:	da03      	bge.n	8001554 <__gedf2+0xa4>
 800154c:	1e48      	subs	r0, r1, #1
 800154e:	2101      	movs	r1, #1
 8001550:	4308      	orrs	r0, r1
 8001552:	e7e2      	b.n	800151a <__gedf2+0x6a>
 8001554:	455e      	cmp	r6, fp
 8001556:	d8dd      	bhi.n	8001514 <__gedf2+0x64>
 8001558:	d006      	beq.n	8001568 <__gedf2+0xb8>
 800155a:	2000      	movs	r0, #0
 800155c:	455e      	cmp	r6, fp
 800155e:	d2dc      	bcs.n	800151a <__gedf2+0x6a>
 8001560:	2301      	movs	r3, #1
 8001562:	1e48      	subs	r0, r1, #1
 8001564:	4318      	orrs	r0, r3
 8001566:	e7d8      	b.n	800151a <__gedf2+0x6a>
 8001568:	45c4      	cmp	ip, r8
 800156a:	d8d3      	bhi.n	8001514 <__gedf2+0x64>
 800156c:	2000      	movs	r0, #0
 800156e:	45c4      	cmp	ip, r8
 8001570:	d3f6      	bcc.n	8001560 <__gedf2+0xb0>
 8001572:	e7d2      	b.n	800151a <__gedf2+0x6a>
 8001574:	000007ff 	.word	0x000007ff

08001578 <__ledf2>:
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	464e      	mov	r6, r9
 800157c:	4645      	mov	r5, r8
 800157e:	46de      	mov	lr, fp
 8001580:	4657      	mov	r7, sl
 8001582:	005c      	lsls	r4, r3, #1
 8001584:	b5e0      	push	{r5, r6, r7, lr}
 8001586:	031f      	lsls	r7, r3, #12
 8001588:	0fdb      	lsrs	r3, r3, #31
 800158a:	4699      	mov	r9, r3
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <__ledf2+0xc0>)
 800158e:	030e      	lsls	r6, r1, #12
 8001590:	004d      	lsls	r5, r1, #1
 8001592:	0fc9      	lsrs	r1, r1, #31
 8001594:	4684      	mov	ip, r0
 8001596:	0b36      	lsrs	r6, r6, #12
 8001598:	0d6d      	lsrs	r5, r5, #21
 800159a:	468b      	mov	fp, r1
 800159c:	4690      	mov	r8, r2
 800159e:	0b3f      	lsrs	r7, r7, #12
 80015a0:	0d64      	lsrs	r4, r4, #21
 80015a2:	429d      	cmp	r5, r3
 80015a4:	d020      	beq.n	80015e8 <__ledf2+0x70>
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <__ledf2+0xc0>)
 80015a8:	429c      	cmp	r4, r3
 80015aa:	d022      	beq.n	80015f2 <__ledf2+0x7a>
 80015ac:	2d00      	cmp	r5, #0
 80015ae:	d112      	bne.n	80015d6 <__ledf2+0x5e>
 80015b0:	4330      	orrs	r0, r6
 80015b2:	4243      	negs	r3, r0
 80015b4:	4143      	adcs	r3, r0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2c00      	cmp	r4, #0
 80015ba:	d01f      	beq.n	80015fc <__ledf2+0x84>
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <__ledf2+0x62>
 80015c0:	464b      	mov	r3, r9
 80015c2:	2001      	movs	r0, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4303      	orrs	r3, r0
 80015c8:	0018      	movs	r0, r3
 80015ca:	bc3c      	pop	{r2, r3, r4, r5}
 80015cc:	4690      	mov	r8, r2
 80015ce:	4699      	mov	r9, r3
 80015d0:	46a2      	mov	sl, r4
 80015d2:	46ab      	mov	fp, r5
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2c00      	cmp	r4, #0
 80015d8:	d016      	beq.n	8001608 <__ledf2+0x90>
 80015da:	45cb      	cmp	fp, r9
 80015dc:	d017      	beq.n	800160e <__ledf2+0x96>
 80015de:	465b      	mov	r3, fp
 80015e0:	4259      	negs	r1, r3
 80015e2:	2301      	movs	r3, #1
 80015e4:	430b      	orrs	r3, r1
 80015e6:	e7ef      	b.n	80015c8 <__ledf2+0x50>
 80015e8:	0031      	movs	r1, r6
 80015ea:	2302      	movs	r3, #2
 80015ec:	4301      	orrs	r1, r0
 80015ee:	d1eb      	bne.n	80015c8 <__ledf2+0x50>
 80015f0:	e7d9      	b.n	80015a6 <__ledf2+0x2e>
 80015f2:	0039      	movs	r1, r7
 80015f4:	2302      	movs	r3, #2
 80015f6:	4311      	orrs	r1, r2
 80015f8:	d1e6      	bne.n	80015c8 <__ledf2+0x50>
 80015fa:	e7d7      	b.n	80015ac <__ledf2+0x34>
 80015fc:	433a      	orrs	r2, r7
 80015fe:	d1dd      	bne.n	80015bc <__ledf2+0x44>
 8001600:	2300      	movs	r3, #0
 8001602:	2800      	cmp	r0, #0
 8001604:	d0e0      	beq.n	80015c8 <__ledf2+0x50>
 8001606:	e7ea      	b.n	80015de <__ledf2+0x66>
 8001608:	433a      	orrs	r2, r7
 800160a:	d1e6      	bne.n	80015da <__ledf2+0x62>
 800160c:	e7e7      	b.n	80015de <__ledf2+0x66>
 800160e:	42a5      	cmp	r5, r4
 8001610:	dce5      	bgt.n	80015de <__ledf2+0x66>
 8001612:	db05      	blt.n	8001620 <__ledf2+0xa8>
 8001614:	42be      	cmp	r6, r7
 8001616:	d8e2      	bhi.n	80015de <__ledf2+0x66>
 8001618:	d007      	beq.n	800162a <__ledf2+0xb2>
 800161a:	2300      	movs	r3, #0
 800161c:	42be      	cmp	r6, r7
 800161e:	d2d3      	bcs.n	80015c8 <__ledf2+0x50>
 8001620:	4659      	mov	r1, fp
 8001622:	2301      	movs	r3, #1
 8001624:	3901      	subs	r1, #1
 8001626:	430b      	orrs	r3, r1
 8001628:	e7ce      	b.n	80015c8 <__ledf2+0x50>
 800162a:	45c4      	cmp	ip, r8
 800162c:	d8d7      	bhi.n	80015de <__ledf2+0x66>
 800162e:	2300      	movs	r3, #0
 8001630:	45c4      	cmp	ip, r8
 8001632:	d3f5      	bcc.n	8001620 <__ledf2+0xa8>
 8001634:	e7c8      	b.n	80015c8 <__ledf2+0x50>
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	000007ff 	.word	0x000007ff

0800163c <__aeabi_dmul>:
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	4657      	mov	r7, sl
 8001640:	4645      	mov	r5, r8
 8001642:	46de      	mov	lr, fp
 8001644:	464e      	mov	r6, r9
 8001646:	b5e0      	push	{r5, r6, r7, lr}
 8001648:	030c      	lsls	r4, r1, #12
 800164a:	4698      	mov	r8, r3
 800164c:	004e      	lsls	r6, r1, #1
 800164e:	0b23      	lsrs	r3, r4, #12
 8001650:	b087      	sub	sp, #28
 8001652:	0007      	movs	r7, r0
 8001654:	4692      	mov	sl, r2
 8001656:	469b      	mov	fp, r3
 8001658:	0d76      	lsrs	r6, r6, #21
 800165a:	0fcd      	lsrs	r5, r1, #31
 800165c:	2e00      	cmp	r6, #0
 800165e:	d06b      	beq.n	8001738 <__aeabi_dmul+0xfc>
 8001660:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <__aeabi_dmul+0x1dc>)
 8001662:	429e      	cmp	r6, r3
 8001664:	d035      	beq.n	80016d2 <__aeabi_dmul+0x96>
 8001666:	2480      	movs	r4, #128	; 0x80
 8001668:	465b      	mov	r3, fp
 800166a:	0f42      	lsrs	r2, r0, #29
 800166c:	0424      	lsls	r4, r4, #16
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4314      	orrs	r4, r2
 8001672:	431c      	orrs	r4, r3
 8001674:	00c3      	lsls	r3, r0, #3
 8001676:	4699      	mov	r9, r3
 8001678:	4b68      	ldr	r3, [pc, #416]	; (800181c <__aeabi_dmul+0x1e0>)
 800167a:	46a3      	mov	fp, r4
 800167c:	469c      	mov	ip, r3
 800167e:	2300      	movs	r3, #0
 8001680:	2700      	movs	r7, #0
 8001682:	4466      	add	r6, ip
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	4643      	mov	r3, r8
 8001688:	031c      	lsls	r4, r3, #12
 800168a:	005a      	lsls	r2, r3, #1
 800168c:	0fdb      	lsrs	r3, r3, #31
 800168e:	4650      	mov	r0, sl
 8001690:	0b24      	lsrs	r4, r4, #12
 8001692:	0d52      	lsrs	r2, r2, #21
 8001694:	4698      	mov	r8, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x5e>
 8001698:	e076      	b.n	8001788 <__aeabi_dmul+0x14c>
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <__aeabi_dmul+0x1dc>)
 800169c:	429a      	cmp	r2, r3
 800169e:	d06d      	beq.n	800177c <__aeabi_dmul+0x140>
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	0f41      	lsrs	r1, r0, #29
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	430b      	orrs	r3, r1
 80016a8:	495c      	ldr	r1, [pc, #368]	; (800181c <__aeabi_dmul+0x1e0>)
 80016aa:	00e4      	lsls	r4, r4, #3
 80016ac:	468c      	mov	ip, r1
 80016ae:	431c      	orrs	r4, r3
 80016b0:	00c3      	lsls	r3, r0, #3
 80016b2:	2000      	movs	r0, #0
 80016b4:	4462      	add	r2, ip
 80016b6:	4641      	mov	r1, r8
 80016b8:	18b6      	adds	r6, r6, r2
 80016ba:	4069      	eors	r1, r5
 80016bc:	1c72      	adds	r2, r6, #1
 80016be:	9101      	str	r1, [sp, #4]
 80016c0:	4694      	mov	ip, r2
 80016c2:	4307      	orrs	r7, r0
 80016c4:	2f0f      	cmp	r7, #15
 80016c6:	d900      	bls.n	80016ca <__aeabi_dmul+0x8e>
 80016c8:	e0b0      	b.n	800182c <__aeabi_dmul+0x1f0>
 80016ca:	4a55      	ldr	r2, [pc, #340]	; (8001820 <__aeabi_dmul+0x1e4>)
 80016cc:	00bf      	lsls	r7, r7, #2
 80016ce:	59d2      	ldr	r2, [r2, r7]
 80016d0:	4697      	mov	pc, r2
 80016d2:	465b      	mov	r3, fp
 80016d4:	4303      	orrs	r3, r0
 80016d6:	4699      	mov	r9, r3
 80016d8:	d000      	beq.n	80016dc <__aeabi_dmul+0xa0>
 80016da:	e087      	b.n	80017ec <__aeabi_dmul+0x1b0>
 80016dc:	2300      	movs	r3, #0
 80016de:	469b      	mov	fp, r3
 80016e0:	3302      	adds	r3, #2
 80016e2:	2708      	movs	r7, #8
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	e7ce      	b.n	8001686 <__aeabi_dmul+0x4a>
 80016e8:	4642      	mov	r2, r8
 80016ea:	9201      	str	r2, [sp, #4]
 80016ec:	2802      	cmp	r0, #2
 80016ee:	d067      	beq.n	80017c0 <__aeabi_dmul+0x184>
 80016f0:	2803      	cmp	r0, #3
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dmul+0xba>
 80016f4:	e20e      	b.n	8001b14 <__aeabi_dmul+0x4d8>
 80016f6:	2801      	cmp	r0, #1
 80016f8:	d000      	beq.n	80016fc <__aeabi_dmul+0xc0>
 80016fa:	e162      	b.n	80019c2 <__aeabi_dmul+0x386>
 80016fc:	2300      	movs	r3, #0
 80016fe:	2400      	movs	r4, #0
 8001700:	2200      	movs	r2, #0
 8001702:	4699      	mov	r9, r3
 8001704:	9901      	ldr	r1, [sp, #4]
 8001706:	4001      	ands	r1, r0
 8001708:	b2cd      	uxtb	r5, r1
 800170a:	2100      	movs	r1, #0
 800170c:	0312      	lsls	r2, r2, #12
 800170e:	0d0b      	lsrs	r3, r1, #20
 8001710:	0b12      	lsrs	r2, r2, #12
 8001712:	051b      	lsls	r3, r3, #20
 8001714:	4313      	orrs	r3, r2
 8001716:	4a43      	ldr	r2, [pc, #268]	; (8001824 <__aeabi_dmul+0x1e8>)
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	4013      	ands	r3, r2
 800171c:	431c      	orrs	r4, r3
 800171e:	0064      	lsls	r4, r4, #1
 8001720:	07ed      	lsls	r5, r5, #31
 8001722:	0864      	lsrs	r4, r4, #1
 8001724:	432c      	orrs	r4, r5
 8001726:	4648      	mov	r0, r9
 8001728:	0021      	movs	r1, r4
 800172a:	b007      	add	sp, #28
 800172c:	bc3c      	pop	{r2, r3, r4, r5}
 800172e:	4690      	mov	r8, r2
 8001730:	4699      	mov	r9, r3
 8001732:	46a2      	mov	sl, r4
 8001734:	46ab      	mov	fp, r5
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001738:	4303      	orrs	r3, r0
 800173a:	4699      	mov	r9, r3
 800173c:	d04f      	beq.n	80017de <__aeabi_dmul+0x1a2>
 800173e:	465b      	mov	r3, fp
 8001740:	2b00      	cmp	r3, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_dmul+0x10a>
 8001744:	e189      	b.n	8001a5a <__aeabi_dmul+0x41e>
 8001746:	4658      	mov	r0, fp
 8001748:	f000 fda4 	bl	8002294 <__clzsi2>
 800174c:	0003      	movs	r3, r0
 800174e:	3b0b      	subs	r3, #11
 8001750:	2b1c      	cmp	r3, #28
 8001752:	dd00      	ble.n	8001756 <__aeabi_dmul+0x11a>
 8001754:	e17a      	b.n	8001a4c <__aeabi_dmul+0x410>
 8001756:	221d      	movs	r2, #29
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	003a      	movs	r2, r7
 800175c:	0001      	movs	r1, r0
 800175e:	465c      	mov	r4, fp
 8001760:	40da      	lsrs	r2, r3
 8001762:	3908      	subs	r1, #8
 8001764:	408c      	lsls	r4, r1
 8001766:	0013      	movs	r3, r2
 8001768:	408f      	lsls	r7, r1
 800176a:	4323      	orrs	r3, r4
 800176c:	469b      	mov	fp, r3
 800176e:	46b9      	mov	r9, r7
 8001770:	2300      	movs	r3, #0
 8001772:	4e2d      	ldr	r6, [pc, #180]	; (8001828 <__aeabi_dmul+0x1ec>)
 8001774:	2700      	movs	r7, #0
 8001776:	1a36      	subs	r6, r6, r0
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	e784      	b.n	8001686 <__aeabi_dmul+0x4a>
 800177c:	4653      	mov	r3, sl
 800177e:	4323      	orrs	r3, r4
 8001780:	d12a      	bne.n	80017d8 <__aeabi_dmul+0x19c>
 8001782:	2400      	movs	r4, #0
 8001784:	2002      	movs	r0, #2
 8001786:	e796      	b.n	80016b6 <__aeabi_dmul+0x7a>
 8001788:	4653      	mov	r3, sl
 800178a:	4323      	orrs	r3, r4
 800178c:	d020      	beq.n	80017d0 <__aeabi_dmul+0x194>
 800178e:	2c00      	cmp	r4, #0
 8001790:	d100      	bne.n	8001794 <__aeabi_dmul+0x158>
 8001792:	e157      	b.n	8001a44 <__aeabi_dmul+0x408>
 8001794:	0020      	movs	r0, r4
 8001796:	f000 fd7d 	bl	8002294 <__clzsi2>
 800179a:	0003      	movs	r3, r0
 800179c:	3b0b      	subs	r3, #11
 800179e:	2b1c      	cmp	r3, #28
 80017a0:	dd00      	ble.n	80017a4 <__aeabi_dmul+0x168>
 80017a2:	e149      	b.n	8001a38 <__aeabi_dmul+0x3fc>
 80017a4:	211d      	movs	r1, #29
 80017a6:	1acb      	subs	r3, r1, r3
 80017a8:	4651      	mov	r1, sl
 80017aa:	0002      	movs	r2, r0
 80017ac:	40d9      	lsrs	r1, r3
 80017ae:	4653      	mov	r3, sl
 80017b0:	3a08      	subs	r2, #8
 80017b2:	4094      	lsls	r4, r2
 80017b4:	4093      	lsls	r3, r2
 80017b6:	430c      	orrs	r4, r1
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <__aeabi_dmul+0x1ec>)
 80017ba:	1a12      	subs	r2, r2, r0
 80017bc:	2000      	movs	r0, #0
 80017be:	e77a      	b.n	80016b6 <__aeabi_dmul+0x7a>
 80017c0:	2501      	movs	r5, #1
 80017c2:	9b01      	ldr	r3, [sp, #4]
 80017c4:	4c14      	ldr	r4, [pc, #80]	; (8001818 <__aeabi_dmul+0x1dc>)
 80017c6:	401d      	ands	r5, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	2200      	movs	r2, #0
 80017cc:	4699      	mov	r9, r3
 80017ce:	e79c      	b.n	800170a <__aeabi_dmul+0xce>
 80017d0:	2400      	movs	r4, #0
 80017d2:	2200      	movs	r2, #0
 80017d4:	2001      	movs	r0, #1
 80017d6:	e76e      	b.n	80016b6 <__aeabi_dmul+0x7a>
 80017d8:	4653      	mov	r3, sl
 80017da:	2003      	movs	r0, #3
 80017dc:	e76b      	b.n	80016b6 <__aeabi_dmul+0x7a>
 80017de:	2300      	movs	r3, #0
 80017e0:	469b      	mov	fp, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	2704      	movs	r7, #4
 80017e6:	2600      	movs	r6, #0
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	e74c      	b.n	8001686 <__aeabi_dmul+0x4a>
 80017ec:	2303      	movs	r3, #3
 80017ee:	4681      	mov	r9, r0
 80017f0:	270c      	movs	r7, #12
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	e747      	b.n	8001686 <__aeabi_dmul+0x4a>
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	2300      	movs	r3, #0
 80017fa:	2500      	movs	r5, #0
 80017fc:	0312      	lsls	r2, r2, #12
 80017fe:	4699      	mov	r9, r3
 8001800:	4c05      	ldr	r4, [pc, #20]	; (8001818 <__aeabi_dmul+0x1dc>)
 8001802:	e782      	b.n	800170a <__aeabi_dmul+0xce>
 8001804:	465c      	mov	r4, fp
 8001806:	464b      	mov	r3, r9
 8001808:	9802      	ldr	r0, [sp, #8]
 800180a:	e76f      	b.n	80016ec <__aeabi_dmul+0xb0>
 800180c:	465c      	mov	r4, fp
 800180e:	464b      	mov	r3, r9
 8001810:	9501      	str	r5, [sp, #4]
 8001812:	9802      	ldr	r0, [sp, #8]
 8001814:	e76a      	b.n	80016ec <__aeabi_dmul+0xb0>
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	000007ff 	.word	0x000007ff
 800181c:	fffffc01 	.word	0xfffffc01
 8001820:	08006650 	.word	0x08006650
 8001824:	800fffff 	.word	0x800fffff
 8001828:	fffffc0d 	.word	0xfffffc0d
 800182c:	464a      	mov	r2, r9
 800182e:	4649      	mov	r1, r9
 8001830:	0c17      	lsrs	r7, r2, #16
 8001832:	0c1a      	lsrs	r2, r3, #16
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	0c1b      	lsrs	r3, r3, #16
 8001838:	0408      	lsls	r0, r1, #16
 800183a:	0019      	movs	r1, r3
 800183c:	0c00      	lsrs	r0, r0, #16
 800183e:	4341      	muls	r1, r0
 8001840:	0015      	movs	r5, r2
 8001842:	4688      	mov	r8, r1
 8001844:	0019      	movs	r1, r3
 8001846:	437d      	muls	r5, r7
 8001848:	4379      	muls	r1, r7
 800184a:	9503      	str	r5, [sp, #12]
 800184c:	4689      	mov	r9, r1
 800184e:	0029      	movs	r1, r5
 8001850:	0015      	movs	r5, r2
 8001852:	4345      	muls	r5, r0
 8001854:	444d      	add	r5, r9
 8001856:	9502      	str	r5, [sp, #8]
 8001858:	4645      	mov	r5, r8
 800185a:	0c2d      	lsrs	r5, r5, #16
 800185c:	46aa      	mov	sl, r5
 800185e:	9d02      	ldr	r5, [sp, #8]
 8001860:	4455      	add	r5, sl
 8001862:	45a9      	cmp	r9, r5
 8001864:	d906      	bls.n	8001874 <__aeabi_dmul+0x238>
 8001866:	468a      	mov	sl, r1
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0249      	lsls	r1, r1, #9
 800186c:	4689      	mov	r9, r1
 800186e:	44ca      	add	sl, r9
 8001870:	4651      	mov	r1, sl
 8001872:	9103      	str	r1, [sp, #12]
 8001874:	0c29      	lsrs	r1, r5, #16
 8001876:	9104      	str	r1, [sp, #16]
 8001878:	4641      	mov	r1, r8
 800187a:	0409      	lsls	r1, r1, #16
 800187c:	042d      	lsls	r5, r5, #16
 800187e:	0c09      	lsrs	r1, r1, #16
 8001880:	4688      	mov	r8, r1
 8001882:	0029      	movs	r1, r5
 8001884:	0c25      	lsrs	r5, r4, #16
 8001886:	0424      	lsls	r4, r4, #16
 8001888:	4441      	add	r1, r8
 800188a:	0c24      	lsrs	r4, r4, #16
 800188c:	9105      	str	r1, [sp, #20]
 800188e:	0021      	movs	r1, r4
 8001890:	4341      	muls	r1, r0
 8001892:	4688      	mov	r8, r1
 8001894:	0021      	movs	r1, r4
 8001896:	4379      	muls	r1, r7
 8001898:	468a      	mov	sl, r1
 800189a:	4368      	muls	r0, r5
 800189c:	4641      	mov	r1, r8
 800189e:	4450      	add	r0, sl
 80018a0:	4681      	mov	r9, r0
 80018a2:	0c08      	lsrs	r0, r1, #16
 80018a4:	4448      	add	r0, r9
 80018a6:	436f      	muls	r7, r5
 80018a8:	4582      	cmp	sl, r0
 80018aa:	d903      	bls.n	80018b4 <__aeabi_dmul+0x278>
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0249      	lsls	r1, r1, #9
 80018b0:	4689      	mov	r9, r1
 80018b2:	444f      	add	r7, r9
 80018b4:	0c01      	lsrs	r1, r0, #16
 80018b6:	4689      	mov	r9, r1
 80018b8:	0039      	movs	r1, r7
 80018ba:	4449      	add	r1, r9
 80018bc:	9102      	str	r1, [sp, #8]
 80018be:	4641      	mov	r1, r8
 80018c0:	040f      	lsls	r7, r1, #16
 80018c2:	9904      	ldr	r1, [sp, #16]
 80018c4:	0c3f      	lsrs	r7, r7, #16
 80018c6:	4688      	mov	r8, r1
 80018c8:	0400      	lsls	r0, r0, #16
 80018ca:	19c0      	adds	r0, r0, r7
 80018cc:	4480      	add	r8, r0
 80018ce:	4641      	mov	r1, r8
 80018d0:	9104      	str	r1, [sp, #16]
 80018d2:	4659      	mov	r1, fp
 80018d4:	0c0f      	lsrs	r7, r1, #16
 80018d6:	0409      	lsls	r1, r1, #16
 80018d8:	0c09      	lsrs	r1, r1, #16
 80018da:	4688      	mov	r8, r1
 80018dc:	4359      	muls	r1, r3
 80018de:	468a      	mov	sl, r1
 80018e0:	0039      	movs	r1, r7
 80018e2:	4351      	muls	r1, r2
 80018e4:	4689      	mov	r9, r1
 80018e6:	4641      	mov	r1, r8
 80018e8:	434a      	muls	r2, r1
 80018ea:	4651      	mov	r1, sl
 80018ec:	0c09      	lsrs	r1, r1, #16
 80018ee:	468b      	mov	fp, r1
 80018f0:	437b      	muls	r3, r7
 80018f2:	18d2      	adds	r2, r2, r3
 80018f4:	445a      	add	r2, fp
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d903      	bls.n	8001902 <__aeabi_dmul+0x2c6>
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	469b      	mov	fp, r3
 8001900:	44d9      	add	r9, fp
 8001902:	4651      	mov	r1, sl
 8001904:	0409      	lsls	r1, r1, #16
 8001906:	0c09      	lsrs	r1, r1, #16
 8001908:	468a      	mov	sl, r1
 800190a:	4641      	mov	r1, r8
 800190c:	4361      	muls	r1, r4
 800190e:	437c      	muls	r4, r7
 8001910:	0c13      	lsrs	r3, r2, #16
 8001912:	0412      	lsls	r2, r2, #16
 8001914:	444b      	add	r3, r9
 8001916:	4452      	add	r2, sl
 8001918:	46a1      	mov	r9, r4
 800191a:	468a      	mov	sl, r1
 800191c:	003c      	movs	r4, r7
 800191e:	4641      	mov	r1, r8
 8001920:	436c      	muls	r4, r5
 8001922:	434d      	muls	r5, r1
 8001924:	4651      	mov	r1, sl
 8001926:	444d      	add	r5, r9
 8001928:	0c0f      	lsrs	r7, r1, #16
 800192a:	197d      	adds	r5, r7, r5
 800192c:	45a9      	cmp	r9, r5
 800192e:	d903      	bls.n	8001938 <__aeabi_dmul+0x2fc>
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0249      	lsls	r1, r1, #9
 8001934:	4688      	mov	r8, r1
 8001936:	4444      	add	r4, r8
 8001938:	9f04      	ldr	r7, [sp, #16]
 800193a:	9903      	ldr	r1, [sp, #12]
 800193c:	46b8      	mov	r8, r7
 800193e:	4441      	add	r1, r8
 8001940:	468b      	mov	fp, r1
 8001942:	4583      	cmp	fp, r0
 8001944:	4180      	sbcs	r0, r0
 8001946:	4241      	negs	r1, r0
 8001948:	4688      	mov	r8, r1
 800194a:	4651      	mov	r1, sl
 800194c:	0408      	lsls	r0, r1, #16
 800194e:	042f      	lsls	r7, r5, #16
 8001950:	0c00      	lsrs	r0, r0, #16
 8001952:	183f      	adds	r7, r7, r0
 8001954:	4658      	mov	r0, fp
 8001956:	9902      	ldr	r1, [sp, #8]
 8001958:	1810      	adds	r0, r2, r0
 800195a:	4689      	mov	r9, r1
 800195c:	4290      	cmp	r0, r2
 800195e:	4192      	sbcs	r2, r2
 8001960:	444f      	add	r7, r9
 8001962:	46ba      	mov	sl, r7
 8001964:	4252      	negs	r2, r2
 8001966:	4699      	mov	r9, r3
 8001968:	4693      	mov	fp, r2
 800196a:	44c2      	add	sl, r8
 800196c:	44d1      	add	r9, sl
 800196e:	44cb      	add	fp, r9
 8001970:	428f      	cmp	r7, r1
 8001972:	41bf      	sbcs	r7, r7
 8001974:	45c2      	cmp	sl, r8
 8001976:	4189      	sbcs	r1, r1
 8001978:	4599      	cmp	r9, r3
 800197a:	419b      	sbcs	r3, r3
 800197c:	4593      	cmp	fp, r2
 800197e:	4192      	sbcs	r2, r2
 8001980:	427f      	negs	r7, r7
 8001982:	4249      	negs	r1, r1
 8001984:	0c2d      	lsrs	r5, r5, #16
 8001986:	4252      	negs	r2, r2
 8001988:	430f      	orrs	r7, r1
 800198a:	425b      	negs	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	197f      	adds	r7, r7, r5
 8001990:	18ff      	adds	r7, r7, r3
 8001992:	465b      	mov	r3, fp
 8001994:	193c      	adds	r4, r7, r4
 8001996:	0ddb      	lsrs	r3, r3, #23
 8001998:	9a05      	ldr	r2, [sp, #20]
 800199a:	0264      	lsls	r4, r4, #9
 800199c:	431c      	orrs	r4, r3
 800199e:	0243      	lsls	r3, r0, #9
 80019a0:	4313      	orrs	r3, r2
 80019a2:	1e5d      	subs	r5, r3, #1
 80019a4:	41ab      	sbcs	r3, r5
 80019a6:	465a      	mov	r2, fp
 80019a8:	0dc0      	lsrs	r0, r0, #23
 80019aa:	4303      	orrs	r3, r0
 80019ac:	0252      	lsls	r2, r2, #9
 80019ae:	4313      	orrs	r3, r2
 80019b0:	01e2      	lsls	r2, r4, #7
 80019b2:	d556      	bpl.n	8001a62 <__aeabi_dmul+0x426>
 80019b4:	2001      	movs	r0, #1
 80019b6:	085a      	lsrs	r2, r3, #1
 80019b8:	4003      	ands	r3, r0
 80019ba:	4313      	orrs	r3, r2
 80019bc:	07e2      	lsls	r2, r4, #31
 80019be:	4313      	orrs	r3, r2
 80019c0:	0864      	lsrs	r4, r4, #1
 80019c2:	485a      	ldr	r0, [pc, #360]	; (8001b2c <__aeabi_dmul+0x4f0>)
 80019c4:	4460      	add	r0, ip
 80019c6:	2800      	cmp	r0, #0
 80019c8:	dd4d      	ble.n	8001a66 <__aeabi_dmul+0x42a>
 80019ca:	075a      	lsls	r2, r3, #29
 80019cc:	d009      	beq.n	80019e2 <__aeabi_dmul+0x3a6>
 80019ce:	220f      	movs	r2, #15
 80019d0:	401a      	ands	r2, r3
 80019d2:	2a04      	cmp	r2, #4
 80019d4:	d005      	beq.n	80019e2 <__aeabi_dmul+0x3a6>
 80019d6:	1d1a      	adds	r2, r3, #4
 80019d8:	429a      	cmp	r2, r3
 80019da:	419b      	sbcs	r3, r3
 80019dc:	425b      	negs	r3, r3
 80019de:	18e4      	adds	r4, r4, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	01e2      	lsls	r2, r4, #7
 80019e4:	d504      	bpl.n	80019f0 <__aeabi_dmul+0x3b4>
 80019e6:	2080      	movs	r0, #128	; 0x80
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <__aeabi_dmul+0x4f4>)
 80019ea:	00c0      	lsls	r0, r0, #3
 80019ec:	4014      	ands	r4, r2
 80019ee:	4460      	add	r0, ip
 80019f0:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <__aeabi_dmul+0x4f8>)
 80019f2:	4290      	cmp	r0, r2
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dmul+0x3bc>
 80019f6:	e6e3      	b.n	80017c0 <__aeabi_dmul+0x184>
 80019f8:	2501      	movs	r5, #1
 80019fa:	08db      	lsrs	r3, r3, #3
 80019fc:	0762      	lsls	r2, r4, #29
 80019fe:	431a      	orrs	r2, r3
 8001a00:	0264      	lsls	r4, r4, #9
 8001a02:	9b01      	ldr	r3, [sp, #4]
 8001a04:	4691      	mov	r9, r2
 8001a06:	0b22      	lsrs	r2, r4, #12
 8001a08:	0544      	lsls	r4, r0, #21
 8001a0a:	0d64      	lsrs	r4, r4, #21
 8001a0c:	401d      	ands	r5, r3
 8001a0e:	e67c      	b.n	800170a <__aeabi_dmul+0xce>
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	4659      	mov	r1, fp
 8001a14:	0312      	lsls	r2, r2, #12
 8001a16:	4211      	tst	r1, r2
 8001a18:	d008      	beq.n	8001a2c <__aeabi_dmul+0x3f0>
 8001a1a:	4214      	tst	r4, r2
 8001a1c:	d106      	bne.n	8001a2c <__aeabi_dmul+0x3f0>
 8001a1e:	4322      	orrs	r2, r4
 8001a20:	0312      	lsls	r2, r2, #12
 8001a22:	0b12      	lsrs	r2, r2, #12
 8001a24:	4645      	mov	r5, r8
 8001a26:	4699      	mov	r9, r3
 8001a28:	4c43      	ldr	r4, [pc, #268]	; (8001b38 <__aeabi_dmul+0x4fc>)
 8001a2a:	e66e      	b.n	800170a <__aeabi_dmul+0xce>
 8001a2c:	465b      	mov	r3, fp
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	0312      	lsls	r2, r2, #12
 8001a32:	0b12      	lsrs	r2, r2, #12
 8001a34:	4c40      	ldr	r4, [pc, #256]	; (8001b38 <__aeabi_dmul+0x4fc>)
 8001a36:	e668      	b.n	800170a <__aeabi_dmul+0xce>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	4654      	mov	r4, sl
 8001a3c:	3b28      	subs	r3, #40	; 0x28
 8001a3e:	409c      	lsls	r4, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	e6b9      	b.n	80017b8 <__aeabi_dmul+0x17c>
 8001a44:	f000 fc26 	bl	8002294 <__clzsi2>
 8001a48:	3020      	adds	r0, #32
 8001a4a:	e6a6      	b.n	800179a <__aeabi_dmul+0x15e>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	3b28      	subs	r3, #40	; 0x28
 8001a50:	409f      	lsls	r7, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	46bb      	mov	fp, r7
 8001a56:	4699      	mov	r9, r3
 8001a58:	e68a      	b.n	8001770 <__aeabi_dmul+0x134>
 8001a5a:	f000 fc1b 	bl	8002294 <__clzsi2>
 8001a5e:	3020      	adds	r0, #32
 8001a60:	e674      	b.n	800174c <__aeabi_dmul+0x110>
 8001a62:	46b4      	mov	ip, r6
 8001a64:	e7ad      	b.n	80019c2 <__aeabi_dmul+0x386>
 8001a66:	2501      	movs	r5, #1
 8001a68:	1a2a      	subs	r2, r5, r0
 8001a6a:	2a38      	cmp	r2, #56	; 0x38
 8001a6c:	dd06      	ble.n	8001a7c <__aeabi_dmul+0x440>
 8001a6e:	9b01      	ldr	r3, [sp, #4]
 8001a70:	2400      	movs	r4, #0
 8001a72:	401d      	ands	r5, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	4699      	mov	r9, r3
 8001a7a:	e646      	b.n	800170a <__aeabi_dmul+0xce>
 8001a7c:	2a1f      	cmp	r2, #31
 8001a7e:	dc21      	bgt.n	8001ac4 <__aeabi_dmul+0x488>
 8001a80:	2520      	movs	r5, #32
 8001a82:	0020      	movs	r0, r4
 8001a84:	1aad      	subs	r5, r5, r2
 8001a86:	001e      	movs	r6, r3
 8001a88:	40ab      	lsls	r3, r5
 8001a8a:	40a8      	lsls	r0, r5
 8001a8c:	40d6      	lsrs	r6, r2
 8001a8e:	1e5d      	subs	r5, r3, #1
 8001a90:	41ab      	sbcs	r3, r5
 8001a92:	4330      	orrs	r0, r6
 8001a94:	4318      	orrs	r0, r3
 8001a96:	40d4      	lsrs	r4, r2
 8001a98:	0743      	lsls	r3, r0, #29
 8001a9a:	d009      	beq.n	8001ab0 <__aeabi_dmul+0x474>
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d005      	beq.n	8001ab0 <__aeabi_dmul+0x474>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	1d18      	adds	r0, r3, #4
 8001aa8:	4298      	cmp	r0, r3
 8001aaa:	419b      	sbcs	r3, r3
 8001aac:	425b      	negs	r3, r3
 8001aae:	18e4      	adds	r4, r4, r3
 8001ab0:	0223      	lsls	r3, r4, #8
 8001ab2:	d521      	bpl.n	8001af8 <__aeabi_dmul+0x4bc>
 8001ab4:	2501      	movs	r5, #1
 8001ab6:	9b01      	ldr	r3, [sp, #4]
 8001ab8:	2401      	movs	r4, #1
 8001aba:	401d      	ands	r5, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	e622      	b.n	800170a <__aeabi_dmul+0xce>
 8001ac4:	251f      	movs	r5, #31
 8001ac6:	0021      	movs	r1, r4
 8001ac8:	426d      	negs	r5, r5
 8001aca:	1a28      	subs	r0, r5, r0
 8001acc:	40c1      	lsrs	r1, r0
 8001ace:	0008      	movs	r0, r1
 8001ad0:	2a20      	cmp	r2, #32
 8001ad2:	d01d      	beq.n	8001b10 <__aeabi_dmul+0x4d4>
 8001ad4:	355f      	adds	r5, #95	; 0x5f
 8001ad6:	1aaa      	subs	r2, r5, r2
 8001ad8:	4094      	lsls	r4, r2
 8001ada:	4323      	orrs	r3, r4
 8001adc:	1e5c      	subs	r4, r3, #1
 8001ade:	41a3      	sbcs	r3, r4
 8001ae0:	2507      	movs	r5, #7
 8001ae2:	4303      	orrs	r3, r0
 8001ae4:	401d      	ands	r5, r3
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2d00      	cmp	r5, #0
 8001aea:	d009      	beq.n	8001b00 <__aeabi_dmul+0x4c4>
 8001aec:	220f      	movs	r2, #15
 8001aee:	2400      	movs	r4, #0
 8001af0:	401a      	ands	r2, r3
 8001af2:	0018      	movs	r0, r3
 8001af4:	2a04      	cmp	r2, #4
 8001af6:	d1d6      	bne.n	8001aa6 <__aeabi_dmul+0x46a>
 8001af8:	0003      	movs	r3, r0
 8001afa:	0765      	lsls	r5, r4, #29
 8001afc:	0264      	lsls	r4, r4, #9
 8001afe:	0b22      	lsrs	r2, r4, #12
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	432b      	orrs	r3, r5
 8001b04:	2501      	movs	r5, #1
 8001b06:	4699      	mov	r9, r3
 8001b08:	9b01      	ldr	r3, [sp, #4]
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	401d      	ands	r5, r3
 8001b0e:	e5fc      	b.n	800170a <__aeabi_dmul+0xce>
 8001b10:	2400      	movs	r4, #0
 8001b12:	e7e2      	b.n	8001ada <__aeabi_dmul+0x49e>
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	2501      	movs	r5, #1
 8001b18:	0312      	lsls	r2, r2, #12
 8001b1a:	4322      	orrs	r2, r4
 8001b1c:	9901      	ldr	r1, [sp, #4]
 8001b1e:	0312      	lsls	r2, r2, #12
 8001b20:	0b12      	lsrs	r2, r2, #12
 8001b22:	400d      	ands	r5, r1
 8001b24:	4699      	mov	r9, r3
 8001b26:	4c04      	ldr	r4, [pc, #16]	; (8001b38 <__aeabi_dmul+0x4fc>)
 8001b28:	e5ef      	b.n	800170a <__aeabi_dmul+0xce>
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	000003ff 	.word	0x000003ff
 8001b30:	feffffff 	.word	0xfeffffff
 8001b34:	000007fe 	.word	0x000007fe
 8001b38:	000007ff 	.word	0x000007ff

08001b3c <__aeabi_dsub>:
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	4646      	mov	r6, r8
 8001b40:	46d6      	mov	lr, sl
 8001b42:	464f      	mov	r7, r9
 8001b44:	030c      	lsls	r4, r1, #12
 8001b46:	b5c0      	push	{r6, r7, lr}
 8001b48:	0fcd      	lsrs	r5, r1, #31
 8001b4a:	004e      	lsls	r6, r1, #1
 8001b4c:	0a61      	lsrs	r1, r4, #9
 8001b4e:	0f44      	lsrs	r4, r0, #29
 8001b50:	430c      	orrs	r4, r1
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	0058      	lsls	r0, r3, #1
 8001b56:	0d40      	lsrs	r0, r0, #21
 8001b58:	4684      	mov	ip, r0
 8001b5a:	468a      	mov	sl, r1
 8001b5c:	000f      	movs	r7, r1
 8001b5e:	0319      	lsls	r1, r3, #12
 8001b60:	0f50      	lsrs	r0, r2, #29
 8001b62:	0a49      	lsrs	r1, r1, #9
 8001b64:	4301      	orrs	r1, r0
 8001b66:	48c6      	ldr	r0, [pc, #792]	; (8001e80 <__aeabi_dsub+0x344>)
 8001b68:	0d76      	lsrs	r6, r6, #21
 8001b6a:	46a8      	mov	r8, r5
 8001b6c:	0fdb      	lsrs	r3, r3, #31
 8001b6e:	00d2      	lsls	r2, r2, #3
 8001b70:	4584      	cmp	ip, r0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dsub+0x3a>
 8001b74:	e0d8      	b.n	8001d28 <__aeabi_dsub+0x1ec>
 8001b76:	2001      	movs	r0, #1
 8001b78:	4043      	eors	r3, r0
 8001b7a:	42ab      	cmp	r3, r5
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x44>
 8001b7e:	e0a6      	b.n	8001cce <__aeabi_dsub+0x192>
 8001b80:	4660      	mov	r0, ip
 8001b82:	1a35      	subs	r5, r6, r0
 8001b84:	2d00      	cmp	r5, #0
 8001b86:	dc00      	bgt.n	8001b8a <__aeabi_dsub+0x4e>
 8001b88:	e105      	b.n	8001d96 <__aeabi_dsub+0x25a>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d110      	bne.n	8001bb0 <__aeabi_dsub+0x74>
 8001b8e:	000b      	movs	r3, r1
 8001b90:	4313      	orrs	r3, r2
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x5a>
 8001b94:	e0d7      	b.n	8001d46 <__aeabi_dsub+0x20a>
 8001b96:	1e6b      	subs	r3, r5, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x62>
 8001b9c:	e14b      	b.n	8001e36 <__aeabi_dsub+0x2fa>
 8001b9e:	4653      	mov	r3, sl
 8001ba0:	1a9f      	subs	r7, r3, r2
 8001ba2:	45ba      	cmp	sl, r7
 8001ba4:	4180      	sbcs	r0, r0
 8001ba6:	1a64      	subs	r4, r4, r1
 8001ba8:	4240      	negs	r0, r0
 8001baa:	1a24      	subs	r4, r4, r0
 8001bac:	2601      	movs	r6, #1
 8001bae:	e01e      	b.n	8001bee <__aeabi_dsub+0xb2>
 8001bb0:	4bb3      	ldr	r3, [pc, #716]	; (8001e80 <__aeabi_dsub+0x344>)
 8001bb2:	429e      	cmp	r6, r3
 8001bb4:	d048      	beq.n	8001c48 <__aeabi_dsub+0x10c>
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	4319      	orrs	r1, r3
 8001bbc:	2d38      	cmp	r5, #56	; 0x38
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dsub+0x86>
 8001bc0:	e119      	b.n	8001df6 <__aeabi_dsub+0x2ba>
 8001bc2:	2d1f      	cmp	r5, #31
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0x8c>
 8001bc6:	e14c      	b.n	8001e62 <__aeabi_dsub+0x326>
 8001bc8:	2320      	movs	r3, #32
 8001bca:	000f      	movs	r7, r1
 8001bcc:	1b5b      	subs	r3, r3, r5
 8001bce:	0010      	movs	r0, r2
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	409f      	lsls	r7, r3
 8001bd4:	40e8      	lsrs	r0, r5
 8001bd6:	1e53      	subs	r3, r2, #1
 8001bd8:	419a      	sbcs	r2, r3
 8001bda:	40e9      	lsrs	r1, r5
 8001bdc:	4307      	orrs	r7, r0
 8001bde:	4317      	orrs	r7, r2
 8001be0:	4653      	mov	r3, sl
 8001be2:	1bdf      	subs	r7, r3, r7
 8001be4:	1a61      	subs	r1, r4, r1
 8001be6:	45ba      	cmp	sl, r7
 8001be8:	41a4      	sbcs	r4, r4
 8001bea:	4264      	negs	r4, r4
 8001bec:	1b0c      	subs	r4, r1, r4
 8001bee:	0223      	lsls	r3, r4, #8
 8001bf0:	d400      	bmi.n	8001bf4 <__aeabi_dsub+0xb8>
 8001bf2:	e0c5      	b.n	8001d80 <__aeabi_dsub+0x244>
 8001bf4:	0264      	lsls	r4, r4, #9
 8001bf6:	0a65      	lsrs	r5, r4, #9
 8001bf8:	2d00      	cmp	r5, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0xc2>
 8001bfc:	e0f6      	b.n	8001dec <__aeabi_dsub+0x2b0>
 8001bfe:	0028      	movs	r0, r5
 8001c00:	f000 fb48 	bl	8002294 <__clzsi2>
 8001c04:	0003      	movs	r3, r0
 8001c06:	3b08      	subs	r3, #8
 8001c08:	2b1f      	cmp	r3, #31
 8001c0a:	dd00      	ble.n	8001c0e <__aeabi_dsub+0xd2>
 8001c0c:	e0e9      	b.n	8001de2 <__aeabi_dsub+0x2a6>
 8001c0e:	2220      	movs	r2, #32
 8001c10:	003c      	movs	r4, r7
 8001c12:	1ad2      	subs	r2, r2, r3
 8001c14:	409d      	lsls	r5, r3
 8001c16:	40d4      	lsrs	r4, r2
 8001c18:	409f      	lsls	r7, r3
 8001c1a:	4325      	orrs	r5, r4
 8001c1c:	429e      	cmp	r6, r3
 8001c1e:	dd00      	ble.n	8001c22 <__aeabi_dsub+0xe6>
 8001c20:	e0db      	b.n	8001dda <__aeabi_dsub+0x29e>
 8001c22:	1b9e      	subs	r6, r3, r6
 8001c24:	1c73      	adds	r3, r6, #1
 8001c26:	2b1f      	cmp	r3, #31
 8001c28:	dd00      	ble.n	8001c2c <__aeabi_dsub+0xf0>
 8001c2a:	e10a      	b.n	8001e42 <__aeabi_dsub+0x306>
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	0038      	movs	r0, r7
 8001c30:	1ad2      	subs	r2, r2, r3
 8001c32:	0029      	movs	r1, r5
 8001c34:	4097      	lsls	r7, r2
 8001c36:	002c      	movs	r4, r5
 8001c38:	4091      	lsls	r1, r2
 8001c3a:	40d8      	lsrs	r0, r3
 8001c3c:	1e7a      	subs	r2, r7, #1
 8001c3e:	4197      	sbcs	r7, r2
 8001c40:	40dc      	lsrs	r4, r3
 8001c42:	2600      	movs	r6, #0
 8001c44:	4301      	orrs	r1, r0
 8001c46:	430f      	orrs	r7, r1
 8001c48:	077b      	lsls	r3, r7, #29
 8001c4a:	d009      	beq.n	8001c60 <__aeabi_dsub+0x124>
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	403b      	ands	r3, r7
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d005      	beq.n	8001c60 <__aeabi_dsub+0x124>
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	42bb      	cmp	r3, r7
 8001c58:	41bf      	sbcs	r7, r7
 8001c5a:	427f      	negs	r7, r7
 8001c5c:	19e4      	adds	r4, r4, r7
 8001c5e:	001f      	movs	r7, r3
 8001c60:	0223      	lsls	r3, r4, #8
 8001c62:	d525      	bpl.n	8001cb0 <__aeabi_dsub+0x174>
 8001c64:	4b86      	ldr	r3, [pc, #536]	; (8001e80 <__aeabi_dsub+0x344>)
 8001c66:	3601      	adds	r6, #1
 8001c68:	429e      	cmp	r6, r3
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x132>
 8001c6c:	e0af      	b.n	8001dce <__aeabi_dsub+0x292>
 8001c6e:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <__aeabi_dsub+0x348>)
 8001c70:	2501      	movs	r5, #1
 8001c72:	401c      	ands	r4, r3
 8001c74:	4643      	mov	r3, r8
 8001c76:	0762      	lsls	r2, r4, #29
 8001c78:	08ff      	lsrs	r7, r7, #3
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0576      	lsls	r6, r6, #21
 8001c7e:	4317      	orrs	r7, r2
 8001c80:	0b24      	lsrs	r4, r4, #12
 8001c82:	0d76      	lsrs	r6, r6, #21
 8001c84:	401d      	ands	r5, r3
 8001c86:	2100      	movs	r1, #0
 8001c88:	0324      	lsls	r4, r4, #12
 8001c8a:	0b23      	lsrs	r3, r4, #12
 8001c8c:	0d0c      	lsrs	r4, r1, #20
 8001c8e:	4a7e      	ldr	r2, [pc, #504]	; (8001e88 <__aeabi_dsub+0x34c>)
 8001c90:	0524      	lsls	r4, r4, #20
 8001c92:	431c      	orrs	r4, r3
 8001c94:	4014      	ands	r4, r2
 8001c96:	0533      	lsls	r3, r6, #20
 8001c98:	4323      	orrs	r3, r4
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	07ed      	lsls	r5, r5, #31
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	432b      	orrs	r3, r5
 8001ca2:	0038      	movs	r0, r7
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	bc1c      	pop	{r2, r3, r4}
 8001ca8:	4690      	mov	r8, r2
 8001caa:	4699      	mov	r9, r3
 8001cac:	46a2      	mov	sl, r4
 8001cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb0:	2501      	movs	r5, #1
 8001cb2:	4643      	mov	r3, r8
 8001cb4:	0762      	lsls	r2, r4, #29
 8001cb6:	08ff      	lsrs	r7, r7, #3
 8001cb8:	4317      	orrs	r7, r2
 8001cba:	08e4      	lsrs	r4, r4, #3
 8001cbc:	401d      	ands	r5, r3
 8001cbe:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <__aeabi_dsub+0x344>)
 8001cc0:	429e      	cmp	r6, r3
 8001cc2:	d036      	beq.n	8001d32 <__aeabi_dsub+0x1f6>
 8001cc4:	0324      	lsls	r4, r4, #12
 8001cc6:	0576      	lsls	r6, r6, #21
 8001cc8:	0b24      	lsrs	r4, r4, #12
 8001cca:	0d76      	lsrs	r6, r6, #21
 8001ccc:	e7db      	b.n	8001c86 <__aeabi_dsub+0x14a>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1af3      	subs	r3, r6, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dc00      	bgt.n	8001cd8 <__aeabi_dsub+0x19c>
 8001cd6:	e094      	b.n	8001e02 <__aeabi_dsub+0x2c6>
 8001cd8:	4660      	mov	r0, ip
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d035      	beq.n	8001d4a <__aeabi_dsub+0x20e>
 8001cde:	4868      	ldr	r0, [pc, #416]	; (8001e80 <__aeabi_dsub+0x344>)
 8001ce0:	4286      	cmp	r6, r0
 8001ce2:	d0b1      	beq.n	8001c48 <__aeabi_dsub+0x10c>
 8001ce4:	2780      	movs	r7, #128	; 0x80
 8001ce6:	043f      	lsls	r7, r7, #16
 8001ce8:	4339      	orrs	r1, r7
 8001cea:	2b38      	cmp	r3, #56	; 0x38
 8001cec:	dc00      	bgt.n	8001cf0 <__aeabi_dsub+0x1b4>
 8001cee:	e0fd      	b.n	8001eec <__aeabi_dsub+0x3b0>
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	0017      	movs	r7, r2
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	1e7a      	subs	r2, r7, #1
 8001cf8:	4197      	sbcs	r7, r2
 8001cfa:	4457      	add	r7, sl
 8001cfc:	4557      	cmp	r7, sl
 8001cfe:	4180      	sbcs	r0, r0
 8001d00:	1909      	adds	r1, r1, r4
 8001d02:	4244      	negs	r4, r0
 8001d04:	190c      	adds	r4, r1, r4
 8001d06:	0223      	lsls	r3, r4, #8
 8001d08:	d53a      	bpl.n	8001d80 <__aeabi_dsub+0x244>
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <__aeabi_dsub+0x344>)
 8001d0c:	3601      	adds	r6, #1
 8001d0e:	429e      	cmp	r6, r3
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x1d8>
 8001d12:	e14b      	b.n	8001fac <__aeabi_dsub+0x470>
 8001d14:	2201      	movs	r2, #1
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <__aeabi_dsub+0x348>)
 8001d18:	401c      	ands	r4, r3
 8001d1a:	087b      	lsrs	r3, r7, #1
 8001d1c:	4017      	ands	r7, r2
 8001d1e:	431f      	orrs	r7, r3
 8001d20:	07e2      	lsls	r2, r4, #31
 8001d22:	4317      	orrs	r7, r2
 8001d24:	0864      	lsrs	r4, r4, #1
 8001d26:	e78f      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001d28:	0008      	movs	r0, r1
 8001d2a:	4310      	orrs	r0, r2
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dsub+0x1f4>
 8001d2e:	e724      	b.n	8001b7a <__aeabi_dsub+0x3e>
 8001d30:	e721      	b.n	8001b76 <__aeabi_dsub+0x3a>
 8001d32:	0023      	movs	r3, r4
 8001d34:	433b      	orrs	r3, r7
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dsub+0x1fe>
 8001d38:	e1b9      	b.n	80020ae <__aeabi_dsub+0x572>
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	0312      	lsls	r2, r2, #12
 8001d3e:	4314      	orrs	r4, r2
 8001d40:	0324      	lsls	r4, r4, #12
 8001d42:	0b24      	lsrs	r4, r4, #12
 8001d44:	e79f      	b.n	8001c86 <__aeabi_dsub+0x14a>
 8001d46:	002e      	movs	r6, r5
 8001d48:	e77e      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001d4a:	0008      	movs	r0, r1
 8001d4c:	4310      	orrs	r0, r2
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x216>
 8001d50:	e0ca      	b.n	8001ee8 <__aeabi_dsub+0x3ac>
 8001d52:	1e58      	subs	r0, r3, #1
 8001d54:	4684      	mov	ip, r0
 8001d56:	2800      	cmp	r0, #0
 8001d58:	d000      	beq.n	8001d5c <__aeabi_dsub+0x220>
 8001d5a:	e0e7      	b.n	8001f2c <__aeabi_dsub+0x3f0>
 8001d5c:	4452      	add	r2, sl
 8001d5e:	4552      	cmp	r2, sl
 8001d60:	4180      	sbcs	r0, r0
 8001d62:	1864      	adds	r4, r4, r1
 8001d64:	4240      	negs	r0, r0
 8001d66:	1824      	adds	r4, r4, r0
 8001d68:	0017      	movs	r7, r2
 8001d6a:	2601      	movs	r6, #1
 8001d6c:	0223      	lsls	r3, r4, #8
 8001d6e:	d507      	bpl.n	8001d80 <__aeabi_dsub+0x244>
 8001d70:	2602      	movs	r6, #2
 8001d72:	e7cf      	b.n	8001d14 <__aeabi_dsub+0x1d8>
 8001d74:	4664      	mov	r4, ip
 8001d76:	432c      	orrs	r4, r5
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x240>
 8001d7a:	e1b3      	b.n	80020e4 <__aeabi_dsub+0x5a8>
 8001d7c:	002c      	movs	r4, r5
 8001d7e:	4667      	mov	r7, ip
 8001d80:	077b      	lsls	r3, r7, #29
 8001d82:	d000      	beq.n	8001d86 <__aeabi_dsub+0x24a>
 8001d84:	e762      	b.n	8001c4c <__aeabi_dsub+0x110>
 8001d86:	0763      	lsls	r3, r4, #29
 8001d88:	08ff      	lsrs	r7, r7, #3
 8001d8a:	431f      	orrs	r7, r3
 8001d8c:	2501      	movs	r5, #1
 8001d8e:	4643      	mov	r3, r8
 8001d90:	08e4      	lsrs	r4, r4, #3
 8001d92:	401d      	ands	r5, r3
 8001d94:	e793      	b.n	8001cbe <__aeabi_dsub+0x182>
 8001d96:	2d00      	cmp	r5, #0
 8001d98:	d178      	bne.n	8001e8c <__aeabi_dsub+0x350>
 8001d9a:	1c75      	adds	r5, r6, #1
 8001d9c:	056d      	lsls	r5, r5, #21
 8001d9e:	0d6d      	lsrs	r5, r5, #21
 8001da0:	2d01      	cmp	r5, #1
 8001da2:	dc00      	bgt.n	8001da6 <__aeabi_dsub+0x26a>
 8001da4:	e0f2      	b.n	8001f8c <__aeabi_dsub+0x450>
 8001da6:	4650      	mov	r0, sl
 8001da8:	1a80      	subs	r0, r0, r2
 8001daa:	4582      	cmp	sl, r0
 8001dac:	41bf      	sbcs	r7, r7
 8001dae:	1a65      	subs	r5, r4, r1
 8001db0:	427f      	negs	r7, r7
 8001db2:	1bed      	subs	r5, r5, r7
 8001db4:	4684      	mov	ip, r0
 8001db6:	0228      	lsls	r0, r5, #8
 8001db8:	d400      	bmi.n	8001dbc <__aeabi_dsub+0x280>
 8001dba:	e08c      	b.n	8001ed6 <__aeabi_dsub+0x39a>
 8001dbc:	4650      	mov	r0, sl
 8001dbe:	1a17      	subs	r7, r2, r0
 8001dc0:	42ba      	cmp	r2, r7
 8001dc2:	4192      	sbcs	r2, r2
 8001dc4:	1b0c      	subs	r4, r1, r4
 8001dc6:	4255      	negs	r5, r2
 8001dc8:	1b65      	subs	r5, r4, r5
 8001dca:	4698      	mov	r8, r3
 8001dcc:	e714      	b.n	8001bf8 <__aeabi_dsub+0xbc>
 8001dce:	2501      	movs	r5, #1
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	2400      	movs	r4, #0
 8001dd4:	401d      	ands	r5, r3
 8001dd6:	2700      	movs	r7, #0
 8001dd8:	e755      	b.n	8001c86 <__aeabi_dsub+0x14a>
 8001dda:	4c2a      	ldr	r4, [pc, #168]	; (8001e84 <__aeabi_dsub+0x348>)
 8001ddc:	1af6      	subs	r6, r6, r3
 8001dde:	402c      	ands	r4, r5
 8001de0:	e732      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001de2:	003d      	movs	r5, r7
 8001de4:	3828      	subs	r0, #40	; 0x28
 8001de6:	4085      	lsls	r5, r0
 8001de8:	2700      	movs	r7, #0
 8001dea:	e717      	b.n	8001c1c <__aeabi_dsub+0xe0>
 8001dec:	0038      	movs	r0, r7
 8001dee:	f000 fa51 	bl	8002294 <__clzsi2>
 8001df2:	3020      	adds	r0, #32
 8001df4:	e706      	b.n	8001c04 <__aeabi_dsub+0xc8>
 8001df6:	430a      	orrs	r2, r1
 8001df8:	0017      	movs	r7, r2
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	1e7a      	subs	r2, r7, #1
 8001dfe:	4197      	sbcs	r7, r2
 8001e00:	e6ee      	b.n	8001be0 <__aeabi_dsub+0xa4>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d000      	beq.n	8001e08 <__aeabi_dsub+0x2cc>
 8001e06:	e0e5      	b.n	8001fd4 <__aeabi_dsub+0x498>
 8001e08:	1c73      	adds	r3, r6, #1
 8001e0a:	469c      	mov	ip, r3
 8001e0c:	055b      	lsls	r3, r3, #21
 8001e0e:	0d5b      	lsrs	r3, r3, #21
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	dc00      	bgt.n	8001e16 <__aeabi_dsub+0x2da>
 8001e14:	e09f      	b.n	8001f56 <__aeabi_dsub+0x41a>
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <__aeabi_dsub+0x344>)
 8001e18:	459c      	cmp	ip, r3
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x2e2>
 8001e1c:	e0c5      	b.n	8001faa <__aeabi_dsub+0x46e>
 8001e1e:	4452      	add	r2, sl
 8001e20:	4552      	cmp	r2, sl
 8001e22:	4180      	sbcs	r0, r0
 8001e24:	1864      	adds	r4, r4, r1
 8001e26:	4240      	negs	r0, r0
 8001e28:	1824      	adds	r4, r4, r0
 8001e2a:	07e7      	lsls	r7, r4, #31
 8001e2c:	0852      	lsrs	r2, r2, #1
 8001e2e:	4317      	orrs	r7, r2
 8001e30:	0864      	lsrs	r4, r4, #1
 8001e32:	4666      	mov	r6, ip
 8001e34:	e708      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <__aeabi_dsub+0x344>)
 8001e38:	4285      	cmp	r5, r0
 8001e3a:	d100      	bne.n	8001e3e <__aeabi_dsub+0x302>
 8001e3c:	e085      	b.n	8001f4a <__aeabi_dsub+0x40e>
 8001e3e:	001d      	movs	r5, r3
 8001e40:	e6bc      	b.n	8001bbc <__aeabi_dsub+0x80>
 8001e42:	0029      	movs	r1, r5
 8001e44:	3e1f      	subs	r6, #31
 8001e46:	40f1      	lsrs	r1, r6
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_dsub+0x312>
 8001e4c:	e07f      	b.n	8001f4e <__aeabi_dsub+0x412>
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	409d      	lsls	r5, r3
 8001e54:	432f      	orrs	r7, r5
 8001e56:	1e7d      	subs	r5, r7, #1
 8001e58:	41af      	sbcs	r7, r5
 8001e5a:	2400      	movs	r4, #0
 8001e5c:	430f      	orrs	r7, r1
 8001e5e:	2600      	movs	r6, #0
 8001e60:	e78e      	b.n	8001d80 <__aeabi_dsub+0x244>
 8001e62:	002b      	movs	r3, r5
 8001e64:	000f      	movs	r7, r1
 8001e66:	3b20      	subs	r3, #32
 8001e68:	40df      	lsrs	r7, r3
 8001e6a:	2d20      	cmp	r5, #32
 8001e6c:	d071      	beq.n	8001f52 <__aeabi_dsub+0x416>
 8001e6e:	2340      	movs	r3, #64	; 0x40
 8001e70:	1b5d      	subs	r5, r3, r5
 8001e72:	40a9      	lsls	r1, r5
 8001e74:	430a      	orrs	r2, r1
 8001e76:	1e51      	subs	r1, r2, #1
 8001e78:	418a      	sbcs	r2, r1
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4317      	orrs	r7, r2
 8001e7e:	e6af      	b.n	8001be0 <__aeabi_dsub+0xa4>
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	ff7fffff 	.word	0xff7fffff
 8001e88:	800fffff 	.word	0x800fffff
 8001e8c:	2e00      	cmp	r6, #0
 8001e8e:	d03e      	beq.n	8001f0e <__aeabi_dsub+0x3d2>
 8001e90:	4eb3      	ldr	r6, [pc, #716]	; (8002160 <__aeabi_dsub+0x624>)
 8001e92:	45b4      	cmp	ip, r6
 8001e94:	d045      	beq.n	8001f22 <__aeabi_dsub+0x3e6>
 8001e96:	2680      	movs	r6, #128	; 0x80
 8001e98:	0436      	lsls	r6, r6, #16
 8001e9a:	426d      	negs	r5, r5
 8001e9c:	4334      	orrs	r4, r6
 8001e9e:	2d38      	cmp	r5, #56	; 0x38
 8001ea0:	dd00      	ble.n	8001ea4 <__aeabi_dsub+0x368>
 8001ea2:	e0a8      	b.n	8001ff6 <__aeabi_dsub+0x4ba>
 8001ea4:	2d1f      	cmp	r5, #31
 8001ea6:	dd00      	ble.n	8001eaa <__aeabi_dsub+0x36e>
 8001ea8:	e11f      	b.n	80020ea <__aeabi_dsub+0x5ae>
 8001eaa:	2620      	movs	r6, #32
 8001eac:	0027      	movs	r7, r4
 8001eae:	4650      	mov	r0, sl
 8001eb0:	1b76      	subs	r6, r6, r5
 8001eb2:	40b7      	lsls	r7, r6
 8001eb4:	40e8      	lsrs	r0, r5
 8001eb6:	4307      	orrs	r7, r0
 8001eb8:	4650      	mov	r0, sl
 8001eba:	40b0      	lsls	r0, r6
 8001ebc:	1e46      	subs	r6, r0, #1
 8001ebe:	41b0      	sbcs	r0, r6
 8001ec0:	40ec      	lsrs	r4, r5
 8001ec2:	4338      	orrs	r0, r7
 8001ec4:	1a17      	subs	r7, r2, r0
 8001ec6:	42ba      	cmp	r2, r7
 8001ec8:	4192      	sbcs	r2, r2
 8001eca:	1b0c      	subs	r4, r1, r4
 8001ecc:	4252      	negs	r2, r2
 8001ece:	1aa4      	subs	r4, r4, r2
 8001ed0:	4666      	mov	r6, ip
 8001ed2:	4698      	mov	r8, r3
 8001ed4:	e68b      	b.n	8001bee <__aeabi_dsub+0xb2>
 8001ed6:	4664      	mov	r4, ip
 8001ed8:	4667      	mov	r7, ip
 8001eda:	432c      	orrs	r4, r5
 8001edc:	d000      	beq.n	8001ee0 <__aeabi_dsub+0x3a4>
 8001ede:	e68b      	b.n	8001bf8 <__aeabi_dsub+0xbc>
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	2600      	movs	r6, #0
 8001ee4:	2700      	movs	r7, #0
 8001ee6:	e6ea      	b.n	8001cbe <__aeabi_dsub+0x182>
 8001ee8:	001e      	movs	r6, r3
 8001eea:	e6ad      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001eec:	2b1f      	cmp	r3, #31
 8001eee:	dc60      	bgt.n	8001fb2 <__aeabi_dsub+0x476>
 8001ef0:	2720      	movs	r7, #32
 8001ef2:	1af8      	subs	r0, r7, r3
 8001ef4:	000f      	movs	r7, r1
 8001ef6:	4684      	mov	ip, r0
 8001ef8:	4087      	lsls	r7, r0
 8001efa:	0010      	movs	r0, r2
 8001efc:	40d8      	lsrs	r0, r3
 8001efe:	4307      	orrs	r7, r0
 8001f00:	4660      	mov	r0, ip
 8001f02:	4082      	lsls	r2, r0
 8001f04:	1e50      	subs	r0, r2, #1
 8001f06:	4182      	sbcs	r2, r0
 8001f08:	40d9      	lsrs	r1, r3
 8001f0a:	4317      	orrs	r7, r2
 8001f0c:	e6f5      	b.n	8001cfa <__aeabi_dsub+0x1be>
 8001f0e:	0026      	movs	r6, r4
 8001f10:	4650      	mov	r0, sl
 8001f12:	4306      	orrs	r6, r0
 8001f14:	d005      	beq.n	8001f22 <__aeabi_dsub+0x3e6>
 8001f16:	43ed      	mvns	r5, r5
 8001f18:	2d00      	cmp	r5, #0
 8001f1a:	d0d3      	beq.n	8001ec4 <__aeabi_dsub+0x388>
 8001f1c:	4e90      	ldr	r6, [pc, #576]	; (8002160 <__aeabi_dsub+0x624>)
 8001f1e:	45b4      	cmp	ip, r6
 8001f20:	d1bd      	bne.n	8001e9e <__aeabi_dsub+0x362>
 8001f22:	000c      	movs	r4, r1
 8001f24:	0017      	movs	r7, r2
 8001f26:	4666      	mov	r6, ip
 8001f28:	4698      	mov	r8, r3
 8001f2a:	e68d      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001f2c:	488c      	ldr	r0, [pc, #560]	; (8002160 <__aeabi_dsub+0x624>)
 8001f2e:	4283      	cmp	r3, r0
 8001f30:	d00b      	beq.n	8001f4a <__aeabi_dsub+0x40e>
 8001f32:	4663      	mov	r3, ip
 8001f34:	e6d9      	b.n	8001cea <__aeabi_dsub+0x1ae>
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d000      	beq.n	8001f3c <__aeabi_dsub+0x400>
 8001f3a:	e096      	b.n	800206a <__aeabi_dsub+0x52e>
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	4310      	orrs	r0, r2
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x408>
 8001f42:	e0e2      	b.n	800210a <__aeabi_dsub+0x5ce>
 8001f44:	000c      	movs	r4, r1
 8001f46:	0017      	movs	r7, r2
 8001f48:	4698      	mov	r8, r3
 8001f4a:	4e85      	ldr	r6, [pc, #532]	; (8002160 <__aeabi_dsub+0x624>)
 8001f4c:	e67c      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001f4e:	2500      	movs	r5, #0
 8001f50:	e780      	b.n	8001e54 <__aeabi_dsub+0x318>
 8001f52:	2100      	movs	r1, #0
 8001f54:	e78e      	b.n	8001e74 <__aeabi_dsub+0x338>
 8001f56:	0023      	movs	r3, r4
 8001f58:	4650      	mov	r0, sl
 8001f5a:	4303      	orrs	r3, r0
 8001f5c:	2e00      	cmp	r6, #0
 8001f5e:	d000      	beq.n	8001f62 <__aeabi_dsub+0x426>
 8001f60:	e0a8      	b.n	80020b4 <__aeabi_dsub+0x578>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x42c>
 8001f66:	e0de      	b.n	8002126 <__aeabi_dsub+0x5ea>
 8001f68:	000b      	movs	r3, r1
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x434>
 8001f6e:	e66b      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001f70:	4452      	add	r2, sl
 8001f72:	4552      	cmp	r2, sl
 8001f74:	4180      	sbcs	r0, r0
 8001f76:	1864      	adds	r4, r4, r1
 8001f78:	4240      	negs	r0, r0
 8001f7a:	1824      	adds	r4, r4, r0
 8001f7c:	0017      	movs	r7, r2
 8001f7e:	0223      	lsls	r3, r4, #8
 8001f80:	d400      	bmi.n	8001f84 <__aeabi_dsub+0x448>
 8001f82:	e6fd      	b.n	8001d80 <__aeabi_dsub+0x244>
 8001f84:	4b77      	ldr	r3, [pc, #476]	; (8002164 <__aeabi_dsub+0x628>)
 8001f86:	4666      	mov	r6, ip
 8001f88:	401c      	ands	r4, r3
 8001f8a:	e65d      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001f8c:	0025      	movs	r5, r4
 8001f8e:	4650      	mov	r0, sl
 8001f90:	4305      	orrs	r5, r0
 8001f92:	2e00      	cmp	r6, #0
 8001f94:	d1cf      	bne.n	8001f36 <__aeabi_dsub+0x3fa>
 8001f96:	2d00      	cmp	r5, #0
 8001f98:	d14f      	bne.n	800203a <__aeabi_dsub+0x4fe>
 8001f9a:	000c      	movs	r4, r1
 8001f9c:	4314      	orrs	r4, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dsub+0x466>
 8001fa0:	e0a0      	b.n	80020e4 <__aeabi_dsub+0x5a8>
 8001fa2:	000c      	movs	r4, r1
 8001fa4:	0017      	movs	r7, r2
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	e64e      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8001faa:	4666      	mov	r6, ip
 8001fac:	2400      	movs	r4, #0
 8001fae:	2700      	movs	r7, #0
 8001fb0:	e685      	b.n	8001cbe <__aeabi_dsub+0x182>
 8001fb2:	001f      	movs	r7, r3
 8001fb4:	0008      	movs	r0, r1
 8001fb6:	3f20      	subs	r7, #32
 8001fb8:	40f8      	lsrs	r0, r7
 8001fba:	0007      	movs	r7, r0
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x486>
 8001fc0:	e08e      	b.n	80020e0 <__aeabi_dsub+0x5a4>
 8001fc2:	2040      	movs	r0, #64	; 0x40
 8001fc4:	1ac3      	subs	r3, r0, r3
 8001fc6:	4099      	lsls	r1, r3
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	1e51      	subs	r1, r2, #1
 8001fcc:	418a      	sbcs	r2, r1
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4317      	orrs	r7, r2
 8001fd2:	e692      	b.n	8001cfa <__aeabi_dsub+0x1be>
 8001fd4:	2e00      	cmp	r6, #0
 8001fd6:	d114      	bne.n	8002002 <__aeabi_dsub+0x4c6>
 8001fd8:	0026      	movs	r6, r4
 8001fda:	4650      	mov	r0, sl
 8001fdc:	4306      	orrs	r6, r0
 8001fde:	d062      	beq.n	80020a6 <__aeabi_dsub+0x56a>
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d15c      	bne.n	80020a0 <__aeabi_dsub+0x564>
 8001fe6:	1887      	adds	r7, r0, r2
 8001fe8:	4297      	cmp	r7, r2
 8001fea:	4192      	sbcs	r2, r2
 8001fec:	1864      	adds	r4, r4, r1
 8001fee:	4252      	negs	r2, r2
 8001ff0:	18a4      	adds	r4, r4, r2
 8001ff2:	4666      	mov	r6, ip
 8001ff4:	e687      	b.n	8001d06 <__aeabi_dsub+0x1ca>
 8001ff6:	4650      	mov	r0, sl
 8001ff8:	4320      	orrs	r0, r4
 8001ffa:	1e44      	subs	r4, r0, #1
 8001ffc:	41a0      	sbcs	r0, r4
 8001ffe:	2400      	movs	r4, #0
 8002000:	e760      	b.n	8001ec4 <__aeabi_dsub+0x388>
 8002002:	4e57      	ldr	r6, [pc, #348]	; (8002160 <__aeabi_dsub+0x624>)
 8002004:	45b4      	cmp	ip, r6
 8002006:	d04e      	beq.n	80020a6 <__aeabi_dsub+0x56a>
 8002008:	2680      	movs	r6, #128	; 0x80
 800200a:	0436      	lsls	r6, r6, #16
 800200c:	425b      	negs	r3, r3
 800200e:	4334      	orrs	r4, r6
 8002010:	2b38      	cmp	r3, #56	; 0x38
 8002012:	dd00      	ble.n	8002016 <__aeabi_dsub+0x4da>
 8002014:	e07f      	b.n	8002116 <__aeabi_dsub+0x5da>
 8002016:	2b1f      	cmp	r3, #31
 8002018:	dd00      	ble.n	800201c <__aeabi_dsub+0x4e0>
 800201a:	e08b      	b.n	8002134 <__aeabi_dsub+0x5f8>
 800201c:	2620      	movs	r6, #32
 800201e:	0027      	movs	r7, r4
 8002020:	4650      	mov	r0, sl
 8002022:	1af6      	subs	r6, r6, r3
 8002024:	40b7      	lsls	r7, r6
 8002026:	40d8      	lsrs	r0, r3
 8002028:	4307      	orrs	r7, r0
 800202a:	4650      	mov	r0, sl
 800202c:	40b0      	lsls	r0, r6
 800202e:	1e46      	subs	r6, r0, #1
 8002030:	41b0      	sbcs	r0, r6
 8002032:	4307      	orrs	r7, r0
 8002034:	40dc      	lsrs	r4, r3
 8002036:	18bf      	adds	r7, r7, r2
 8002038:	e7d6      	b.n	8001fe8 <__aeabi_dsub+0x4ac>
 800203a:	000d      	movs	r5, r1
 800203c:	4315      	orrs	r5, r2
 800203e:	d100      	bne.n	8002042 <__aeabi_dsub+0x506>
 8002040:	e602      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8002042:	4650      	mov	r0, sl
 8002044:	1a80      	subs	r0, r0, r2
 8002046:	4582      	cmp	sl, r0
 8002048:	41bf      	sbcs	r7, r7
 800204a:	1a65      	subs	r5, r4, r1
 800204c:	427f      	negs	r7, r7
 800204e:	1bed      	subs	r5, r5, r7
 8002050:	4684      	mov	ip, r0
 8002052:	0228      	lsls	r0, r5, #8
 8002054:	d400      	bmi.n	8002058 <__aeabi_dsub+0x51c>
 8002056:	e68d      	b.n	8001d74 <__aeabi_dsub+0x238>
 8002058:	4650      	mov	r0, sl
 800205a:	1a17      	subs	r7, r2, r0
 800205c:	42ba      	cmp	r2, r7
 800205e:	4192      	sbcs	r2, r2
 8002060:	1b0c      	subs	r4, r1, r4
 8002062:	4252      	negs	r2, r2
 8002064:	1aa4      	subs	r4, r4, r2
 8002066:	4698      	mov	r8, r3
 8002068:	e5ee      	b.n	8001c48 <__aeabi_dsub+0x10c>
 800206a:	000d      	movs	r5, r1
 800206c:	4315      	orrs	r5, r2
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x536>
 8002070:	e76b      	b.n	8001f4a <__aeabi_dsub+0x40e>
 8002072:	4650      	mov	r0, sl
 8002074:	0767      	lsls	r7, r4, #29
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	4307      	orrs	r7, r0
 800207a:	2080      	movs	r0, #128	; 0x80
 800207c:	08e4      	lsrs	r4, r4, #3
 800207e:	0300      	lsls	r0, r0, #12
 8002080:	4204      	tst	r4, r0
 8002082:	d007      	beq.n	8002094 <__aeabi_dsub+0x558>
 8002084:	08cd      	lsrs	r5, r1, #3
 8002086:	4205      	tst	r5, r0
 8002088:	d104      	bne.n	8002094 <__aeabi_dsub+0x558>
 800208a:	002c      	movs	r4, r5
 800208c:	4698      	mov	r8, r3
 800208e:	08d7      	lsrs	r7, r2, #3
 8002090:	0749      	lsls	r1, r1, #29
 8002092:	430f      	orrs	r7, r1
 8002094:	0f7b      	lsrs	r3, r7, #29
 8002096:	00e4      	lsls	r4, r4, #3
 8002098:	431c      	orrs	r4, r3
 800209a:	00ff      	lsls	r7, r7, #3
 800209c:	4e30      	ldr	r6, [pc, #192]	; (8002160 <__aeabi_dsub+0x624>)
 800209e:	e5d3      	b.n	8001c48 <__aeabi_dsub+0x10c>
 80020a0:	4e2f      	ldr	r6, [pc, #188]	; (8002160 <__aeabi_dsub+0x624>)
 80020a2:	45b4      	cmp	ip, r6
 80020a4:	d1b4      	bne.n	8002010 <__aeabi_dsub+0x4d4>
 80020a6:	000c      	movs	r4, r1
 80020a8:	0017      	movs	r7, r2
 80020aa:	4666      	mov	r6, ip
 80020ac:	e5cc      	b.n	8001c48 <__aeabi_dsub+0x10c>
 80020ae:	2700      	movs	r7, #0
 80020b0:	2400      	movs	r4, #0
 80020b2:	e5e8      	b.n	8001c86 <__aeabi_dsub+0x14a>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d039      	beq.n	800212c <__aeabi_dsub+0x5f0>
 80020b8:	000b      	movs	r3, r1
 80020ba:	4313      	orrs	r3, r2
 80020bc:	d100      	bne.n	80020c0 <__aeabi_dsub+0x584>
 80020be:	e744      	b.n	8001f4a <__aeabi_dsub+0x40e>
 80020c0:	08c0      	lsrs	r0, r0, #3
 80020c2:	0767      	lsls	r7, r4, #29
 80020c4:	4307      	orrs	r7, r0
 80020c6:	2080      	movs	r0, #128	; 0x80
 80020c8:	08e4      	lsrs	r4, r4, #3
 80020ca:	0300      	lsls	r0, r0, #12
 80020cc:	4204      	tst	r4, r0
 80020ce:	d0e1      	beq.n	8002094 <__aeabi_dsub+0x558>
 80020d0:	08cb      	lsrs	r3, r1, #3
 80020d2:	4203      	tst	r3, r0
 80020d4:	d1de      	bne.n	8002094 <__aeabi_dsub+0x558>
 80020d6:	08d7      	lsrs	r7, r2, #3
 80020d8:	0749      	lsls	r1, r1, #29
 80020da:	430f      	orrs	r7, r1
 80020dc:	001c      	movs	r4, r3
 80020de:	e7d9      	b.n	8002094 <__aeabi_dsub+0x558>
 80020e0:	2100      	movs	r1, #0
 80020e2:	e771      	b.n	8001fc8 <__aeabi_dsub+0x48c>
 80020e4:	2500      	movs	r5, #0
 80020e6:	2700      	movs	r7, #0
 80020e8:	e5e9      	b.n	8001cbe <__aeabi_dsub+0x182>
 80020ea:	002e      	movs	r6, r5
 80020ec:	0027      	movs	r7, r4
 80020ee:	3e20      	subs	r6, #32
 80020f0:	40f7      	lsrs	r7, r6
 80020f2:	2d20      	cmp	r5, #32
 80020f4:	d02f      	beq.n	8002156 <__aeabi_dsub+0x61a>
 80020f6:	2640      	movs	r6, #64	; 0x40
 80020f8:	1b75      	subs	r5, r6, r5
 80020fa:	40ac      	lsls	r4, r5
 80020fc:	4650      	mov	r0, sl
 80020fe:	4320      	orrs	r0, r4
 8002100:	1e44      	subs	r4, r0, #1
 8002102:	41a0      	sbcs	r0, r4
 8002104:	2400      	movs	r4, #0
 8002106:	4338      	orrs	r0, r7
 8002108:	e6dc      	b.n	8001ec4 <__aeabi_dsub+0x388>
 800210a:	2480      	movs	r4, #128	; 0x80
 800210c:	2500      	movs	r5, #0
 800210e:	0324      	lsls	r4, r4, #12
 8002110:	4e13      	ldr	r6, [pc, #76]	; (8002160 <__aeabi_dsub+0x624>)
 8002112:	2700      	movs	r7, #0
 8002114:	e5d3      	b.n	8001cbe <__aeabi_dsub+0x182>
 8002116:	4650      	mov	r0, sl
 8002118:	4320      	orrs	r0, r4
 800211a:	0007      	movs	r7, r0
 800211c:	1e78      	subs	r0, r7, #1
 800211e:	4187      	sbcs	r7, r0
 8002120:	2400      	movs	r4, #0
 8002122:	18bf      	adds	r7, r7, r2
 8002124:	e760      	b.n	8001fe8 <__aeabi_dsub+0x4ac>
 8002126:	000c      	movs	r4, r1
 8002128:	0017      	movs	r7, r2
 800212a:	e58d      	b.n	8001c48 <__aeabi_dsub+0x10c>
 800212c:	000c      	movs	r4, r1
 800212e:	0017      	movs	r7, r2
 8002130:	4e0b      	ldr	r6, [pc, #44]	; (8002160 <__aeabi_dsub+0x624>)
 8002132:	e589      	b.n	8001c48 <__aeabi_dsub+0x10c>
 8002134:	001e      	movs	r6, r3
 8002136:	0027      	movs	r7, r4
 8002138:	3e20      	subs	r6, #32
 800213a:	40f7      	lsrs	r7, r6
 800213c:	2b20      	cmp	r3, #32
 800213e:	d00c      	beq.n	800215a <__aeabi_dsub+0x61e>
 8002140:	2640      	movs	r6, #64	; 0x40
 8002142:	1af3      	subs	r3, r6, r3
 8002144:	409c      	lsls	r4, r3
 8002146:	4650      	mov	r0, sl
 8002148:	4320      	orrs	r0, r4
 800214a:	1e44      	subs	r4, r0, #1
 800214c:	41a0      	sbcs	r0, r4
 800214e:	4307      	orrs	r7, r0
 8002150:	2400      	movs	r4, #0
 8002152:	18bf      	adds	r7, r7, r2
 8002154:	e748      	b.n	8001fe8 <__aeabi_dsub+0x4ac>
 8002156:	2400      	movs	r4, #0
 8002158:	e7d0      	b.n	80020fc <__aeabi_dsub+0x5c0>
 800215a:	2400      	movs	r4, #0
 800215c:	e7f3      	b.n	8002146 <__aeabi_dsub+0x60a>
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	000007ff 	.word	0x000007ff
 8002164:	ff7fffff 	.word	0xff7fffff

08002168 <__aeabi_dcmpun>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	4e0e      	ldr	r6, [pc, #56]	; (80021a4 <__aeabi_dcmpun+0x3c>)
 800216c:	030d      	lsls	r5, r1, #12
 800216e:	031c      	lsls	r4, r3, #12
 8002170:	0049      	lsls	r1, r1, #1
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	0b2d      	lsrs	r5, r5, #12
 8002176:	0d49      	lsrs	r1, r1, #21
 8002178:	0b24      	lsrs	r4, r4, #12
 800217a:	0d5b      	lsrs	r3, r3, #21
 800217c:	42b1      	cmp	r1, r6
 800217e:	d004      	beq.n	800218a <__aeabi_dcmpun+0x22>
 8002180:	4908      	ldr	r1, [pc, #32]	; (80021a4 <__aeabi_dcmpun+0x3c>)
 8002182:	2000      	movs	r0, #0
 8002184:	428b      	cmp	r3, r1
 8002186:	d008      	beq.n	800219a <__aeabi_dcmpun+0x32>
 8002188:	bd70      	pop	{r4, r5, r6, pc}
 800218a:	4305      	orrs	r5, r0
 800218c:	2001      	movs	r0, #1
 800218e:	2d00      	cmp	r5, #0
 8002190:	d1fa      	bne.n	8002188 <__aeabi_dcmpun+0x20>
 8002192:	4904      	ldr	r1, [pc, #16]	; (80021a4 <__aeabi_dcmpun+0x3c>)
 8002194:	2000      	movs	r0, #0
 8002196:	428b      	cmp	r3, r1
 8002198:	d1f6      	bne.n	8002188 <__aeabi_dcmpun+0x20>
 800219a:	4314      	orrs	r4, r2
 800219c:	0020      	movs	r0, r4
 800219e:	1e44      	subs	r4, r0, #1
 80021a0:	41a0      	sbcs	r0, r4
 80021a2:	e7f1      	b.n	8002188 <__aeabi_dcmpun+0x20>
 80021a4:	000007ff 	.word	0x000007ff

080021a8 <__aeabi_d2iz>:
 80021a8:	b530      	push	{r4, r5, lr}
 80021aa:	4d13      	ldr	r5, [pc, #76]	; (80021f8 <__aeabi_d2iz+0x50>)
 80021ac:	030a      	lsls	r2, r1, #12
 80021ae:	004b      	lsls	r3, r1, #1
 80021b0:	0b12      	lsrs	r2, r2, #12
 80021b2:	0d5b      	lsrs	r3, r3, #21
 80021b4:	0fc9      	lsrs	r1, r1, #31
 80021b6:	2400      	movs	r4, #0
 80021b8:	42ab      	cmp	r3, r5
 80021ba:	dd10      	ble.n	80021de <__aeabi_d2iz+0x36>
 80021bc:	4c0f      	ldr	r4, [pc, #60]	; (80021fc <__aeabi_d2iz+0x54>)
 80021be:	42a3      	cmp	r3, r4
 80021c0:	dc0f      	bgt.n	80021e2 <__aeabi_d2iz+0x3a>
 80021c2:	2480      	movs	r4, #128	; 0x80
 80021c4:	4d0e      	ldr	r5, [pc, #56]	; (8002200 <__aeabi_d2iz+0x58>)
 80021c6:	0364      	lsls	r4, r4, #13
 80021c8:	4322      	orrs	r2, r4
 80021ca:	1aed      	subs	r5, r5, r3
 80021cc:	2d1f      	cmp	r5, #31
 80021ce:	dd0b      	ble.n	80021e8 <__aeabi_d2iz+0x40>
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <__aeabi_d2iz+0x5c>)
 80021d2:	1ac3      	subs	r3, r0, r3
 80021d4:	40da      	lsrs	r2, r3
 80021d6:	4254      	negs	r4, r2
 80021d8:	2900      	cmp	r1, #0
 80021da:	d100      	bne.n	80021de <__aeabi_d2iz+0x36>
 80021dc:	0014      	movs	r4, r2
 80021de:	0020      	movs	r0, r4
 80021e0:	bd30      	pop	{r4, r5, pc}
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <__aeabi_d2iz+0x60>)
 80021e4:	18cc      	adds	r4, r1, r3
 80021e6:	e7fa      	b.n	80021de <__aeabi_d2iz+0x36>
 80021e8:	4c08      	ldr	r4, [pc, #32]	; (800220c <__aeabi_d2iz+0x64>)
 80021ea:	40e8      	lsrs	r0, r5
 80021ec:	46a4      	mov	ip, r4
 80021ee:	4463      	add	r3, ip
 80021f0:	409a      	lsls	r2, r3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	e7ef      	b.n	80021d6 <__aeabi_d2iz+0x2e>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	000003fe 	.word	0x000003fe
 80021fc:	0000041d 	.word	0x0000041d
 8002200:	00000433 	.word	0x00000433
 8002204:	00000413 	.word	0x00000413
 8002208:	7fffffff 	.word	0x7fffffff
 800220c:	fffffbed 	.word	0xfffffbed

08002210 <__aeabi_i2d>:
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	2800      	cmp	r0, #0
 8002214:	d030      	beq.n	8002278 <__aeabi_i2d+0x68>
 8002216:	17c3      	asrs	r3, r0, #31
 8002218:	18c4      	adds	r4, r0, r3
 800221a:	405c      	eors	r4, r3
 800221c:	0fc5      	lsrs	r5, r0, #31
 800221e:	0020      	movs	r0, r4
 8002220:	f000 f838 	bl	8002294 <__clzsi2>
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <__aeabi_i2d+0x74>)
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <__aeabi_i2d+0x78>)
 8002228:	1a1b      	subs	r3, r3, r0
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	2a1f      	cmp	r2, #31
 800222e:	dd18      	ble.n	8002262 <__aeabi_i2d+0x52>
 8002230:	4a16      	ldr	r2, [pc, #88]	; (800228c <__aeabi_i2d+0x7c>)
 8002232:	1ad2      	subs	r2, r2, r3
 8002234:	4094      	lsls	r4, r2
 8002236:	2200      	movs	r2, #0
 8002238:	0324      	lsls	r4, r4, #12
 800223a:	055b      	lsls	r3, r3, #21
 800223c:	0b24      	lsrs	r4, r4, #12
 800223e:	0d5b      	lsrs	r3, r3, #21
 8002240:	2100      	movs	r1, #0
 8002242:	0010      	movs	r0, r2
 8002244:	0324      	lsls	r4, r4, #12
 8002246:	0d0a      	lsrs	r2, r1, #20
 8002248:	0b24      	lsrs	r4, r4, #12
 800224a:	0512      	lsls	r2, r2, #20
 800224c:	4322      	orrs	r2, r4
 800224e:	4c10      	ldr	r4, [pc, #64]	; (8002290 <__aeabi_i2d+0x80>)
 8002250:	051b      	lsls	r3, r3, #20
 8002252:	4022      	ands	r2, r4
 8002254:	4313      	orrs	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	07ed      	lsls	r5, r5, #31
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	432b      	orrs	r3, r5
 800225e:	0019      	movs	r1, r3
 8002260:	bd70      	pop	{r4, r5, r6, pc}
 8002262:	0021      	movs	r1, r4
 8002264:	4091      	lsls	r1, r2
 8002266:	000a      	movs	r2, r1
 8002268:	210b      	movs	r1, #11
 800226a:	1a08      	subs	r0, r1, r0
 800226c:	40c4      	lsrs	r4, r0
 800226e:	055b      	lsls	r3, r3, #21
 8002270:	0324      	lsls	r4, r4, #12
 8002272:	0b24      	lsrs	r4, r4, #12
 8002274:	0d5b      	lsrs	r3, r3, #21
 8002276:	e7e3      	b.n	8002240 <__aeabi_i2d+0x30>
 8002278:	2500      	movs	r5, #0
 800227a:	2300      	movs	r3, #0
 800227c:	2400      	movs	r4, #0
 800227e:	2200      	movs	r2, #0
 8002280:	e7de      	b.n	8002240 <__aeabi_i2d+0x30>
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	0000041e 	.word	0x0000041e
 8002288:	00000433 	.word	0x00000433
 800228c:	00000413 	.word	0x00000413
 8002290:	800fffff 	.word	0x800fffff

08002294 <__clzsi2>:
 8002294:	211c      	movs	r1, #28
 8002296:	2301      	movs	r3, #1
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	4298      	cmp	r0, r3
 800229c:	d301      	bcc.n	80022a2 <__clzsi2+0xe>
 800229e:	0c00      	lsrs	r0, r0, #16
 80022a0:	3910      	subs	r1, #16
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	4298      	cmp	r0, r3
 80022a6:	d301      	bcc.n	80022ac <__clzsi2+0x18>
 80022a8:	0a00      	lsrs	r0, r0, #8
 80022aa:	3908      	subs	r1, #8
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d301      	bcc.n	80022b6 <__clzsi2+0x22>
 80022b2:	0900      	lsrs	r0, r0, #4
 80022b4:	3904      	subs	r1, #4
 80022b6:	a202      	add	r2, pc, #8	; (adr r2, 80022c0 <__clzsi2+0x2c>)
 80022b8:	5c10      	ldrb	r0, [r2, r0]
 80022ba:	1840      	adds	r0, r0, r1
 80022bc:	4770      	bx	lr
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	02020304 	.word	0x02020304
 80022c4:	01010101 	.word	0x01010101
	...

080022d0 <__clzdi2>:
 80022d0:	b510      	push	{r4, lr}
 80022d2:	2900      	cmp	r1, #0
 80022d4:	d103      	bne.n	80022de <__clzdi2+0xe>
 80022d6:	f7ff ffdd 	bl	8002294 <__clzsi2>
 80022da:	3020      	adds	r0, #32
 80022dc:	e002      	b.n	80022e4 <__clzdi2+0x14>
 80022de:	1c08      	adds	r0, r1, #0
 80022e0:	f7ff ffd8 	bl	8002294 <__clzsi2>
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)

080022e8 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80022e8:	21fa      	movs	r1, #250	; 0xfa
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_InitTick+0x2c>)
{
 80022ec:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80022ee:	0089      	lsls	r1, r1, #2
{
 80022f0:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	f7fd ff24 	bl	8000140 <__udivsi3>
 80022f8:	f000 fcb4 	bl	8002c64 <HAL_SYSTICK_Config>
 80022fc:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 80022fe:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002300:	2c00      	cmp	r4, #0
 8002302:	d105      	bne.n	8002310 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002304:	3802      	subs	r0, #2
 8002306:	0022      	movs	r2, r4
 8002308:	0029      	movs	r1, r5
 800230a:	f000 fc5f 	bl	8002bcc <HAL_NVIC_SetPriority>
 800230e:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8002310:	bd70      	pop	{r4, r5, r6, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	2302      	movs	r3, #2
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_Init+0x24>)
{
 800231c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002320:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002322:	430b      	orrs	r3, r1
 8002324:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002326:	f7ff ffdf 	bl	80022e8 <HAL_InitTick>
 800232a:	1e04      	subs	r4, r0, #0
 800232c:	d103      	bne.n	8002336 <HAL_Init+0x1e>
    HAL_MspInit();
 800232e:	f003 fbd3 	bl	8005ad8 <HAL_MspInit>
}
 8002332:	0020      	movs	r0, r4
 8002334:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002336:	2401      	movs	r4, #1
 8002338:	e7fb      	b.n	8002332 <HAL_Init+0x1a>
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	40022000 	.word	0x40022000

08002340 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002340:	4a02      	ldr	r2, [pc, #8]	; (800234c <HAL_IncTick+0xc>)
 8002342:	6813      	ldr	r3, [r2, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	4770      	bx	lr
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	200000b0 	.word	0x200000b0

08002350 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002350:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_GetTick+0x8>)
 8002352:	6818      	ldr	r0, [r3, #0]
}
 8002354:	4770      	bx	lr
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	200000b0 	.word	0x200000b0

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fff6 	bl	8002350 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8002364:	1c63      	adds	r3, r4, #1
 8002366:	1e5a      	subs	r2, r3, #1
 8002368:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 800236a:	0005      	movs	r5, r0
    wait++;
 800236c:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236e:	f7ff ffef 	bl	8002350 <HAL_GetTick>
 8002372:	1b40      	subs	r0, r0, r5
 8002374:	4284      	cmp	r4, r0
 8002376:	d8fa      	bhi.n	800236e <HAL_Delay+0x12>
  {
  }
}
 8002378:	bd70      	pop	{r4, r5, r6, pc}
	...

0800237c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <ADC_DelayMicroSecond+0x24>)
{
 800237e:	b513      	push	{r0, r1, r4, lr}
 8002380:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <ADC_DelayMicroSecond+0x28>)
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	f7fd fedb 	bl	8000140 <__udivsi3>
 800238a:	4344      	muls	r4, r0
 800238c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800238e:	9b01      	ldr	r3, [sp, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d100      	bne.n	8002396 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8002394:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8002396:	9b01      	ldr	r3, [sp, #4]
 8002398:	3b01      	subs	r3, #1
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	e7f7      	b.n	800238e <ADC_DelayMicroSecond+0x12>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	20000000 	.word	0x20000000
 80023a4:	000f4240 	.word	0x000f4240

080023a8 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023a8:	2103      	movs	r1, #3
 80023aa:	6803      	ldr	r3, [r0, #0]
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023ae:	689a      	ldr	r2, [r3, #8]
{
 80023b0:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b2:	400a      	ands	r2, r1
 80023b4:	2a01      	cmp	r2, #1
 80023b6:	d10d      	bne.n	80023d4 <ADC_Enable+0x2c>
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	4211      	tst	r1, r2
 80023bc:	d00a      	beq.n	80023d4 <ADC_Enable+0x2c>
  return HAL_OK;
 80023be:	2000      	movs	r0, #0
}
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80023c8:	4313      	orrs	r3, r2
 80023ca:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023ce:	4303      	orrs	r3, r0
 80023d0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80023d2:	e7f5      	b.n	80023c0 <ADC_Enable+0x18>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <ADC_Enable+0x6c>)
 80023d8:	4211      	tst	r1, r2
 80023da:	d1f2      	bne.n	80023c2 <ADC_Enable+0x1a>
    __HAL_ADC_ENABLE(hadc);
 80023dc:	2501      	movs	r5, #1
 80023de:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80023e0:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80023e2:	432a      	orrs	r2, r5
 80023e4:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80023e6:	f7ff ffc9 	bl	800237c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80023ea:	f7ff ffb1 	bl	8002350 <HAL_GetTick>
 80023ee:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	422b      	tst	r3, r5
 80023f6:	d1e2      	bne.n	80023be <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023f8:	f7ff ffaa 	bl	8002350 <HAL_GetTick>
 80023fc:	1b80      	subs	r0, r0, r6
 80023fe:	280a      	cmp	r0, #10
 8002400:	d9f6      	bls.n	80023f0 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002402:	2310      	movs	r3, #16
 8002404:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8002406:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	4313      	orrs	r3, r2
 800240a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800240e:	431d      	orrs	r5, r3
 8002410:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002412:	e7d5      	b.n	80023c0 <ADC_Enable+0x18>
 8002414:	80000017 	.word	0x80000017

08002418 <HAL_ADC_Init>:
{
 8002418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800241a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800241c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800241e:	2c00      	cmp	r4, #0
 8002420:	d100      	bne.n	8002424 <HAL_ADC_Init+0xc>
 8002422:	e0d1      	b.n	80025c8 <HAL_ADC_Init+0x1b0>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002424:	4b69      	ldr	r3, [pc, #420]	; (80025cc <HAL_ADC_Init+0x1b4>)
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d004      	beq.n	8002436 <HAL_ADC_Init+0x1e>
 800242c:	21ce      	movs	r1, #206	; 0xce
 800242e:	4868      	ldr	r0, [pc, #416]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 8002430:	0049      	lsls	r1, r1, #1
 8002432:	f003 fb50 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002436:	6862      	ldr	r2, [r4, #4]
 8002438:	4b66      	ldr	r3, [pc, #408]	; (80025d4 <HAL_ADC_Init+0x1bc>)
 800243a:	4013      	ands	r3, r2
 800243c:	d016      	beq.n	800246c <HAL_ADC_Init+0x54>
 800243e:	2080      	movs	r0, #128	; 0x80
 8002440:	0051      	lsls	r1, r2, #1
 8002442:	0849      	lsrs	r1, r1, #1
 8002444:	05c0      	lsls	r0, r0, #23
 8002446:	4281      	cmp	r1, r0
 8002448:	d010      	beq.n	800246c <HAL_ADC_Init+0x54>
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	0609      	lsls	r1, r1, #24
 800244e:	428a      	cmp	r2, r1
 8002450:	d00c      	beq.n	800246c <HAL_ADC_Init+0x54>
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	0352      	lsls	r2, r2, #13
 8002456:	4293      	cmp	r3, r2
 8002458:	d008      	beq.n	800246c <HAL_ADC_Init+0x54>
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	0392      	lsls	r2, r2, #14
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_ADC_Init+0x54>
 8002462:	219e      	movs	r1, #158	; 0x9e
 8002464:	485a      	ldr	r0, [pc, #360]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 8002466:	31ff      	adds	r1, #255	; 0xff
 8002468:	f003 fb35 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800246c:	2318      	movs	r3, #24
 800246e:	68a2      	ldr	r2, [r4, #8]
 8002470:	439a      	bics	r2, r3
 8002472:	d004      	beq.n	800247e <HAL_ADC_Init+0x66>
 8002474:	21cf      	movs	r1, #207	; 0xcf
 8002476:	4856      	ldr	r0, [pc, #344]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 8002478:	0049      	lsls	r1, r1, #1
 800247a:	f003 fb2c 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800247e:	2320      	movs	r3, #32
 8002480:	68e2      	ldr	r2, [r4, #12]
 8002482:	439a      	bics	r2, r3
 8002484:	d004      	beq.n	8002490 <HAL_ADC_Init+0x78>
 8002486:	21a0      	movs	r1, #160	; 0xa0
 8002488:	4851      	ldr	r0, [pc, #324]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800248a:	31ff      	adds	r1, #255	; 0xff
 800248c:	f003 fb23 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002490:	6923      	ldr	r3, [r4, #16]
 8002492:	3b01      	subs	r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d904      	bls.n	80024a2 <HAL_ADC_Init+0x8a>
 8002498:	21d0      	movs	r1, #208	; 0xd0
 800249a:	484d      	ldr	r0, [pc, #308]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800249c:	0049      	lsls	r1, r1, #1
 800249e:	f003 fb1a 	bl	8005ad6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80024a2:	1c66      	adds	r6, r4, #1
 80024a4:	7ff3      	ldrb	r3, [r6, #31]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d904      	bls.n	80024b4 <HAL_ADC_Init+0x9c>
 80024aa:	21a2      	movs	r1, #162	; 0xa2
 80024ac:	4848      	ldr	r0, [pc, #288]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 80024ae:	31ff      	adds	r1, #255	; 0xff
 80024b0:	f003 fb11 	bl	8005ad6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80024b4:	1ca3      	adds	r3, r4, #2
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	7fdb      	ldrb	r3, [r3, #31]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d904      	bls.n	80024c8 <HAL_ADC_Init+0xb0>
 80024be:	21d1      	movs	r1, #209	; 0xd1
 80024c0:	4843      	ldr	r0, [pc, #268]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 80024c2:	0049      	lsls	r1, r1, #1
 80024c4:	f003 fb07 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_ADC_Init+0x1c0>)
 80024ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024cc:	421a      	tst	r2, r3
 80024ce:	d004      	beq.n	80024da <HAL_ADC_Init+0xc2>
 80024d0:	21a4      	movs	r1, #164	; 0xa4
 80024d2:	483f      	ldr	r0, [pc, #252]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 80024d4:	31ff      	adds	r1, #255	; 0xff
 80024d6:	f003 fafe 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80024da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024dc:	2240      	movs	r2, #64	; 0x40
 80024de:	0019      	movs	r1, r3
 80024e0:	0018      	movs	r0, r3
 80024e2:	4391      	bics	r1, r2
 80024e4:	3280      	adds	r2, #128	; 0x80
 80024e6:	4390      	bics	r0, r2
 80024e8:	d00f      	beq.n	800250a <HAL_ADC_Init+0xf2>
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	0052      	lsls	r2, r2, #1
 80024ee:	4291      	cmp	r1, r2
 80024f0:	d00b      	beq.n	800250a <HAL_ADC_Init+0xf2>
 80024f2:	3280      	adds	r2, #128	; 0x80
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d008      	beq.n	800250a <HAL_ADC_Init+0xf2>
 80024f8:	3bc1      	subs	r3, #193	; 0xc1
 80024fa:	3bff      	subs	r3, #255	; 0xff
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d904      	bls.n	800250a <HAL_ADC_Init+0xf2>
 8002500:	21d2      	movs	r1, #210	; 0xd2
 8002502:	4833      	ldr	r0, [pc, #204]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 8002504:	0049      	lsls	r1, r1, #1
 8002506:	f003 fae6 	bl	8005ad6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800250a:	0023      	movs	r3, r4
 800250c:	332c      	adds	r3, #44	; 0x2c
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d904      	bls.n	800251e <HAL_ADC_Init+0x106>
 8002514:	21a6      	movs	r1, #166	; 0xa6
 8002516:	482e      	ldr	r0, [pc, #184]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 8002518:	31ff      	adds	r1, #255	; 0xff
 800251a:	f003 fadc 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800251e:	2204      	movs	r2, #4
 8002520:	6963      	ldr	r3, [r4, #20]
 8002522:	3b04      	subs	r3, #4
 8002524:	4393      	bics	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_ADC_Init+0x11a>
 8002528:	21d3      	movs	r1, #211	; 0xd3
 800252a:	4829      	ldr	r0, [pc, #164]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800252c:	0049      	lsls	r1, r1, #1
 800252e:	f003 fad2 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <HAL_ADC_Init+0x1c4>)
 8002534:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002536:	421a      	tst	r2, r3
 8002538:	d004      	beq.n	8002544 <HAL_ADC_Init+0x12c>
 800253a:	21a8      	movs	r1, #168	; 0xa8
 800253c:	4824      	ldr	r0, [pc, #144]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800253e:	31ff      	adds	r1, #255	; 0xff
 8002540:	f003 fac9 	bl	8005ad6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8002544:	69a3      	ldr	r3, [r4, #24]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d904      	bls.n	8002554 <HAL_ADC_Init+0x13c>
 800254a:	21d4      	movs	r1, #212	; 0xd4
 800254c:	4820      	ldr	r0, [pc, #128]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800254e:	0049      	lsls	r1, r1, #1
 8002550:	f003 fac1 	bl	8005ad6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 8002554:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002556:	2b01      	cmp	r3, #1
 8002558:	d904      	bls.n	8002564 <HAL_ADC_Init+0x14c>
 800255a:	21aa      	movs	r1, #170	; 0xaa
 800255c:	481c      	ldr	r0, [pc, #112]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800255e:	31ff      	adds	r1, #255	; 0xff
 8002560:	f003 fab9 	bl	8005ad6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8002564:	69e3      	ldr	r3, [r4, #28]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d904      	bls.n	8002574 <HAL_ADC_Init+0x15c>
 800256a:	21d5      	movs	r1, #213	; 0xd5
 800256c:	4818      	ldr	r0, [pc, #96]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800256e:	0049      	lsls	r1, r1, #1
 8002570:	f003 fab1 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 8002574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002576:	2b07      	cmp	r3, #7
 8002578:	d904      	bls.n	8002584 <HAL_ADC_Init+0x16c>
 800257a:	21ac      	movs	r1, #172	; 0xac
 800257c:	4814      	ldr	r0, [pc, #80]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800257e:	31ff      	adds	r1, #255	; 0xff
 8002580:	f003 faa9 	bl	8005ad6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8002584:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d904      	bls.n	8002594 <HAL_ADC_Init+0x17c>
 800258a:	21d6      	movs	r1, #214	; 0xd6
 800258c:	4810      	ldr	r0, [pc, #64]	; (80025d0 <HAL_ADC_Init+0x1b8>)
 800258e:	0049      	lsls	r1, r1, #1
 8002590:	f003 faa1 	bl	8005ad6 <assert_failed>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002594:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_Init+0x190>
    hadc->Lock = HAL_UNLOCKED;
 800259a:	0022      	movs	r2, r4
 800259c:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800259e:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 80025a0:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80025a2:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80025a4:	f003 faa6 	bl	8005af4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80025a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025aa:	06db      	lsls	r3, r3, #27
 80025ac:	d404      	bmi.n	80025b8 <HAL_ADC_Init+0x1a0>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80025ae:	2304      	movs	r3, #4
 80025b0:	6822      	ldr	r2, [r4, #0]
 80025b2:	6891      	ldr	r1, [r2, #8]
 80025b4:	4019      	ands	r1, r3
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80025b6:	d013      	beq.n	80025e0 <HAL_ADC_Init+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b8:	2310      	movs	r3, #16
 80025ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80025bc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025be:	4313      	orrs	r3, r2
 80025c0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80025c2:	2300      	movs	r3, #0
 80025c4:	3450      	adds	r4, #80	; 0x50
 80025c6:	7023      	strb	r3, [r4, #0]
}
 80025c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	40012400 	.word	0x40012400
 80025d0:	08006690 	.word	0x08006690
 80025d4:	fff3ffff 	.word	0xfff3ffff
 80025d8:	fffff3ff 	.word	0xfffff3ff
 80025dc:	ffffefff 	.word	0xffffefff
  ADC_STATE_CLR_SET(hadc->State,
 80025e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025e2:	486a      	ldr	r0, [pc, #424]	; (800278c <HAL_ADC_Init+0x374>)
 80025e4:	4018      	ands	r0, r3
 80025e6:	2302      	movs	r3, #2
 80025e8:	4303      	orrs	r3, r0
 80025ea:	6563      	str	r3, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025ec:	2303      	movs	r3, #3
 80025ee:	6890      	ldr	r0, [r2, #8]
 80025f0:	4018      	ands	r0, r3
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_ADC_Init+0x378>)
 80025f4:	2801      	cmp	r0, #1
 80025f6:	d102      	bne.n	80025fe <HAL_ADC_Init+0x1e6>
 80025f8:	6817      	ldr	r7, [r2, #0]
 80025fa:	4207      	tst	r7, r0
 80025fc:	d11a      	bne.n	8002634 <HAL_ADC_Init+0x21c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80025fe:	2580      	movs	r5, #128	; 0x80
 8002600:	6867      	ldr	r7, [r4, #4]
 8002602:	05ed      	lsls	r5, r5, #23
 8002604:	0078      	lsls	r0, r7, #1
 8002606:	0840      	lsrs	r0, r0, #1
 8002608:	42a8      	cmp	r0, r5
 800260a:	d004      	beq.n	8002616 <HAL_ADC_Init+0x1fe>
 800260c:	2080      	movs	r0, #128	; 0x80
 800260e:	0600      	lsls	r0, r0, #24
 8002610:	4287      	cmp	r7, r0
 8002612:	d000      	beq.n	8002616 <HAL_ADC_Init+0x1fe>
 8002614:	e09e      	b.n	8002754 <HAL_ADC_Init+0x33c>
 8002616:	6910      	ldr	r0, [r2, #16]
 8002618:	0080      	lsls	r0, r0, #2
 800261a:	0880      	lsrs	r0, r0, #2
 800261c:	6110      	str	r0, [r2, #16]
 800261e:	6910      	ldr	r0, [r2, #16]
 8002620:	4307      	orrs	r7, r0
 8002622:	6117      	str	r7, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002624:	2718      	movs	r7, #24
 8002626:	68d0      	ldr	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002628:	68a5      	ldr	r5, [r4, #8]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800262a:	43b8      	bics	r0, r7
 800262c:	60d0      	str	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800262e:	68d0      	ldr	r0, [r2, #12]
 8002630:	4328      	orrs	r0, r5
 8002632:	60d0      	str	r0, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4857      	ldr	r0, [pc, #348]	; (8002794 <HAL_ADC_Init+0x37c>)
 8002638:	4002      	ands	r2, r0
 800263a:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800263c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	0652      	lsls	r2, r2, #25
 8002642:	4302      	orrs	r2, r0
 8002644:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	055b      	lsls	r3, r3, #21
 800264c:	6890      	ldr	r0, [r2, #8]
 800264e:	4218      	tst	r0, r3
 8002650:	d102      	bne.n	8002658 <HAL_ADC_Init+0x240>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002652:	6890      	ldr	r0, [r2, #8]
 8002654:	4303      	orrs	r3, r0
 8002656:	6093      	str	r3, [r2, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002658:	68d3      	ldr	r3, [r2, #12]
 800265a:	484f      	ldr	r0, [pc, #316]	; (8002798 <HAL_ADC_Init+0x380>)
 800265c:	4003      	ands	r3, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800265e:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002660:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002662:	68d7      	ldr	r7, [r2, #12]
 8002664:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002666:	2802      	cmp	r0, #2
 8002668:	d100      	bne.n	800266c <HAL_ADC_Init+0x254>
 800266a:	2104      	movs	r1, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800266c:	6b25      	ldr	r5, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800266e:	7ff0      	ldrb	r0, [r6, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002670:	432b      	orrs	r3, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002672:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002674:	433b      	orrs	r3, r7
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002676:	03ae      	lsls	r6, r5, #14
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002678:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800267a:	4333      	orrs	r3, r6
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800267c:	03ee      	lsls	r6, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800267e:	4333      	orrs	r3, r6
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002680:	0346      	lsls	r6, r0, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002682:	4333      	orrs	r3, r6
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002684:	0026      	movs	r6, r4
 8002686:	362c      	adds	r6, #44	; 0x2c
 8002688:	7836      	ldrb	r6, [r6, #0]
 800268a:	0076      	lsls	r6, r6, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800268c:	4333      	orrs	r3, r6
 800268e:	430b      	orrs	r3, r1
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002690:	21c2      	movs	r1, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002692:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002696:	31ff      	adds	r1, #255	; 0xff
 8002698:	428b      	cmp	r3, r1
 800269a:	d004      	beq.n	80026a6 <HAL_ADC_Init+0x28e>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800269c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800269e:	68d1      	ldr	r1, [r2, #12]
 80026a0:	432b      	orrs	r3, r5
 80026a2:	430b      	orrs	r3, r1
 80026a4:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026a6:	1ca3      	adds	r3, r4, #2
 80026a8:	7fdb      	ldrb	r3, [r3, #31]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d106      	bne.n	80026bc <HAL_ADC_Init+0x2a4>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d15c      	bne.n	800276c <HAL_ADC_Init+0x354>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	68d1      	ldr	r1, [r2, #12]
 80026b6:	025b      	lsls	r3, r3, #9
 80026b8:	430b      	orrs	r3, r1
 80026ba:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80026bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d15c      	bne.n	800277c <HAL_ADC_Init+0x364>
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 80026c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026c4:	291c      	cmp	r1, #28
 80026c6:	d805      	bhi.n	80026d4 <HAL_ADC_Init+0x2bc>
 80026c8:	4a34      	ldr	r2, [pc, #208]	; (800279c <HAL_ADC_Init+0x384>)
 80026ca:	40ca      	lsrs	r2, r1
 80026cc:	4393      	bics	r3, r2
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <HAL_ADC_Init+0x2c6>
 80026d4:	2193      	movs	r1, #147	; 0x93
 80026d6:	4832      	ldr	r0, [pc, #200]	; (80027a0 <HAL_ADC_Init+0x388>)
 80026d8:	0089      	lsls	r1, r1, #2
 80026da:	f003 f9fc 	bl	8005ad6 <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 80026de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026e0:	2260      	movs	r2, #96	; 0x60
 80026e2:	0019      	movs	r1, r3
 80026e4:	4391      	bics	r1, r2
 80026e6:	d009      	beq.n	80026fc <HAL_ADC_Init+0x2e4>
 80026e8:	2980      	cmp	r1, #128	; 0x80
 80026ea:	d007      	beq.n	80026fc <HAL_ADC_Init+0x2e4>
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	0052      	lsls	r2, r2, #1
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <HAL_ADC_Init+0x2e4>
 80026f4:	492b      	ldr	r1, [pc, #172]	; (80027a4 <HAL_ADC_Init+0x38c>)
 80026f6:	482a      	ldr	r0, [pc, #168]	; (80027a0 <HAL_ADC_Init+0x388>)
 80026f8:	f003 f9ed 	bl	8005ad6 <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_ADC_Init+0x390>)
 80026fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002700:	421a      	tst	r2, r3
 8002702:	d003      	beq.n	800270c <HAL_ADC_Init+0x2f4>
 8002704:	4929      	ldr	r1, [pc, #164]	; (80027ac <HAL_ADC_Init+0x394>)
 8002706:	4826      	ldr	r0, [pc, #152]	; (80027a0 <HAL_ADC_Init+0x388>)
 8002708:	f003 f9e5 	bl	8005ad6 <assert_failed>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800270c:	6822      	ldr	r2, [r4, #0]
 800270e:	4928      	ldr	r1, [pc, #160]	; (80027b0 <HAL_ADC_Init+0x398>)
 8002710:	6913      	ldr	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002712:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002714:	400b      	ands	r3, r1
 8002716:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800271a:	6911      	ldr	r1, [r2, #16]
 800271c:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 800271e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002720:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002722:	430b      	orrs	r3, r1
 8002724:	6113      	str	r3, [r2, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002726:	2301      	movs	r3, #1
 8002728:	6911      	ldr	r1, [r2, #16]
 800272a:	430b      	orrs	r3, r1
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800272c:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800272e:	2107      	movs	r1, #7
 8002730:	6823      	ldr	r3, [r4, #0]
  ADC_CLEAR_ERRORCODE(hadc);
 8002732:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	438a      	bics	r2, r1
 8002738:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800273e:	430a      	orrs	r2, r1
 8002740:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8002742:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8002744:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002746:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002748:	4393      	bics	r3, r2
 800274a:	001a      	movs	r2, r3
 800274c:	2301      	movs	r3, #1
 800274e:	4313      	orrs	r3, r2
 8002750:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002752:	e739      	b.n	80025c8 <HAL_ADC_Init+0x1b0>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002754:	6910      	ldr	r0, [r2, #16]
 8002756:	4d17      	ldr	r5, [pc, #92]	; (80027b4 <HAL_ADC_Init+0x39c>)
 8002758:	0080      	lsls	r0, r0, #2
 800275a:	0880      	lsrs	r0, r0, #2
 800275c:	6110      	str	r0, [r2, #16]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	4028      	ands	r0, r5
 8002762:	6018      	str	r0, [r3, #0]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	4307      	orrs	r7, r0
 8002768:	601f      	str	r7, [r3, #0]
 800276a:	e75b      	b.n	8002624 <HAL_ADC_Init+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276c:	2120      	movs	r1, #32
 800276e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002770:	4301      	orrs	r1, r0
 8002772:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002774:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002776:	430b      	orrs	r3, r1
 8002778:	65a3      	str	r3, [r4, #88]	; 0x58
 800277a:	e79f      	b.n	80026bc <HAL_ADC_Init+0x2a4>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800277c:	2101      	movs	r1, #1
 800277e:	6913      	ldr	r3, [r2, #16]
 8002780:	420b      	tst	r3, r1
 8002782:	d0d4      	beq.n	800272e <HAL_ADC_Init+0x316>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002784:	6913      	ldr	r3, [r2, #16]
 8002786:	438b      	bics	r3, r1
 8002788:	e7d0      	b.n	800272c <HAL_ADC_Init+0x314>
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	fffffefd 	.word	0xfffffefd
 8002790:	40012708 	.word	0x40012708
 8002794:	fdffffff 	.word	0xfdffffff
 8002798:	fffe0219 	.word	0xfffe0219
 800279c:	11111111 	.word	0x11111111
 80027a0:	08006690 	.word	0x08006690
 80027a4:	0000024d 	.word	0x0000024d
 80027a8:	fffffdff 	.word	0xfffffdff
 80027ac:	0000024e 	.word	0x0000024e
 80027b0:	fffffc03 	.word	0xfffffc03
 80027b4:	ffc3ffff 	.word	0xffc3ffff

080027b8 <HAL_ADC_Start_DMA>:
{
 80027b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_ADC_Start_DMA+0x94>)
{
 80027bc:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027be:	6802      	ldr	r2, [r0, #0]
{
 80027c0:	0004      	movs	r4, r0
 80027c2:	000f      	movs	r7, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d003      	beq.n	80027d0 <HAL_ADC_Start_DMA+0x18>
 80027c8:	4921      	ldr	r1, [pc, #132]	; (8002850 <HAL_ADC_Start_DMA+0x98>)
 80027ca:	4822      	ldr	r0, [pc, #136]	; (8002854 <HAL_ADC_Start_DMA+0x9c>)
 80027cc:	f003 f983 	bl	8005ad6 <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027d0:	6823      	ldr	r3, [r4, #0]
    tmp_hal_status = HAL_BUSY;
 80027d2:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	075b      	lsls	r3, r3, #29
 80027d8:	d430      	bmi.n	800283c <HAL_ADC_Start_DMA+0x84>
    __HAL_LOCK(hadc);
 80027da:	0026      	movs	r6, r4
 80027dc:	3650      	adds	r6, #80	; 0x50
 80027de:	7833      	ldrb	r3, [r6, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d02b      	beq.n	800283c <HAL_ADC_Start_DMA+0x84>
 80027e4:	2301      	movs	r3, #1
 80027e6:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80027e8:	69e3      	ldr	r3, [r4, #28]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d127      	bne.n	800283e <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State,
 80027ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_ADC_Start_DMA+0xa0>)
      ADC_CLEAR_ERRORCODE(hadc);
 80027f2:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80027f4:	401a      	ands	r2, r3
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4313      	orrs	r3, r2
 80027fc:	6563      	str	r3, [r4, #84]	; 0x54
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027fe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002802:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002804:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002806:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800280a:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800280c:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_ADC_Start_DMA+0xac>)
 8002810:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002812:	231c      	movs	r3, #28
 8002814:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002816:	684a      	ldr	r2, [r1, #4]
 8002818:	3b0c      	subs	r3, #12
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800281e:	2301      	movs	r3, #1
 8002820:	68ca      	ldr	r2, [r1, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002826:	003a      	movs	r2, r7
 8002828:	3140      	adds	r1, #64	; 0x40
 800282a:	9b01      	ldr	r3, [sp, #4]
 800282c:	f000 faf8 	bl	8002e20 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002830:	2304      	movs	r3, #4
 8002832:	0028      	movs	r0, r5
 8002834:	6822      	ldr	r2, [r4, #0]
 8002836:	6891      	ldr	r1, [r2, #8]
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]
}
 800283c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800283e:	0020      	movs	r0, r4
 8002840:	f7ff fdb2 	bl	80023a8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002844:	2800      	cmp	r0, #0
 8002846:	d1f9      	bne.n	800283c <HAL_ADC_Start_DMA+0x84>
 8002848:	e7d1      	b.n	80027ee <HAL_ADC_Start_DMA+0x36>
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	40012400 	.word	0x40012400
 8002850:	000005d9 	.word	0x000005d9
 8002854:	08006690 	.word	0x08006690
 8002858:	fffff0fe 	.word	0xfffff0fe
 800285c:	0800286d 	.word	0x0800286d
 8002860:	080028df 	.word	0x080028df
 8002864:	080028ed 	.word	0x080028ed

08002868 <HAL_ADC_ConvCpltCallback>:
 8002868:	4770      	bx	lr
	...

0800286c <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800286c:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800286e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002870:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002872:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002874:	4211      	tst	r1, r2
 8002876:	d12b      	bne.n	80028d0 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002878:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800287a:	32b1      	adds	r2, #177	; 0xb1
 800287c:	32ff      	adds	r2, #255	; 0xff
 800287e:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002880:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	0109      	lsls	r1, r1, #4
 8002888:	68d0      	ldr	r0, [r2, #12]
 800288a:	4208      	tst	r0, r1
 800288c:	d113      	bne.n	80028b6 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800288e:	1c59      	adds	r1, r3, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002890:	7fc9      	ldrb	r1, [r1, #31]
 8002892:	2900      	cmp	r1, #0
 8002894:	d10f      	bne.n	80028b6 <ADC_DMAConvCplt+0x4a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002896:	6811      	ldr	r1, [r2, #0]
 8002898:	0709      	lsls	r1, r1, #28
 800289a:	d50c      	bpl.n	80028b6 <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800289c:	6891      	ldr	r1, [r2, #8]
 800289e:	0749      	lsls	r1, r1, #29
 80028a0:	d40d      	bmi.n	80028be <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028a2:	200c      	movs	r0, #12
 80028a4:	6851      	ldr	r1, [r2, #4]
 80028a6:	4381      	bics	r1, r0
 80028a8:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80028aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ac:	490a      	ldr	r1, [pc, #40]	; (80028d8 <ADC_DMAConvCplt+0x6c>)
 80028ae:	4011      	ands	r1, r2
 80028b0:	2201      	movs	r2, #1
 80028b2:	430a      	orrs	r2, r1
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80028b6:	0018      	movs	r0, r3
 80028b8:	f7ff ffd6 	bl	8002868 <HAL_ADC_ConvCpltCallback>
}
 80028bc:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028be:	2220      	movs	r2, #32
 80028c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028c2:	430a      	orrs	r2, r1
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c6:	2201      	movs	r2, #1
 80028c8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80028ca:	430a      	orrs	r2, r1
 80028cc:	659a      	str	r2, [r3, #88]	; 0x58
 80028ce:	e7f2      	b.n	80028b6 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	4798      	blx	r3
}
 80028d6:	e7f1      	b.n	80028bc <ADC_DMAConvCplt+0x50>
 80028d8:	fffffefe 	.word	0xfffffefe

080028dc <HAL_ADC_ConvHalfCpltCallback>:
 80028dc:	4770      	bx	lr

080028de <ADC_DMAHalfConvCplt>:
{
 80028de:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80028e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80028e2:	f7ff fffb 	bl	80028dc <HAL_ADC_ConvHalfCpltCallback>
}
 80028e6:	bd10      	pop	{r4, pc}

080028e8 <HAL_ADC_LevelOutOfWindowCallback>:
 80028e8:	4770      	bx	lr

080028ea <HAL_ADC_ErrorCallback>:
}
 80028ea:	4770      	bx	lr

080028ec <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028ec:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80028f0:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028f2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80028f4:	4313      	orrs	r3, r2
 80028f6:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028f8:	2304      	movs	r3, #4
 80028fa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80028fc:	4313      	orrs	r3, r2
 80028fe:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 8002900:	f7ff fff3 	bl	80028ea <HAL_ADC_ErrorCallback>
}
 8002904:	bd10      	pop	{r4, pc}
	...

08002908 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002908:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HAL_ADC_IRQHandler+0x114>)
 800290a:	6802      	ldr	r2, [r0, #0]
{
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	0004      	movs	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002910:	429a      	cmp	r2, r3
 8002912:	d003      	beq.n	800291c <HAL_ADC_IRQHandler+0x14>
 8002914:	4942      	ldr	r1, [pc, #264]	; (8002a20 <HAL_ADC_IRQHandler+0x118>)
 8002916:	4843      	ldr	r0, [pc, #268]	; (8002a24 <HAL_ADC_IRQHandler+0x11c>)
 8002918:	f003 f8dd 	bl	8005ad6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800291c:	1c65      	adds	r5, r4, #1
 800291e:	7feb      	ldrb	r3, [r5, #31]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d903      	bls.n	800292c <HAL_ADC_IRQHandler+0x24>
 8002924:	4940      	ldr	r1, [pc, #256]	; (8002a28 <HAL_ADC_IRQHandler+0x120>)
 8002926:	483f      	ldr	r0, [pc, #252]	; (8002a24 <HAL_ADC_IRQHandler+0x11c>)
 8002928:	f003 f8d5 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800292c:	2204      	movs	r2, #4
 800292e:	6963      	ldr	r3, [r4, #20]
 8002930:	3b04      	subs	r3, #4
 8002932:	4393      	bics	r3, r2
 8002934:	d003      	beq.n	800293e <HAL_ADC_IRQHandler+0x36>
 8002936:	493d      	ldr	r1, [pc, #244]	; (8002a2c <HAL_ADC_IRQHandler+0x124>)
 8002938:	483a      	ldr	r0, [pc, #232]	; (8002a24 <HAL_ADC_IRQHandler+0x11c>)
 800293a:	f003 f8cc 	bl	8005ad6 <assert_failed>
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800293e:	2204      	movs	r2, #4
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	4211      	tst	r1, r2
 8002946:	d002      	beq.n	800294e <HAL_ADC_IRQHandler+0x46>
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	4211      	tst	r1, r2
 800294c:	d106      	bne.n	800295c <HAL_ADC_IRQHandler+0x54>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800294e:	2208      	movs	r2, #8
 8002950:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002952:	4211      	tst	r1, r2
 8002954:	d02b      	beq.n	80029ae <HAL_ADC_IRQHandler+0xa6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	4211      	tst	r1, r2
 800295a:	d028      	beq.n	80029ae <HAL_ADC_IRQHandler+0xa6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800295c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800295e:	06d2      	lsls	r2, r2, #27
 8002960:	d404      	bmi.n	800296c <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	430a      	orrs	r2, r1
 800296a:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800296c:	22c0      	movs	r2, #192	; 0xc0
 800296e:	68d9      	ldr	r1, [r3, #12]
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	4211      	tst	r1, r2
 8002974:	d112      	bne.n	800299c <HAL_ADC_IRQHandler+0x94>
 8002976:	7fea      	ldrb	r2, [r5, #31]
 8002978:	2a00      	cmp	r2, #0
 800297a:	d10f      	bne.n	800299c <HAL_ADC_IRQHandler+0x94>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	0712      	lsls	r2, r2, #28
 8002980:	d50c      	bpl.n	800299c <HAL_ADC_IRQHandler+0x94>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	0752      	lsls	r2, r2, #29
 8002986:	d43f      	bmi.n	8002a08 <HAL_ADC_IRQHandler+0x100>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002988:	210c      	movs	r1, #12
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	438a      	bics	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002990:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002992:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_ADC_IRQHandler+0x128>)
 8002994:	401a      	ands	r2, r3
 8002996:	2301      	movs	r3, #1
 8002998:	4313      	orrs	r3, r2
 800299a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800299c:	0020      	movs	r0, r4
 800299e:	f7ff ff63 	bl	8002868 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80029a2:	69a3      	ldr	r3, [r4, #24]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d002      	beq.n	80029ae <HAL_ADC_IRQHandler+0xa6>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029a8:	220c      	movs	r2, #12
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80029ae:	2580      	movs	r5, #128	; 0x80
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	422a      	tst	r2, r5
 80029b6:	d00c      	beq.n	80029d2 <HAL_ADC_IRQHandler+0xca>
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	422b      	tst	r3, r5
 80029bc:	d009      	beq.n	80029d2 <HAL_ADC_IRQHandler+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	4313      	orrs	r3, r2
 80029c6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029c8:	0020      	movs	r0, r4
 80029ca:	f7ff ff8d 	bl	80028e8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80029d2:	2210      	movs	r2, #16
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	4211      	tst	r1, r2
 80029da:	d014      	beq.n	8002a06 <HAL_ADC_IRQHandler+0xfe>
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	4211      	tst	r1, r2
 80029e0:	d011      	beq.n	8002a06 <HAL_ADC_IRQHandler+0xfe>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80029e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	d002      	beq.n	80029ee <HAL_ADC_IRQHandler+0xe6>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80029e8:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80029ea:	07d2      	lsls	r2, r2, #31
 80029ec:	d508      	bpl.n	8002a00 <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029ee:	2202      	movs	r2, #2
 80029f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80029f2:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029f4:	430a      	orrs	r2, r1
 80029f6:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029f8:	2210      	movs	r2, #16
 80029fa:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80029fc:	f7ff ff75 	bl	80028ea <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a00:	2210      	movs	r2, #16
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a08:	2320      	movs	r3, #32
 8002a0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a10:	2301      	movs	r3, #1
 8002a12:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002a14:	4313      	orrs	r3, r2
 8002a16:	65a3      	str	r3, [r4, #88]	; 0x58
 8002a18:	e7c0      	b.n	800299c <HAL_ADC_IRQHandler+0x94>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40012400 	.word	0x40012400
 8002a20:	00000694 	.word	0x00000694
 8002a24:	08006690 	.word	0x08006690
 8002a28:	00000695 	.word	0x00000695
 8002a2c:	00000696 	.word	0x00000696
 8002a30:	fffffefe 	.word	0xfffffefe

08002a34 <HAL_ADC_ConfigChannel>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_ADC_ConfigChannel+0x130>)
 8002a36:	6802      	ldr	r2, [r0, #0]
{
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	0005      	movs	r5, r0
 8002a3c:	000c      	movs	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d003      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x16>
 8002a42:	4949      	ldr	r1, [pc, #292]	; (8002b68 <HAL_ADC_ConfigChannel+0x134>)
 8002a44:	4849      	ldr	r0, [pc, #292]	; (8002b6c <HAL_ADC_ConfigChannel+0x138>)
 8002a46:	f003 f846 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d036      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a50:	4a47      	ldr	r2, [pc, #284]	; (8002b70 <HAL_ADC_ConfigChannel+0x13c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d033      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a56:	4a47      	ldr	r2, [pc, #284]	; (8002b74 <HAL_ADC_ConfigChannel+0x140>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d030      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a5c:	4a46      	ldr	r2, [pc, #280]	; (8002b78 <HAL_ADC_ConfigChannel+0x144>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02d      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a62:	4a46      	ldr	r2, [pc, #280]	; (8002b7c <HAL_ADC_ConfigChannel+0x148>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02a      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a68:	4a45      	ldr	r2, [pc, #276]	; (8002b80 <HAL_ADC_ConfigChannel+0x14c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d027      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a6e:	4a45      	ldr	r2, [pc, #276]	; (8002b84 <HAL_ADC_ConfigChannel+0x150>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d024      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a74:	4a44      	ldr	r2, [pc, #272]	; (8002b88 <HAL_ADC_ConfigChannel+0x154>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d021      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a7a:	4a44      	ldr	r2, [pc, #272]	; (8002b8c <HAL_ADC_ConfigChannel+0x158>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d01e      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a80:	4a43      	ldr	r2, [pc, #268]	; (8002b90 <HAL_ADC_ConfigChannel+0x15c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01b      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a86:	4a43      	ldr	r2, [pc, #268]	; (8002b94 <HAL_ADC_ConfigChannel+0x160>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d018      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a8c:	4a42      	ldr	r2, [pc, #264]	; (8002b98 <HAL_ADC_ConfigChannel+0x164>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d015      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a92:	4a42      	ldr	r2, [pc, #264]	; (8002b9c <HAL_ADC_ConfigChannel+0x168>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d012      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a98:	4a41      	ldr	r2, [pc, #260]	; (8002ba0 <HAL_ADC_ConfigChannel+0x16c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00f      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002a9e:	4a41      	ldr	r2, [pc, #260]	; (8002ba4 <HAL_ADC_ConfigChannel+0x170>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00c      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002aa4:	4a40      	ldr	r2, [pc, #256]	; (8002ba8 <HAL_ADC_ConfigChannel+0x174>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002aaa:	4a40      	ldr	r2, [pc, #256]	; (8002bac <HAL_ADC_ConfigChannel+0x178>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d006      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002ab0:	4a3f      	ldr	r2, [pc, #252]	; (8002bb0 <HAL_ADC_ConfigChannel+0x17c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d003      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x8a>
 8002ab6:	493f      	ldr	r1, [pc, #252]	; (8002bb4 <HAL_ADC_ConfigChannel+0x180>)
 8002ab8:	482c      	ldr	r0, [pc, #176]	; (8002b6c <HAL_ADC_ConfigChannel+0x138>)
 8002aba:	f003 f80c 	bl	8005ad6 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	4a3d      	ldr	r2, [pc, #244]	; (8002bb8 <HAL_ADC_ConfigChannel+0x184>)
 8002ac2:	189b      	adds	r3, r3, r2
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d904      	bls.n	8002ad2 <HAL_ADC_ConfigChannel+0x9e>
 8002ac8:	21f0      	movs	r1, #240	; 0xf0
 8002aca:	4828      	ldr	r0, [pc, #160]	; (8002b6c <HAL_ADC_ConfigChannel+0x138>)
 8002acc:	00c9      	lsls	r1, r1, #3
 8002ace:	f003 f802 	bl	8005ad6 <assert_failed>
  __HAL_LOCK(hadc);
 8002ad2:	002e      	movs	r6, r5
 8002ad4:	3650      	adds	r6, #80	; 0x50
 8002ad6:	7833      	ldrb	r3, [r6, #0]
 8002ad8:	2002      	movs	r0, #2
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d00b      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0xc2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002ade:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 8002ae0:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002ae2:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8002ae4:	7030      	strb	r0, [r6, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002ae6:	075b      	lsls	r3, r3, #29
 8002ae8:	d506      	bpl.n	8002af8 <HAL_ADC_ConfigChannel+0xc4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aea:	2320      	movs	r3, #32
 8002aec:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002aee:	4313      	orrs	r3, r2
 8002af0:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002af2:	2300      	movs	r3, #0
 8002af4:	7033      	strb	r3, [r6, #0]
}
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 8002afa:	4930      	ldr	r1, [pc, #192]	; (8002bbc <HAL_ADC_ConfigChannel+0x188>)
 8002afc:	6865      	ldr	r5, [r4, #4]
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	02c0      	lsls	r0, r0, #11
 8002b02:	428d      	cmp	r5, r1
 8002b04:	d01b      	beq.n	8002b3e <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002b06:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8002b08:	0359      	lsls	r1, r3, #13
 8002b0a:	0b49      	lsrs	r1, r1, #13
 8002b0c:	4329      	orrs	r1, r5
 8002b0e:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002b10:	4203      	tst	r3, r0
 8002b12:	d008      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0xf2>
      ADC->CCR |= ADC_CCR_TSEN;   
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_ADC_ConfigChannel+0x18c>)
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002b1c:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002b22:	f7ff fc2b 	bl	800237c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	039b      	lsls	r3, r3, #14
 8002b2a:	d505      	bpl.n	8002b38 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <HAL_ADC_ConfigChannel+0x18c>)
 8002b30:	03db      	lsls	r3, r3, #15
 8002b32:	6811      	ldr	r1, [r2, #0]
 8002b34:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002b36:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8002b3c:	e7db      	b.n	8002af6 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002b3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b40:	035c      	lsls	r4, r3, #13
 8002b42:	0b64      	lsrs	r4, r4, #13
 8002b44:	43a1      	bics	r1, r4
 8002b46:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002b48:	4203      	tst	r3, r0
 8002b4a:	d004      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x122>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002b4c:	491c      	ldr	r1, [pc, #112]	; (8002bc0 <HAL_ADC_ConfigChannel+0x18c>)
 8002b4e:	481d      	ldr	r0, [pc, #116]	; (8002bc4 <HAL_ADC_ConfigChannel+0x190>)
 8002b50:	680a      	ldr	r2, [r1, #0]
 8002b52:	4002      	ands	r2, r0
 8002b54:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002b56:	039b      	lsls	r3, r3, #14
 8002b58:	d5ee      	bpl.n	8002b38 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002b5a:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <HAL_ADC_ConfigChannel+0x18c>)
 8002b5c:	491a      	ldr	r1, [pc, #104]	; (8002bc8 <HAL_ADC_ConfigChannel+0x194>)
 8002b5e:	6813      	ldr	r3, [r2, #0]
 8002b60:	400b      	ands	r3, r1
 8002b62:	e7e8      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x102>
 8002b64:	40012400 	.word	0x40012400
 8002b68:	0000077e 	.word	0x0000077e
 8002b6c:	08006690 	.word	0x08006690
 8002b70:	04000002 	.word	0x04000002
 8002b74:	08000004 	.word	0x08000004
 8002b78:	0c000008 	.word	0x0c000008
 8002b7c:	10000010 	.word	0x10000010
 8002b80:	14000020 	.word	0x14000020
 8002b84:	18000040 	.word	0x18000040
 8002b88:	1c000080 	.word	0x1c000080
 8002b8c:	20000100 	.word	0x20000100
 8002b90:	24000200 	.word	0x24000200
 8002b94:	28000400 	.word	0x28000400
 8002b98:	2c000800 	.word	0x2c000800
 8002b9c:	30001000 	.word	0x30001000
 8002ba0:	34002000 	.word	0x34002000
 8002ba4:	38004000 	.word	0x38004000
 8002ba8:	3c008000 	.word	0x3c008000
 8002bac:	48040000 	.word	0x48040000
 8002bb0:	44020000 	.word	0x44020000
 8002bb4:	0000077f 	.word	0x0000077f
 8002bb8:	fffff000 	.word	0xfffff000
 8002bbc:	00001001 	.word	0x00001001
 8002bc0:	40012708 	.word	0x40012708
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	ffbfffff 	.word	0xffbfffff

08002bcc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	0004      	movs	r4, r0
 8002bd0:	000d      	movs	r5, r1
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002bd2:	2903      	cmp	r1, #3
 8002bd4:	d903      	bls.n	8002bde <HAL_NVIC_SetPriority+0x12>
 8002bd6:	2187      	movs	r1, #135	; 0x87
 8002bd8:	4816      	ldr	r0, [pc, #88]	; (8002c34 <HAL_NVIC_SetPriority+0x68>)
 8002bda:	f002 ff7c 	bl	8005ad6 <assert_failed>
 8002bde:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002be0:	2c00      	cmp	r4, #0
 8002be2:	da14      	bge.n	8002c0e <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be4:	230f      	movs	r3, #15
 8002be6:	b2e4      	uxtb	r4, r4
 8002be8:	4023      	ands	r3, r4
 8002bea:	3b08      	subs	r3, #8
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_NVIC_SetPriority+0x6c>)
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	4014      	ands	r4, r2
 8002bf8:	4094      	lsls	r4, r2
 8002bfa:	32fc      	adds	r2, #252	; 0xfc
 8002bfc:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bfe:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c00:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c02:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c04:	69d8      	ldr	r0, [r3, #28]
 8002c06:	43a8      	bics	r0, r5
 8002c08:	4302      	orrs	r2, r0
 8002c0a:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c0e:	2503      	movs	r5, #3
 8002c10:	08a3      	lsrs	r3, r4, #2
 8002c12:	402c      	ands	r4, r5
 8002c14:	40ac      	lsls	r4, r5
 8002c16:	35fc      	adds	r5, #252	; 0xfc
 8002c18:	002e      	movs	r6, r5
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_NVIC_SetPriority+0x70>)
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	22c0      	movs	r2, #192	; 0xc0
 8002c22:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c24:	4029      	ands	r1, r5
 8002c26:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c28:	0092      	lsls	r2, r2, #2
 8002c2a:	5898      	ldr	r0, [r3, r2]
 8002c2c:	43b0      	bics	r0, r6
 8002c2e:	4301      	orrs	r1, r0
 8002c30:	5099      	str	r1, [r3, r2]
 8002c32:	e7eb      	b.n	8002c0c <HAL_NVIC_SetPriority+0x40>
 8002c34:	080066c8 	.word	0x080066c8
 8002c38:	e000ed00 	.word	0xe000ed00
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b510      	push	{r4, lr}
 8002c42:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002c44:	da03      	bge.n	8002c4e <HAL_NVIC_EnableIRQ+0xe>
 8002c46:	2197      	movs	r1, #151	; 0x97
 8002c48:	4804      	ldr	r0, [pc, #16]	; (8002c5c <HAL_NVIC_EnableIRQ+0x1c>)
 8002c4a:	f002 ff44 	bl	8005ad6 <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002c4e:	231f      	movs	r3, #31
 8002c50:	401c      	ands	r4, r3
 8002c52:	3b1e      	subs	r3, #30
 8002c54:	40a3      	lsls	r3, r4
 8002c56:	4a02      	ldr	r2, [pc, #8]	; (8002c60 <HAL_NVIC_EnableIRQ+0x20>)
 8002c58:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c5a:	bd10      	pop	{r4, pc}
 8002c5c:	080066c8 	.word	0x080066c8
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_SYSTICK_Config+0x28>)
 8002c66:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c68:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d80d      	bhi.n	8002c8a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c6e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c70:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c72:	4808      	ldr	r0, [pc, #32]	; (8002c94 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c74:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c76:	6a03      	ldr	r3, [r0, #32]
 8002c78:	0609      	lsls	r1, r1, #24
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c82:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c84:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c86:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c88:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c8a:	4770      	bx	lr
 8002c8c:	00ffffff 	.word	0x00ffffff
 8002c90:	e000e010 	.word	0xe000e010
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
  if(hdma == NULL)
 8002c9e:	2c00      	cmp	r4, #0
 8002ca0:	d100      	bne.n	8002ca4 <HAL_DMA_Init+0xc>
 8002ca2:	e09e      	b.n	8002de2 <HAL_DMA_Init+0x14a>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	4a4f      	ldr	r2, [pc, #316]	; (8002de4 <HAL_DMA_Init+0x14c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d015      	beq.n	8002cd8 <HAL_DMA_Init+0x40>
 8002cac:	4a4e      	ldr	r2, [pc, #312]	; (8002de8 <HAL_DMA_Init+0x150>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d012      	beq.n	8002cd8 <HAL_DMA_Init+0x40>
 8002cb2:	4a4e      	ldr	r2, [pc, #312]	; (8002dec <HAL_DMA_Init+0x154>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00f      	beq.n	8002cd8 <HAL_DMA_Init+0x40>
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	; (8002df0 <HAL_DMA_Init+0x158>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_DMA_Init+0x40>
 8002cbe:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_DMA_Init+0x15c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_DMA_Init+0x40>
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_DMA_Init+0x160>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d006      	beq.n	8002cd8 <HAL_DMA_Init+0x40>
 8002cca:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <HAL_DMA_Init+0x164>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <HAL_DMA_Init+0x40>
 8002cd0:	2196      	movs	r1, #150	; 0x96
 8002cd2:	484b      	ldr	r0, [pc, #300]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002cd4:	f002 feff 	bl	8005ad6 <assert_failed>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8002cd8:	6863      	ldr	r3, [r4, #4]
 8002cda:	2b0a      	cmp	r3, #10
 8002cdc:	d906      	bls.n	8002cec <HAL_DMA_Init+0x54>
 8002cde:	3b0c      	subs	r3, #12
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d903      	bls.n	8002cec <HAL_DMA_Init+0x54>
 8002ce4:	2197      	movs	r1, #151	; 0x97
 8002ce6:	4846      	ldr	r0, [pc, #280]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002ce8:	f002 fef5 	bl	8005ad6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	4391      	bics	r1, r2
 8002cf4:	d007      	beq.n	8002d06 <HAL_DMA_Init+0x6e>
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	01d2      	lsls	r2, r2, #7
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <HAL_DMA_Init+0x6e>
 8002cfe:	2198      	movs	r1, #152	; 0x98
 8002d00:	483f      	ldr	r0, [pc, #252]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d02:	f002 fee8 	bl	8005ad6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002d06:	2340      	movs	r3, #64	; 0x40
 8002d08:	68e2      	ldr	r2, [r4, #12]
 8002d0a:	439a      	bics	r2, r3
 8002d0c:	d003      	beq.n	8002d16 <HAL_DMA_Init+0x7e>
 8002d0e:	2199      	movs	r1, #153	; 0x99
 8002d10:	483b      	ldr	r0, [pc, #236]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d12:	f002 fee0 	bl	8005ad6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	6922      	ldr	r2, [r4, #16]
 8002d1a:	439a      	bics	r2, r3
 8002d1c:	d003      	beq.n	8002d26 <HAL_DMA_Init+0x8e>
 8002d1e:	219a      	movs	r1, #154	; 0x9a
 8002d20:	4837      	ldr	r0, [pc, #220]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d22:	f002 fed8 	bl	8005ad6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002d26:	6963      	ldr	r3, [r4, #20]
 8002d28:	4a36      	ldr	r2, [pc, #216]	; (8002e04 <HAL_DMA_Init+0x16c>)
 8002d2a:	4213      	tst	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_DMA_Init+0xa6>
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <HAL_DMA_Init+0xa6>
 8002d36:	219b      	movs	r1, #155	; 0x9b
 8002d38:	4831      	ldr	r0, [pc, #196]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d3a:	f002 fecc 	bl	8005ad6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002d3e:	69a3      	ldr	r3, [r4, #24]
 8002d40:	4a31      	ldr	r2, [pc, #196]	; (8002e08 <HAL_DMA_Init+0x170>)
 8002d42:	4213      	tst	r3, r2
 8002d44:	d007      	beq.n	8002d56 <HAL_DMA_Init+0xbe>
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <HAL_DMA_Init+0xbe>
 8002d4e:	219c      	movs	r1, #156	; 0x9c
 8002d50:	482b      	ldr	r0, [pc, #172]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d52:	f002 fec0 	bl	8005ad6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002d56:	2320      	movs	r3, #32
 8002d58:	69e2      	ldr	r2, [r4, #28]
 8002d5a:	439a      	bics	r2, r3
 8002d5c:	d003      	beq.n	8002d66 <HAL_DMA_Init+0xce>
 8002d5e:	219d      	movs	r1, #157	; 0x9d
 8002d60:	4827      	ldr	r0, [pc, #156]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d62:	f002 feb8 	bl	8005ad6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002d66:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_DMA_Init+0x174>)
 8002d68:	6a22      	ldr	r2, [r4, #32]
 8002d6a:	421a      	tst	r2, r3
 8002d6c:	d003      	beq.n	8002d76 <HAL_DMA_Init+0xde>
 8002d6e:	219e      	movs	r1, #158	; 0x9e
 8002d70:	4823      	ldr	r0, [pc, #140]	; (8002e00 <HAL_DMA_Init+0x168>)
 8002d72:	f002 feb0 	bl	8005ad6 <assert_failed>

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d76:	6825      	ldr	r5, [r4, #0]
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_DMA_Init+0x178>)
 8002d7a:	2114      	movs	r1, #20
 8002d7c:	18e8      	adds	r0, r5, r3
 8002d7e:	f7fd f9df 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_DMA_Init+0x17c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d84:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8002d86:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d8c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d8e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d90:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d92:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <HAL_DMA_Init+0x180>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d94:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d96:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002d98:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002d9c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	433b      	orrs	r3, r7
 8002da0:	6967      	ldr	r7, [r4, #20]
 8002da2:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da4:	69a7      	ldr	r7, [r4, #24]
 8002da6:	433b      	orrs	r3, r7
 8002da8:	69e7      	ldr	r7, [r4, #28]
 8002daa:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dac:	6a27      	ldr	r7, [r4, #32]
 8002dae:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002db0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002db2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	01db      	lsls	r3, r3, #7
 8002db8:	4299      	cmp	r1, r3
 8002dba:	d00c      	beq.n	8002dd6 <HAL_DMA_Init+0x13e>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dbc:	251c      	movs	r5, #28
 8002dbe:	4028      	ands	r0, r5
 8002dc0:	3d0d      	subs	r5, #13
 8002dc2:	4085      	lsls	r5, r0
 8002dc4:	4915      	ldr	r1, [pc, #84]	; (8002e1c <HAL_DMA_Init+0x184>)
 8002dc6:	680b      	ldr	r3, [r1, #0]
 8002dc8:	43ab      	bics	r3, r5
 8002dca:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dcc:	6863      	ldr	r3, [r4, #4]
 8002dce:	680d      	ldr	r5, [r1, #0]
 8002dd0:	4083      	lsls	r3, r0
 8002dd2:	432b      	orrs	r3, r5
 8002dd4:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002dd8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dda:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ddc:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002dde:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002de0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8002de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002de4:	40020008 	.word	0x40020008
 8002de8:	4002001c 	.word	0x4002001c
 8002dec:	40020030 	.word	0x40020030
 8002df0:	40020044 	.word	0x40020044
 8002df4:	40020058 	.word	0x40020058
 8002df8:	4002006c 	.word	0x4002006c
 8002dfc:	40020080 	.word	0x40020080
 8002e00:	08006703 	.word	0x08006703
 8002e04:	fffffeff 	.word	0xfffffeff
 8002e08:	fffffbff 	.word	0xfffffbff
 8002e0c:	ffffcfff 	.word	0xffffcfff
 8002e10:	bffdfff8 	.word	0xbffdfff8
 8002e14:	40020000 	.word	0x40020000
 8002e18:	ffff800f 	.word	0xffff800f
 8002e1c:	400200a8 	.word	0x400200a8

08002e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e22:	0015      	movs	r5, r2
 8002e24:	001f      	movs	r7, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <HAL_DMA_Start_IT+0x98>)
{
 8002e2a:	0004      	movs	r4, r0
 8002e2c:	000e      	movs	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d904      	bls.n	8002e3c <HAL_DMA_Start_IT+0x1c>
 8002e32:	21ab      	movs	r1, #171	; 0xab
 8002e34:	4821      	ldr	r0, [pc, #132]	; (8002ebc <HAL_DMA_Start_IT+0x9c>)
 8002e36:	0049      	lsls	r1, r1, #1
 8002e38:	f002 fe4d 	bl	8005ad6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e3c:	1d63      	adds	r3, r4, #5
 8002e3e:	7fda      	ldrb	r2, [r3, #31]
 8002e40:	2002      	movs	r0, #2
 8002e42:	2a01      	cmp	r2, #1
 8002e44:	d02a      	beq.n	8002e9c <HAL_DMA_Start_IT+0x7c>
 8002e46:	2201      	movs	r2, #1
 8002e48:	77da      	strb	r2, [r3, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e4a:	1da2      	adds	r2, r4, #6
 8002e4c:	4694      	mov	ip, r2
 8002e4e:	7fd2      	ldrb	r2, [r2, #31]
 8002e50:	2100      	movs	r1, #0
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	2a01      	cmp	r2, #1
 8002e56:	d12c      	bne.n	8002eb2 <HAL_DMA_Start_IT+0x92>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e58:	4663      	mov	r3, ip
 8002e5a:	77d8      	strb	r0, [r3, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e5c:	6823      	ldr	r3, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5e:	63e1      	str	r1, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002e60:	6819      	ldr	r1, [r3, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e62:	301a      	adds	r0, #26
    __HAL_DMA_DISABLE(hdma);
 8002e64:	4391      	bics	r1, r2
 8002e66:	6019      	str	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e68:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002e6a:	9101      	str	r1, [sp, #4]
 8002e6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002e6e:	4008      	ands	r0, r1
 8002e70:	4082      	lsls	r2, r0
 8002e72:	9901      	ldr	r1, [sp, #4]
 8002e74:	604a      	str	r2, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e76:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CNDTR = DataLength;
 8002e78:	605f      	str	r7, [r3, #4]
 8002e7a:	6821      	ldr	r1, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e7c:	2a10      	cmp	r2, #16
 8002e7e:	d10e      	bne.n	8002e9e <HAL_DMA_Start_IT+0x7e>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e80:	609d      	str	r5, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e82:	60de      	str	r6, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002e84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e8a:	220e      	movs	r2, #14
 8002e8c:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e8e:	4302      	orrs	r2, r0
 8002e90:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e92:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002e94:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002e96:	680a      	ldr	r2, [r1, #0]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
}
 8002e9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002e9e:	609e      	str	r6, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002ea0:	60dd      	str	r5, [r3, #12]
 8002ea2:	e7ef      	b.n	8002e84 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea4:	2004      	movs	r0, #4
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4382      	bics	r2, r0
 8002eaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	220a      	movs	r2, #10
 8002eb0:	e7ed      	b.n	8002e8e <HAL_DMA_Start_IT+0x6e>
    __HAL_UNLOCK(hdma);
 8002eb2:	77d9      	strb	r1, [r3, #31]
 8002eb4:	e7f2      	b.n	8002e9c <HAL_DMA_Start_IT+0x7c>
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	0000fffe 	.word	0x0000fffe
 8002ebc:	08006703 	.word	0x08006703

08002ec0 <HAL_DMA_Abort_IT>:
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ec2:	1d84      	adds	r4, r0, #6
 8002ec4:	7fe3      	ldrb	r3, [r4, #31]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002ece:	3b03      	subs	r3, #3
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed4:	210e      	movs	r1, #14
 8002ed6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ed8:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	438a      	bics	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	4391      	bics	r1, r2
 8002ee6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ee8:	231c      	movs	r3, #28
 8002eea:	402b      	ands	r3, r5
 8002eec:	0015      	movs	r5, r2
 8002eee:	409d      	lsls	r5, r3
 8002ef0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8002ef2:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ef4:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002ef8:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8002efa:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002efc:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002f00:	42a2      	cmp	r2, r4
 8002f02:	d0e5      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002f04:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	0023      	movs	r3, r4
 8002f08:	e7e2      	b.n	8002ed0 <HAL_DMA_Abort_IT+0x10>

08002f0a <HAL_DMA_IRQHandler>:
{
 8002f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f0c:	221c      	movs	r2, #28
 8002f0e:	2704      	movs	r7, #4
 8002f10:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f12:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f14:	4032      	ands	r2, r6
 8002f16:	003e      	movs	r6, r7
 8002f18:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f1a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002f1c:	6803      	ldr	r3, [r0, #0]
 8002f1e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f20:	422e      	tst	r6, r5
 8002f22:	d00d      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x36>
 8002f24:	423c      	tst	r4, r7
 8002f26:	d00b      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	0692      	lsls	r2, r2, #26
 8002f2c:	d402      	bmi.n	8002f34 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	43ba      	bics	r2, r7
 8002f32:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8002f34:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002f36:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d019      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002f3c:	4798      	blx	r3
  return;
 8002f3e:	e017      	b.n	8002f70 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002f40:	2702      	movs	r7, #2
 8002f42:	003e      	movs	r6, r7
 8002f44:	4096      	lsls	r6, r2
 8002f46:	422e      	tst	r6, r5
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x68>
 8002f4a:	423c      	tst	r4, r7
 8002f4c:	d011      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	0692      	lsls	r2, r2, #26
 8002f52:	d406      	bmi.n	8002f62 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f54:	240a      	movs	r4, #10
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	43a2      	bics	r2, r4
 8002f5a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	1d83      	adds	r3, r0, #6
 8002f60:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8002f62:	2200      	movs	r2, #0
 8002f64:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f66:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002f68:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8002f6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d1e5      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x32>
}
 8002f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002f72:	2608      	movs	r6, #8
 8002f74:	0037      	movs	r7, r6
 8002f76:	4097      	lsls	r7, r2
 8002f78:	423d      	tst	r5, r7
 8002f7a:	d0f9      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x66>
 8002f7c:	4234      	tst	r4, r6
 8002f7e:	d0f7      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f80:	250e      	movs	r5, #14
 8002f82:	681c      	ldr	r4, [r3, #0]
 8002f84:	43ac      	bics	r4, r5
 8002f86:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f88:	2301      	movs	r3, #1
 8002f8a:	001c      	movs	r4, r3
 8002f8c:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f90:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f92:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002f94:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002f96:	2200      	movs	r2, #0
 8002f98:	1d43      	adds	r3, r0, #5
 8002f9a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002f9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f9e:	e7e5      	b.n	8002f6c <HAL_DMA_IRQHandler+0x62>

08002fa0 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
 
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002fa0:	684b      	ldr	r3, [r1, #4]
{
 8002fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fa4:	0004      	movs	r4, r0
 8002fa6:	000d      	movs	r5, r1
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d912      	bls.n	8002fd2 <HAL_GPIO_Init+0x32>
 8002fac:	001a      	movs	r2, r3
 8002fae:	3a11      	subs	r2, #17
 8002fb0:	2a01      	cmp	r2, #1
 8002fb2:	d90e      	bls.n	8002fd2 <HAL_GPIO_Init+0x32>
 8002fb4:	4a85      	ldr	r2, [pc, #532]	; (80031cc <HAL_GPIO_Init+0x22c>)
 8002fb6:	4986      	ldr	r1, [pc, #536]	; (80031d0 <HAL_GPIO_Init+0x230>)
 8002fb8:	401a      	ands	r2, r3
 8002fba:	1852      	adds	r2, r2, r1
 8002fbc:	4985      	ldr	r1, [pc, #532]	; (80031d4 <HAL_GPIO_Init+0x234>)
 8002fbe:	420a      	tst	r2, r1
 8002fc0:	d007      	beq.n	8002fd2 <HAL_GPIO_Init+0x32>
 8002fc2:	4a85      	ldr	r2, [pc, #532]	; (80031d8 <HAL_GPIO_Init+0x238>)
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	420b      	tst	r3, r1
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x32>
 8002fca:	21ae      	movs	r1, #174	; 0xae
 8002fcc:	4883      	ldr	r0, [pc, #524]	; (80031dc <HAL_GPIO_Init+0x23c>)
 8002fce:	f002 fd82 	bl	8005ad6 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002fd2:	68ab      	ldr	r3, [r5, #8]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d903      	bls.n	8002fe0 <HAL_GPIO_Init+0x40>
 8002fd8:	21af      	movs	r1, #175	; 0xaf
 8002fda:	4880      	ldr	r0, [pc, #512]	; (80031dc <HAL_GPIO_Init+0x23c>)
 8002fdc:	f002 fd7b 	bl	8005ad6 <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));
 8002fe0:	23a0      	movs	r3, #160	; 0xa0
 8002fe2:	05db      	lsls	r3, r3, #23
 8002fe4:	429c      	cmp	r4, r3
 8002fe6:	d00b      	beq.n	8003000 <HAL_GPIO_Init+0x60>
 8002fe8:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <HAL_GPIO_Init+0x240>)
 8002fea:	429c      	cmp	r4, r3
 8002fec:	d008      	beq.n	8003000 <HAL_GPIO_Init+0x60>
 8002fee:	4b7d      	ldr	r3, [pc, #500]	; (80031e4 <HAL_GPIO_Init+0x244>)
 8002ff0:	429c      	cmp	r4, r3
 8002ff2:	d005      	beq.n	8003000 <HAL_GPIO_Init+0x60>
 8002ff4:	4b7c      	ldr	r3, [pc, #496]	; (80031e8 <HAL_GPIO_Init+0x248>)
 8002ff6:	429c      	cmp	r4, r3
 8002ff8:	d002      	beq.n	8003000 <HAL_GPIO_Init+0x60>
 8002ffa:	4b7c      	ldr	r3, [pc, #496]	; (80031ec <HAL_GPIO_Init+0x24c>)
 8002ffc:	429c      	cmp	r4, r3
 8002ffe:	d107      	bne.n	8003010 <HAL_GPIO_Init+0x70>
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	b29a      	uxth	r2, r3
 8003004:	2a00      	cmp	r2, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x70>
 8003008:	4a79      	ldr	r2, [pc, #484]	; (80031f0 <HAL_GPIO_Init+0x250>)
 800300a:	4313      	orrs	r3, r2
 800300c:	4293      	cmp	r3, r2
 800300e:	d00d      	beq.n	800302c <HAL_GPIO_Init+0x8c>
 8003010:	4b78      	ldr	r3, [pc, #480]	; (80031f4 <HAL_GPIO_Init+0x254>)
 8003012:	429c      	cmp	r4, r3
 8003014:	d106      	bne.n	8003024 <HAL_GPIO_Init+0x84>
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	4a77      	ldr	r2, [pc, #476]	; (80031f8 <HAL_GPIO_Init+0x258>)
 800301a:	4213      	tst	r3, r2
 800301c:	d002      	beq.n	8003024 <HAL_GPIO_Init+0x84>
 800301e:	4313      	orrs	r3, r2
 8003020:	4293      	cmp	r3, r2
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x8c>
 8003024:	21b0      	movs	r1, #176	; 0xb0
 8003026:	486d      	ldr	r0, [pc, #436]	; (80031dc <HAL_GPIO_Init+0x23c>)
 8003028:	f002 fd55 	bl	8005ad6 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800302c:	2700      	movs	r7, #0
  while (((GPIO_Init->Pin) >> position) != 0)
 800302e:	682b      	ldr	r3, [r5, #0]
 8003030:	001a      	movs	r2, r3
 8003032:	40fa      	lsrs	r2, r7
 8003034:	d100      	bne.n	8003038 <HAL_GPIO_Init+0x98>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003036:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003038:	2201      	movs	r2, #1
 800303a:	40ba      	lsls	r2, r7
 800303c:	9201      	str	r2, [sp, #4]
 800303e:	401a      	ands	r2, r3
 8003040:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8003042:	d100      	bne.n	8003046 <HAL_GPIO_Init+0xa6>
 8003044:	e0c0      	b.n	80031c8 <HAL_GPIO_Init+0x228>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003046:	2210      	movs	r2, #16
 8003048:	686b      	ldr	r3, [r5, #4]
 800304a:	4393      	bics	r3, r2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d12c      	bne.n	80030aa <HAL_GPIO_Init+0x10a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003050:	23a0      	movs	r3, #160	; 0xa0
 8003052:	05db      	lsls	r3, r3, #23
 8003054:	429c      	cmp	r4, r3
 8003056:	d012      	beq.n	800307e <HAL_GPIO_Init+0xde>
 8003058:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_GPIO_Init+0x240>)
 800305a:	429c      	cmp	r4, r3
 800305c:	d00f      	beq.n	800307e <HAL_GPIO_Init+0xde>
 800305e:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_GPIO_Init+0x244>)
 8003060:	429c      	cmp	r4, r3
 8003062:	d00c      	beq.n	800307e <HAL_GPIO_Init+0xde>
 8003064:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <HAL_GPIO_Init+0x248>)
 8003066:	429c      	cmp	r4, r3
 8003068:	d009      	beq.n	800307e <HAL_GPIO_Init+0xde>
 800306a:	4b60      	ldr	r3, [pc, #384]	; (80031ec <HAL_GPIO_Init+0x24c>)
 800306c:	429c      	cmp	r4, r3
 800306e:	d006      	beq.n	800307e <HAL_GPIO_Init+0xde>
 8003070:	4b60      	ldr	r3, [pc, #384]	; (80031f4 <HAL_GPIO_Init+0x254>)
 8003072:	429c      	cmp	r4, r3
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0xde>
 8003076:	21bf      	movs	r1, #191	; 0xbf
 8003078:	4858      	ldr	r0, [pc, #352]	; (80031dc <HAL_GPIO_Init+0x23c>)
 800307a:	f002 fd2c 	bl	8005ad6 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800307e:	692b      	ldr	r3, [r5, #16]
 8003080:	2b07      	cmp	r3, #7
 8003082:	d903      	bls.n	800308c <HAL_GPIO_Init+0xec>
 8003084:	21c0      	movs	r1, #192	; 0xc0
 8003086:	4855      	ldr	r0, [pc, #340]	; (80031dc <HAL_GPIO_Init+0x23c>)
 8003088:	f002 fd25 	bl	8005ad6 <assert_failed>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800308c:	2207      	movs	r2, #7
 800308e:	200f      	movs	r0, #15
 8003090:	403a      	ands	r2, r7
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8003096:	08fb      	lsrs	r3, r7, #3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	18e3      	adds	r3, r4, r3
 800309c:	6a19      	ldr	r1, [r3, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800309e:	4381      	bics	r1, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80030a0:	6928      	ldr	r0, [r5, #16]
 80030a2:	4090      	lsls	r0, r2
 80030a4:	0002      	movs	r2, r0
 80030a6:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 80030a8:	621a      	str	r2, [r3, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030aa:	2210      	movs	r2, #16
 80030ac:	686b      	ldr	r3, [r5, #4]
 80030ae:	007e      	lsls	r6, r7, #1
 80030b0:	4393      	bics	r3, r2
 80030b2:	3b01      	subs	r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d819      	bhi.n	80030ec <HAL_GPIO_Init+0x14c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80030b8:	68eb      	ldr	r3, [r5, #12]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d903      	bls.n	80030c6 <HAL_GPIO_Init+0x126>
 80030be:	21ce      	movs	r1, #206	; 0xce
 80030c0:	4846      	ldr	r0, [pc, #280]	; (80031dc <HAL_GPIO_Init+0x23c>)
 80030c2:	f002 fd08 	bl	8005ad6 <assert_failed>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80030c6:	2203      	movs	r2, #3
 80030c8:	40b2      	lsls	r2, r6
        temp = GPIOx->OSPEEDR;
 80030ca:	68a3      	ldr	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030cc:	2101      	movs	r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80030ce:	4393      	bics	r3, r2
 80030d0:	001a      	movs	r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030d2:	68eb      	ldr	r3, [r5, #12]
 80030d4:	40b3      	lsls	r3, r6
 80030d6:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 80030d8:	60a3      	str	r3, [r4, #8]
        temp= GPIOx->OTYPER;
 80030da:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030dc:	9b01      	ldr	r3, [sp, #4]
 80030de:	439a      	bics	r2, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030e0:	686b      	ldr	r3, [r5, #4]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	400b      	ands	r3, r1
 80030e6:	40bb      	lsls	r3, r7
 80030e8:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 80030ea:	6063      	str	r3, [r4, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030ec:	2303      	movs	r3, #3
 80030ee:	469c      	mov	ip, r3
 80030f0:	40b3      	lsls	r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f2:	4661      	mov	r1, ip
 80030f4:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030f6:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f8:	4011      	ands	r1, r2
 80030fa:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 80030fc:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030fe:	4018      	ands	r0, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	4301      	orrs	r1, r0
      GPIOx->MODER = temp;
 8003102:	6021      	str	r1, [r4, #0]
      temp = GPIOx->PUPDR;
 8003104:	68e1      	ldr	r1, [r4, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003106:	4019      	ands	r1, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8003108:	68ab      	ldr	r3, [r5, #8]
 800310a:	40b3      	lsls	r3, r6
 800310c:	430b      	orrs	r3, r1
      GPIOx->PUPDR = temp;
 800310e:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003110:	00d3      	lsls	r3, r2, #3
 8003112:	d559      	bpl.n	80031c8 <HAL_GPIO_Init+0x228>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003114:	2001      	movs	r0, #1
 8003116:	4939      	ldr	r1, [pc, #228]	; (80031fc <HAL_GPIO_Init+0x25c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003118:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800311c:	4303      	orrs	r3, r0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800311e:	4660      	mov	r0, ip
 8003120:	4038      	ands	r0, r7
 8003122:	0080      	lsls	r0, r0, #2
 8003124:	4086      	lsls	r6, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003126:	634b      	str	r3, [r1, #52]	; 0x34
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <HAL_GPIO_Init+0x260>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800312a:	08b9      	lsrs	r1, r7, #2
 800312c:	0089      	lsls	r1, r1, #2
 800312e:	18c9      	adds	r1, r1, r3
 8003130:	688b      	ldr	r3, [r1, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003132:	43b3      	bics	r3, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003134:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003136:	9301      	str	r3, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003138:	05f6      	lsls	r6, r6, #23
 800313a:	2300      	movs	r3, #0
 800313c:	42b4      	cmp	r4, r6
 800313e:	d014      	beq.n	800316a <HAL_GPIO_Init+0x1ca>
 8003140:	4e27      	ldr	r6, [pc, #156]	; (80031e0 <HAL_GPIO_Init+0x240>)
 8003142:	3301      	adds	r3, #1
 8003144:	42b4      	cmp	r4, r6
 8003146:	d010      	beq.n	800316a <HAL_GPIO_Init+0x1ca>
 8003148:	4e26      	ldr	r6, [pc, #152]	; (80031e4 <HAL_GPIO_Init+0x244>)
 800314a:	3301      	adds	r3, #1
 800314c:	42b4      	cmp	r4, r6
 800314e:	d00c      	beq.n	800316a <HAL_GPIO_Init+0x1ca>
 8003150:	4e25      	ldr	r6, [pc, #148]	; (80031e8 <HAL_GPIO_Init+0x248>)
 8003152:	4663      	mov	r3, ip
 8003154:	42b4      	cmp	r4, r6
 8003156:	d008      	beq.n	800316a <HAL_GPIO_Init+0x1ca>
 8003158:	4e24      	ldr	r6, [pc, #144]	; (80031ec <HAL_GPIO_Init+0x24c>)
 800315a:	3301      	adds	r3, #1
 800315c:	42b4      	cmp	r4, r6
 800315e:	d004      	beq.n	800316a <HAL_GPIO_Init+0x1ca>
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_GPIO_Init+0x264>)
 8003162:	18e3      	adds	r3, r4, r3
 8003164:	1e5e      	subs	r6, r3, #1
 8003166:	41b3      	sbcs	r3, r6
 8003168:	3305      	adds	r3, #5
 800316a:	4083      	lsls	r3, r0
 800316c:	9801      	ldr	r0, [sp, #4]
 800316e:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003170:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8003172:	4925      	ldr	r1, [pc, #148]	; (8003208 <HAL_GPIO_Init+0x268>)
        temp &= ~((uint32_t)iocurrent);
 8003174:	9b00      	ldr	r3, [sp, #0]
        temp = EXTI->IMR;
 8003176:	680e      	ldr	r6, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
 8003178:	43d8      	mvns	r0, r3
          temp |= iocurrent;
 800317a:	4333      	orrs	r3, r6
 800317c:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800317e:	03d3      	lsls	r3, r2, #15
 8003180:	d402      	bmi.n	8003188 <HAL_GPIO_Init+0x1e8>
        temp &= ~((uint32_t)iocurrent);
 8003182:	0033      	movs	r3, r6
 8003184:	4003      	ands	r3, r0
 8003186:	469c      	mov	ip, r3
        EXTI->IMR = temp;
 8003188:	4663      	mov	r3, ip
 800318a:	600b      	str	r3, [r1, #0]
        temp = EXTI->EMR;
 800318c:	684e      	ldr	r6, [r1, #4]
          temp |= iocurrent;
 800318e:	9b00      	ldr	r3, [sp, #0]
 8003190:	4333      	orrs	r3, r6
 8003192:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003194:	0393      	lsls	r3, r2, #14
 8003196:	d402      	bmi.n	800319e <HAL_GPIO_Init+0x1fe>
        temp &= ~((uint32_t)iocurrent);
 8003198:	0033      	movs	r3, r6
 800319a:	4003      	ands	r3, r0
 800319c:	469c      	mov	ip, r3
        EXTI->EMR = temp;
 800319e:	4663      	mov	r3, ip
 80031a0:	604b      	str	r3, [r1, #4]
        temp = EXTI->RTSR;
 80031a2:	688e      	ldr	r6, [r1, #8]
          temp |= iocurrent;
 80031a4:	9b00      	ldr	r3, [sp, #0]
 80031a6:	4333      	orrs	r3, r6
 80031a8:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031aa:	02d3      	lsls	r3, r2, #11
 80031ac:	d402      	bmi.n	80031b4 <HAL_GPIO_Init+0x214>
        temp &= ~((uint32_t)iocurrent);
 80031ae:	0033      	movs	r3, r6
 80031b0:	4003      	ands	r3, r0
 80031b2:	469c      	mov	ip, r3
        EXTI->RTSR = temp;
 80031b4:	4663      	mov	r3, ip
 80031b6:	608b      	str	r3, [r1, #8]
        temp = EXTI->FTSR;
 80031b8:	68ce      	ldr	r6, [r1, #12]
          temp |= iocurrent;
 80031ba:	9b00      	ldr	r3, [sp, #0]
 80031bc:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031be:	0292      	lsls	r2, r2, #10
 80031c0:	d401      	bmi.n	80031c6 <HAL_GPIO_Init+0x226>
        temp &= ~((uint32_t)iocurrent);
 80031c2:	0033      	movs	r3, r6
 80031c4:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 80031c6:	60cb      	str	r3, [r1, #12]
    position++;
 80031c8:	3701      	adds	r7, #1
 80031ca:	e730      	b.n	800302e <HAL_GPIO_Init+0x8e>
 80031cc:	ffdfffff 	.word	0xffdfffff
 80031d0:	efef0000 	.word	0xefef0000
 80031d4:	fffeffff 	.word	0xfffeffff
 80031d8:	efdf0000 	.word	0xefdf0000
 80031dc:	0800673b 	.word	0x0800673b
 80031e0:	50000400 	.word	0x50000400
 80031e4:	50000800 	.word	0x50000800
 80031e8:	50000c00 	.word	0x50000c00
 80031ec:	50001000 	.word	0x50001000
 80031f0:	0000ffff 	.word	0x0000ffff
 80031f4:	50001c00 	.word	0x50001c00
 80031f8:	00000603 	.word	0x00000603
 80031fc:	40021000 	.word	0x40021000
 8003200:	40010000 	.word	0x40010000
 8003204:	afffe400 	.word	0xafffe400
 8003208:	40010400 	.word	0x40010400

0800320c <HAL_GPIO_WritePin>:
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 800320c:	23a0      	movs	r3, #160	; 0xa0
{
 800320e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8003210:	05db      	lsls	r3, r3, #23
{
 8003212:	0004      	movs	r4, r0
 8003214:	000d      	movs	r5, r1
 8003216:	0016      	movs	r6, r2
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8003218:	4298      	cmp	r0, r3
 800321a:	d00b      	beq.n	8003234 <HAL_GPIO_WritePin+0x28>
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_GPIO_WritePin+0x68>)
 800321e:	4298      	cmp	r0, r3
 8003220:	d008      	beq.n	8003234 <HAL_GPIO_WritePin+0x28>
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_GPIO_WritePin+0x6c>)
 8003224:	4298      	cmp	r0, r3
 8003226:	d005      	beq.n	8003234 <HAL_GPIO_WritePin+0x28>
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <HAL_GPIO_WritePin+0x70>)
 800322a:	4298      	cmp	r0, r3
 800322c:	d002      	beq.n	8003234 <HAL_GPIO_WritePin+0x28>
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_GPIO_WritePin+0x74>)
 8003230:	4298      	cmp	r0, r3
 8003232:	d10a      	bne.n	800324a <HAL_GPIO_WritePin+0x3e>
 8003234:	2d00      	cmp	r5, #0
 8003236:	d012      	beq.n	800325e <HAL_GPIO_WritePin+0x52>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003238:	2e01      	cmp	r6, #1
 800323a:	d916      	bls.n	800326a <HAL_GPIO_WritePin+0x5e>
 800323c:	219e      	movs	r1, #158	; 0x9e
 800323e:	4811      	ldr	r0, [pc, #68]	; (8003284 <HAL_GPIO_WritePin+0x78>)
 8003240:	31ff      	adds	r1, #255	; 0xff
 8003242:	f002 fc48 	bl	8005ad6 <assert_failed>
  
  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8003246:	61a5      	str	r5, [r4, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003248:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_GPIO_WritePin+0x7c>)
 800324c:	4298      	cmp	r0, r3
 800324e:	d106      	bne.n	800325e <HAL_GPIO_WritePin+0x52>
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_GPIO_WritePin+0x80>)
 8003252:	4219      	tst	r1, r3
 8003254:	d003      	beq.n	800325e <HAL_GPIO_WritePin+0x52>
 8003256:	001a      	movs	r2, r3
 8003258:	430a      	orrs	r2, r1
 800325a:	429a      	cmp	r2, r3
 800325c:	d0ec      	beq.n	8003238 <HAL_GPIO_WritePin+0x2c>
 800325e:	21ce      	movs	r1, #206	; 0xce
 8003260:	4808      	ldr	r0, [pc, #32]	; (8003284 <HAL_GPIO_WritePin+0x78>)
 8003262:	0049      	lsls	r1, r1, #1
 8003264:	f002 fc37 	bl	8005ad6 <assert_failed>
 8003268:	e7e6      	b.n	8003238 <HAL_GPIO_WritePin+0x2c>
  if(PinState != GPIO_PIN_RESET)
 800326a:	2e00      	cmp	r6, #0
 800326c:	d1eb      	bne.n	8003246 <HAL_GPIO_WritePin+0x3a>
    GPIOx->BRR = GPIO_Pin ;
 800326e:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8003270:	e7ea      	b.n	8003248 <HAL_GPIO_WritePin+0x3c>
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	50000400 	.word	0x50000400
 8003278:	50000800 	.word	0x50000800
 800327c:	50000c00 	.word	0x50000c00
 8003280:	50001000 	.word	0x50001000
 8003284:	0800673b 	.word	0x0800673b
 8003288:	50001c00 	.word	0x50001c00
 800328c:	00000603 	.word	0x00000603

08003290 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003290:	6803      	ldr	r3, [r0, #0]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	0792      	lsls	r2, r2, #30
 8003296:	d501      	bpl.n	800329c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003298:	2200      	movs	r2, #0
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800329c:	2201      	movs	r2, #1
 800329e:	6999      	ldr	r1, [r3, #24]
 80032a0:	4211      	tst	r1, r2
 80032a2:	d102      	bne.n	80032aa <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032a4:	6999      	ldr	r1, [r3, #24]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]
  }
}
 80032aa:	4770      	bx	lr

080032ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80032ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032ae:	001e      	movs	r6, r3
 80032b0:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80032b2:	6803      	ldr	r3, [r0, #0]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <I2C_TransferConfig+0x80>)
{
 80032b6:	0007      	movs	r7, r0
 80032b8:	000c      	movs	r4, r1
 80032ba:	9d08      	ldr	r5, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80032bc:	4293      	cmp	r3, r2
 80032be:	d009      	beq.n	80032d4 <I2C_TransferConfig+0x28>
 80032c0:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <I2C_TransferConfig+0x84>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d006      	beq.n	80032d4 <I2C_TransferConfig+0x28>
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <I2C_TransferConfig+0x88>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <I2C_TransferConfig+0x28>
 80032cc:	491a      	ldr	r1, [pc, #104]	; (8003338 <I2C_TransferConfig+0x8c>)
 80032ce:	481b      	ldr	r0, [pc, #108]	; (800333c <I2C_TransferConfig+0x90>)
 80032d0:	f002 fc01 	bl	8005ad6 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	049b      	lsls	r3, r3, #18
 80032d8:	429e      	cmp	r6, r3
 80032da:	d006      	beq.n	80032ea <I2C_TransferConfig+0x3e>
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <I2C_TransferConfig+0x94>)
 80032de:	421e      	tst	r6, r3
 80032e0:	d003      	beq.n	80032ea <I2C_TransferConfig+0x3e>
 80032e2:	4918      	ldr	r1, [pc, #96]	; (8003344 <I2C_TransferConfig+0x98>)
 80032e4:	4815      	ldr	r0, [pc, #84]	; (800333c <I2C_TransferConfig+0x90>)
 80032e6:	f002 fbf6 	bl	8005ad6 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <I2C_TransferConfig+0x9c>)
 80032ec:	429d      	cmp	r5, r3
 80032ee:	d00a      	beq.n	8003306 <I2C_TransferConfig+0x5a>
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <I2C_TransferConfig+0xa0>)
 80032f2:	4a17      	ldr	r2, [pc, #92]	; (8003350 <I2C_TransferConfig+0xa4>)
 80032f4:	402b      	ands	r3, r5
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d005      	beq.n	8003306 <I2C_TransferConfig+0x5a>
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d003      	beq.n	8003306 <I2C_TransferConfig+0x5a>
 80032fe:	4915      	ldr	r1, [pc, #84]	; (8003354 <I2C_TransferConfig+0xa8>)
 8003300:	480e      	ldr	r0, [pc, #56]	; (800333c <I2C_TransferConfig+0x90>)
 8003302:	f002 fbe8 	bl	8005ad6 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003306:	9901      	ldr	r1, [sp, #4]
 8003308:	05a4      	lsls	r4, r4, #22
 800330a:	0da4      	lsrs	r4, r4, #22
 800330c:	4326      	orrs	r6, r4
 800330e:	040c      	lsls	r4, r1, #16
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	432e      	orrs	r6, r5
 8003316:	00c9      	lsls	r1, r1, #3
 8003318:	0d6d      	lsrs	r5, r5, #21
 800331a:	400d      	ands	r5, r1
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <I2C_TransferConfig+0xac>)
 800331e:	6853      	ldr	r3, [r2, #4]
 8003320:	430d      	orrs	r5, r1
 8003322:	43ab      	bics	r3, r5
 8003324:	4326      	orrs	r6, r4
 8003326:	431e      	orrs	r6, r3
 8003328:	6056      	str	r6, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800332a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800332c:	40005400 	.word	0x40005400
 8003330:	40005800 	.word	0x40005800
 8003334:	40007800 	.word	0x40007800
 8003338:	000018ac 	.word	0x000018ac
 800333c:	08006774 	.word	0x08006774
 8003340:	feffffff 	.word	0xfeffffff
 8003344:	000018ad 	.word	0x000018ad
 8003348:	80004000 	.word	0x80004000
 800334c:	fffffbff 	.word	0xfffffbff
 8003350:	80002000 	.word	0x80002000
 8003354:	000018ae 	.word	0x000018ae
 8003358:	03ff63ff 	.word	0x03ff63ff

0800335c <I2C_WaitOnFlagUntilTimeout>:
{
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	0004      	movs	r4, r0
 8003360:	000e      	movs	r6, r1
 8003362:	0017      	movs	r7, r2
 8003364:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	6993      	ldr	r3, [r2, #24]
 800336a:	4033      	ands	r3, r6
 800336c:	1b9b      	subs	r3, r3, r6
 800336e:	4259      	negs	r1, r3
 8003370:	414b      	adcs	r3, r1
 8003372:	42bb      	cmp	r3, r7
 8003374:	d001      	beq.n	800337a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003376:	2000      	movs	r0, #0
 8003378:	e017      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800337a:	1c6b      	adds	r3, r5, #1
 800337c:	d0f4      	beq.n	8003368 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe ffe7 	bl	8002350 <HAL_GetTick>
 8003382:	9b06      	ldr	r3, [sp, #24]
 8003384:	1ac0      	subs	r0, r0, r3
 8003386:	4285      	cmp	r5, r0
 8003388:	d301      	bcc.n	800338e <I2C_WaitOnFlagUntilTimeout+0x32>
 800338a:	2d00      	cmp	r5, #0
 800338c:	d1eb      	bne.n	8003366 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338e:	2220      	movs	r2, #32
 8003390:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003392:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	4313      	orrs	r3, r2
 8003396:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003398:	0023      	movs	r3, r4
 800339a:	3341      	adds	r3, #65	; 0x41
 800339c:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	0022      	movs	r2, r4
 80033a0:	2300      	movs	r3, #0
 80033a2:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80033a4:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80033a8:	7023      	strb	r3, [r4, #0]
}
 80033aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033ac <I2C_IsAcknowledgeFailed>:
{
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ae:	6803      	ldr	r3, [r0, #0]
{
 80033b0:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b2:	6998      	ldr	r0, [r3, #24]
 80033b4:	2310      	movs	r3, #16
{
 80033b6:	000e      	movs	r6, r1
 80033b8:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ba:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033bc:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033be:	2800      	cmp	r0, #0
 80033c0:	d118      	bne.n	80033f4 <I2C_IsAcknowledgeFailed+0x48>
}
 80033c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80033c4:	1c72      	adds	r2, r6, #1
 80033c6:	d016      	beq.n	80033f6 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fe ffc2 	bl	8002350 <HAL_GetTick>
 80033cc:	1bc0      	subs	r0, r0, r7
 80033ce:	4286      	cmp	r6, r0
 80033d0:	d301      	bcc.n	80033d6 <I2C_IsAcknowledgeFailed+0x2a>
 80033d2:	2e00      	cmp	r6, #0
 80033d4:	d10e      	bne.n	80033f4 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	2220      	movs	r2, #32
 80033d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033da:	4313      	orrs	r3, r2
 80033dc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033de:	0023      	movs	r3, r4
 80033e0:	3341      	adds	r3, #65	; 0x41
 80033e2:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	0022      	movs	r2, r4
 80033e6:	2300      	movs	r3, #0
 80033e8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80033ea:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80033ee:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80033f0:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80033f2:	e7e6      	b.n	80033c2 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	422a      	tst	r2, r5
 80033fa:	d0e3      	beq.n	80033c4 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80033fe:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003402:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003404:	f7ff ff44 	bl	8003290 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	4906      	ldr	r1, [pc, #24]	; (8003424 <I2C_IsAcknowledgeFailed+0x78>)
 800340c:	6853      	ldr	r3, [r2, #4]
 800340e:	400b      	ands	r3, r1
 8003410:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003412:	2304      	movs	r3, #4
 8003414:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003416:	4313      	orrs	r3, r2
 8003418:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800341a:	0023      	movs	r3, r4
 800341c:	3341      	adds	r3, #65	; 0x41
 800341e:	701d      	strb	r5, [r3, #0]
 8003420:	e7e0      	b.n	80033e4 <I2C_IsAcknowledgeFailed+0x38>
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	fe00e800 	.word	0xfe00e800

08003428 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	0004      	movs	r4, r0
 800342c:	000d      	movs	r5, r1
 800342e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003430:	2702      	movs	r7, #2
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	423b      	tst	r3, r7
 8003438:	d001      	beq.n	800343e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800343a:	2000      	movs	r0, #0
}
 800343c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	0032      	movs	r2, r6
 8003440:	0029      	movs	r1, r5
 8003442:	0020      	movs	r0, r4
 8003444:	f7ff ffb2 	bl	80033ac <I2C_IsAcknowledgeFailed>
 8003448:	2800      	cmp	r0, #0
 800344a:	d115      	bne.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800344c:	1c6b      	adds	r3, r5, #1
 800344e:	d0f0      	beq.n	8003432 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7fe ff7e 	bl	8002350 <HAL_GetTick>
 8003454:	1b80      	subs	r0, r0, r6
 8003456:	4285      	cmp	r5, r0
 8003458:	d301      	bcc.n	800345e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800345a:	2d00      	cmp	r5, #0
 800345c:	d1e9      	bne.n	8003432 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800345e:	2220      	movs	r2, #32
 8003460:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003462:	4313      	orrs	r3, r2
 8003464:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003466:	0023      	movs	r3, r4
 8003468:	3341      	adds	r3, #65	; 0x41
 800346a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	0022      	movs	r2, r4
 800346e:	2300      	movs	r3, #0
 8003470:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8003472:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003476:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003478:	2001      	movs	r0, #1
 800347a:	e7df      	b.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800347c <I2C_RequestMemoryWrite>:
{
 800347c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800347e:	0014      	movs	r4, r2
 8003480:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <I2C_RequestMemoryWrite+0x60>)
{
 8003486:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	045b      	lsls	r3, r3, #17
 800348e:	f7ff ff0d 	bl	80032ac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	9a07      	ldr	r2, [sp, #28]
 8003494:	9906      	ldr	r1, [sp, #24]
 8003496:	0028      	movs	r0, r5
 8003498:	f7ff ffc6 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 800349c:	2800      	cmp	r0, #0
 800349e:	d001      	beq.n	80034a4 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 80034a0:	2001      	movs	r0, #1
}
 80034a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80034a4:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034a6:	2e01      	cmp	r6, #1
 80034a8:	d10d      	bne.n	80034c6 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034aa:	b2e4      	uxtb	r4, r4
 80034ac:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034ae:	9b07      	ldr	r3, [sp, #28]
 80034b0:	2200      	movs	r2, #0
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	9b06      	ldr	r3, [sp, #24]
 80034b8:	0028      	movs	r0, r5
 80034ba:	f7ff ff4f 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 80034be:	1e43      	subs	r3, r0, #1
 80034c0:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80034c2:	b2c0      	uxtb	r0, r0
 80034c4:	e7ed      	b.n	80034a2 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034c6:	0a22      	lsrs	r2, r4, #8
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	9906      	ldr	r1, [sp, #24]
 80034cc:	9a07      	ldr	r2, [sp, #28]
 80034ce:	0028      	movs	r0, r5
 80034d0:	f7ff ffaa 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d1e3      	bne.n	80034a0 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	e7e6      	b.n	80034aa <I2C_RequestMemoryWrite+0x2e>
 80034dc:	80002000 	.word	0x80002000

080034e0 <I2C_RequestMemoryRead>:
{
 80034e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034e2:	0005      	movs	r5, r0
 80034e4:	0014      	movs	r4, r2
 80034e6:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <I2C_RequestMemoryRead+0x60>)
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	f7ff fedc 	bl	80032ac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f4:	9a07      	ldr	r2, [sp, #28]
 80034f6:	9906      	ldr	r1, [sp, #24]
 80034f8:	0028      	movs	r0, r5
 80034fa:	f7ff ff95 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 80034fe:	2800      	cmp	r0, #0
 8003500:	d001      	beq.n	8003506 <I2C_RequestMemoryRead+0x26>
    return HAL_ERROR;
 8003502:	2001      	movs	r0, #1
}
 8003504:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003506:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003508:	2e01      	cmp	r6, #1
 800350a:	d10d      	bne.n	8003528 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800350c:	b2e4      	uxtb	r4, r4
 800350e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	9b07      	ldr	r3, [sp, #28]
 8003512:	2200      	movs	r2, #0
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2140      	movs	r1, #64	; 0x40
 8003518:	9b06      	ldr	r3, [sp, #24]
 800351a:	0028      	movs	r0, r5
 800351c:	f7ff ff1e 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 8003520:	1e43      	subs	r3, r0, #1
 8003522:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003524:	b2c0      	uxtb	r0, r0
 8003526:	e7ed      	b.n	8003504 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003528:	0a22      	lsrs	r2, r4, #8
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352c:	9906      	ldr	r1, [sp, #24]
 800352e:	9a07      	ldr	r2, [sp, #28]
 8003530:	0028      	movs	r0, r5
 8003532:	f7ff ff79 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 8003536:	2800      	cmp	r0, #0
 8003538:	d1e3      	bne.n	8003502 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800353a:	682b      	ldr	r3, [r5, #0]
 800353c:	e7e6      	b.n	800350c <I2C_RequestMemoryRead+0x2c>
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	80002000 	.word	0x80002000

08003544 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	0004      	movs	r4, r0
 8003548:	000d      	movs	r5, r1
 800354a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800354c:	2720      	movs	r7, #32
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	423b      	tst	r3, r7
 8003554:	d001      	beq.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003556:	2000      	movs	r0, #0
}
 8003558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800355a:	0032      	movs	r2, r6
 800355c:	0029      	movs	r1, r5
 800355e:	0020      	movs	r0, r4
 8003560:	f7ff ff24 	bl	80033ac <I2C_IsAcknowledgeFailed>
 8003564:	2800      	cmp	r0, #0
 8003566:	d113      	bne.n	8003590 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003568:	f7fe fef2 	bl	8002350 <HAL_GetTick>
 800356c:	1b80      	subs	r0, r0, r6
 800356e:	4285      	cmp	r5, r0
 8003570:	d301      	bcc.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003572:	2d00      	cmp	r5, #0
 8003574:	d1eb      	bne.n	800354e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	2220      	movs	r2, #32
 8003578:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800357a:	4313      	orrs	r3, r2
 800357c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800357e:	0023      	movs	r3, r4
 8003580:	3341      	adds	r3, #65	; 0x41
 8003582:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	0022      	movs	r2, r4
 8003586:	2300      	movs	r3, #0
 8003588:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800358a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800358e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003590:	2001      	movs	r0, #1
 8003592:	e7e1      	b.n	8003558 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08003594 <HAL_I2C_Init>:
{
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800359a:	2c00      	cmp	r4, #0
 800359c:	d100      	bne.n	80035a0 <HAL_I2C_Init+0xc>
 800359e:	e08a      	b.n	80036b6 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <HAL_I2C_Init+0x138>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00a      	beq.n	80035be <HAL_I2C_Init+0x2a>
 80035a8:	4a49      	ldr	r2, [pc, #292]	; (80036d0 <HAL_I2C_Init+0x13c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <HAL_I2C_Init+0x2a>
 80035ae:	4a49      	ldr	r2, [pc, #292]	; (80036d4 <HAL_I2C_Init+0x140>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_I2C_Init+0x2a>
 80035b4:	21ef      	movs	r1, #239	; 0xef
 80035b6:	4848      	ldr	r0, [pc, #288]	; (80036d8 <HAL_I2C_Init+0x144>)
 80035b8:	0049      	lsls	r1, r1, #1
 80035ba:	f002 fa8c 	bl	8005ad6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80035be:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_I2C_Init+0x148>)
 80035c0:	68a2      	ldr	r2, [r4, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d904      	bls.n	80035d0 <HAL_I2C_Init+0x3c>
 80035c6:	21e0      	movs	r1, #224	; 0xe0
 80035c8:	4843      	ldr	r0, [pc, #268]	; (80036d8 <HAL_I2C_Init+0x144>)
 80035ca:	31ff      	adds	r1, #255	; 0xff
 80035cc:	f002 fa83 	bl	8005ad6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80035d0:	68e3      	ldr	r3, [r4, #12]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d904      	bls.n	80035e2 <HAL_I2C_Init+0x4e>
 80035d8:	21f0      	movs	r1, #240	; 0xf0
 80035da:	483f      	ldr	r0, [pc, #252]	; (80036d8 <HAL_I2C_Init+0x144>)
 80035dc:	0049      	lsls	r1, r1, #1
 80035de:	f002 fa7a 	bl	8005ad6 <assert_failed>
 80035e2:	4e3f      	ldr	r6, [pc, #252]	; (80036e0 <HAL_I2C_Init+0x14c>)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	4233      	tst	r3, r6
 80035e8:	d004      	beq.n	80035f4 <HAL_I2C_Init+0x60>
 80035ea:	21e2      	movs	r1, #226	; 0xe2
 80035ec:	483a      	ldr	r0, [pc, #232]	; (80036d8 <HAL_I2C_Init+0x144>)
 80035ee:	31ff      	adds	r1, #255	; 0xff
 80035f0:	f002 fa71 	bl	8005ad6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80035f4:	6963      	ldr	r3, [r4, #20]
 80035f6:	2bff      	cmp	r3, #255	; 0xff
 80035f8:	d904      	bls.n	8003604 <HAL_I2C_Init+0x70>
 80035fa:	21f1      	movs	r1, #241	; 0xf1
 80035fc:	4836      	ldr	r0, [pc, #216]	; (80036d8 <HAL_I2C_Init+0x144>)
 80035fe:	0049      	lsls	r1, r1, #1
 8003600:	f002 fa69 	bl	8005ad6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8003604:	69a3      	ldr	r3, [r4, #24]
 8003606:	2b07      	cmp	r3, #7
 8003608:	d904      	bls.n	8003614 <HAL_I2C_Init+0x80>
 800360a:	21e4      	movs	r1, #228	; 0xe4
 800360c:	4832      	ldr	r0, [pc, #200]	; (80036d8 <HAL_I2C_Init+0x144>)
 800360e:	31ff      	adds	r1, #255	; 0xff
 8003610:	f002 fa61 	bl	8005ad6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003614:	4b33      	ldr	r3, [pc, #204]	; (80036e4 <HAL_I2C_Init+0x150>)
 8003616:	69e2      	ldr	r2, [r4, #28]
 8003618:	421a      	tst	r2, r3
 800361a:	d004      	beq.n	8003626 <HAL_I2C_Init+0x92>
 800361c:	21f2      	movs	r1, #242	; 0xf2
 800361e:	482e      	ldr	r0, [pc, #184]	; (80036d8 <HAL_I2C_Init+0x144>)
 8003620:	0049      	lsls	r1, r1, #1
 8003622:	f002 fa58 	bl	8005ad6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_I2C_Init+0x154>)
 8003628:	6a22      	ldr	r2, [r4, #32]
 800362a:	421a      	tst	r2, r3
 800362c:	d004      	beq.n	8003638 <HAL_I2C_Init+0xa4>
 800362e:	21e6      	movs	r1, #230	; 0xe6
 8003630:	4829      	ldr	r0, [pc, #164]	; (80036d8 <HAL_I2C_Init+0x144>)
 8003632:	31ff      	adds	r1, #255	; 0xff
 8003634:	f002 fa4f 	bl	8005ad6 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003638:	0025      	movs	r5, r4
 800363a:	3541      	adds	r5, #65	; 0x41
 800363c:	782b      	ldrb	r3, [r5, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_I2C_Init+0xbc>
    hi2c->Lock = HAL_UNLOCKED;
 8003644:	0022      	movs	r2, r4
 8003646:	3240      	adds	r2, #64	; 0x40
 8003648:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 800364a:	0020      	movs	r0, r4
 800364c:	f002 faa2 	bl	8005b94 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003650:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003652:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	68a0      	ldr	r0, [r4, #8]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	438a      	bics	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003660:	6861      	ldr	r1, [r4, #4]
 8003662:	4a22      	ldr	r2, [pc, #136]	; (80036ec <HAL_I2C_Init+0x158>)
 8003664:	400a      	ands	r2, r1
 8003666:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003668:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800366a:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800366c:	4032      	ands	r2, r6
 800366e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003670:	2901      	cmp	r1, #1
 8003672:	d121      	bne.n	80036b8 <HAL_I2C_Init+0x124>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	0212      	lsls	r2, r2, #8
 8003678:	4302      	orrs	r2, r0
 800367a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_I2C_Init+0x15c>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003680:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003686:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003688:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800368a:	4016      	ands	r6, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800368c:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800368e:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003690:	430a      	orrs	r2, r1
 8003692:	69a1      	ldr	r1, [r4, #24]
 8003694:	0209      	lsls	r1, r1, #8
 8003696:	430a      	orrs	r2, r1
 8003698:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800369a:	6a21      	ldr	r1, [r4, #32]
 800369c:	69e2      	ldr	r2, [r4, #28]
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80036a2:	2201      	movs	r2, #1
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	3442      	adds	r4, #66	; 0x42
 80036b4:	7020      	strb	r0, [r4, #0]
}
 80036b6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036b8:	2284      	movs	r2, #132	; 0x84
 80036ba:	0212      	lsls	r2, r2, #8
 80036bc:	4302      	orrs	r2, r0
 80036be:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036c0:	2902      	cmp	r1, #2
 80036c2:	d1db      	bne.n	800367c <HAL_I2C_Init+0xe8>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	e7d7      	b.n	800367c <HAL_I2C_Init+0xe8>
 80036cc:	40005400 	.word	0x40005400
 80036d0:	40005800 	.word	0x40005800
 80036d4:	40007800 	.word	0x40007800
 80036d8:	08006774 	.word	0x08006774
 80036dc:	000003ff 	.word	0x000003ff
 80036e0:	ffff7fff 	.word	0xffff7fff
 80036e4:	fff7ffff 	.word	0xfff7ffff
 80036e8:	fffdffff 	.word	0xfffdffff
 80036ec:	f0ffffff 	.word	0xf0ffffff
 80036f0:	02008000 	.word	0x02008000

080036f4 <HAL_I2C_Mem_Write>:
{
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	ab0e      	add	r3, sp, #56	; 0x38
 80036fc:	9207      	str	r2, [sp, #28]
 80036fe:	cb04      	ldmia	r3!, {r2}
 8003700:	0004      	movs	r4, r0
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	000d      	movs	r5, r1
 8003706:	9305      	str	r3, [sp, #20]
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003708:	9b03      	ldr	r3, [sp, #12]
{
 800370a:	9204      	str	r2, [sp, #16]
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800370c:	3b01      	subs	r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d903      	bls.n	800371a <HAL_I2C_Mem_Write+0x26>
 8003712:	4959      	ldr	r1, [pc, #356]	; (8003878 <HAL_I2C_Mem_Write+0x184>)
 8003714:	4859      	ldr	r0, [pc, #356]	; (800387c <HAL_I2C_Mem_Write+0x188>)
 8003716:	f002 f9de 	bl	8005ad6 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800371a:	0023      	movs	r3, r4
 800371c:	3341      	adds	r3, #65	; 0x41
 800371e:	9306      	str	r3, [sp, #24]
 8003720:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8003722:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	2b20      	cmp	r3, #32
 8003726:	d109      	bne.n	800373c <HAL_I2C_Mem_Write+0x48>
    if ((pData == NULL) || (Size == 0U))
 8003728:	9b04      	ldr	r3, [sp, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_I2C_Mem_Write+0x40>
 800372e:	9b05      	ldr	r3, [sp, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_I2C_Mem_Write+0x4c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800373a:	2001      	movs	r0, #1
}
 800373c:	b009      	add	sp, #36	; 0x24
 800373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003740:	0023      	movs	r3, r4
 8003742:	3340      	adds	r3, #64	; 0x40
 8003744:	9302      	str	r3, [sp, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d0f7      	beq.n	800373c <HAL_I2C_Mem_Write+0x48>
 800374c:	2201      	movs	r2, #1
 800374e:	9b02      	ldr	r3, [sp, #8]
 8003750:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003752:	f7fe fdfd 	bl	8002350 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800375a:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800375c:	2319      	movs	r3, #25
 800375e:	2201      	movs	r2, #1
 8003760:	0209      	lsls	r1, r1, #8
 8003762:	0020      	movs	r0, r4
 8003764:	f7ff fdfa 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 8003768:	1e06      	subs	r6, r0, #0
 800376a:	d1e6      	bne.n	800373a <HAL_I2C_Mem_Write+0x46>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376c:	2321      	movs	r3, #33	; 0x21
 800376e:	9a06      	ldr	r2, [sp, #24]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003770:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003772:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003774:	0023      	movs	r3, r4
 8003776:	3342      	adds	r3, #66	; 0x42
 8003778:	9306      	str	r3, [sp, #24]
 800377a:	2340      	movs	r3, #64	; 0x40
 800377c:	9a06      	ldr	r2, [sp, #24]
 800377e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8003780:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003782:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003784:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003786:	466b      	mov	r3, sp
 8003788:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800378a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800378c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800378e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003790:	9701      	str	r7, [sp, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	9a07      	ldr	r2, [sp, #28]
 8003796:	9b03      	ldr	r3, [sp, #12]
 8003798:	0020      	movs	r0, r4
 800379a:	f7ff fe6f 	bl	800347c <I2C_RequestMemoryWrite>
 800379e:	2800      	cmp	r0, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_I2C_Mem_Write+0xb4>
      __HAL_UNLOCK(hi2c);
 80037a2:	9b02      	ldr	r3, [sp, #8]
 80037a4:	701e      	strb	r6, [r3, #0]
 80037a6:	e7c8      	b.n	800373a <HAL_I2C_Mem_Write+0x46>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037aa:	2bff      	cmp	r3, #255	; 0xff
 80037ac:	d954      	bls.n	8003858 <HAL_I2C_Mem_Write+0x164>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ae:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037b0:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037b4:	045b      	lsls	r3, r3, #17
 80037b6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037b8:	0029      	movs	r1, r5
 80037ba:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037bc:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037be:	f7ff fd75 	bl	80032ac <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037c2:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c4:	003a      	movs	r2, r7
 80037c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80037c8:	0020      	movs	r0, r4
 80037ca:	f7ff fe2d 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d1b3      	bne.n	800373a <HAL_I2C_Mem_Write+0x46>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80037d8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037da:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80037dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80037de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80037e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80037e8:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80037ec:	b292      	uxth	r2, r2
 80037ee:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d017      	beq.n	8003824 <HAL_I2C_Mem_Write+0x130>
 80037f4:	2a00      	cmp	r2, #0
 80037f6:	d115      	bne.n	8003824 <HAL_I2C_Mem_Write+0x130>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f8:	9700      	str	r7, [sp, #0]
 80037fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	0020      	movs	r0, r4
 8003800:	f7ff fdac 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 8003804:	2800      	cmp	r0, #0
 8003806:	d000      	beq.n	800380a <HAL_I2C_Mem_Write+0x116>
 8003808:	e797      	b.n	800373a <HAL_I2C_Mem_Write+0x46>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d92b      	bls.n	8003868 <HAL_I2C_Mem_Write+0x174>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003810:	23ff      	movs	r3, #255	; 0xff
 8003812:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	9000      	str	r0, [sp, #0]
 800381a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800381c:	0029      	movs	r1, r5
 800381e:	0020      	movs	r0, r4
 8003820:	f7ff fd44 	bl	80032ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003824:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1cc      	bne.n	80037c4 <HAL_I2C_Mem_Write+0xd0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382a:	003a      	movs	r2, r7
 800382c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800382e:	0020      	movs	r0, r4
 8003830:	f7ff fe88 	bl	8003544 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003834:	2800      	cmp	r0, #0
 8003836:	d000      	beq.n	800383a <HAL_I2C_Mem_Write+0x146>
 8003838:	e77f      	b.n	800373a <HAL_I2C_Mem_Write+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800383a:	2120      	movs	r1, #32
 800383c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800383e:	4d10      	ldr	r5, [pc, #64]	; (8003880 <HAL_I2C_Mem_Write+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003840:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	402a      	ands	r2, r5
 8003846:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003848:	0023      	movs	r3, r4
 800384a:	3341      	adds	r3, #65	; 0x41
 800384c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800384e:	9b06      	ldr	r3, [sp, #24]
    __HAL_UNLOCK(hi2c);
 8003850:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003852:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003854:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003856:	e771      	b.n	800373c <HAL_I2C_Mem_Write+0x48>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003858:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800385a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800385c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800385e:	b292      	uxth	r2, r2
 8003860:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	9000      	str	r0, [sp, #0]
 8003866:	e7a7      	b.n	80037b8 <HAL_I2C_Mem_Write+0xc4>
          hi2c->XferSize = hi2c->XferCount;
 8003868:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800386a:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800386c:	b292      	uxth	r2, r2
 800386e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	9000      	str	r0, [sp, #0]
 8003874:	e7d2      	b.n	800381c <HAL_I2C_Mem_Write+0x128>
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	000008ed 	.word	0x000008ed
 800387c:	08006774 	.word	0x08006774
 8003880:	fe00e800 	.word	0xfe00e800

08003884 <HAL_I2C_Mem_Read>:
{
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	9303      	str	r3, [sp, #12]
 800388a:	ab0e      	add	r3, sp, #56	; 0x38
 800388c:	9207      	str	r2, [sp, #28]
 800388e:	cb04      	ldmia	r3!, {r2}
 8003890:	0004      	movs	r4, r0
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	000d      	movs	r5, r1
 8003896:	9305      	str	r3, [sp, #20]
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003898:	9b03      	ldr	r3, [sp, #12]
{
 800389a:	9204      	str	r2, [sp, #16]
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800389c:	3b01      	subs	r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d903      	bls.n	80038aa <HAL_I2C_Mem_Read+0x26>
 80038a2:	495b      	ldr	r1, [pc, #364]	; (8003a10 <HAL_I2C_Mem_Read+0x18c>)
 80038a4:	485b      	ldr	r0, [pc, #364]	; (8003a14 <HAL_I2C_Mem_Read+0x190>)
 80038a6:	f002 f916 	bl	8005ad6 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038aa:	0023      	movs	r3, r4
 80038ac:	3341      	adds	r3, #65	; 0x41
 80038ae:	9306      	str	r3, [sp, #24]
 80038b0:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 80038b2:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d109      	bne.n	80038cc <HAL_I2C_Mem_Read+0x48>
    if ((pData == NULL) || (Size == 0U))
 80038b8:	9b04      	ldr	r3, [sp, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_I2C_Mem_Read+0x40>
 80038be:	9b05      	ldr	r3, [sp, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_I2C_Mem_Read+0x4c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80038ca:	2001      	movs	r0, #1
}
 80038cc:	b009      	add	sp, #36	; 0x24
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80038d0:	0023      	movs	r3, r4
 80038d2:	3340      	adds	r3, #64	; 0x40
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d0f7      	beq.n	80038cc <HAL_I2C_Mem_Read+0x48>
 80038dc:	2201      	movs	r2, #1
 80038de:	9b02      	ldr	r3, [sp, #8]
 80038e0:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80038e2:	f7fe fd35 	bl	8002350 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80038ea:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038ec:	2319      	movs	r3, #25
 80038ee:	2201      	movs	r2, #1
 80038f0:	0209      	lsls	r1, r1, #8
 80038f2:	0020      	movs	r0, r4
 80038f4:	f7ff fd32 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 80038f8:	1e06      	subs	r6, r0, #0
 80038fa:	d1e6      	bne.n	80038ca <HAL_I2C_Mem_Read+0x46>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038fc:	2322      	movs	r3, #34	; 0x22
 80038fe:	9a06      	ldr	r2, [sp, #24]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003900:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003902:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003904:	0023      	movs	r3, r4
 8003906:	3342      	adds	r3, #66	; 0x42
 8003908:	9306      	str	r3, [sp, #24]
 800390a:	2340      	movs	r3, #64	; 0x40
 800390c:	9a06      	ldr	r2, [sp, #24]
 800390e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8003910:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003912:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003914:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003916:	466b      	mov	r3, sp
 8003918:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800391a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800391c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800391e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003920:	9701      	str	r7, [sp, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	9a07      	ldr	r2, [sp, #28]
 8003926:	9b03      	ldr	r3, [sp, #12]
 8003928:	0020      	movs	r0, r4
 800392a:	f7ff fdd9 	bl	80034e0 <I2C_RequestMemoryRead>
 800392e:	2800      	cmp	r0, #0
 8003930:	d002      	beq.n	8003938 <HAL_I2C_Mem_Read+0xb4>
      __HAL_UNLOCK(hi2c);
 8003932:	9b02      	ldr	r3, [sp, #8]
 8003934:	701e      	strb	r6, [r3, #0]
 8003936:	e7c8      	b.n	80038ca <HAL_I2C_Mem_Read+0x46>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_I2C_Mem_Read+0x194>)
 800393c:	2aff      	cmp	r2, #255	; 0xff
 800393e:	d957      	bls.n	80039f0 <HAL_I2C_Mem_Read+0x16c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003940:	22ff      	movs	r2, #255	; 0xff
 8003942:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800394a:	0029      	movs	r1, r5
 800394c:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800394e:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003950:	f7ff fcac 	bl	80032ac <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003954:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003956:	9700      	str	r7, [sp, #0]
 8003958:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800395a:	2200      	movs	r2, #0
 800395c:	2104      	movs	r1, #4
 800395e:	0020      	movs	r0, r4
 8003960:	f7ff fcfc 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 8003964:	2800      	cmp	r0, #0
 8003966:	d1b0      	bne.n	80038ca <HAL_I2C_Mem_Read+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003970:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003972:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003974:	3301      	adds	r3, #1
 8003976:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003978:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800397a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800397c:	3b01      	subs	r3, #1
 800397e:	b29b      	uxth	r3, r3
 8003980:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003982:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003984:	b292      	uxth	r2, r2
 8003986:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003988:	2b00      	cmp	r3, #0
 800398a:	d017      	beq.n	80039bc <HAL_I2C_Mem_Read+0x138>
 800398c:	2a00      	cmp	r2, #0
 800398e:	d115      	bne.n	80039bc <HAL_I2C_Mem_Read+0x138>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003990:	9700      	str	r7, [sp, #0]
 8003992:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	0020      	movs	r0, r4
 8003998:	f7ff fce0 	bl	800335c <I2C_WaitOnFlagUntilTimeout>
 800399c:	2800      	cmp	r0, #0
 800399e:	d000      	beq.n	80039a2 <HAL_I2C_Mem_Read+0x11e>
 80039a0:	e793      	b.n	80038ca <HAL_I2C_Mem_Read+0x46>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039a4:	2bff      	cmp	r3, #255	; 0xff
 80039a6:	d92b      	bls.n	8003a00 <HAL_I2C_Mem_Read+0x17c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039a8:	23ff      	movs	r3, #255	; 0xff
 80039aa:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	22ff      	movs	r2, #255	; 0xff
 80039b0:	9000      	str	r0, [sp, #0]
 80039b2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039b4:	0029      	movs	r1, r5
 80039b6:	0020      	movs	r0, r4
 80039b8:	f7ff fc78 	bl	80032ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80039bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1c9      	bne.n	8003956 <HAL_I2C_Mem_Read+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c2:	003a      	movs	r2, r7
 80039c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80039c6:	0020      	movs	r0, r4
 80039c8:	f7ff fdbc 	bl	8003544 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d000      	beq.n	80039d2 <HAL_I2C_Mem_Read+0x14e>
 80039d0:	e77b      	b.n	80038ca <HAL_I2C_Mem_Read+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d2:	2120      	movs	r1, #32
 80039d4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80039d6:	4d11      	ldr	r5, [pc, #68]	; (8003a1c <HAL_I2C_Mem_Read+0x198>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	402a      	ands	r2, r5
 80039de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039e0:	0023      	movs	r3, r4
 80039e2:	3341      	adds	r3, #65	; 0x41
 80039e4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039e6:	9b06      	ldr	r3, [sp, #24]
    __HAL_UNLOCK(hi2c);
 80039e8:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ea:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80039ec:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80039ee:	e76d      	b.n	80038cc <HAL_I2C_Mem_Read+0x48>
      hi2c->XferSize = hi2c->XferCount;
 80039f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039f2:	b292      	uxth	r2, r2
 80039f4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	049b      	lsls	r3, r3, #18
 80039fe:	e7a4      	b.n	800394a <HAL_I2C_Mem_Read+0xc6>
          hi2c->XferSize = hi2c->XferCount;
 8003a00:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a02:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8003a04:	b292      	uxth	r2, r2
 8003a06:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	9000      	str	r0, [sp, #0]
 8003a0c:	e7d2      	b.n	80039b4 <HAL_I2C_Mem_Read+0x130>
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	00000974 	.word	0x00000974
 8003a14:	08006774 	.word	0x08006774
 8003a18:	80002400 	.word	0x80002400
 8003a1c:	fe00e800 	.word	0xfe00e800

08003a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003a22:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_I2CEx_ConfigAnalogFilter+0x78>)
 8003a24:	6803      	ldr	r3, [r0, #0]
{
 8003a26:	0006      	movs	r6, r0
 8003a28:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_I2CEx_ConfigAnalogFilter+0x7c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d006      	beq.n	8003a42 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 8003a34:	4a1a      	ldr	r2, [pc, #104]	; (8003aa0 <HAL_I2CEx_ConfigAnalogFilter+0x80>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 8003a3a:	2164      	movs	r1, #100	; 0x64
 8003a3c:	4819      	ldr	r0, [pc, #100]	; (8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 8003a3e:	f002 f84a 	bl	8005ad6 <assert_failed>
 8003a42:	4d19      	ldr	r5, [pc, #100]	; (8003aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>)
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8003a44:	422c      	tst	r4, r5
 8003a46:	d003      	beq.n	8003a50 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8003a48:	2165      	movs	r1, #101	; 0x65
 8003a4a:	4816      	ldr	r0, [pc, #88]	; (8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 8003a4c:	f002 f843 	bl	8005ad6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a50:	2341      	movs	r3, #65	; 0x41
 8003a52:	469c      	mov	ip, r3
 8003a54:	44b4      	add	ip, r6
 8003a56:	4663      	mov	r3, ip
 8003a58:	781a      	ldrb	r2, [r3, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003a5a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	2a20      	cmp	r2, #32
 8003a60:	d119      	bne.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x76>
    __HAL_LOCK(hi2c);
 8003a62:	0037      	movs	r7, r6
 8003a64:	3740      	adds	r7, #64	; 0x40
 8003a66:	783b      	ldrb	r3, [r7, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d014      	beq.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x76>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a6c:	2324      	movs	r3, #36	; 0x24
 8003a6e:	4661      	mov	r1, ip
 8003a70:	700b      	strb	r3, [r1, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003a72:	2101      	movs	r1, #1
 8003a74:	6833      	ldr	r3, [r6, #0]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	4388      	bics	r0, r1
 8003a7a:	6018      	str	r0, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	4005      	ands	r5, r0
 8003a80:	601d      	str	r5, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	4304      	orrs	r4, r0
 8003a86:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	4301      	orrs	r1, r0
 8003a8c:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003a8e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	4663      	mov	r3, ip
 8003a92:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003a94:	7038      	strb	r0, [r7, #0]
  }
}
 8003a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a98:	40005400 	.word	0x40005400
 8003a9c:	40005800 	.word	0x40005800
 8003aa0:	40007800 	.word	0x40007800
 8003aa4:	080067ac 	.word	0x080067ac
 8003aa8:	ffffefff 	.word	0xffffefff

08003aac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003aae:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_I2CEx_ConfigDigitalFilter+0x70>)
 8003ab0:	6803      	ldr	r3, [r0, #0]
{
 8003ab2:	0005      	movs	r5, r0
 8003ab4:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_I2CEx_ConfigDigitalFilter+0x22>
 8003aba:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <HAL_I2CEx_ConfigDigitalFilter+0x74>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d006      	beq.n	8003ace <HAL_I2CEx_ConfigDigitalFilter+0x22>
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_I2CEx_ConfigDigitalFilter+0x78>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <HAL_I2CEx_ConfigDigitalFilter+0x22>
 8003ac6:	2192      	movs	r1, #146	; 0x92
 8003ac8:	4817      	ldr	r0, [pc, #92]	; (8003b28 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 8003aca:	f002 f804 	bl	8005ad6 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003ace:	2c0f      	cmp	r4, #15
 8003ad0:	d903      	bls.n	8003ada <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 8003ad2:	2193      	movs	r1, #147	; 0x93
 8003ad4:	4814      	ldr	r0, [pc, #80]	; (8003b28 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 8003ad6:	f001 fffe 	bl	8005ad6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ada:	002e      	movs	r6, r5
 8003adc:	3641      	adds	r6, #65	; 0x41
 8003ade:	7832      	ldrb	r2, [r6, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	2a20      	cmp	r2, #32
 8003ae6:	d117      	bne.n	8003b18 <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    __HAL_LOCK(hi2c);
 8003ae8:	0029      	movs	r1, r5
 8003aea:	3140      	adds	r1, #64	; 0x40
 8003aec:	780b      	ldrb	r3, [r1, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d012      	beq.n	8003b18 <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af2:	2324      	movs	r3, #36	; 0x24
 8003af4:	7033      	strb	r3, [r6, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003af6:	682b      	ldr	r3, [r5, #0]
 8003af8:	3801      	subs	r0, #1
 8003afa:	681d      	ldr	r5, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003afc:	4f0b      	ldr	r7, [pc, #44]	; (8003b2c <HAL_I2CEx_ConfigDigitalFilter+0x80>)
    __HAL_I2C_DISABLE(hi2c);
 8003afe:	4385      	bics	r5, r0
 8003b00:	601d      	str	r5, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003b02:	681d      	ldr	r5, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003b04:	0224      	lsls	r4, r4, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003b06:	403d      	ands	r5, r7
    tmpreg |= DigitalFilter << 8U;
 8003b08:	432c      	orrs	r4, r5
    hi2c->Instance->CR1 = tmpreg;
 8003b0a:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003b0c:	681c      	ldr	r4, [r3, #0]
 8003b0e:	4320      	orrs	r0, r4
 8003b10:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003b12:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	7032      	strb	r2, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003b16:	7008      	strb	r0, [r1, #0]
  }
}
 8003b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	40005400 	.word	0x40005400
 8003b20:	40005800 	.word	0x40005800
 8003b24:	40007800 	.word	0x40007800
 8003b28:	080067ac 	.word	0x080067ac
 8003b2c:	fffff0ff 	.word	0xfffff0ff

08003b30 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b30:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8003b34:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8003b36:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	2a08      	cmp	r2, #8
 8003b3c:	d026      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x5c>
 8003b3e:	2a0c      	cmp	r2, #12
 8003b40:	d006      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x20>
 8003b42:	2a04      	cmp	r2, #4
 8003b44:	d11a      	bne.n	8003b7c <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	06db      	lsls	r3, r3, #27
 8003b4a:	d421      	bmi.n	8003b90 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003b4c:	4812      	ldr	r0, [pc, #72]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003b4e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b50:	028a      	lsls	r2, r1, #10
 8003b52:	4812      	ldr	r0, [pc, #72]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x6c>)
 8003b54:	0f12      	lsrs	r2, r2, #28
 8003b56:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b58:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b5a:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b5c:	0f89      	lsrs	r1, r1, #30
 8003b5e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b60:	03c0      	lsls	r0, r0, #15
 8003b62:	d504      	bpl.n	8003b6e <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8003b64:	480e      	ldr	r0, [pc, #56]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003b66:	4350      	muls	r0, r2
 8003b68:	f7fc faea 	bl	8000140 <__udivsi3>
 8003b6c:	e7ef      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	06db      	lsls	r3, r3, #27
 8003b72:	d501      	bpl.n	8003b78 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003b74:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x74>)
 8003b76:	e7f6      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8003b78:	4807      	ldr	r0, [pc, #28]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x68>)
 8003b7a:	e7f4      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b7c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b7e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b80:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b86:	3301      	adds	r3, #1
 8003b88:	4098      	lsls	r0, r3
 8003b8a:	e7e0      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8003b8c:	4804      	ldr	r0, [pc, #16]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x70>)
 8003b8e:	e7de      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8003b90:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8003b92:	e7dc      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1e>
 8003b94:	40021000 	.word	0x40021000
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	080068cc 	.word	0x080068cc
 8003ba0:	007a1200 	.word	0x007a1200
 8003ba4:	003d0900 	.word	0x003d0900

08003ba8 <HAL_RCC_OscConfig>:
{
 8003ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003baa:	0005      	movs	r5, r0
 8003bac:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003bb2:	2001      	movs	r0, #1
}
 8003bb4:	b007      	add	sp, #28
 8003bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003bb8:	6803      	ldr	r3, [r0, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d006      	beq.n	8003bcc <HAL_RCC_OscConfig+0x24>
 8003bbe:	069b      	lsls	r3, r3, #26
 8003bc0:	d104      	bne.n	8003bcc <HAL_RCC_OscConfig+0x24>
 8003bc2:	21b0      	movs	r1, #176	; 0xb0
 8003bc4:	48c7      	ldr	r0, [pc, #796]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003bc6:	0049      	lsls	r1, r1, #1
 8003bc8:	f001 ff85 	bl	8005ad6 <assert_failed>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bcc:	230c      	movs	r3, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bce:	2780      	movs	r7, #128	; 0x80
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd0:	4cc5      	ldr	r4, [pc, #788]	; (8003ee8 <HAL_RCC_OscConfig+0x340>)
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd2:	027f      	lsls	r7, r7, #9
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd4:	68e2      	ldr	r2, [r4, #12]
 8003bd6:	401a      	ands	r2, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd8:	68e3      	ldr	r3, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bda:	9201      	str	r2, [sp, #4]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bdc:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	07db      	lsls	r3, r3, #31
 8003be2:	d464      	bmi.n	8003cae <HAL_RCC_OscConfig+0x106>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	079b      	lsls	r3, r3, #30
 8003be8:	d500      	bpl.n	8003bec <HAL_RCC_OscConfig+0x44>
 8003bea:	e0c0      	b.n	8003d6e <HAL_RCC_OscConfig+0x1c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	06db      	lsls	r3, r3, #27
 8003bf0:	d543      	bpl.n	8003c7a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003bf2:	9b01      	ldr	r3, [sp, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d000      	beq.n	8003bfa <HAL_RCC_OscConfig+0x52>
 8003bf8:	e12d      	b.n	8003e56 <HAL_RCC_OscConfig+0x2ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	059b      	lsls	r3, r3, #22
 8003bfe:	d502      	bpl.n	8003c06 <HAL_RCC_OscConfig+0x5e>
 8003c00:	69eb      	ldr	r3, [r5, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0d5      	beq.n	8003bb2 <HAL_RCC_OscConfig+0xa>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003c06:	6a2b      	ldr	r3, [r5, #32]
 8003c08:	2bff      	cmp	r3, #255	; 0xff
 8003c0a:	d904      	bls.n	8003c16 <HAL_RCC_OscConfig+0x6e>
 8003c0c:	2180      	movs	r1, #128	; 0x80
 8003c0e:	48b5      	ldr	r0, [pc, #724]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003c10:	0089      	lsls	r1, r1, #2
 8003c12:	f001 ff60 	bl	8005ad6 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c18:	4ab4      	ldr	r2, [pc, #720]	; (8003eec <HAL_RCC_OscConfig+0x344>)
 8003c1a:	49b5      	ldr	r1, [pc, #724]	; (8003ef0 <HAL_RCC_OscConfig+0x348>)
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	420b      	tst	r3, r1
 8003c20:	d00b      	beq.n	8003c3a <HAL_RCC_OscConfig+0x92>
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	0209      	lsls	r1, r1, #8
 8003c26:	428a      	cmp	r2, r1
 8003c28:	d007      	beq.n	8003c3a <HAL_RCC_OscConfig+0x92>
 8003c2a:	22c0      	movs	r2, #192	; 0xc0
 8003c2c:	0212      	lsls	r2, r2, #8
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_OscConfig+0x92>
 8003c32:	49b0      	ldr	r1, [pc, #704]	; (8003ef4 <HAL_RCC_OscConfig+0x34c>)
 8003c34:	48ab      	ldr	r0, [pc, #684]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003c36:	f001 ff4e 	bl	8005ad6 <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	49ae      	ldr	r1, [pc, #696]	; (8003ef8 <HAL_RCC_OscConfig+0x350>)
 8003c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c40:	400a      	ands	r2, r1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c46:	6861      	ldr	r1, [r4, #4]
 8003c48:	6a2a      	ldr	r2, [r5, #32]
 8003c4a:	0209      	lsls	r1, r1, #8
 8003c4c:	0a09      	lsrs	r1, r1, #8
 8003c4e:	0612      	lsls	r2, r2, #24
 8003c50:	430a      	orrs	r2, r1
 8003c52:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	0b5b      	lsrs	r3, r3, #13
 8003c58:	3301      	adds	r3, #1
 8003c5a:	0212      	lsls	r2, r2, #8
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c60:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c62:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c64:	060a      	lsls	r2, r1, #24
 8003c66:	49a5      	ldr	r1, [pc, #660]	; (8003efc <HAL_RCC_OscConfig+0x354>)
 8003c68:	0f12      	lsrs	r2, r2, #28
 8003c6a:	5c8a      	ldrb	r2, [r1, r2]
 8003c6c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c6e:	4aa4      	ldr	r2, [pc, #656]	; (8003f00 <HAL_RCC_OscConfig+0x358>)
 8003c70:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c72:	f7fe fb39 	bl	80022e8 <HAL_InitTick>
        if(status != HAL_OK)
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d19c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	d500      	bpl.n	8003c82 <HAL_RCC_OscConfig+0xda>
 8003c80:	e15b      	b.n	8003f3a <HAL_RCC_OscConfig+0x392>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	075b      	lsls	r3, r3, #29
 8003c86:	d500      	bpl.n	8003c8a <HAL_RCC_OscConfig+0xe2>
 8003c88:	e184      	b.n	8003f94 <HAL_RCC_OscConfig+0x3ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c8a:	682b      	ldr	r3, [r5, #0]
 8003c8c:	069b      	lsls	r3, r3, #26
 8003c8e:	d500      	bpl.n	8003c92 <HAL_RCC_OscConfig+0xea>
 8003c90:	e1fd      	b.n	800408e <HAL_RCC_OscConfig+0x4e6>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c92:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d904      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xfa>
 8003c98:	21ba      	movs	r1, #186	; 0xba
 8003c9a:	4892      	ldr	r0, [pc, #584]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003c9c:	0089      	lsls	r1, r1, #2
 8003c9e:	f001 ff1a 	bl	8005ad6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d000      	beq.n	8003caa <HAL_RCC_OscConfig+0x102>
 8003ca8:	e22b      	b.n	8004102 <HAL_RCC_OscConfig+0x55a>
  return HAL_OK;
 8003caa:	2000      	movs	r0, #0
 8003cac:	e782      	b.n	8003bb4 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003cae:	686b      	ldr	r3, [r5, #4]
 8003cb0:	4e94      	ldr	r6, [pc, #592]	; (8003f04 <HAL_RCC_OscConfig+0x35c>)
 8003cb2:	4233      	tst	r3, r6
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x120>
 8003cb6:	22a0      	movs	r2, #160	; 0xa0
 8003cb8:	02d2      	lsls	r2, r2, #11
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x120>
 8003cbe:	216a      	movs	r1, #106	; 0x6a
 8003cc0:	4888      	ldr	r0, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003cc2:	31ff      	adds	r1, #255	; 0xff
 8003cc4:	f001 ff07 	bl	8005ad6 <assert_failed>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cc8:	9b01      	ldr	r3, [sp, #4]
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x12e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d108      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x13c>
 8003cd2:	2f00      	cmp	r7, #0
 8003cd4:	d006      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x13c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	039b      	lsls	r3, r3, #14
 8003cda:	d583      	bpl.n	8003be4 <HAL_RCC_OscConfig+0x3c>
 8003cdc:	686b      	ldr	r3, [r5, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d180      	bne.n	8003be4 <HAL_RCC_OscConfig+0x3c>
 8003ce2:	e766      	b.n	8003bb2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce4:	2180      	movs	r1, #128	; 0x80
 8003ce6:	686b      	ldr	r3, [r5, #4]
 8003ce8:	0249      	lsls	r1, r1, #9
 8003cea:	428b      	cmp	r3, r1
 8003cec:	d114      	bne.n	8003d18 <HAL_RCC_OscConfig+0x170>
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fb2c 	bl	8002350 <HAL_GetTick>
 8003cf8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cfa:	2280      	movs	r2, #128	; 0x80
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	0292      	lsls	r2, r2, #10
 8003d00:	4213      	tst	r3, r2
 8003d02:	d000      	beq.n	8003d06 <HAL_RCC_OscConfig+0x15e>
 8003d04:	e76e      	b.n	8003be4 <HAL_RCC_OscConfig+0x3c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d06:	f7fe fb23 	bl	8002350 <HAL_GetTick>
 8003d0a:	23fa      	movs	r3, #250	; 0xfa
 8003d0c:	1b80      	subs	r0, r0, r6
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4298      	cmp	r0, r3
 8003d12:	d9f2      	bls.n	8003cfa <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 8003d14:	2003      	movs	r0, #3
 8003d16:	e74d      	b.n	8003bb4 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d18:	22a0      	movs	r2, #160	; 0xa0
 8003d1a:	02d2      	lsls	r2, r2, #11
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d108      	bne.n	8003d32 <HAL_RCC_OscConfig+0x18a>
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	02db      	lsls	r3, r3, #11
 8003d26:	4313      	orrs	r3, r2
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	6022      	str	r2, [r4, #0]
 8003d30:	e7e0      	b.n	8003cf4 <HAL_RCC_OscConfig+0x14c>
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	4016      	ands	r6, r2
 8003d36:	6026      	str	r6, [r4, #0]
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	9205      	str	r2, [sp, #20]
 8003d3e:	9a05      	ldr	r2, [sp, #20]
 8003d40:	4971      	ldr	r1, [pc, #452]	; (8003f08 <HAL_RCC_OscConfig+0x360>)
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	400a      	ands	r2, r1
 8003d46:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1d3      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x14c>
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fb00 	bl	8002350 <HAL_GetTick>
 8003d50:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d52:	2280      	movs	r2, #128	; 0x80
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	0292      	lsls	r2, r2, #10
 8003d58:	4213      	tst	r3, r2
 8003d5a:	d100      	bne.n	8003d5e <HAL_RCC_OscConfig+0x1b6>
 8003d5c:	e742      	b.n	8003be4 <HAL_RCC_OscConfig+0x3c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d5e:	f7fe faf7 	bl	8002350 <HAL_GetTick>
 8003d62:	23fa      	movs	r3, #250	; 0xfa
 8003d64:	1b80      	subs	r0, r0, r6
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4298      	cmp	r0, r3
 8003d6a:	d9f2      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1aa>
 8003d6c:	e7d2      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003d6e:	2320      	movs	r3, #32
 8003d70:	68ea      	ldr	r2, [r5, #12]
 8003d72:	439a      	bics	r2, r3
 8003d74:	2a01      	cmp	r2, #1
 8003d76:	d906      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1de>
 8003d78:	2a09      	cmp	r2, #9
 8003d7a:	d004      	beq.n	8003d86 <HAL_RCC_OscConfig+0x1de>
 8003d7c:	21ce      	movs	r1, #206	; 0xce
 8003d7e:	4859      	ldr	r0, [pc, #356]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003d80:	0049      	lsls	r1, r1, #1
 8003d82:	f001 fea8 	bl	8005ad6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003d86:	692b      	ldr	r3, [r5, #16]
 8003d88:	2b1f      	cmp	r3, #31
 8003d8a:	d904      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1ee>
 8003d8c:	219e      	movs	r1, #158	; 0x9e
 8003d8e:	4855      	ldr	r0, [pc, #340]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003d90:	31ff      	adds	r1, #255	; 0xff
 8003d92:	f001 fea0 	bl	8005ad6 <assert_failed>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003d96:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003d98:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003d9a:	4213      	tst	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1fe>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003d9e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003da0:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003da2:	4311      	orrs	r1, r2
 8003da4:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003da6:	9a01      	ldr	r2, [sp, #4]
 8003da8:	2a04      	cmp	r2, #4
 8003daa:	d003      	beq.n	8003db4 <HAL_RCC_OscConfig+0x20c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dac:	2a0c      	cmp	r2, #12
 8003dae:	d124      	bne.n	8003dfa <HAL_RCC_OscConfig+0x252>
 8003db0:	2f00      	cmp	r7, #0
 8003db2:	d122      	bne.n	8003dfa <HAL_RCC_OscConfig+0x252>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	0752      	lsls	r2, r2, #29
 8003db8:	d502      	bpl.n	8003dc0 <HAL_RCC_OscConfig+0x218>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d100      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x218>
 8003dbe:	e6f8      	b.n	8003bb2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc0:	6861      	ldr	r1, [r4, #4]
 8003dc2:	692a      	ldr	r2, [r5, #16]
 8003dc4:	4851      	ldr	r0, [pc, #324]	; (8003f0c <HAL_RCC_OscConfig+0x364>)
 8003dc6:	0212      	lsls	r2, r2, #8
 8003dc8:	4001      	ands	r1, r0
 8003dca:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003dcc:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003dd0:	6822      	ldr	r2, [r4, #0]
 8003dd2:	438a      	bics	r2, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dd8:	f7ff feaa 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003ddc:	68e3      	ldr	r3, [r4, #12]
 8003dde:	4a47      	ldr	r2, [pc, #284]	; (8003efc <HAL_RCC_OscConfig+0x354>)
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	0f1b      	lsrs	r3, r3, #28
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	40d8      	lsrs	r0, r3
 8003de8:	4b45      	ldr	r3, [pc, #276]	; (8003f00 <HAL_RCC_OscConfig+0x358>)
 8003dea:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f7fe fa7b 	bl	80022e8 <HAL_InitTick>
      if(status != HAL_OK)
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d100      	bne.n	8003df8 <HAL_RCC_OscConfig+0x250>
 8003df6:	e6f9      	b.n	8003bec <HAL_RCC_OscConfig+0x44>
 8003df8:	e6dc      	b.n	8003bb4 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d019      	beq.n	8003e32 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003dfe:	2109      	movs	r1, #9
 8003e00:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e02:	2704      	movs	r7, #4
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e04:	438a      	bics	r2, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e0a:	f7fe faa1 	bl	8002350 <HAL_GetTick>
 8003e0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	423b      	tst	r3, r7
 8003e14:	d007      	beq.n	8003e26 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	6862      	ldr	r2, [r4, #4]
 8003e18:	692b      	ldr	r3, [r5, #16]
 8003e1a:	493c      	ldr	r1, [pc, #240]	; (8003f0c <HAL_RCC_OscConfig+0x364>)
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	400a      	ands	r2, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	6063      	str	r3, [r4, #4]
 8003e24:	e6e2      	b.n	8003bec <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e26:	f7fe fa93 	bl	8002350 <HAL_GetTick>
 8003e2a:	1b80      	subs	r0, r0, r6
 8003e2c:	2802      	cmp	r0, #2
 8003e2e:	d9ef      	bls.n	8003e10 <HAL_RCC_OscConfig+0x268>
 8003e30:	e770      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI_DISABLE();
 8003e32:	2201      	movs	r2, #1
 8003e34:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e36:	2704      	movs	r7, #4
        __HAL_RCC_HSI_DISABLE();
 8003e38:	4393      	bics	r3, r2
 8003e3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fa88 	bl	8002350 <HAL_GetTick>
 8003e40:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	423b      	tst	r3, r7
 8003e46:	d100      	bne.n	8003e4a <HAL_RCC_OscConfig+0x2a2>
 8003e48:	e6d0      	b.n	8003bec <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e4a:	f7fe fa81 	bl	8002350 <HAL_GetTick>
 8003e4e:	1b80      	subs	r0, r0, r6
 8003e50:	2802      	cmp	r0, #2
 8003e52:	d9f6      	bls.n	8003e42 <HAL_RCC_OscConfig+0x29a>
 8003e54:	e75e      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8003e56:	69eb      	ldr	r3, [r5, #28]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d904      	bls.n	8003e66 <HAL_RCC_OscConfig+0x2be>
 8003e5c:	2186      	movs	r1, #134	; 0x86
 8003e5e:	4821      	ldr	r0, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003e60:	0089      	lsls	r1, r1, #2
 8003e62:	f001 fe38 	bl	8005ad6 <assert_failed>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e66:	69eb      	ldr	r3, [r5, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d053      	beq.n	8003f14 <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	6822      	ldr	r2, [r4, #0]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4313      	orrs	r3, r2
 8003e74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e76:	f7fe fa6b 	bl	8002350 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e7a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003e7c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e7e:	00bf      	lsls	r7, r7, #2
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	423b      	tst	r3, r7
 8003e84:	d027      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x32e>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003e86:	6a2b      	ldr	r3, [r5, #32]
 8003e88:	2bff      	cmp	r3, #255	; 0xff
 8003e8a:	d904      	bls.n	8003e96 <HAL_RCC_OscConfig+0x2ee>
 8003e8c:	218b      	movs	r1, #139	; 0x8b
 8003e8e:	4815      	ldr	r0, [pc, #84]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003e90:	0089      	lsls	r1, r1, #2
 8003e92:	f001 fe20 	bl	8005ad6 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <HAL_RCC_OscConfig+0x344>)
 8003e9a:	4915      	ldr	r1, [pc, #84]	; (8003ef0 <HAL_RCC_OscConfig+0x348>)
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	420b      	tst	r3, r1
 8003ea0:	d00b      	beq.n	8003eba <HAL_RCC_OscConfig+0x312>
 8003ea2:	2180      	movs	r1, #128	; 0x80
 8003ea4:	0209      	lsls	r1, r1, #8
 8003ea6:	428a      	cmp	r2, r1
 8003ea8:	d007      	beq.n	8003eba <HAL_RCC_OscConfig+0x312>
 8003eaa:	22c0      	movs	r2, #192	; 0xc0
 8003eac:	0212      	lsls	r2, r2, #8
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_OscConfig+0x312>
 8003eb2:	4917      	ldr	r1, [pc, #92]	; (8003f10 <HAL_RCC_OscConfig+0x368>)
 8003eb4:	480b      	ldr	r0, [pc, #44]	; (8003ee4 <HAL_RCC_OscConfig+0x33c>)
 8003eb6:	f001 fe0e 	bl	8005ad6 <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eba:	6863      	ldr	r3, [r4, #4]
 8003ebc:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <HAL_RCC_OscConfig+0x350>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	6a2b      	ldr	r3, [r5, #32]
 8003eca:	0212      	lsls	r2, r2, #8
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	0a12      	lsrs	r2, r2, #8
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	6063      	str	r3, [r4, #4]
 8003ed4:	e6d1      	b.n	8003c7a <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed6:	f7fe fa3b 	bl	8002350 <HAL_GetTick>
 8003eda:	1b80      	subs	r0, r0, r6
 8003edc:	2802      	cmp	r0, #2
 8003ede:	d9cf      	bls.n	8003e80 <HAL_RCC_OscConfig+0x2d8>
 8003ee0:	e718      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	080067e7 	.word	0x080067e7
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	ffffdfff 	.word	0xffffdfff
 8003ef0:	ffff9fff 	.word	0xffff9fff
 8003ef4:	00000201 	.word	0x00000201
 8003ef8:	ffff1fff 	.word	0xffff1fff
 8003efc:	080068b4 	.word	0x080068b4
 8003f00:	20000000 	.word	0x20000000
 8003f04:	fffeffff 	.word	0xfffeffff
 8003f08:	fffbffff 	.word	0xfffbffff
 8003f0c:	ffffe0ff 	.word	0xffffe0ff
 8003f10:	0000022d 	.word	0x0000022d
        __HAL_RCC_MSI_DISABLE();
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	4ac0      	ldr	r2, [pc, #768]	; (8004218 <HAL_RCC_OscConfig+0x670>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f18:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f1e:	f7fe fa17 	bl	8002350 <HAL_GetTick>
 8003f22:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f24:	00bf      	lsls	r7, r7, #2
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	423b      	tst	r3, r7
 8003f2a:	d100      	bne.n	8003f2e <HAL_RCC_OscConfig+0x386>
 8003f2c:	e6a5      	b.n	8003c7a <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fa0f 	bl	8002350 <HAL_GetTick>
 8003f32:	1b80      	subs	r0, r0, r6
 8003f34:	2802      	cmp	r0, #2
 8003f36:	d9f6      	bls.n	8003f26 <HAL_RCC_OscConfig+0x37e>
 8003f38:	e6ec      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003f3a:	696b      	ldr	r3, [r5, #20]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d903      	bls.n	8003f48 <HAL_RCC_OscConfig+0x3a0>
 8003f40:	49b6      	ldr	r1, [pc, #728]	; (800421c <HAL_RCC_OscConfig+0x674>)
 8003f42:	48b7      	ldr	r0, [pc, #732]	; (8004220 <HAL_RCC_OscConfig+0x678>)
 8003f44:	f001 fdc7 	bl	8005ad6 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f48:	696a      	ldr	r2, [r5, #20]
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	2a00      	cmp	r2, #0
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_LSI_ENABLE();
 8003f50:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f52:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003f54:	4313      	orrs	r3, r2
 8003f56:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f58:	f7fe f9fa 	bl	8002350 <HAL_GetTick>
 8003f5c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f60:	423b      	tst	r3, r7
 8003f62:	d000      	beq.n	8003f66 <HAL_RCC_OscConfig+0x3be>
 8003f64:	e68d      	b.n	8003c82 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fe f9f3 	bl	8002350 <HAL_GetTick>
 8003f6a:	1b80      	subs	r0, r0, r6
 8003f6c:	2802      	cmp	r0, #2
 8003f6e:	d9f6      	bls.n	8003f5e <HAL_RCC_OscConfig+0x3b6>
 8003f70:	e6d0      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_LSI_DISABLE();
 8003f72:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f74:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003f76:	439a      	bics	r2, r3
 8003f78:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003f7a:	f7fe f9e9 	bl	8002350 <HAL_GetTick>
 8003f7e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f82:	423b      	tst	r3, r7
 8003f84:	d100      	bne.n	8003f88 <HAL_RCC_OscConfig+0x3e0>
 8003f86:	e67c      	b.n	8003c82 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe f9e2 	bl	8002350 <HAL_GetTick>
 8003f8c:	1b80      	subs	r0, r0, r6
 8003f8e:	2802      	cmp	r0, #2
 8003f90:	d9f6      	bls.n	8003f80 <HAL_RCC_OscConfig+0x3d8>
 8003f92:	e6bf      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003f94:	68ab      	ldr	r3, [r5, #8]
 8003f96:	4aa0      	ldr	r2, [pc, #640]	; (8004218 <HAL_RCC_OscConfig+0x670>)
 8003f98:	4213      	tst	r3, r2
 8003f9a:	d007      	beq.n	8003fac <HAL_RCC_OscConfig+0x404>
 8003f9c:	22a0      	movs	r2, #160	; 0xa0
 8003f9e:	00d2      	lsls	r2, r2, #3
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <HAL_RCC_OscConfig+0x404>
 8003fa4:	499f      	ldr	r1, [pc, #636]	; (8004224 <HAL_RCC_OscConfig+0x67c>)
 8003fa6:	489e      	ldr	r0, [pc, #632]	; (8004220 <HAL_RCC_OscConfig+0x678>)
 8003fa8:	f001 fd95 	bl	8005ad6 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fac:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fb2:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003fb4:	9102      	str	r1, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb6:	421a      	tst	r2, r3
 8003fb8:	d104      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	9302      	str	r3, [sp, #8]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	2780      	movs	r7, #128	; 0x80
 8003fc6:	4e98      	ldr	r6, [pc, #608]	; (8004228 <HAL_RCC_OscConfig+0x680>)
 8003fc8:	007f      	lsls	r7, r7, #1
 8003fca:	6833      	ldr	r3, [r6, #0]
 8003fcc:	423b      	tst	r3, r7
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	68ab      	ldr	r3, [r5, #8]
 8003fd4:	0052      	lsls	r2, r2, #1
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d113      	bne.n	8004002 <HAL_RCC_OscConfig+0x45a>
 8003fda:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	6523      	str	r3, [r4, #80]	; 0x50
 8003fe0:	e034      	b.n	800404c <HAL_RCC_OscConfig+0x4a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe2:	6833      	ldr	r3, [r6, #0]
 8003fe4:	433b      	orrs	r3, r7
 8003fe6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003fe8:	f7fe f9b2 	bl	8002350 <HAL_GetTick>
 8003fec:	9003      	str	r0, [sp, #12]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fee:	6833      	ldr	r3, [r6, #0]
 8003ff0:	423b      	tst	r3, r7
 8003ff2:	d1ed      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x428>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff4:	f7fe f9ac 	bl	8002350 <HAL_GetTick>
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	1ac0      	subs	r0, r0, r3
 8003ffc:	2864      	cmp	r0, #100	; 0x64
 8003ffe:	d9f6      	bls.n	8003fee <HAL_RCC_OscConfig+0x446>
 8004000:	e688      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004002:	2b00      	cmp	r3, #0
 8004004:	d116      	bne.n	8004034 <HAL_RCC_OscConfig+0x48c>
 8004006:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004008:	4a83      	ldr	r2, [pc, #524]	; (8004218 <HAL_RCC_OscConfig+0x670>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800400a:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	4013      	ands	r3, r2
 800400e:	6523      	str	r3, [r4, #80]	; 0x50
 8004010:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004012:	4a86      	ldr	r2, [pc, #536]	; (800422c <HAL_RCC_OscConfig+0x684>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004014:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004016:	4013      	ands	r3, r2
 8004018:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800401a:	f7fe f999 	bl	8002350 <HAL_GetTick>
 800401e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004020:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004022:	423b      	tst	r3, r7
 8004024:	d02a      	beq.n	800407c <HAL_RCC_OscConfig+0x4d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fe f993 	bl	8002350 <HAL_GetTick>
 800402a:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_OscConfig+0x688>)
 800402c:	1b80      	subs	r0, r0, r6
 800402e:	4298      	cmp	r0, r3
 8004030:	d9f6      	bls.n	8004020 <HAL_RCC_OscConfig+0x478>
 8004032:	e66f      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	21a0      	movs	r1, #160	; 0xa0
 8004036:	00c9      	lsls	r1, r1, #3
 8004038:	428b      	cmp	r3, r1
 800403a:	d10d      	bne.n	8004058 <HAL_RCC_OscConfig+0x4b0>
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	430b      	orrs	r3, r1
 8004044:	6523      	str	r3, [r4, #80]	; 0x50
 8004046:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004048:	431a      	orrs	r2, r3
 800404a:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800404c:	f7fe f980 	bl	8002350 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004050:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8004052:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004054:	00bf      	lsls	r7, r7, #2
 8004056:	e00e      	b.n	8004076 <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004058:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800405a:	4a6f      	ldr	r2, [pc, #444]	; (8004218 <HAL_RCC_OscConfig+0x670>)
 800405c:	4013      	ands	r3, r2
 800405e:	6523      	str	r3, [r4, #80]	; 0x50
 8004060:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004062:	4a72      	ldr	r2, [pc, #456]	; (800422c <HAL_RCC_OscConfig+0x684>)
 8004064:	4013      	ands	r3, r2
 8004066:	e7ba      	b.n	8003fde <HAL_RCC_OscConfig+0x436>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fe f972 	bl	8002350 <HAL_GetTick>
 800406c:	4b70      	ldr	r3, [pc, #448]	; (8004230 <HAL_RCC_OscConfig+0x688>)
 800406e:	1b80      	subs	r0, r0, r6
 8004070:	4298      	cmp	r0, r3
 8004072:	d900      	bls.n	8004076 <HAL_RCC_OscConfig+0x4ce>
 8004074:	e64e      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004076:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004078:	423b      	tst	r3, r7
 800407a:	d0f5      	beq.n	8004068 <HAL_RCC_OscConfig+0x4c0>
    if(pwrclkchanged == SET)
 800407c:	9b02      	ldr	r3, [sp, #8]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d000      	beq.n	8004084 <HAL_RCC_OscConfig+0x4dc>
 8004082:	e602      	b.n	8003c8a <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004086:	4a6b      	ldr	r2, [pc, #428]	; (8004234 <HAL_RCC_OscConfig+0x68c>)
 8004088:	4013      	ands	r3, r2
 800408a:	63a3      	str	r3, [r4, #56]	; 0x38
 800408c:	e5fd      	b.n	8003c8a <HAL_RCC_OscConfig+0xe2>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800408e:	69ab      	ldr	r3, [r5, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d903      	bls.n	800409c <HAL_RCC_OscConfig+0x4f4>
 8004094:	4968      	ldr	r1, [pc, #416]	; (8004238 <HAL_RCC_OscConfig+0x690>)
 8004096:	4862      	ldr	r0, [pc, #392]	; (8004220 <HAL_RCC_OscConfig+0x678>)
 8004098:	f001 fd1d 	bl	8005ad6 <assert_failed>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800409c:	69a9      	ldr	r1, [r5, #24]
 800409e:	2301      	movs	r3, #1
 80040a0:	4a66      	ldr	r2, [pc, #408]	; (800423c <HAL_RCC_OscConfig+0x694>)
 80040a2:	2900      	cmp	r1, #0
 80040a4:	d018      	beq.n	80040d8 <HAL_RCC_OscConfig+0x530>
        __HAL_RCC_HSI48_ENABLE();
 80040a6:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040a8:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 80040aa:	4319      	orrs	r1, r3
 80040ac:	60a1      	str	r1, [r4, #8]
 80040ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6363      	str	r3, [r4, #52]	; 0x34
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	6a11      	ldr	r1, [r2, #32]
 80040b8:	019b      	lsls	r3, r3, #6
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80040be:	f7fe f947 	bl	8002350 <HAL_GetTick>
 80040c2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040c4:	68a3      	ldr	r3, [r4, #8]
 80040c6:	423b      	tst	r3, r7
 80040c8:	d000      	beq.n	80040cc <HAL_RCC_OscConfig+0x524>
 80040ca:	e5e2      	b.n	8003c92 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040cc:	f7fe f940 	bl	8002350 <HAL_GetTick>
 80040d0:	1b80      	subs	r0, r0, r6
 80040d2:	2802      	cmp	r0, #2
 80040d4:	d9f6      	bls.n	80040c4 <HAL_RCC_OscConfig+0x51c>
 80040d6:	e61d      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI48_DISABLE();
 80040d8:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040da:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_DISABLE();
 80040dc:	4399      	bics	r1, r3
 80040de:	60a1      	str	r1, [r4, #8]
 80040e0:	6a13      	ldr	r3, [r2, #32]
 80040e2:	4957      	ldr	r1, [pc, #348]	; (8004240 <HAL_RCC_OscConfig+0x698>)
 80040e4:	400b      	ands	r3, r1
 80040e6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80040e8:	f7fe f932 	bl	8002350 <HAL_GetTick>
 80040ec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	423b      	tst	r3, r7
 80040f2:	d100      	bne.n	80040f6 <HAL_RCC_OscConfig+0x54e>
 80040f4:	e5cd      	b.n	8003c92 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040f6:	f7fe f92b 	bl	8002350 <HAL_GetTick>
 80040fa:	1b80      	subs	r0, r0, r6
 80040fc:	2802      	cmp	r0, #2
 80040fe:	d9f6      	bls.n	80040ee <HAL_RCC_OscConfig+0x546>
 8004100:	e608      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004102:	9a01      	ldr	r2, [sp, #4]
 8004104:	2a0c      	cmp	r2, #12
 8004106:	d06a      	beq.n	80041de <HAL_RCC_OscConfig+0x636>
 8004108:	4e4e      	ldr	r6, [pc, #312]	; (8004244 <HAL_RCC_OscConfig+0x69c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410a:	2b02      	cmp	r3, #2
 800410c:	d155      	bne.n	80041ba <HAL_RCC_OscConfig+0x612>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800410e:	4b4e      	ldr	r3, [pc, #312]	; (8004248 <HAL_RCC_OscConfig+0x6a0>)
 8004110:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004112:	421a      	tst	r2, r3
 8004114:	d003      	beq.n	800411e <HAL_RCC_OscConfig+0x576>
 8004116:	494d      	ldr	r1, [pc, #308]	; (800424c <HAL_RCC_OscConfig+0x6a4>)
 8004118:	4841      	ldr	r0, [pc, #260]	; (8004220 <HAL_RCC_OscConfig+0x678>)
 800411a:	f001 fcdc 	bl	8005ad6 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800411e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004120:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_RCC_OscConfig+0x6a8>)
 8004122:	4013      	ands	r3, r2
 8004124:	d00b      	beq.n	800413e <HAL_RCC_OscConfig+0x596>
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	0349      	lsls	r1, r1, #13
 800412a:	428b      	cmp	r3, r1
 800412c:	d007      	beq.n	800413e <HAL_RCC_OscConfig+0x596>
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	039b      	lsls	r3, r3, #14
 8004132:	429a      	cmp	r2, r3
 8004134:	d003      	beq.n	800413e <HAL_RCC_OscConfig+0x596>
 8004136:	4947      	ldr	r1, [pc, #284]	; (8004254 <HAL_RCC_OscConfig+0x6ac>)
 8004138:	4839      	ldr	r0, [pc, #228]	; (8004220 <HAL_RCC_OscConfig+0x678>)
 800413a:	f001 fccc 	bl	8005ad6 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 800413e:	2180      	movs	r1, #128	; 0x80
 8004140:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004142:	4b45      	ldr	r3, [pc, #276]	; (8004258 <HAL_RCC_OscConfig+0x6b0>)
 8004144:	03c9      	lsls	r1, r1, #15
 8004146:	4013      	ands	r3, r2
 8004148:	428b      	cmp	r3, r1
 800414a:	d007      	beq.n	800415c <HAL_RCC_OscConfig+0x5b4>
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	429a      	cmp	r2, r3
 8004152:	d003      	beq.n	800415c <HAL_RCC_OscConfig+0x5b4>
 8004154:	4941      	ldr	r1, [pc, #260]	; (800425c <HAL_RCC_OscConfig+0x6b4>)
 8004156:	4832      	ldr	r0, [pc, #200]	; (8004220 <HAL_RCC_OscConfig+0x678>)
 8004158:	f001 fcbd 	bl	8005ad6 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	401e      	ands	r6, r3
 8004160:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 8004162:	f7fe f8f5 	bl	8002350 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004166:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004168:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800416a:	04b6      	lsls	r6, r6, #18
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	4233      	tst	r3, r6
 8004170:	d11d      	bne.n	80041ae <HAL_RCC_OscConfig+0x606>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004172:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004174:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004176:	68e2      	ldr	r2, [r4, #12]
 8004178:	430b      	orrs	r3, r1
 800417a:	4939      	ldr	r1, [pc, #228]	; (8004260 <HAL_RCC_OscConfig+0x6b8>)
 800417c:	400a      	ands	r2, r1
 800417e:	4313      	orrs	r3, r2
 8004180:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004182:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004184:	4313      	orrs	r3, r2
 8004186:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	045b      	lsls	r3, r3, #17
 800418e:	4313      	orrs	r3, r2
 8004190:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004192:	f7fe f8dd 	bl	8002350 <HAL_GetTick>
 8004196:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004198:	04ad      	lsls	r5, r5, #18
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	422b      	tst	r3, r5
 800419e:	d000      	beq.n	80041a2 <HAL_RCC_OscConfig+0x5fa>
 80041a0:	e583      	b.n	8003caa <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fe f8d5 	bl	8002350 <HAL_GetTick>
 80041a6:	1b80      	subs	r0, r0, r6
 80041a8:	2802      	cmp	r0, #2
 80041aa:	d9f6      	bls.n	800419a <HAL_RCC_OscConfig+0x5f2>
 80041ac:	e5b2      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fe f8cf 	bl	8002350 <HAL_GetTick>
 80041b2:	1bc0      	subs	r0, r0, r7
 80041b4:	2802      	cmp	r0, #2
 80041b6:	d9d9      	bls.n	800416c <HAL_RCC_OscConfig+0x5c4>
 80041b8:	e5ac      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 80041ba:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80041bc:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80041be:	401e      	ands	r6, r3
 80041c0:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 80041c2:	f7fe f8c5 	bl	8002350 <HAL_GetTick>
 80041c6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80041c8:	04ad      	lsls	r5, r5, #18
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	422b      	tst	r3, r5
 80041ce:	d100      	bne.n	80041d2 <HAL_RCC_OscConfig+0x62a>
 80041d0:	e56b      	b.n	8003caa <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fe f8bd 	bl	8002350 <HAL_GetTick>
 80041d6:	1b80      	subs	r0, r0, r6
 80041d8:	2802      	cmp	r0, #2
 80041da:	d9f6      	bls.n	80041ca <HAL_RCC_OscConfig+0x622>
 80041dc:	e59a      	b.n	8003d14 <HAL_RCC_OscConfig+0x16c>
        return HAL_ERROR;
 80041de:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d100      	bne.n	80041e6 <HAL_RCC_OscConfig+0x63e>
 80041e4:	e4e6      	b.n	8003bb4 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80041e8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80041ec:	0252      	lsls	r2, r2, #9
 80041ee:	401a      	ands	r2, r3
        return HAL_ERROR;
 80041f0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f2:	428a      	cmp	r2, r1
 80041f4:	d000      	beq.n	80041f8 <HAL_RCC_OscConfig+0x650>
 80041f6:	e4dd      	b.n	8003bb4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80041f8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80041fc:	0392      	lsls	r2, r2, #14
 80041fe:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004200:	428a      	cmp	r2, r1
 8004202:	d000      	beq.n	8004206 <HAL_RCC_OscConfig+0x65e>
 8004204:	e4d6      	b.n	8003bb4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004206:	20c0      	movs	r0, #192	; 0xc0
 8004208:	0400      	lsls	r0, r0, #16
 800420a:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800420c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800420e:	1a18      	subs	r0, r3, r0
 8004210:	1e43      	subs	r3, r0, #1
 8004212:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004214:	b2c0      	uxtb	r0, r0
 8004216:	e4cd      	b.n	8003bb4 <HAL_RCC_OscConfig+0xc>
 8004218:	fffffeff 	.word	0xfffffeff
 800421c:	0000024b 	.word	0x0000024b
 8004220:	080067e7 	.word	0x080067e7
 8004224:	00000277 	.word	0x00000277
 8004228:	40007000 	.word	0x40007000
 800422c:	fffffbff 	.word	0xfffffbff
 8004230:	00001388 	.word	0x00001388
 8004234:	efffffff 	.word	0xefffffff
 8004238:	000002be 	.word	0x000002be
 800423c:	40010000 	.word	0x40010000
 8004240:	ffffdfff 	.word	0xffffdfff
 8004244:	feffffff 	.word	0xfeffffff
 8004248:	fffeffff 	.word	0xfffeffff
 800424c:	000002f1 	.word	0x000002f1
 8004250:	fff3ffff 	.word	0xfff3ffff
 8004254:	000002f2 	.word	0x000002f2
 8004258:	ff7fffff 	.word	0xff7fffff
 800425c:	000002f3 	.word	0x000002f3
 8004260:	ff02ffff 	.word	0xff02ffff

08004264 <HAL_RCC_ClockConfig>:
{
 8004264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004266:	0004      	movs	r4, r0
 8004268:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800426a:	2800      	cmp	r0, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800426e:	2001      	movs	r0, #1
}
 8004270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004272:	6803      	ldr	r3, [r0, #0]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	d103      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1c>
 8004278:	497c      	ldr	r1, [pc, #496]	; (800446c <HAL_RCC_ClockConfig+0x208>)
 800427a:	487d      	ldr	r0, [pc, #500]	; (8004470 <HAL_RCC_ClockConfig+0x20c>)
 800427c:	f001 fc2b 	bl	8005ad6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004280:	2f01      	cmp	r7, #1
 8004282:	d903      	bls.n	800428c <HAL_RCC_ClockConfig+0x28>
 8004284:	497b      	ldr	r1, [pc, #492]	; (8004474 <HAL_RCC_ClockConfig+0x210>)
 8004286:	487a      	ldr	r0, [pc, #488]	; (8004470 <HAL_RCC_ClockConfig+0x20c>)
 8004288:	f001 fc25 	bl	8005ad6 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	2201      	movs	r2, #1
 800428e:	4d7a      	ldr	r5, [pc, #488]	; (8004478 <HAL_RCC_ClockConfig+0x214>)
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	4013      	ands	r3, r2
 8004294:	429f      	cmp	r7, r3
 8004296:	d83a      	bhi.n	800430e <HAL_RCC_ClockConfig+0xaa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	079b      	lsls	r3, r3, #30
 800429c:	d440      	bmi.n	8004320 <HAL_RCC_ClockConfig+0xbc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	07db      	lsls	r3, r3, #31
 80042a2:	d45f      	bmi.n	8004364 <HAL_RCC_ClockConfig+0x100>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a4:	2301      	movs	r3, #1
 80042a6:	682a      	ldr	r2, [r5, #0]
 80042a8:	401a      	ands	r2, r3
 80042aa:	4297      	cmp	r7, r2
 80042ac:	d200      	bcs.n	80042b0 <HAL_RCC_ClockConfig+0x4c>
 80042ae:	e0bb      	b.n	8004428 <HAL_RCC_ClockConfig+0x1c4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	4d72      	ldr	r5, [pc, #456]	; (800447c <HAL_RCC_ClockConfig+0x218>)
 80042b4:	075b      	lsls	r3, r3, #29
 80042b6:	d500      	bpl.n	80042ba <HAL_RCC_ClockConfig+0x56>
 80042b8:	e0be      	b.n	8004438 <HAL_RCC_ClockConfig+0x1d4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	d518      	bpl.n	80042f2 <HAL_RCC_ClockConfig+0x8e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80042c0:	6923      	ldr	r3, [r4, #16]
 80042c2:	4a6f      	ldr	r2, [pc, #444]	; (8004480 <HAL_RCC_ClockConfig+0x21c>)
 80042c4:	4213      	tst	r3, r2
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x80>
 80042c8:	21a0      	movs	r1, #160	; 0xa0
 80042ca:	4a6e      	ldr	r2, [pc, #440]	; (8004484 <HAL_RCC_ClockConfig+0x220>)
 80042cc:	00c9      	lsls	r1, r1, #3
 80042ce:	401a      	ands	r2, r3
 80042d0:	428a      	cmp	r2, r1
 80042d2:	d007      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x80>
 80042d4:	22c0      	movs	r2, #192	; 0xc0
 80042d6:	00d2      	lsls	r2, r2, #3
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x80>
 80042dc:	496a      	ldr	r1, [pc, #424]	; (8004488 <HAL_RCC_ClockConfig+0x224>)
 80042de:	4864      	ldr	r0, [pc, #400]	; (8004470 <HAL_RCC_ClockConfig+0x20c>)
 80042e0:	f001 fbf9 	bl	8005ad6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042e4:	68ea      	ldr	r2, [r5, #12]
 80042e6:	6923      	ldr	r3, [r4, #16]
 80042e8:	4968      	ldr	r1, [pc, #416]	; (800448c <HAL_RCC_ClockConfig+0x228>)
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	400a      	ands	r2, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042f2:	f7ff fc1d 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 80042f6:	68eb      	ldr	r3, [r5, #12]
 80042f8:	4a65      	ldr	r2, [pc, #404]	; (8004490 <HAL_RCC_ClockConfig+0x22c>)
 80042fa:	061b      	lsls	r3, r3, #24
 80042fc:	0f1b      	lsrs	r3, r3, #28
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	40d8      	lsrs	r0, r3
 8004302:	4b64      	ldr	r3, [pc, #400]	; (8004494 <HAL_RCC_ClockConfig+0x230>)
 8004304:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fd ffee 	bl	80022e8 <HAL_InitTick>
 800430c:	e7b0      	b.n	8004270 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	4393      	bics	r3, r2
 8004312:	433b      	orrs	r3, r7
 8004314:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	4013      	ands	r3, r2
 800431a:	429f      	cmp	r7, r3
 800431c:	d1a7      	bne.n	800426e <HAL_RCC_ClockConfig+0xa>
 800431e:	e7bb      	b.n	8004298 <HAL_RCC_ClockConfig+0x34>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004320:	68a3      	ldr	r3, [r4, #8]
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	0019      	movs	r1, r3
 8004326:	4391      	bics	r1, r2
 8004328:	d014      	beq.n	8004354 <HAL_RCC_ClockConfig+0xf0>
 800432a:	2220      	movs	r2, #32
 800432c:	0019      	movs	r1, r3
 800432e:	4391      	bics	r1, r2
 8004330:	2990      	cmp	r1, #144	; 0x90
 8004332:	d00f      	beq.n	8004354 <HAL_RCC_ClockConfig+0xf0>
 8004334:	2240      	movs	r2, #64	; 0x40
 8004336:	0019      	movs	r1, r3
 8004338:	4391      	bics	r1, r2
 800433a:	29a0      	cmp	r1, #160	; 0xa0
 800433c:	d00a      	beq.n	8004354 <HAL_RCC_ClockConfig+0xf0>
 800433e:	2210      	movs	r2, #16
 8004340:	0019      	movs	r1, r3
 8004342:	4391      	bics	r1, r2
 8004344:	29c0      	cmp	r1, #192	; 0xc0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_ClockConfig+0xf0>
 8004348:	2bf0      	cmp	r3, #240	; 0xf0
 800434a:	d003      	beq.n	8004354 <HAL_RCC_ClockConfig+0xf0>
 800434c:	4952      	ldr	r1, [pc, #328]	; (8004498 <HAL_RCC_ClockConfig+0x234>)
 800434e:	4848      	ldr	r0, [pc, #288]	; (8004470 <HAL_RCC_ClockConfig+0x20c>)
 8004350:	f001 fbc1 	bl	8005ad6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004354:	21f0      	movs	r1, #240	; 0xf0
 8004356:	4a49      	ldr	r2, [pc, #292]	; (800447c <HAL_RCC_ClockConfig+0x218>)
 8004358:	68d3      	ldr	r3, [r2, #12]
 800435a:	438b      	bics	r3, r1
 800435c:	68a1      	ldr	r1, [r4, #8]
 800435e:	430b      	orrs	r3, r1
 8004360:	60d3      	str	r3, [r2, #12]
 8004362:	e79c      	b.n	800429e <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004364:	6863      	ldr	r3, [r4, #4]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d903      	bls.n	8004372 <HAL_RCC_ClockConfig+0x10e>
 800436a:	494c      	ldr	r1, [pc, #304]	; (800449c <HAL_RCC_ClockConfig+0x238>)
 800436c:	4840      	ldr	r0, [pc, #256]	; (8004470 <HAL_RCC_ClockConfig+0x20c>)
 800436e:	f001 fbb2 	bl	8005ad6 <assert_failed>
 8004372:	4e42      	ldr	r6, [pc, #264]	; (800447c <HAL_RCC_ClockConfig+0x218>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004374:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004376:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004378:	2a02      	cmp	r2, #2
 800437a:	d11c      	bne.n	80043b6 <HAL_RCC_ClockConfig+0x152>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800437c:	039b      	lsls	r3, r3, #14
 800437e:	d400      	bmi.n	8004382 <HAL_RCC_ClockConfig+0x11e>
 8004380:	e775      	b.n	800426e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004382:	2103      	movs	r1, #3
 8004384:	68f3      	ldr	r3, [r6, #12]
 8004386:	438b      	bics	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800438c:	f7fd ffe0 	bl	8002350 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004390:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004392:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004394:	2b02      	cmp	r3, #2
 8004396:	d11b      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x16c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004398:	220c      	movs	r2, #12
 800439a:	68f3      	ldr	r3, [r6, #12]
 800439c:	4013      	ands	r3, r2
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d100      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x140>
 80043a2:	e77f      	b.n	80042a4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a4:	f7fd ffd4 	bl	8002350 <HAL_GetTick>
 80043a8:	9b01      	ldr	r3, [sp, #4]
 80043aa:	1ac0      	subs	r0, r0, r3
 80043ac:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <HAL_RCC_ClockConfig+0x23c>)
 80043ae:	4298      	cmp	r0, r3
 80043b0:	d9f2      	bls.n	8004398 <HAL_RCC_ClockConfig+0x134>
          return HAL_TIMEOUT;
 80043b2:	2003      	movs	r0, #3
 80043b4:	e75c      	b.n	8004270 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043b6:	2a03      	cmp	r2, #3
 80043b8:	d102      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ba:	019b      	lsls	r3, r3, #6
 80043bc:	d4e1      	bmi.n	8004382 <HAL_RCC_ClockConfig+0x11e>
 80043be:	e756      	b.n	800426e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043c0:	2a01      	cmp	r2, #1
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043c4:	075b      	lsls	r3, r3, #29
 80043c6:	d4dc      	bmi.n	8004382 <HAL_RCC_ClockConfig+0x11e>
 80043c8:	e751      	b.n	800426e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043ca:	059b      	lsls	r3, r3, #22
 80043cc:	d4d9      	bmi.n	8004382 <HAL_RCC_ClockConfig+0x11e>
 80043ce:	e74e      	b.n	800426e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x18c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043d4:	220c      	movs	r2, #12
 80043d6:	68f3      	ldr	r3, [r6, #12]
 80043d8:	4013      	ands	r3, r2
 80043da:	4293      	cmp	r3, r2
 80043dc:	d100      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x17c>
 80043de:	e761      	b.n	80042a4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e0:	f7fd ffb6 	bl	8002350 <HAL_GetTick>
 80043e4:	9b01      	ldr	r3, [sp, #4]
 80043e6:	1ac0      	subs	r0, r0, r3
 80043e8:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <HAL_RCC_ClockConfig+0x23c>)
 80043ea:	4298      	cmp	r0, r3
 80043ec:	d9f2      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x170>
 80043ee:	e7e0      	b.n	80043b2 <HAL_RCC_ClockConfig+0x14e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d013      	beq.n	800441c <HAL_RCC_ClockConfig+0x1b8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80043f4:	220c      	movs	r2, #12
 80043f6:	68f3      	ldr	r3, [r6, #12]
 80043f8:	4213      	tst	r3, r2
 80043fa:	d100      	bne.n	80043fe <HAL_RCC_ClockConfig+0x19a>
 80043fc:	e752      	b.n	80042a4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fe:	f7fd ffa7 	bl	8002350 <HAL_GetTick>
 8004402:	9b01      	ldr	r3, [sp, #4]
 8004404:	1ac0      	subs	r0, r0, r3
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <HAL_RCC_ClockConfig+0x23c>)
 8004408:	4298      	cmp	r0, r3
 800440a:	d9f3      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x190>
 800440c:	e7d1      	b.n	80043b2 <HAL_RCC_ClockConfig+0x14e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440e:	f7fd ff9f 	bl	8002350 <HAL_GetTick>
 8004412:	9b01      	ldr	r3, [sp, #4]
 8004414:	1ac0      	subs	r0, r0, r3
 8004416:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <HAL_RCC_ClockConfig+0x23c>)
 8004418:	4298      	cmp	r0, r3
 800441a:	d8ca      	bhi.n	80043b2 <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800441c:	220c      	movs	r2, #12
 800441e:	68f3      	ldr	r3, [r6, #12]
 8004420:	4013      	ands	r3, r2
 8004422:	2b04      	cmp	r3, #4
 8004424:	d1f3      	bne.n	800440e <HAL_RCC_ClockConfig+0x1aa>
 8004426:	e73d      	b.n	80042a4 <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004428:	682a      	ldr	r2, [r5, #0]
 800442a:	439a      	bics	r2, r3
 800442c:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	682a      	ldr	r2, [r5, #0]
 8004430:	421a      	tst	r2, r3
 8004432:	d000      	beq.n	8004436 <HAL_RCC_ClockConfig+0x1d2>
 8004434:	e71b      	b.n	800426e <HAL_RCC_ClockConfig+0xa>
 8004436:	e73b      	b.n	80042b0 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004438:	68e3      	ldr	r3, [r4, #12]
 800443a:	4a11      	ldr	r2, [pc, #68]	; (8004480 <HAL_RCC_ClockConfig+0x21c>)
 800443c:	4213      	tst	r3, r2
 800443e:	d00d      	beq.n	800445c <HAL_RCC_ClockConfig+0x1f8>
 8004440:	21a0      	movs	r1, #160	; 0xa0
 8004442:	4a10      	ldr	r2, [pc, #64]	; (8004484 <HAL_RCC_ClockConfig+0x220>)
 8004444:	00c9      	lsls	r1, r1, #3
 8004446:	401a      	ands	r2, r3
 8004448:	428a      	cmp	r2, r1
 800444a:	d007      	beq.n	800445c <HAL_RCC_ClockConfig+0x1f8>
 800444c:	22c0      	movs	r2, #192	; 0xc0
 800444e:	00d2      	lsls	r2, r2, #3
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <HAL_RCC_ClockConfig+0x1f8>
 8004454:	4913      	ldr	r1, [pc, #76]	; (80044a4 <HAL_RCC_ClockConfig+0x240>)
 8004456:	4806      	ldr	r0, [pc, #24]	; (8004470 <HAL_RCC_ClockConfig+0x20c>)
 8004458:	f001 fb3d 	bl	8005ad6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800445c:	68eb      	ldr	r3, [r5, #12]
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <HAL_RCC_ClockConfig+0x244>)
 8004460:	4013      	ands	r3, r2
 8004462:	68e2      	ldr	r2, [r4, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60eb      	str	r3, [r5, #12]
 8004468:	e727      	b.n	80042ba <HAL_RCC_ClockConfig+0x56>
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	00000366 	.word	0x00000366
 8004470:	080067e7 	.word	0x080067e7
 8004474:	00000367 	.word	0x00000367
 8004478:	40022000 	.word	0x40022000
 800447c:	40021000 	.word	0x40021000
 8004480:	fffffbff 	.word	0xfffffbff
 8004484:	fffffdff 	.word	0xfffffdff
 8004488:	000003f1 	.word	0x000003f1
 800448c:	ffffc7ff 	.word	0xffffc7ff
 8004490:	080068b4 	.word	0x080068b4
 8004494:	20000000 	.word	0x20000000
 8004498:	0000037e 	.word	0x0000037e
 800449c:	00000385 	.word	0x00000385
 80044a0:	00001388 	.word	0x00001388
 80044a4:	000003ea 	.word	0x000003ea
 80044a8:	fffff8ff 	.word	0xfffff8ff

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80044ae:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	055b      	lsls	r3, r3, #21
 80044b4:	0f5b      	lsrs	r3, r3, #29
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	4a03      	ldr	r2, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80044ba:	6810      	ldr	r0, [r2, #0]
 80044bc:	40d8      	lsrs	r0, r3
}
 80044be:	4770      	bx	lr
 80044c0:	40021000 	.word	0x40021000
 80044c4:	080068c4 	.word	0x080068c4
 80044c8:	20000000 	.word	0x20000000

080044cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	049b      	lsls	r3, r3, #18
 80044d4:	0f5b      	lsrs	r3, r3, #29
 80044d6:	5cd3      	ldrb	r3, [r2, r3]
 80044d8:	4a03      	ldr	r2, [pc, #12]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80044da:	6810      	ldr	r0, [r2, #0]
 80044dc:	40d8      	lsrs	r0, r3
}
 80044de:	4770      	bx	lr
 80044e0:	40021000 	.word	0x40021000
 80044e4:	080068c4 	.word	0x080068c4
 80044e8:	20000000 	.word	0x20000000

080044ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp_reg;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80044ee:	4b93      	ldr	r3, [pc, #588]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80044f0:	6802      	ldr	r2, [r0, #0]
{
 80044f2:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d903      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80044f8:	2167      	movs	r1, #103	; 0x67
 80044fa:	4891      	ldr	r0, [pc, #580]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044fc:	f001 faeb 	bl	8005ad6 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	069b      	lsls	r3, r3, #26
 8004504:	d54d      	bpl.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004506:	6863      	ldr	r3, [r4, #4]
 8004508:	4a8e      	ldr	r2, [pc, #568]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800450a:	4213      	tst	r3, r2
 800450c:	d00d      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800450e:	2198      	movs	r1, #152	; 0x98
 8004510:	4a8d      	ldr	r2, [pc, #564]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004512:	0349      	lsls	r1, r1, #13
 8004514:	401a      	ands	r2, r3
 8004516:	428a      	cmp	r2, r1
 8004518:	d007      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800451a:	228c      	movs	r2, #140	; 0x8c
 800451c:	0392      	lsls	r2, r2, #14
 800451e:	4293      	cmp	r3, r2
 8004520:	d003      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8004522:	2173      	movs	r1, #115	; 0x73
 8004524:	4886      	ldr	r0, [pc, #536]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004526:	f001 fad6 	bl	8005ad6 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800452c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452e:	4d87      	ldr	r5, [pc, #540]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004530:	055b      	lsls	r3, r3, #21
 8004532:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8004534:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	421a      	tst	r2, r3
 8004538:	d104      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x58>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800453c:	4313      	orrs	r3, r2
 800453e:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8004540:	2301      	movs	r3, #1
 8004542:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	2780      	movs	r7, #128	; 0x80
 8004546:	4e82      	ldr	r6, [pc, #520]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004548:	007f      	lsls	r7, r7, #1
 800454a:	6833      	ldr	r3, [r6, #0]
 800454c:	423b      	tst	r3, r7
 800454e:	d100      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004550:	e0af      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004552:	22c0      	movs	r2, #192	; 0xc0
 8004554:	21c0      	movs	r1, #192	; 0xc0
 8004556:	6828      	ldr	r0, [r5, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004558:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800455a:	0392      	lsls	r2, r2, #14
 800455c:	4010      	ands	r0, r2
 800455e:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004560:	401a      	ands	r2, r3
 8004562:	4290      	cmp	r0, r2
 8004564:	d000      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004566:	e0b6      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004568:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800456a:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800456c:	d000      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x84>
 800456e:	e0bd      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x200>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004570:	6861      	ldr	r1, [r4, #4]
 8004572:	23c0      	movs	r3, #192	; 0xc0
 8004574:	000a      	movs	r2, r1
 8004576:	029b      	lsls	r3, r3, #10
 8004578:	401a      	ands	r2, r3
 800457a:	429a      	cmp	r2, r3
 800457c:	d107      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800457e:	682b      	ldr	r3, [r5, #0]
 8004580:	4874      	ldr	r0, [pc, #464]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004582:	4003      	ands	r3, r0
 8004584:	20c0      	movs	r0, #192	; 0xc0
 8004586:	0380      	lsls	r0, r0, #14
 8004588:	4001      	ands	r1, r0
 800458a:	430b      	orrs	r3, r1
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004590:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004592:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004594:	652a      	str	r2, [r5, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004596:	2b01      	cmp	r3, #1
 8004598:	d103      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800459c:	4a6e      	ldr	r2, [pc, #440]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800459e:	4013      	ands	r3, r2
 80045a0:	63ab      	str	r3, [r5, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	07db      	lsls	r3, r3, #31
 80045a6:	d50d      	bpl.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80045a8:	68a3      	ldr	r3, [r4, #8]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d903      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 80045ae:	21de      	movs	r1, #222	; 0xde
 80045b0:	4863      	ldr	r0, [pc, #396]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045b2:	f001 fa90 	bl	8005ad6 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b6:	2103      	movs	r1, #3
 80045b8:	4a64      	ldr	r2, [pc, #400]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80045bc:	438b      	bics	r3, r1
 80045be:	68a1      	ldr	r1, [r4, #8]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	079b      	lsls	r3, r3, #30
 80045c8:	d50e      	bpl.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80045ca:	230c      	movs	r3, #12
 80045cc:	68e2      	ldr	r2, [r4, #12]
 80045ce:	439a      	bics	r2, r3
 80045d0:	d003      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xee>
 80045d2:	21e9      	movs	r1, #233	; 0xe9
 80045d4:	485a      	ldr	r0, [pc, #360]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045d6:	f001 fa7e 	bl	8005ad6 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045da:	210c      	movs	r1, #12
 80045dc:	4a5b      	ldr	r2, [pc, #364]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80045e0:	438b      	bics	r3, r1
 80045e2:	68e1      	ldr	r1, [r4, #12]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	075b      	lsls	r3, r3, #29
 80045ec:	d50d      	bpl.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80045ee:	4d5b      	ldr	r5, [pc, #364]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	422b      	tst	r3, r5
 80045f4:	d003      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 80045f6:	21f3      	movs	r1, #243	; 0xf3
 80045f8:	4851      	ldr	r0, [pc, #324]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045fa:	f001 fa6c 	bl	8005ad6 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045fe:	4a53      	ldr	r2, [pc, #332]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004600:	6921      	ldr	r1, [r4, #16]
 8004602:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004604:	402b      	ands	r3, r5
 8004606:	430b      	orrs	r3, r1
 8004608:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	071b      	lsls	r3, r3, #28
 800460e:	d512      	bpl.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004610:	6963      	ldr	r3, [r4, #20]
 8004612:	4a53      	ldr	r2, [pc, #332]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004614:	4213      	tst	r3, r2
 8004616:	d007      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	0192      	lsls	r2, r2, #6
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004620:	21fd      	movs	r1, #253	; 0xfd
 8004622:	4847      	ldr	r0, [pc, #284]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004624:	f001 fa57 	bl	8005ad6 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004628:	4a48      	ldr	r2, [pc, #288]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462a:	494e      	ldr	r1, [pc, #312]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800462c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800462e:	400b      	ands	r3, r1
 8004630:	6961      	ldr	r1, [r4, #20]
 8004632:	430b      	orrs	r3, r1
 8004634:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	05db      	lsls	r3, r3, #23
 800463a:	d513      	bpl.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800463c:	69a3      	ldr	r3, [r4, #24]
 800463e:	4a4a      	ldr	r2, [pc, #296]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004640:	4213      	tst	r3, r2
 8004642:	d008      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	0292      	lsls	r2, r2, #10
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800464c:	2184      	movs	r1, #132	; 0x84
 800464e:	483c      	ldr	r0, [pc, #240]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004650:	0049      	lsls	r1, r1, #1
 8004652:	f001 fa40 	bl	8005ad6 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004656:	4a3d      	ldr	r2, [pc, #244]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004658:	493a      	ldr	r1, [pc, #232]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800465a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800465c:	400b      	ands	r3, r1
 800465e:	69a1      	ldr	r1, [r4, #24]
 8004660:	430b      	orrs	r3, r1
 8004662:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	065b      	lsls	r3, r3, #25
 8004668:	d50e      	bpl.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800466a:	4d40      	ldr	r5, [pc, #256]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x280>)
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800466c:	6a23      	ldr	r3, [r4, #32]
 800466e:	422b      	tst	r3, r5
 8004670:	d004      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004672:	2114      	movs	r1, #20
 8004674:	4832      	ldr	r0, [pc, #200]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004676:	31ff      	adds	r1, #255	; 0xff
 8004678:	f001 fa2d 	bl	8005ad6 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800467c:	4a33      	ldr	r2, [pc, #204]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467e:	6a21      	ldr	r1, [r4, #32]
 8004680:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004682:	402b      	ands	r3, r5
 8004684:	430b      	orrs	r3, r1
 8004686:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004688:	6823      	ldr	r3, [r4, #0]
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800468a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	d521      	bpl.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004690:	4d37      	ldr	r5, [pc, #220]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x284>)
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8004692:	69e3      	ldr	r3, [r4, #28]
 8004694:	422b      	tst	r3, r5
 8004696:	d004      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004698:	211c      	movs	r1, #28
 800469a:	4829      	ldr	r0, [pc, #164]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800469c:	31ff      	adds	r1, #255	; 0xff
 800469e:	f001 fa1a 	bl	8005ad6 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80046a2:	4a2a      	ldr	r2, [pc, #168]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a4:	69e1      	ldr	r1, [r4, #28]
 80046a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  return HAL_OK;
 80046a8:	2000      	movs	r0, #0
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80046aa:	402b      	ands	r3, r5
 80046ac:	430b      	orrs	r3, r1
 80046ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046b0:	e010      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b2:	6833      	ldr	r3, [r6, #0]
 80046b4:	433b      	orrs	r3, r7
 80046b6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80046b8:	f7fd fe4a 	bl	8002350 <HAL_GetTick>
 80046bc:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	6833      	ldr	r3, [r6, #0]
 80046c0:	423b      	tst	r3, r7
 80046c2:	d000      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 80046c4:	e745      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x66>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c6:	f7fd fe43 	bl	8002350 <HAL_GetTick>
 80046ca:	9b01      	ldr	r3, [sp, #4]
 80046cc:	1ac0      	subs	r0, r0, r3
 80046ce:	2864      	cmp	r0, #100	; 0x64
 80046d0:	d9f5      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          return HAL_TIMEOUT;
 80046d2:	2003      	movs	r0, #3
}
 80046d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80046d6:	001a      	movs	r2, r3
 80046d8:	400a      	ands	r2, r1
 80046da:	428a      	cmp	r2, r1
 80046dc:	d000      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80046de:	e743      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046e0:	682a      	ldr	r2, [r5, #0]
          return HAL_ERROR;
 80046e2:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046e4:	0392      	lsls	r2, r2, #14
 80046e6:	d400      	bmi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80046e8:	e73e      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046ea:	e7f3      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80046ec:	400b      	ands	r3, r1
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d100      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80046f2:	e73d      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x84>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	069b      	lsls	r3, r3, #26
 80046f8:	d400      	bmi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80046fa:	e739      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_BACKUPRESET_FORCE();
 80046fc:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80046fe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004700:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004702:	031b      	lsls	r3, r3, #12
 8004704:	4303      	orrs	r3, r0
 8004706:	652b      	str	r3, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004708:	6d2b      	ldr	r3, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800470a:	490e      	ldr	r1, [pc, #56]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800470c:	4819      	ldr	r0, [pc, #100]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x288>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800470e:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004710:	4003      	ands	r3, r0
 8004712:	652b      	str	r3, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004714:	6529      	str	r1, [r5, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004716:	05d3      	lsls	r3, r2, #23
 8004718:	d400      	bmi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800471a:	e729      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x84>
        tickstart = HAL_GetTick();
 800471c:	f7fd fe18 	bl	8002350 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004720:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004722:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004724:	00bf      	lsls	r7, r7, #2
 8004726:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004728:	423b      	tst	r3, r7
 800472a:	d000      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800472c:	e720      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x84>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fd fe0f 	bl	8002350 <HAL_GetTick>
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004734:	1b80      	subs	r0, r0, r6
 8004736:	4298      	cmp	r0, r3
 8004738:	d9f5      	bls.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 800473a:	e7ca      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800473c:	000001ff 	.word	0x000001ff
 8004740:	0800681f 	.word	0x0800681f
 8004744:	fffcffff 	.word	0xfffcffff
 8004748:	ffdfffff 	.word	0xffdfffff
 800474c:	40021000 	.word	0x40021000
 8004750:	40007000 	.word	0x40007000
 8004754:	ffcfffff 	.word	0xffcfffff
 8004758:	efffffff 	.word	0xefffffff
 800475c:	fffff3ff 	.word	0xfffff3ff
 8004760:	ffffefff 	.word	0xffffefff
 8004764:	ffffcfff 	.word	0xffffcfff
 8004768:	fffeffff 	.word	0xfffeffff
 800476c:	fbffffff 	.word	0xfbffffff
 8004770:	fff3ffff 	.word	0xfff3ffff
 8004774:	fff7ffff 	.word	0xfff7ffff
 8004778:	00001388 	.word	0x00001388

0800477c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477c:	6803      	ldr	r3, [r0, #0]
 800477e:	4907      	ldr	r1, [pc, #28]	; (800479c <UART_EndRxTransfer+0x20>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	400a      	ands	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	3123      	adds	r1, #35	; 0x23
 800478a:	31ff      	adds	r1, #255	; 0xff
 800478c:	438a      	bics	r2, r1
 800478e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004790:	2320      	movs	r3, #32
 8004792:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	6603      	str	r3, [r0, #96]	; 0x60
}
 8004798:	4770      	bx	lr
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	fffffedf 	.word	0xfffffedf

080047a0 <HAL_UART_ErrorCallback>:
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_UART_IRQHandler>:
{
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047a6:	6803      	ldr	r3, [r0, #0]
{
 80047a8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047aa:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ac:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047ae:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80047b0:	0711      	lsls	r1, r2, #28
 80047b2:	d10a      	bne.n	80047ca <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047b4:	2120      	movs	r1, #32
 80047b6:	420a      	tst	r2, r1
 80047b8:	d100      	bne.n	80047bc <HAL_UART_IRQHandler+0x18>
 80047ba:	e06a      	b.n	8004892 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047bc:	4208      	tst	r0, r1
 80047be:	d068      	beq.n	8004892 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 80047c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 80047c2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d15a      	bne.n	800487e <HAL_UART_IRQHandler+0xda>
 80047c8:	e05a      	b.n	8004880 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047ca:	2101      	movs	r1, #1
 80047cc:	0035      	movs	r5, r6
 80047ce:	400d      	ands	r5, r1
 80047d0:	d103      	bne.n	80047da <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80047d2:	2790      	movs	r7, #144	; 0x90
 80047d4:	007f      	lsls	r7, r7, #1
 80047d6:	4238      	tst	r0, r7
 80047d8:	d05b      	beq.n	8004892 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047da:	420a      	tst	r2, r1
 80047dc:	d005      	beq.n	80047ea <HAL_UART_IRQHandler+0x46>
 80047de:	05c6      	lsls	r6, r0, #23
 80047e0:	d503      	bpl.n	80047ea <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047e2:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047e4:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80047e6:	4331      	orrs	r1, r6
 80047e8:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047ea:	2102      	movs	r1, #2
 80047ec:	420a      	tst	r2, r1
 80047ee:	d006      	beq.n	80047fe <HAL_UART_IRQHandler+0x5a>
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	d004      	beq.n	80047fe <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047f4:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80047f8:	1849      	adds	r1, r1, r1
 80047fa:	4331      	orrs	r1, r6
 80047fc:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047fe:	2104      	movs	r1, #4
 8004800:	420a      	tst	r2, r1
 8004802:	d006      	beq.n	8004812 <HAL_UART_IRQHandler+0x6e>
 8004804:	2d00      	cmp	r5, #0
 8004806:	d004      	beq.n	8004812 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004808:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800480a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800480c:	3902      	subs	r1, #2
 800480e:	4331      	orrs	r1, r6
 8004810:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004812:	0711      	lsls	r1, r2, #28
 8004814:	d508      	bpl.n	8004828 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004816:	0681      	lsls	r1, r0, #26
 8004818:	d401      	bmi.n	800481e <HAL_UART_IRQHandler+0x7a>
 800481a:	2d00      	cmp	r5, #0
 800481c:	d004      	beq.n	8004828 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800481e:	2108      	movs	r1, #8
 8004820:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004822:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004824:	4319      	orrs	r1, r3
 8004826:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004828:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d028      	beq.n	8004880 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800482e:	2320      	movs	r3, #32
 8004830:	421a      	tst	r2, r3
 8004832:	d006      	beq.n	8004842 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004834:	4218      	tst	r0, r3
 8004836:	d004      	beq.n	8004842 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8004838:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 800483e:	0020      	movs	r0, r4
 8004840:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004842:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004844:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004846:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8004848:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800484a:	065b      	lsls	r3, r3, #25
 800484c:	d402      	bmi.n	8004854 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800484e:	2308      	movs	r3, #8
 8004850:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004852:	d01a      	beq.n	800488a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8004854:	f7ff ff92 	bl	800477c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	420a      	tst	r2, r1
 8004860:	d00f      	beq.n	8004882 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004864:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004866:	438a      	bics	r2, r1
 8004868:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800486a:	2800      	cmp	r0, #0
 800486c:	d009      	beq.n	8004882 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_UART_IRQHandler+0x134>)
 8004870:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004872:	f7fe fb25 	bl	8002ec0 <HAL_DMA_Abort_IT>
 8004876:	2800      	cmp	r0, #0
 8004878:	d002      	beq.n	8004880 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800487a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800487c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800487e:	4798      	blx	r3
}
 8004880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8004882:	0020      	movs	r0, r4
 8004884:	f7ff ff8c 	bl	80047a0 <HAL_UART_ErrorCallback>
 8004888:	e7fa      	b.n	8004880 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 800488a:	f7ff ff89 	bl	80047a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8004890:	e7f6      	b.n	8004880 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	0349      	lsls	r1, r1, #13
 8004896:	420a      	tst	r2, r1
 8004898:	d006      	beq.n	80048a8 <HAL_UART_IRQHandler+0x104>
 800489a:	0275      	lsls	r5, r6, #9
 800489c:	d504      	bpl.n	80048a8 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800489e:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80048a0:	0020      	movs	r0, r4
 80048a2:	f000 fbd9 	bl	8005058 <HAL_UARTEx_WakeupCallback>
    return;
 80048a6:	e7eb      	b.n	8004880 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	420a      	tst	r2, r1
 80048ac:	d003      	beq.n	80048b6 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048ae:	4208      	tst	r0, r1
 80048b0:	d001      	beq.n	80048b6 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 80048b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048b4:	e785      	b.n	80047c2 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048b6:	2140      	movs	r1, #64	; 0x40
 80048b8:	420a      	tst	r2, r1
 80048ba:	d0e1      	beq.n	8004880 <HAL_UART_IRQHandler+0xdc>
 80048bc:	4208      	tst	r0, r1
 80048be:	d0df      	beq.n	8004880 <HAL_UART_IRQHandler+0xdc>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048c0:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048c2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048c4:	438a      	bics	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80048c8:	2320      	movs	r3, #32
 80048ca:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80048d0:	f001 f8fa 	bl	8005ac8 <HAL_UART_TxCpltCallback>
 80048d4:	e7d4      	b.n	8004880 <HAL_UART_IRQHandler+0xdc>
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	080048dd 	.word	0x080048dd

080048dc <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	0002      	movs	r2, r0
{
 80048e2:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80048e4:	325a      	adds	r2, #90	; 0x5a
 80048e6:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80048e8:	3a08      	subs	r2, #8
 80048ea:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80048ec:	f7ff ff58 	bl	80047a0 <HAL_UART_ErrorCallback>
}
 80048f0:	bd10      	pop	{r4, pc}
	...

080048f4 <UART_SetConfig>:
{
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80048f6:	6842      	ldr	r2, [r0, #4]
 80048f8:	4baf      	ldr	r3, [pc, #700]	; (8004bb8 <UART_SetConfig+0x2c4>)
{
 80048fa:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d903      	bls.n	8004908 <UART_SetConfig+0x14>
 8004900:	49ae      	ldr	r1, [pc, #696]	; (8004bbc <UART_SetConfig+0x2c8>)
 8004902:	48af      	ldr	r0, [pc, #700]	; (8004bc0 <UART_SetConfig+0x2cc>)
 8004904:	f001 f8e7 	bl	8005ad6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004908:	2280      	movs	r2, #128	; 0x80
 800490a:	68a3      	ldr	r3, [r4, #8]
 800490c:	0552      	lsls	r2, r2, #21
 800490e:	4293      	cmp	r3, r2
 8004910:	d006      	beq.n	8004920 <UART_SetConfig+0x2c>
 8004912:	4aac      	ldr	r2, [pc, #688]	; (8004bc4 <UART_SetConfig+0x2d0>)
 8004914:	4213      	tst	r3, r2
 8004916:	d003      	beq.n	8004920 <UART_SetConfig+0x2c>
 8004918:	49ab      	ldr	r1, [pc, #684]	; (8004bc8 <UART_SetConfig+0x2d4>)
 800491a:	48a9      	ldr	r0, [pc, #676]	; (8004bc0 <UART_SetConfig+0x2cc>)
 800491c:	f001 f8db 	bl	8005ad6 <assert_failed>
 8004920:	4daa      	ldr	r5, [pc, #680]	; (8004bcc <UART_SetConfig+0x2d8>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	68e3      	ldr	r3, [r4, #12]
 8004926:	4eaa      	ldr	r6, [pc, #680]	; (8004bd0 <UART_SetConfig+0x2dc>)
 8004928:	42aa      	cmp	r2, r5
 800492a:	d160      	bne.n	80049ee <UART_SetConfig+0xfa>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800492c:	4aa9      	ldr	r2, [pc, #676]	; (8004bd4 <UART_SetConfig+0x2e0>)
 800492e:	4213      	tst	r3, r2
 8004930:	d003      	beq.n	800493a <UART_SetConfig+0x46>
 8004932:	49a9      	ldr	r1, [pc, #676]	; (8004bd8 <UART_SetConfig+0x2e4>)
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8004934:	48a2      	ldr	r0, [pc, #648]	; (8004bc0 <UART_SetConfig+0x2cc>)
 8004936:	f001 f8ce 	bl	8005ad6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800493a:	6923      	ldr	r3, [r4, #16]
 800493c:	4aa7      	ldr	r2, [pc, #668]	; (8004bdc <UART_SetConfig+0x2e8>)
 800493e:	4213      	tst	r3, r2
 8004940:	d007      	beq.n	8004952 <UART_SetConfig+0x5e>
 8004942:	22c0      	movs	r2, #192	; 0xc0
 8004944:	00d2      	lsls	r2, r2, #3
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <UART_SetConfig+0x5e>
 800494a:	49a5      	ldr	r1, [pc, #660]	; (8004be0 <UART_SetConfig+0x2ec>)
 800494c:	489c      	ldr	r0, [pc, #624]	; (8004bc0 <UART_SetConfig+0x2cc>)
 800494e:	f001 f8c2 	bl	8005ad6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004952:	6963      	ldr	r3, [r4, #20]
 8004954:	220c      	movs	r2, #12
 8004956:	0019      	movs	r1, r3
 8004958:	4391      	bics	r1, r2
 800495a:	d101      	bne.n	8004960 <UART_SetConfig+0x6c>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <UART_SetConfig+0x74>
 8004960:	49a0      	ldr	r1, [pc, #640]	; (8004be4 <UART_SetConfig+0x2f0>)
 8004962:	4897      	ldr	r0, [pc, #604]	; (8004bc0 <UART_SetConfig+0x2cc>)
 8004964:	f001 f8b7 	bl	8005ad6 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004968:	4b9f      	ldr	r3, [pc, #636]	; (8004be8 <UART_SetConfig+0x2f4>)
 800496a:	69a2      	ldr	r2, [r4, #24]
 800496c:	421a      	tst	r2, r3
 800496e:	d003      	beq.n	8004978 <UART_SetConfig+0x84>
 8004970:	499e      	ldr	r1, [pc, #632]	; (8004bec <UART_SetConfig+0x2f8>)
 8004972:	4893      	ldr	r0, [pc, #588]	; (8004bc0 <UART_SetConfig+0x2cc>)
 8004974:	f001 f8af 	bl	8005ad6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004978:	4b9d      	ldr	r3, [pc, #628]	; (8004bf0 <UART_SetConfig+0x2fc>)
 800497a:	69e2      	ldr	r2, [r4, #28]
 800497c:	421a      	tst	r2, r3
 800497e:	d003      	beq.n	8004988 <UART_SetConfig+0x94>
 8004980:	499c      	ldr	r1, [pc, #624]	; (8004bf4 <UART_SetConfig+0x300>)
 8004982:	488f      	ldr	r0, [pc, #572]	; (8004bc0 <UART_SetConfig+0x2cc>)
 8004984:	f001 f8a7 	bl	8005ad6 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004988:	6927      	ldr	r7, [r4, #16]
 800498a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800498c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800498e:	433a      	orrs	r2, r7
 8004990:	6967      	ldr	r7, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004992:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004994:	69e1      	ldr	r1, [r4, #28]
 8004996:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004998:	4f97      	ldr	r7, [pc, #604]	; (8004bf8 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800499a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800499c:	4038      	ands	r0, r7
 800499e:	4302      	orrs	r2, r0
 80049a0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a2:	685a      	ldr	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049a4:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a6:	4016      	ands	r6, r2
 80049a8:	68e2      	ldr	r2, [r4, #12]
 80049aa:	4316      	orrs	r6, r2
 80049ac:	605e      	str	r6, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049ae:	42ab      	cmp	r3, r5
 80049b0:	d001      	beq.n	80049b6 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
 80049b2:	6a22      	ldr	r2, [r4, #32]
 80049b4:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	4e90      	ldr	r6, [pc, #576]	; (8004bfc <UART_SetConfig+0x308>)
 80049ba:	4032      	ands	r2, r6
 80049bc:	4302      	orrs	r2, r0
 80049be:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049c0:	4a8f      	ldr	r2, [pc, #572]	; (8004c00 <UART_SetConfig+0x30c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d120      	bne.n	8004a08 <UART_SetConfig+0x114>
 80049c6:	2203      	movs	r2, #3
 80049c8:	4b8e      	ldr	r3, [pc, #568]	; (8004c04 <UART_SetConfig+0x310>)
 80049ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049cc:	4013      	ands	r3, r2
 80049ce:	4a8e      	ldr	r2, [pc, #568]	; (8004c08 <UART_SetConfig+0x314>)
 80049d0:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	4299      	cmp	r1, r3
 80049d8:	d100      	bne.n	80049dc <UART_SetConfig+0xe8>
 80049da:	e0de      	b.n	8004b9a <UART_SetConfig+0x2a6>
    switch (clocksource)
 80049dc:	2808      	cmp	r0, #8
 80049de:	d833      	bhi.n	8004a48 <UART_SetConfig+0x154>
 80049e0:	f7fb fb9a 	bl	8000118 <__gnu_thumb1_case_uqi>
 80049e4:	32a5a29b 	.word	0x32a5a29b
 80049e8:	323232c0 	.word	0x323232c0
 80049ec:	c3          	.byte	0xc3
 80049ed:	00          	.byte	0x00
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80049ee:	4233      	tst	r3, r6
 80049f0:	d004      	beq.n	80049fc <UART_SetConfig+0x108>
 80049f2:	21ad      	movs	r1, #173	; 0xad
 80049f4:	4872      	ldr	r0, [pc, #456]	; (8004bc0 <UART_SetConfig+0x2cc>)
 80049f6:	0109      	lsls	r1, r1, #4
 80049f8:	f001 f86d 	bl	8005ad6 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80049fc:	4b83      	ldr	r3, [pc, #524]	; (8004c0c <UART_SetConfig+0x318>)
 80049fe:	6a22      	ldr	r2, [r4, #32]
 8004a00:	421a      	tst	r2, r3
 8004a02:	d09a      	beq.n	800493a <UART_SetConfig+0x46>
 8004a04:	4982      	ldr	r1, [pc, #520]	; (8004c10 <UART_SetConfig+0x31c>)
 8004a06:	e795      	b.n	8004934 <UART_SetConfig+0x40>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a08:	4a82      	ldr	r2, [pc, #520]	; (8004c14 <UART_SetConfig+0x320>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d105      	bne.n	8004a1a <UART_SetConfig+0x126>
 8004a0e:	220c      	movs	r2, #12
 8004a10:	4b7c      	ldr	r3, [pc, #496]	; (8004c04 <UART_SetConfig+0x310>)
 8004a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a14:	4013      	ands	r3, r2
 8004a16:	4a80      	ldr	r2, [pc, #512]	; (8004c18 <UART_SetConfig+0x324>)
 8004a18:	e7da      	b.n	80049d0 <UART_SetConfig+0xdc>
 8004a1a:	4a80      	ldr	r2, [pc, #512]	; (8004c1c <UART_SetConfig+0x328>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <UART_SetConfig+0x12e>
 8004a20:	e0af      	b.n	8004b82 <UART_SetConfig+0x28e>
 8004a22:	4a7f      	ldr	r2, [pc, #508]	; (8004c20 <UART_SetConfig+0x32c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <UART_SetConfig+0x136>
 8004a28:	e0ab      	b.n	8004b82 <UART_SetConfig+0x28e>
 8004a2a:	42ab      	cmp	r3, r5
 8004a2c:	d000      	beq.n	8004a30 <UART_SetConfig+0x13c>
 8004a2e:	e0a1      	b.n	8004b74 <UART_SetConfig+0x280>
 8004a30:	21c0      	movs	r1, #192	; 0xc0
 8004a32:	2080      	movs	r0, #128	; 0x80
 8004a34:	4a73      	ldr	r2, [pc, #460]	; (8004c04 <UART_SetConfig+0x310>)
 8004a36:	0109      	lsls	r1, r1, #4
 8004a38:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004a3a:	00c0      	lsls	r0, r0, #3
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	4283      	cmp	r3, r0
 8004a40:	d038      	beq.n	8004ab4 <UART_SetConfig+0x1c0>
 8004a42:	d803      	bhi.n	8004a4c <UART_SetConfig+0x158>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8004a48:	2501      	movs	r5, #1
 8004a4a:	e00d      	b.n	8004a68 <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a4c:	2080      	movs	r0, #128	; 0x80
 8004a4e:	0100      	lsls	r0, r0, #4
 8004a50:	4283      	cmp	r3, r0
 8004a52:	d00e      	beq.n	8004a72 <UART_SetConfig+0x17e>
 8004a54:	428b      	cmp	r3, r1
 8004a56:	d1f7      	bne.n	8004a48 <UART_SetConfig+0x154>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004a58:	2080      	movs	r0, #128	; 0x80
 8004a5a:	0200      	lsls	r0, r0, #8
 8004a5c:	e00d      	b.n	8004a7a <UART_SetConfig+0x186>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004a5e:	f7ff fd25 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8004a62:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8004a64:	42a8      	cmp	r0, r5
 8004a66:	d108      	bne.n	8004a7a <UART_SetConfig+0x186>
  huart->RxISR = NULL;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8004a6c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004a6e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8004a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	06db      	lsls	r3, r3, #27
 8004a76:	d520      	bpl.n	8004aba <UART_SetConfig+0x1c6>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004a78:	484f      	ldr	r0, [pc, #316]	; (8004bb8 <UART_SetConfig+0x2c4>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	435a      	muls	r2, r3
 8004a80:	4282      	cmp	r2, r0
 8004a82:	d8e1      	bhi.n	8004a48 <UART_SetConfig+0x154>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a84:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a86:	4282      	cmp	r2, r0
 8004a88:	d3de      	bcc.n	8004a48 <UART_SetConfig+0x154>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004a8a:	2700      	movs	r7, #0
 8004a8c:	0e02      	lsrs	r2, r0, #24
 8004a8e:	0201      	lsls	r1, r0, #8
 8004a90:	085e      	lsrs	r6, r3, #1
 8004a92:	1989      	adds	r1, r1, r6
 8004a94:	417a      	adcs	r2, r7
 8004a96:	0008      	movs	r0, r1
 8004a98:	0011      	movs	r1, r2
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	003b      	movs	r3, r7
 8004a9e:	f7fb fc19 	bl	80002d4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aa2:	4b60      	ldr	r3, [pc, #384]	; (8004c24 <UART_SetConfig+0x330>)
 8004aa4:	18c2      	adds	r2, r0, r3
 8004aa6:	4b60      	ldr	r3, [pc, #384]	; (8004c28 <UART_SetConfig+0x334>)
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d8cd      	bhi.n	8004a48 <UART_SetConfig+0x154>
          huart->Instance->BRR = usartdiv;
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	003d      	movs	r5, r7
 8004ab0:	60d8      	str	r0, [r3, #12]
 8004ab2:	e7d9      	b.n	8004a68 <UART_SetConfig+0x174>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004ab4:	f7ff f83c 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
        break;
 8004ab8:	e7d3      	b.n	8004a62 <UART_SetConfig+0x16e>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004aba:	485c      	ldr	r0, [pc, #368]	; (8004c2c <UART_SetConfig+0x338>)
 8004abc:	e7dd      	b.n	8004a7a <UART_SetConfig+0x186>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004abe:	f7ff fd05 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 8004ac2:	e064      	b.n	8004b8e <UART_SetConfig+0x29a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac4:	2510      	movs	r5, #16
 8004ac6:	4b4f      	ldr	r3, [pc, #316]	; (8004c04 <UART_SetConfig+0x310>)
 8004ac8:	6861      	ldr	r1, [r4, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004acc:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ace:	4015      	ands	r5, r2
 8004ad0:	d006      	beq.n	8004ae0 <UART_SetConfig+0x1ec>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004ad2:	4b57      	ldr	r3, [pc, #348]	; (8004c30 <UART_SetConfig+0x33c>)
 8004ad4:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ad6:	f7fb fb33 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ada:	2500      	movs	r5, #0
 8004adc:	b283      	uxth	r3, r0
        break;
 8004ade:	e004      	b.n	8004aea <UART_SetConfig+0x1f6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ae0:	4b54      	ldr	r3, [pc, #336]	; (8004c34 <UART_SetConfig+0x340>)
 8004ae2:	18c0      	adds	r0, r0, r3
 8004ae4:	f7fb fb2c 	bl	8000140 <__udivsi3>
 8004ae8:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aea:	0019      	movs	r1, r3
 8004aec:	4852      	ldr	r0, [pc, #328]	; (8004c38 <UART_SetConfig+0x344>)
 8004aee:	3910      	subs	r1, #16
 8004af0:	4281      	cmp	r1, r0
 8004af2:	d8a9      	bhi.n	8004a48 <UART_SetConfig+0x154>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004af4:	210f      	movs	r1, #15
 8004af6:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af8:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004afa:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004afc:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8004afe:	6821      	ldr	r1, [r4, #0]
 8004b00:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8004b02:	60cb      	str	r3, [r1, #12]
 8004b04:	e7b0      	b.n	8004a68 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b06:	f7ff f813 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8004b0a:	e040      	b.n	8004b8e <UART_SetConfig+0x29a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	0858      	lsrs	r0, r3, #1
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	025b      	lsls	r3, r3, #9
 8004b14:	e03e      	b.n	8004b94 <UART_SetConfig+0x2a0>
  uint32_t usartdiv                   = 0x00000000U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e7e7      	b.n	8004aea <UART_SetConfig+0x1f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b1a:	f7ff fcc7 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004b22:	18c0      	adds	r0, r0, r3
 8004b24:	6861      	ldr	r1, [r4, #4]
 8004b26:	e00b      	b.n	8004b40 <UART_SetConfig+0x24c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004b28:	f7ff fcd0 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 8004b2c:	e7f7      	b.n	8004b1e <UART_SetConfig+0x22a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b2e:	2510      	movs	r5, #16
 8004b30:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <UART_SetConfig+0x310>)
 8004b32:	6861      	ldr	r1, [r4, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004b36:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b38:	4015      	ands	r5, r2
 8004b3a:	d006      	beq.n	8004b4a <UART_SetConfig+0x256>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <UART_SetConfig+0x2c4>)
 8004b3e:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004b40:	f7fb fafe 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b44:	2500      	movs	r5, #0
 8004b46:	b283      	uxth	r3, r0
        break;
 8004b48:	e004      	b.n	8004b54 <UART_SetConfig+0x260>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b4a:	4b38      	ldr	r3, [pc, #224]	; (8004c2c <UART_SetConfig+0x338>)
 8004b4c:	18c0      	adds	r0, r0, r3
 8004b4e:	f7fb faf7 	bl	8000140 <__udivsi3>
 8004b52:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b54:	0019      	movs	r1, r3
 8004b56:	4838      	ldr	r0, [pc, #224]	; (8004c38 <UART_SetConfig+0x344>)
 8004b58:	3910      	subs	r1, #16
 8004b5a:	4281      	cmp	r1, r0
 8004b5c:	d900      	bls.n	8004b60 <UART_SetConfig+0x26c>
 8004b5e:	e773      	b.n	8004a48 <UART_SetConfig+0x154>
      huart->Instance->BRR = usartdiv;
 8004b60:	6821      	ldr	r1, [r4, #0]
 8004b62:	e7ce      	b.n	8004b02 <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b64:	f7fe ffe4 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8004b68:	e7d9      	b.n	8004b1e <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004b6a:	6863      	ldr	r3, [r4, #4]
 8004b6c:	0858      	lsrs	r0, r3, #1
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	e7d6      	b.n	8004b22 <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b74:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 8004b76:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d0cb      	beq.n	8004b16 <UART_SetConfig+0x222>
  uint32_t usartdiv                   = 0x00000000U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e7e8      	b.n	8004b54 <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	4299      	cmp	r1, r3
 8004b88:	d1c7      	bne.n	8004b1a <UART_SetConfig+0x226>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b8a:	f7ff fc8f 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	0040      	lsls	r0, r0, #1
 8004b92:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b94:	18c0      	adds	r0, r0, r3
 8004b96:	6861      	ldr	r1, [r4, #4]
 8004b98:	e79d      	b.n	8004ad6 <UART_SetConfig+0x1e2>
    switch (clocksource)
 8004b9a:	2808      	cmp	r0, #8
 8004b9c:	d900      	bls.n	8004ba0 <UART_SetConfig+0x2ac>
 8004b9e:	e753      	b.n	8004a48 <UART_SetConfig+0x154>
 8004ba0:	f7fb fac4 	bl	800012c <__gnu_thumb1_case_shi>
 8004ba4:	ff8dfff3 	.word	0xff8dfff3
 8004ba8:	ff52ff90 	.word	0xff52ff90
 8004bac:	ff52ffb1 	.word	0xff52ffb1
 8004bb0:	ff52ff52 	.word	0xff52ff52
 8004bb4:	ffb4      	.short	0xffb4
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	003d0900 	.word	0x003d0900
 8004bbc:	00000ac8 	.word	0x00000ac8
 8004bc0:	0800686b 	.word	0x0800686b
 8004bc4:	ffffefff 	.word	0xffffefff
 8004bc8:	00000ac9 	.word	0x00000ac9
 8004bcc:	40004800 	.word	0x40004800
 8004bd0:	ffffcfff 	.word	0xffffcfff
 8004bd4:	ffffdfff 	.word	0xffffdfff
 8004bd8:	00000acc 	.word	0x00000acc
 8004bdc:	fffffbff 	.word	0xfffffbff
 8004be0:	00000ad4 	.word	0x00000ad4
 8004be4:	00000ad5 	.word	0x00000ad5
 8004be8:	fffffcff 	.word	0xfffffcff
 8004bec:	00000ad6 	.word	0x00000ad6
 8004bf0:	ffff7fff 	.word	0xffff7fff
 8004bf4:	00000ad7 	.word	0x00000ad7
 8004bf8:	efff69f3 	.word	0xefff69f3
 8004bfc:	fffff4ff 	.word	0xfffff4ff
 8004c00:	40013800 	.word	0x40013800
 8004c04:	40021000 	.word	0x40021000
 8004c08:	0800685a 	.word	0x0800685a
 8004c0c:	fffff7ff 	.word	0xfffff7ff
 8004c10:	00000ad1 	.word	0x00000ad1
 8004c14:	40004400 	.word	0x40004400
 8004c18:	0800685e 	.word	0x0800685e
 8004c1c:	40004c00 	.word	0x40004c00
 8004c20:	40005000 	.word	0x40005000
 8004c24:	fffffd00 	.word	0xfffffd00
 8004c28:	000ffcff 	.word	0x000ffcff
 8004c2c:	00f42400 	.word	0x00f42400
 8004c30:	007a1200 	.word	0x007a1200
 8004c34:	01e84800 	.word	0x01e84800
 8004c38:	0000ffef 	.word	0x0000ffef

08004c3c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004c3e:	b570      	push	{r4, r5, r6, lr}
 8004c40:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004c42:	2bff      	cmp	r3, #255	; 0xff
 8004c44:	d903      	bls.n	8004c4e <UART_AdvFeatureConfig+0x12>
 8004c46:	4955      	ldr	r1, [pc, #340]	; (8004d9c <UART_AdvFeatureConfig+0x160>)
 8004c48:	4855      	ldr	r0, [pc, #340]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004c4a:	f000 ff44 	bl	8005ad6 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c50:	07db      	lsls	r3, r3, #31
 8004c52:	d50d      	bpl.n	8004c70 <UART_AdvFeatureConfig+0x34>
 8004c54:	4d53      	ldr	r5, [pc, #332]	; (8004da4 <UART_AdvFeatureConfig+0x168>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8004c56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c58:	422b      	tst	r3, r5
 8004c5a:	d003      	beq.n	8004c64 <UART_AdvFeatureConfig+0x28>
 8004c5c:	4952      	ldr	r1, [pc, #328]	; (8004da8 <UART_AdvFeatureConfig+0x16c>)
 8004c5e:	4850      	ldr	r0, [pc, #320]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004c60:	f000 ff39 	bl	8005ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c68:	6853      	ldr	r3, [r2, #4]
 8004c6a:	402b      	ands	r3, r5
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c72:	079b      	lsls	r3, r3, #30
 8004c74:	d50d      	bpl.n	8004c92 <UART_AdvFeatureConfig+0x56>
 8004c76:	4d4d      	ldr	r5, [pc, #308]	; (8004dac <UART_AdvFeatureConfig+0x170>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004c78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c7a:	422b      	tst	r3, r5
 8004c7c:	d003      	beq.n	8004c86 <UART_AdvFeatureConfig+0x4a>
 8004c7e:	494c      	ldr	r1, [pc, #304]	; (8004db0 <UART_AdvFeatureConfig+0x174>)
 8004c80:	4847      	ldr	r0, [pc, #284]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004c82:	f000 ff28 	bl	8005ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c8a:	6853      	ldr	r3, [r2, #4]
 8004c8c:	402b      	ands	r3, r5
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c94:	075b      	lsls	r3, r3, #29
 8004c96:	d50d      	bpl.n	8004cb4 <UART_AdvFeatureConfig+0x78>
 8004c98:	4d46      	ldr	r5, [pc, #280]	; (8004db4 <UART_AdvFeatureConfig+0x178>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8004c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c9c:	422b      	tst	r3, r5
 8004c9e:	d003      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x6c>
 8004ca0:	4945      	ldr	r1, [pc, #276]	; (8004db8 <UART_AdvFeatureConfig+0x17c>)
 8004ca2:	483f      	ldr	r0, [pc, #252]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004ca4:	f000 ff17 	bl	8005ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004cac:	6853      	ldr	r3, [r2, #4]
 8004cae:	402b      	ands	r3, r5
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cb6:	071b      	lsls	r3, r3, #28
 8004cb8:	d50d      	bpl.n	8004cd6 <UART_AdvFeatureConfig+0x9a>
 8004cba:	4d40      	ldr	r5, [pc, #256]	; (8004dbc <UART_AdvFeatureConfig+0x180>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8004cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cbe:	422b      	tst	r3, r5
 8004cc0:	d003      	beq.n	8004cca <UART_AdvFeatureConfig+0x8e>
 8004cc2:	493f      	ldr	r1, [pc, #252]	; (8004dc0 <UART_AdvFeatureConfig+0x184>)
 8004cc4:	4836      	ldr	r0, [pc, #216]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004cc6:	f000 ff06 	bl	8005ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cca:	6822      	ldr	r2, [r4, #0]
 8004ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cce:	6853      	ldr	r3, [r2, #4]
 8004cd0:	402b      	ands	r3, r5
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd8:	06db      	lsls	r3, r3, #27
 8004cda:	d50d      	bpl.n	8004cf8 <UART_AdvFeatureConfig+0xbc>
 8004cdc:	4d39      	ldr	r5, [pc, #228]	; (8004dc4 <UART_AdvFeatureConfig+0x188>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8004cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ce0:	422b      	tst	r3, r5
 8004ce2:	d003      	beq.n	8004cec <UART_AdvFeatureConfig+0xb0>
 8004ce4:	4938      	ldr	r1, [pc, #224]	; (8004dc8 <UART_AdvFeatureConfig+0x18c>)
 8004ce6:	482e      	ldr	r0, [pc, #184]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004ce8:	f000 fef5 	bl	8005ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cec:	6822      	ldr	r2, [r4, #0]
 8004cee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004cf0:	6893      	ldr	r3, [r2, #8]
 8004cf2:	402b      	ands	r3, r5
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cfa:	069b      	lsls	r3, r3, #26
 8004cfc:	d50d      	bpl.n	8004d1a <UART_AdvFeatureConfig+0xde>
 8004cfe:	4d33      	ldr	r5, [pc, #204]	; (8004dcc <UART_AdvFeatureConfig+0x190>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004d00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d02:	422b      	tst	r3, r5
 8004d04:	d003      	beq.n	8004d0e <UART_AdvFeatureConfig+0xd2>
 8004d06:	4932      	ldr	r1, [pc, #200]	; (8004dd0 <UART_AdvFeatureConfig+0x194>)
 8004d08:	4825      	ldr	r0, [pc, #148]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004d0a:	f000 fee4 	bl	8005ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d12:	6893      	ldr	r3, [r2, #8]
 8004d14:	402b      	ands	r3, r5
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d1c:	065b      	lsls	r3, r3, #25
 8004d1e:	d52a      	bpl.n	8004d76 <UART_AdvFeatureConfig+0x13a>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	4a2c      	ldr	r2, [pc, #176]	; (8004dd4 <UART_AdvFeatureConfig+0x198>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d006      	beq.n	8004d36 <UART_AdvFeatureConfig+0xfa>
 8004d28:	4a2b      	ldr	r2, [pc, #172]	; (8004dd8 <UART_AdvFeatureConfig+0x19c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <UART_AdvFeatureConfig+0xfa>
 8004d2e:	492b      	ldr	r1, [pc, #172]	; (8004ddc <UART_AdvFeatureConfig+0x1a0>)
 8004d30:	481b      	ldr	r0, [pc, #108]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004d32:	f000 fed0 	bl	8005ad6 <assert_failed>
 8004d36:	4d2a      	ldr	r5, [pc, #168]	; (8004de0 <UART_AdvFeatureConfig+0x1a4>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8004d38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d3a:	422b      	tst	r3, r5
 8004d3c:	d003      	beq.n	8004d46 <UART_AdvFeatureConfig+0x10a>
 8004d3e:	4929      	ldr	r1, [pc, #164]	; (8004de4 <UART_AdvFeatureConfig+0x1a8>)
 8004d40:	4817      	ldr	r0, [pc, #92]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004d42:	f000 fec8 	bl	8005ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d46:	6821      	ldr	r1, [r4, #0]
 8004d48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d4a:	684b      	ldr	r3, [r1, #4]
 8004d4c:	402b      	ands	r3, r5
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	035b      	lsls	r3, r3, #13
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d10d      	bne.n	8004d76 <UART_AdvFeatureConfig+0x13a>
 8004d5a:	4d23      	ldr	r5, [pc, #140]	; (8004de8 <UART_AdvFeatureConfig+0x1ac>)
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8004d5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d5e:	422b      	tst	r3, r5
 8004d60:	d003      	beq.n	8004d6a <UART_AdvFeatureConfig+0x12e>
 8004d62:	4922      	ldr	r1, [pc, #136]	; (8004dec <UART_AdvFeatureConfig+0x1b0>)
 8004d64:	480e      	ldr	r0, [pc, #56]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004d66:	f000 feb6 	bl	8005ad6 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004d6e:	6853      	ldr	r3, [r2, #4]
 8004d70:	402b      	ands	r3, r5
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	d50d      	bpl.n	8004d98 <UART_AdvFeatureConfig+0x15c>
 8004d7c:	4d1c      	ldr	r5, [pc, #112]	; (8004df0 <UART_AdvFeatureConfig+0x1b4>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8004d7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004d80:	422b      	tst	r3, r5
 8004d82:	d003      	beq.n	8004d8c <UART_AdvFeatureConfig+0x150>
 8004d84:	491b      	ldr	r1, [pc, #108]	; (8004df4 <UART_AdvFeatureConfig+0x1b8>)
 8004d86:	4806      	ldr	r0, [pc, #24]	; (8004da0 <UART_AdvFeatureConfig+0x164>)
 8004d88:	f000 fea5 	bl	8005ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d90:	6853      	ldr	r3, [r2, #4]
 8004d92:	402b      	ands	r3, r5
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6053      	str	r3, [r2, #4]
}
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	00000b9a 	.word	0x00000b9a
 8004da0:	0800686b 	.word	0x0800686b
 8004da4:	fffdffff 	.word	0xfffdffff
 8004da8:	00000b9f 	.word	0x00000b9f
 8004dac:	fffeffff 	.word	0xfffeffff
 8004db0:	00000ba6 	.word	0x00000ba6
 8004db4:	fffbffff 	.word	0xfffbffff
 8004db8:	00000bad 	.word	0x00000bad
 8004dbc:	ffff7fff 	.word	0xffff7fff
 8004dc0:	00000bb4 	.word	0x00000bb4
 8004dc4:	ffffefff 	.word	0xffffefff
 8004dc8:	00000bbb 	.word	0x00000bbb
 8004dcc:	ffffdfff 	.word	0xffffdfff
 8004dd0:	00000bc2 	.word	0x00000bc2
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	40004400 	.word	0x40004400
 8004ddc:	00000bc9 	.word	0x00000bc9
 8004de0:	ffefffff 	.word	0xffefffff
 8004de4:	00000bca 	.word	0x00000bca
 8004de8:	ff9fffff 	.word	0xff9fffff
 8004dec:	00000bcf 	.word	0x00000bcf
 8004df0:	fff7ffff 	.word	0xfff7ffff
 8004df4:	00000bd7 	.word	0x00000bd7

08004df8 <UART_WaitOnFlagUntilTimeout>:
{
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	0004      	movs	r4, r0
 8004dfc:	000e      	movs	r6, r1
 8004dfe:	0015      	movs	r5, r2
 8004e00:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	69d3      	ldr	r3, [r2, #28]
 8004e06:	4033      	ands	r3, r6
 8004e08:	1b9b      	subs	r3, r3, r6
 8004e0a:	4259      	negs	r1, r3
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	42ab      	cmp	r3, r5
 8004e10:	d001      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004e12:	2000      	movs	r0, #0
 8004e14:	e01b      	b.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8004e16:	9b06      	ldr	r3, [sp, #24]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	d0f3      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1c:	f7fd fa98 	bl	8002350 <HAL_GetTick>
 8004e20:	9b06      	ldr	r3, [sp, #24]
 8004e22:	1bc0      	subs	r0, r0, r7
 8004e24:	4283      	cmp	r3, r0
 8004e26:	d301      	bcc.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x34>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ea      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	4908      	ldr	r1, [pc, #32]	; (8004e50 <UART_WaitOnFlagUntilTimeout+0x58>)
 8004e30:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8004e32:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e34:	400a      	ands	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	31a3      	adds	r1, #163	; 0xa3
 8004e3c:	31ff      	adds	r1, #255	; 0xff
 8004e3e:	438a      	bics	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004e42:	2320      	movs	r3, #32
 8004e44:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e46:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	3470      	adds	r4, #112	; 0x70
 8004e4c:	7023      	strb	r3, [r4, #0]
}
 8004e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e50:	fffffe5f 	.word	0xfffffe5f

08004e54 <HAL_UART_Transmit>:
{
 8004e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e56:	b087      	sub	sp, #28
 8004e58:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8004e5a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8004e5c:	0004      	movs	r4, r0
 8004e5e:	000d      	movs	r5, r1
 8004e60:	0017      	movs	r7, r2
    return HAL_BUSY;
 8004e62:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d149      	bne.n	8004efc <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8004e68:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004e6a:	2900      	cmp	r1, #0
 8004e6c:	d046      	beq.n	8004efc <HAL_UART_Transmit+0xa8>
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	d044      	beq.n	8004efc <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	68a2      	ldr	r2, [r4, #8]
 8004e76:	015b      	lsls	r3, r3, #5
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d104      	bne.n	8004e86 <HAL_UART_Transmit+0x32>
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8004e82:	4201      	tst	r1, r0
 8004e84:	d13a      	bne.n	8004efc <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8004e86:	0023      	movs	r3, r4
 8004e88:	3370      	adds	r3, #112	; 0x70
 8004e8a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8004e8c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004e8e:	2a01      	cmp	r2, #1
 8004e90:	d034      	beq.n	8004efc <HAL_UART_Transmit+0xa8>
 8004e92:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8004e96:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e98:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9a:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e9c:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8004e9e:	f7fd fa57 	bl	8002350 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8004ea2:	0023      	movs	r3, r4
 8004ea4:	3350      	adds	r3, #80	; 0x50
 8004ea6:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	9303      	str	r3, [sp, #12]
 8004eac:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8004eb2:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb4:	015b      	lsls	r3, r3, #5
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d104      	bne.n	8004ec4 <HAL_UART_Transmit+0x70>
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	42b3      	cmp	r3, r6
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Transmit+0x70>
 8004ec0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8004ec2:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8004ec4:	0023      	movs	r3, r4
 8004ec6:	3352      	adds	r3, #82	; 0x52
 8004ec8:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eca:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8004ecc:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8004ed2:	2a00      	cmp	r2, #0
 8004ed4:	d10a      	bne.n	8004eec <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed6:	2140      	movs	r1, #64	; 0x40
 8004ed8:	0020      	movs	r0, r4
 8004eda:	f7ff ff8d 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8004ee2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004ee4:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8004ee6:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8004ee8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004eea:	e007      	b.n	8004efc <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eec:	2200      	movs	r2, #0
 8004eee:	2180      	movs	r1, #128	; 0x80
 8004ef0:	0020      	movs	r0, r4
 8004ef2:	f7ff ff81 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8004efa:	2003      	movs	r0, #3
}
 8004efc:	b007      	add	sp, #28
 8004efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f00:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004f02:	2d00      	cmp	r5, #0
 8004f04:	d10b      	bne.n	8004f1e <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f06:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8004f08:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f0a:	05db      	lsls	r3, r3, #23
 8004f0c:	0ddb      	lsrs	r3, r3, #23
 8004f0e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	9a03      	ldr	r2, [sp, #12]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8013      	strh	r3, [r2, #0]
 8004f1c:	e7d2      	b.n	8004ec4 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f1e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004f20:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f22:	6293      	str	r3, [r2, #40]	; 0x28
 8004f24:	e7f4      	b.n	8004f10 <HAL_UART_Transmit+0xbc>
	...

08004f28 <UART_CheckIdleState>:
{
 8004f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2a:	2600      	movs	r6, #0
{
 8004f2c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2e:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004f30:	f7fd fa0e 	bl	8002350 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f34:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004f36:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	071b      	lsls	r3, r3, #28
 8004f3c:	d415      	bmi.n	8004f6a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	075b      	lsls	r3, r3, #29
 8004f44:	d50a      	bpl.n	8004f5c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <UART_CheckIdleState+0x5c>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	03c9      	lsls	r1, r1, #15
 8004f50:	002b      	movs	r3, r5
 8004f52:	0020      	movs	r0, r4
 8004f54:	f7ff ff50 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d111      	bne.n	8004f80 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004f5c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004f5e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004f60:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f62:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004f64:	3470      	adds	r4, #112	; 0x70
 8004f66:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004f68:	e00b      	b.n	8004f82 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6a:	2180      	movs	r1, #128	; 0x80
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <UART_CheckIdleState+0x5c>)
 8004f6e:	0032      	movs	r2, r6
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	0389      	lsls	r1, r1, #14
 8004f74:	0003      	movs	r3, r0
 8004f76:	0020      	movs	r0, r4
 8004f78:	f7ff ff3e 	bl	8004df8 <UART_WaitOnFlagUntilTimeout>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d0de      	beq.n	8004f3e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004f80:	2003      	movs	r0, #3
}
 8004f82:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004f84:	01ffffff 	.word	0x01ffffff

08004f88 <HAL_UART_Init>:
{
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004f8e:	2001      	movs	r0, #1
}
 8004f90:	bd10      	pop	{r4, pc}
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004f92:	6981      	ldr	r1, [r0, #24]
 8004f94:	6803      	ldr	r3, [r0, #0]
 8004f96:	4a29      	ldr	r2, [pc, #164]	; (800503c <HAL_UART_Init+0xb4>)
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	d03e      	beq.n	800501a <HAL_UART_Init+0x92>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d010      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 8004fa0:	4a27      	ldr	r2, [pc, #156]	; (8005040 <HAL_UART_Init+0xb8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00d      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 8004fa6:	4a27      	ldr	r2, [pc, #156]	; (8005044 <HAL_UART_Init+0xbc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00a      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <HAL_UART_Init+0xc0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 8004fb2:	4a26      	ldr	r2, [pc, #152]	; (800504c <HAL_UART_Init+0xc4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 8004fb8:	2130      	movs	r1, #48	; 0x30
 8004fba:	31ff      	adds	r1, #255	; 0xff
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8004fbc:	4824      	ldr	r0, [pc, #144]	; (8005050 <HAL_UART_Init+0xc8>)
 8004fbe:	f000 fd8a 	bl	8005ad6 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <HAL_UART_Init+0x4c>
    huart->Lock = HAL_UNLOCKED;
 8004fc8:	0022      	movs	r2, r4
 8004fca:	3270      	adds	r2, #112	; 0x70
 8004fcc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004fce:	0020      	movs	r0, r4
 8004fd0:	f000 fe12 	bl	8005bf8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004fd4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004fda:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004fdc:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fde:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004fe0:	438b      	bics	r3, r1
 8004fe2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fe4:	f7ff fc86 	bl	80048f4 <UART_SetConfig>
 8004fe8:	2801      	cmp	r0, #1
 8004fea:	d0d0      	beq.n	8004f8e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_UART_Init+0x70>
    UART_AdvFeatureConfig(huart);
 8004ff2:	0020      	movs	r0, r4
 8004ff4:	f7ff fe22 	bl	8004c3c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	4916      	ldr	r1, [pc, #88]	; (8005054 <HAL_UART_Init+0xcc>)
 8004ffc:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004ffe:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005000:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005002:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005004:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	438a      	bics	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800500c:	2201      	movs	r2, #1
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005014:	f7ff ff88 	bl	8004f28 <UART_CheckIdleState>
 8005018:	e7ba      	b.n	8004f90 <HAL_UART_Init+0x8>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800501a:	4293      	cmp	r3, r2
 800501c:	d0d1      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 800501e:	4a08      	ldr	r2, [pc, #32]	; (8005040 <HAL_UART_Init+0xb8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d0ce      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 8005024:	4a07      	ldr	r2, [pc, #28]	; (8005044 <HAL_UART_Init+0xbc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d0cb      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 800502a:	4a07      	ldr	r2, [pc, #28]	; (8005048 <HAL_UART_Init+0xc0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d0c8      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 8005030:	4a06      	ldr	r2, [pc, #24]	; (800504c <HAL_UART_Init+0xc4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d0c5      	beq.n	8004fc2 <HAL_UART_Init+0x3a>
 8005036:	219a      	movs	r1, #154	; 0x9a
 8005038:	0049      	lsls	r1, r1, #1
 800503a:	e7bf      	b.n	8004fbc <HAL_UART_Init+0x34>
 800503c:	40013800 	.word	0x40013800
 8005040:	40004400 	.word	0x40004400
 8005044:	40004c00 	.word	0x40004c00
 8005048:	40005000 	.word	0x40005000
 800504c:	40004800 	.word	0x40004800
 8005050:	0800686b 	.word	0x0800686b
 8005054:	ffffb7ff 	.word	0xffffb7ff

08005058 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005058:	4770      	bx	lr
	...

0800505c <platform_write>:
static float acceleration_mg[3];
static float magnetic_mG[3];
static uint8_t whoamI, rst;


int32_t platform_write(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len) {
 800505c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800505e:	0014      	movs	r4, r2
	uint32_t i2c_add = (uint32_t) handle;

	HAL_I2C_Mem_Write(&hi2c1, i2c_add, Reg,
 8005060:	b28a      	uxth	r2, r1
 8005062:	b281      	uxth	r1, r0
 8005064:	20fa      	movs	r0, #250	; 0xfa
 8005066:	0080      	lsls	r0, r0, #2
 8005068:	9002      	str	r0, [sp, #8]
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	9400      	str	r4, [sp, #0]
 800506e:	2301      	movs	r3, #1
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <platform_write+0x20>)
 8005072:	f7fe fb3f 	bl	80036f4 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
	return 0;
}
 8005076:	2000      	movs	r0, #0
 8005078:	b004      	add	sp, #16
 800507a:	bd10      	pop	{r4, pc}
 800507c:	20000774 	.word	0x20000774

08005080 <platform_read>:

int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len) {
 8005080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005082:	0014      	movs	r4, r2
	uint32_t i2c_add = (uint32_t) handle;

	HAL_I2C_Mem_Read(&hi2c1, (uint8_t) i2c_add, Reg,
 8005084:	b28a      	uxth	r2, r1
 8005086:	b2c1      	uxtb	r1, r0
 8005088:	20fa      	movs	r0, #250	; 0xfa
 800508a:	0080      	lsls	r0, r0, #2
 800508c:	9002      	str	r0, [sp, #8]
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	9400      	str	r4, [sp, #0]
 8005092:	2301      	movs	r3, #1
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <platform_read+0x20>)
 8005096:	f7fe fbf5 	bl	8003884 <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
	return 0;
}
 800509a:	2000      	movs	r0, #0
 800509c:	b004      	add	sp, #16
 800509e:	bd10      	pop	{r4, pc}
 80050a0:	20000774 	.word	0x20000774

080050a4 <lsm303ah_read_reg>:
 * @param  len   number of consecutive register to read
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t lsm303ah_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
		uint16_t len) {
 80050a4:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->read_reg(ctx->handle, reg, data, len);
 80050a6:	6844      	ldr	r4, [r0, #4]
 80050a8:	6880      	ldr	r0, [r0, #8]
 80050aa:	47a0      	blx	r4
	return ret;
}
 80050ac:	bd10      	pop	{r4, pc}

080050ae <lsm303ah_write_reg>:
 * @param  len   number of consecutive register to write
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t lsm303ah_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
		uint16_t len) {
 80050ae:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->write_reg(ctx->handle, reg, data, len);
 80050b0:	6804      	ldr	r4, [r0, #0]
 80050b2:	6880      	ldr	r0, [r0, #8]
 80050b4:	47a0      	blx	r4
	return ret;
}
 80050b6:	bd10      	pop	{r4, pc}

080050b8 <lsm303ah_xl_block_data_update_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of bdu in reg CTRL1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 80050b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_ctrl1_a_t ctrl1_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80050ba:	ac01      	add	r4, sp, #4
int32_t lsm303ah_xl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 80050bc:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80050be:	2301      	movs	r3, #1
 80050c0:	0022      	movs	r2, r4
 80050c2:	2120      	movs	r1, #32
int32_t lsm303ah_xl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 80050c4:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80050c6:	f7ff ffed 	bl	80050a4 <lsm303ah_read_reg>
	if (ret == 0) {
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d10a      	bne.n	80050e4 <lsm303ah_xl_block_data_update_set+0x2c>
		ctrl1_a.bdu = val;
 80050ce:	2301      	movs	r3, #1
 80050d0:	7821      	ldrb	r1, [r4, #0]
 80050d2:	401e      	ands	r6, r3
 80050d4:	4399      	bics	r1, r3
 80050d6:	4331      	orrs	r1, r6
 80050d8:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80050da:	0022      	movs	r2, r4
 80050dc:	2120      	movs	r1, #32
 80050de:	0028      	movs	r0, r5
 80050e0:	f7ff ffe5 	bl	80050ae <lsm303ah_write_reg>
	}

	return ret;
}
 80050e4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080050e6 <lsm303ah_mg_block_data_update_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param val     Change the values of bdu in reg CFG_REG_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 80050e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_c_m_t cfg_reg_c_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_C_M, (uint8_t*) &cfg_reg_c_m,
 80050e8:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 80050ea:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_C_M, (uint8_t*) &cfg_reg_c_m,
 80050ec:	2301      	movs	r3, #1
 80050ee:	0022      	movs	r2, r4
 80050f0:	2162      	movs	r1, #98	; 0x62
int32_t lsm303ah_mg_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 80050f2:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_C_M, (uint8_t*) &cfg_reg_c_m,
 80050f4:	f7ff ffd6 	bl	80050a4 <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d10c      	bne.n	8005116 <lsm303ah_mg_block_data_update_set+0x30>
		cfg_reg_c_m.bdu = val;
 80050fc:	2301      	movs	r3, #1
 80050fe:	2210      	movs	r2, #16
 8005100:	7821      	ldrb	r1, [r4, #0]
 8005102:	401e      	ands	r6, r3
 8005104:	4391      	bics	r1, r2
 8005106:	0136      	lsls	r6, r6, #4
 8005108:	4331      	orrs	r1, r6
 800510a:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_C_M,
 800510c:	0022      	movs	r2, r4
 800510e:	2162      	movs	r1, #98	; 0x62
 8005110:	0028      	movs	r0, r5
 8005112:	f7ff ffcc 	bl	80050ae <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_c_m, 1);
	}

	return ret;
}
 8005116:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08005118 <lsm303ah_xl_full_scale_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of fs in reg CTRL1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_full_scale_set(stmdev_ctx_t *ctx, lsm303ah_xl_fs_t val) {
 8005118:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_ctrl1_a_t ctrl1_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 800511a:	ac01      	add	r4, sp, #4
int32_t lsm303ah_xl_full_scale_set(stmdev_ctx_t *ctx, lsm303ah_xl_fs_t val) {
 800511c:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 800511e:	2301      	movs	r3, #1
 8005120:	0022      	movs	r2, r4
 8005122:	2120      	movs	r1, #32
int32_t lsm303ah_xl_full_scale_set(stmdev_ctx_t *ctx, lsm303ah_xl_fs_t val) {
 8005124:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 8005126:	f7ff ffbd 	bl	80050a4 <lsm303ah_read_reg>
	if (ret == 0) {
 800512a:	2800      	cmp	r0, #0
 800512c:	d10d      	bne.n	800514a <lsm303ah_xl_full_scale_set+0x32>
		ctrl1_a.fs = (uint8_t) val;
 800512e:	2103      	movs	r1, #3
 8005130:	230c      	movs	r3, #12
 8005132:	400e      	ands	r6, r1
 8005134:	7821      	ldrb	r1, [r4, #0]
 8005136:	00b6      	lsls	r6, r6, #2
 8005138:	4399      	bics	r1, r3
 800513a:	4331      	orrs	r1, r6
 800513c:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 800513e:	3b0b      	subs	r3, #11
 8005140:	0022      	movs	r2, r4
 8005142:	2120      	movs	r1, #32
 8005144:	0028      	movs	r0, r5
 8005146:	f7ff ffb2 	bl	80050ae <lsm303ah_write_reg>
	}

	return ret;
}
 800514a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800514c <lsm303ah_xl_data_rate_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of odr in reg CTRL1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_xl_odr_t val) {
 800514c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_ctrl1_a_t ctrl1_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 800514e:	ac01      	add	r4, sp, #4
int32_t lsm303ah_xl_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_xl_odr_t val) {
 8005150:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 8005152:	2301      	movs	r3, #1
 8005154:	0022      	movs	r2, r4
 8005156:	2120      	movs	r1, #32
int32_t lsm303ah_xl_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_xl_odr_t val) {
 8005158:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 800515a:	f7ff ffa3 	bl	80050a4 <lsm303ah_read_reg>
	if (ret == 0) {
 800515e:	2800      	cmp	r0, #0
 8005160:	d111      	bne.n	8005186 <lsm303ah_xl_data_rate_set+0x3a>
		ctrl1_a.odr = (uint8_t) val & 0x0FU;
 8005162:	220f      	movs	r2, #15
 8005164:	7821      	ldrb	r1, [r4, #0]
 8005166:	0133      	lsls	r3, r6, #4
 8005168:	4011      	ands	r1, r2
 800516a:	4319      	orrs	r1, r3
		ctrl1_a.hf_odr = ((uint8_t) val & 0x10U) >> 4;
 800516c:	2301      	movs	r3, #1
 800516e:	0936      	lsrs	r6, r6, #4
 8005170:	401e      	ands	r6, r3
 8005172:	409e      	lsls	r6, r3
 8005174:	32ee      	adds	r2, #238	; 0xee
 8005176:	4011      	ands	r1, r2
 8005178:	4331      	orrs	r1, r6
 800517a:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 800517c:	0022      	movs	r2, r4
 800517e:	2120      	movs	r1, #32
 8005180:	0028      	movs	r0, r5
 8005182:	f7ff ff94 	bl	80050ae <lsm303ah_write_reg>
	}

	return ret;
}
 8005186:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08005188 <lsm303ah_xl_status_reg_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Get registers STATUS.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_status_reg_get(stmdev_ctx_t *ctx, lsm303ah_status_a_t *val) {
 8005188:	b510      	push	{r4, lr}
 800518a:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_STATUS_A, (uint8_t*) val, 1);
 800518c:	2301      	movs	r3, #1
 800518e:	2127      	movs	r1, #39	; 0x27
 8005190:	f7ff ff88 	bl	80050a4 <lsm303ah_read_reg>
	return ret;
}
 8005194:	bd10      	pop	{r4, pc}

08005196 <lsm303ah_mg_status_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Get registers STATUS_REG.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_status_get(stmdev_ctx_t *ctx, lsm303ah_status_reg_m_t *val) {
 8005196:	b510      	push	{r4, lr}
 8005198:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_STATUS_REG_M, (uint8_t*) val, 1);
 800519a:	2301      	movs	r3, #1
 800519c:	2167      	movs	r1, #103	; 0x67
 800519e:	f7ff ff81 	bl	80050a4 <lsm303ah_read_reg>
	return ret;
}
 80051a2:	bd10      	pop	{r4, pc}

080051a4 <lsm303ah_mg_operating_mode_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of md in reg CFG_REG_A
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_operating_mode_set(stmdev_ctx_t *ctx, lsm303ah_mg_md_t val) {
 80051a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80051a6:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_operating_mode_set(stmdev_ctx_t *ctx, lsm303ah_mg_md_t val) {
 80051a8:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80051aa:	2301      	movs	r3, #1
 80051ac:	0022      	movs	r2, r4
 80051ae:	2160      	movs	r1, #96	; 0x60
int32_t lsm303ah_mg_operating_mode_set(stmdev_ctx_t *ctx, lsm303ah_mg_md_t val) {
 80051b0:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80051b2:	f7ff ff77 	bl	80050a4 <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 80051b6:	2800      	cmp	r0, #0
 80051b8:	d10b      	bne.n	80051d2 <lsm303ah_mg_operating_mode_set+0x2e>
		cfg_reg_a_m.md = (uint8_t) val;
 80051ba:	2303      	movs	r3, #3
 80051bc:	7821      	ldrb	r1, [r4, #0]
 80051be:	401e      	ands	r6, r3
 80051c0:	4399      	bics	r1, r3
 80051c2:	4331      	orrs	r1, r6
 80051c4:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_A_M,
 80051c6:	3b02      	subs	r3, #2
 80051c8:	0022      	movs	r2, r4
 80051ca:	2160      	movs	r1, #96	; 0x60
 80051cc:	0028      	movs	r0, r5
 80051ce:	f7ff ff6e 	bl	80050ae <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_a_m, 1);
	}

	return ret;
}
 80051d2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080051d4 <lsm303ah_mg_data_rate_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of odr in reg CFG_REG_A
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_mg_odr_t val) {
 80051d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80051d6:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_mg_odr_t val) {
 80051d8:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80051da:	2301      	movs	r3, #1
 80051dc:	0022      	movs	r2, r4
 80051de:	2160      	movs	r1, #96	; 0x60
int32_t lsm303ah_mg_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_mg_odr_t val) {
 80051e0:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80051e2:	f7ff ff5f 	bl	80050a4 <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d10d      	bne.n	8005206 <lsm303ah_mg_data_rate_set+0x32>
		cfg_reg_a_m.odr = (uint8_t) val;
 80051ea:	2103      	movs	r1, #3
 80051ec:	230c      	movs	r3, #12
 80051ee:	400e      	ands	r6, r1
 80051f0:	7821      	ldrb	r1, [r4, #0]
 80051f2:	00b6      	lsls	r6, r6, #2
 80051f4:	4399      	bics	r1, r3
 80051f6:	4331      	orrs	r1, r6
 80051f8:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_A_M,
 80051fa:	3b0b      	subs	r3, #11
 80051fc:	0022      	movs	r2, r4
 80051fe:	2160      	movs	r1, #96	; 0x60
 8005200:	0028      	movs	r0, r5
 8005202:	f7ff ff54 	bl	80050ae <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_a_m, 1);
	}

	return ret;
}
 8005206:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08005208 <lsm303ah_mg_offset_temp_comp_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of comp_temp_en in reg CFG_REG_A
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val) {
 8005208:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 800520a:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val) {
 800520c:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 800520e:	2301      	movs	r3, #1
 8005210:	0022      	movs	r2, r4
 8005212:	2160      	movs	r1, #96	; 0x60
int32_t lsm303ah_mg_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val) {
 8005214:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 8005216:	f7ff ff45 	bl	80050a4 <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 800521a:	2800      	cmp	r0, #0
 800521c:	d10b      	bne.n	8005236 <lsm303ah_mg_offset_temp_comp_set+0x2e>
		cfg_reg_a_m.comp_temp_en = val;
 800521e:	237f      	movs	r3, #127	; 0x7f
 8005220:	7821      	ldrb	r1, [r4, #0]
 8005222:	01f6      	lsls	r6, r6, #7
 8005224:	4019      	ands	r1, r3
 8005226:	4331      	orrs	r1, r6
 8005228:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_A_M,
 800522a:	3b7e      	subs	r3, #126	; 0x7e
 800522c:	0022      	movs	r2, r4
 800522e:	2160      	movs	r1, #96	; 0x60
 8005230:	0028      	movs	r0, r5
 8005232:	f7ff ff3c 	bl	80050ae <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_a_m, 1);
	}

	return ret;
}
 8005236:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08005238 <lsm303ah_mg_set_rst_mode_set>:
 * @param  val    Change the values of set_rst in reg CFG_REG_B
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_set_rst_mode_set(stmdev_ctx_t *ctx,
		lsm303ah_mg_set_rst_t val) {
 8005238:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_b_m_t cfg_reg_b_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_B_M, (uint8_t*) &cfg_reg_b_m,
 800523a:	ac01      	add	r4, sp, #4
		lsm303ah_mg_set_rst_t val) {
 800523c:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_B_M, (uint8_t*) &cfg_reg_b_m,
 800523e:	2301      	movs	r3, #1
 8005240:	0022      	movs	r2, r4
 8005242:	2161      	movs	r1, #97	; 0x61
		lsm303ah_mg_set_rst_t val) {
 8005244:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_B_M, (uint8_t*) &cfg_reg_b_m,
 8005246:	f7ff ff2d 	bl	80050a4 <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 800524a:	2800      	cmp	r0, #0
 800524c:	d10d      	bne.n	800526a <lsm303ah_mg_set_rst_mode_set+0x32>
		cfg_reg_b_m.set_rst = (uint8_t) val;
 800524e:	2103      	movs	r1, #3
 8005250:	2306      	movs	r3, #6
 8005252:	400e      	ands	r6, r1
 8005254:	7821      	ldrb	r1, [r4, #0]
 8005256:	0076      	lsls	r6, r6, #1
 8005258:	4399      	bics	r1, r3
 800525a:	4331      	orrs	r1, r6
 800525c:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_B_M,
 800525e:	3b05      	subs	r3, #5
 8005260:	0022      	movs	r2, r4
 8005262:	2161      	movs	r1, #97	; 0x61
 8005264:	0028      	movs	r0, r5
 8005266:	f7ff ff22 	bl	80050ae <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_b_m, 1);
	}

	return ret;
}
 800526a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800526c <lsm303ah_acceleration_raw_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  buff   buffer that stores data read.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff) {
 800526c:	b510      	push	{r4, lr}
 800526e:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_OUT_X_L_A, buff, 6);
 8005270:	2306      	movs	r3, #6
 8005272:	2128      	movs	r1, #40	; 0x28
 8005274:	f7ff ff16 	bl	80050a4 <lsm303ah_read_reg>
	return ret;
}
 8005278:	bd10      	pop	{r4, pc}

0800527a <lsm303ah_magnetic_raw_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  buff   buffer that stores data read.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff) {
 800527a:	b510      	push	{r4, lr}
 800527c:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_OUTX_L_REG_M, buff, 6);
 800527e:	2306      	movs	r3, #6
 8005280:	2168      	movs	r1, #104	; 0x68
 8005282:	f7ff ff0f 	bl	80050a4 <lsm303ah_read_reg>
	return ret;
}
 8005286:	bd10      	pop	{r4, pc}

08005288 <fn_get_lsm303ah>:
void fn_get_lsm303ah() {
 8005288:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev_ctx_xl.read_reg = platform_read;
 800528a:	4b9a      	ldr	r3, [pc, #616]	; (80054f4 <fn_get_lsm303ah+0x26c>)
void fn_get_lsm303ah() {
 800528c:	b08b      	sub	sp, #44	; 0x2c
	dev_ctx_xl.handle = (void*) LSM303AH_I2C_ADD_XL;
 800528e:	213b      	movs	r1, #59	; 0x3b
	dev_ctx_xl.read_reg = platform_read;
 8005290:	9305      	str	r3, [sp, #20]
	dev_ctx_mg.read_reg = platform_read;
 8005292:	9308      	str	r3, [sp, #32]
	dev_ctx_mg.handle = (void*) LSM303AH_I2C_ADD_MG;
 8005294:	233d      	movs	r3, #61	; 0x3d
	dev_ctx_xl.write_reg = platform_write;
 8005296:	4a98      	ldr	r2, [pc, #608]	; (80054f8 <fn_get_lsm303ah+0x270>)
	lsm303ah_xl_status_reg_get(&dev_ctx_xl, &reg.status_a);
 8005298:	ad03      	add	r5, sp, #12
	dev_ctx_xl.handle = (void*) LSM303AH_I2C_ADD_XL;
 800529a:	9106      	str	r1, [sp, #24]
	lsm303ah_xl_status_reg_get(&dev_ctx_xl, &reg.status_a);
 800529c:	a804      	add	r0, sp, #16
 800529e:	0029      	movs	r1, r5
	dev_ctx_mg.handle = (void*) LSM303AH_I2C_ADD_MG;
 80052a0:	9309      	str	r3, [sp, #36]	; 0x24
	dev_ctx_xl.write_reg = platform_write;
 80052a2:	9204      	str	r2, [sp, #16]
	dev_ctx_mg.write_reg = platform_write;
 80052a4:	9207      	str	r2, [sp, #28]
	lsm303ah_xl_status_reg_get(&dev_ctx_xl, &reg.status_a);
 80052a6:	f7ff ff6f 	bl	8005188 <lsm303ah_xl_status_reg_get>
	if (reg.status_a.drdy) {
 80052aa:	782b      	ldrb	r3, [r5, #0]
 80052ac:	4f93      	ldr	r7, [pc, #588]	; (80054fc <fn_get_lsm303ah+0x274>)
 80052ae:	07db      	lsls	r3, r3, #31
 80052b0:	d521      	bpl.n	80052f6 <fn_get_lsm303ah+0x6e>
		memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
 80052b2:	4c93      	ldr	r4, [pc, #588]	; (8005500 <fn_get_lsm303ah+0x278>)
 80052b4:	2206      	movs	r2, #6
 80052b6:	2100      	movs	r1, #0
 80052b8:	0020      	movs	r0, r4
 80052ba:	f000 fe1f 	bl	8005efc <memset>
		lsm303ah_acceleration_raw_get(&dev_ctx_xl, data_raw_acceleration.u8bit);
 80052be:	0021      	movs	r1, r4
 80052c0:	a804      	add	r0, sp, #16
 80052c2:	f7ff ffd3 	bl	800526c <lsm303ah_acceleration_raw_get>
	return ((float_t) lsb * 0.061f);
 80052c6:	2300      	movs	r3, #0
 80052c8:	5ee0      	ldrsh	r0, [r4, r3]
 80052ca:	f7fb fa23 	bl	8000714 <__aeabi_i2f>
 80052ce:	498d      	ldr	r1, [pc, #564]	; (8005504 <fn_get_lsm303ah+0x27c>)
 80052d0:	f7fb f8e0 	bl	8000494 <__aeabi_fmul>
		acceleration_mg[0] = lsm303ah_from_fs2g_to_mg(
 80052d4:	6038      	str	r0, [r7, #0]
	return ((float_t) lsb * 0.061f);
 80052d6:	2302      	movs	r3, #2
 80052d8:	5ee0      	ldrsh	r0, [r4, r3]
 80052da:	f7fb fa1b 	bl	8000714 <__aeabi_i2f>
 80052de:	4989      	ldr	r1, [pc, #548]	; (8005504 <fn_get_lsm303ah+0x27c>)
 80052e0:	f7fb f8d8 	bl	8000494 <__aeabi_fmul>
		acceleration_mg[1] = lsm303ah_from_fs2g_to_mg(
 80052e4:	6078      	str	r0, [r7, #4]
	return ((float_t) lsb * 0.061f);
 80052e6:	2304      	movs	r3, #4
 80052e8:	5ee0      	ldrsh	r0, [r4, r3]
 80052ea:	f7fb fa13 	bl	8000714 <__aeabi_i2f>
 80052ee:	4985      	ldr	r1, [pc, #532]	; (8005504 <fn_get_lsm303ah+0x27c>)
 80052f0:	f7fb f8d0 	bl	8000494 <__aeabi_fmul>
		acceleration_mg[2] = lsm303ah_from_fs2g_to_mg(
 80052f4:	60b8      	str	r0, [r7, #8]
	lsm303ah_mg_status_get(&dev_ctx_mg, &reg.status_reg_m);
 80052f6:	0029      	movs	r1, r5
 80052f8:	a807      	add	r0, sp, #28
 80052fa:	f7ff ff4c 	bl	8005196 <lsm303ah_mg_status_get>
	if (reg.status_reg_m.zyxda) {
 80052fe:	782b      	ldrb	r3, [r5, #0]
 8005300:	4d81      	ldr	r5, [pc, #516]	; (8005508 <fn_get_lsm303ah+0x280>)
 8005302:	071b      	lsls	r3, r3, #28
 8005304:	d524      	bpl.n	8005350 <fn_get_lsm303ah+0xc8>
		memset(data_raw_magnetic.u8bit, 0x00, 3 * sizeof(int16_t));
 8005306:	4c81      	ldr	r4, [pc, #516]	; (800550c <fn_get_lsm303ah+0x284>)
 8005308:	2206      	movs	r2, #6
 800530a:	2100      	movs	r1, #0
 800530c:	0020      	movs	r0, r4
 800530e:	f000 fdf5 	bl	8005efc <memset>
		lsm303ah_magnetic_raw_get(&dev_ctx_mg, data_raw_magnetic.u8bit);
 8005312:	0021      	movs	r1, r4
 8005314:	a807      	add	r0, sp, #28
 8005316:	f7ff ffb0 	bl	800527a <lsm303ah_magnetic_raw_get>
	return ((float_t) lsb * 1.5f);
 800531a:	2300      	movs	r3, #0
 800531c:	5ee0      	ldrsh	r0, [r4, r3]
 800531e:	f7fb f9f9 	bl	8000714 <__aeabi_i2f>
 8005322:	21ff      	movs	r1, #255	; 0xff
 8005324:	0589      	lsls	r1, r1, #22
 8005326:	f7fb f8b5 	bl	8000494 <__aeabi_fmul>
		magnetic_mG[0] = lsm303ah_from_lsb_to_mgauss(
 800532a:	6028      	str	r0, [r5, #0]
	return ((float_t) lsb * 1.5f);
 800532c:	2302      	movs	r3, #2
 800532e:	5ee0      	ldrsh	r0, [r4, r3]
 8005330:	f7fb f9f0 	bl	8000714 <__aeabi_i2f>
 8005334:	21ff      	movs	r1, #255	; 0xff
 8005336:	0589      	lsls	r1, r1, #22
 8005338:	f7fb f8ac 	bl	8000494 <__aeabi_fmul>
		magnetic_mG[1] = lsm303ah_from_lsb_to_mgauss(
 800533c:	6068      	str	r0, [r5, #4]
	return ((float_t) lsb * 1.5f);
 800533e:	2304      	movs	r3, #4
 8005340:	5ee0      	ldrsh	r0, [r4, r3]
 8005342:	f7fb f9e7 	bl	8000714 <__aeabi_i2f>
 8005346:	21ff      	movs	r1, #255	; 0xff
 8005348:	0589      	lsls	r1, r1, #22
 800534a:	f7fb f8a3 	bl	8000494 <__aeabi_fmul>
		magnetic_mG[2] = lsm303ah_from_lsb_to_mgauss(
 800534e:	60a8      	str	r0, [r5, #8]
	st_accelerometer.a_x = acceleration_mg[0];
 8005350:	6838      	ldr	r0, [r7, #0]
 8005352:	f7fb f9bf 	bl	80006d4 <__aeabi_f2iz>
 8005356:	4c6e      	ldr	r4, [pc, #440]	; (8005510 <fn_get_lsm303ah+0x288>)
 8005358:	b206      	sxth	r6, r0
 800535a:	8026      	strh	r6, [r4, #0]
	st_accelerometer.a_y = acceleration_mg[1];
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fb f9b9 	bl	80006d4 <__aeabi_f2iz>
 8005362:	b203      	sxth	r3, r0
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	466b      	mov	r3, sp
 8005368:	881b      	ldrh	r3, [r3, #0]
	st_accelerometer.a_z = acceleration_mg[2];
 800536a:	68b8      	ldr	r0, [r7, #8]
	st_accelerometer.a_y = acceleration_mg[1];
 800536c:	8063      	strh	r3, [r4, #2]
	st_accelerometer.a_z = acceleration_mg[2];
 800536e:	f7fb f9b1 	bl	80006d4 <__aeabi_f2iz>
 8005372:	b200      	sxth	r0, r0
 8005374:	80a0      	strh	r0, [r4, #4]
	st_accelerometer.pitch_y = (atan2(st_accelerometer.a_y, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z)) * 180.0) / M_PI; //angulo eixo y
 8005376:	4376      	muls	r6, r6
 8005378:	4340      	muls	r0, r0
 800537a:	1830      	adds	r0, r6, r0
 800537c:	f7fc ff48 	bl	8002210 <__aeabi_i2d>
 8005380:	f000 fdd0 	bl	8005f24 <sqrt>
 8005384:	0006      	movs	r6, r0
 8005386:	000f      	movs	r7, r1
 8005388:	9800      	ldr	r0, [sp, #0]
 800538a:	f7fc ff41 	bl	8002210 <__aeabi_i2d>
 800538e:	0032      	movs	r2, r6
 8005390:	003b      	movs	r3, r7
 8005392:	f000 fdc3 	bl	8005f1c <atan2>
 8005396:	2200      	movs	r2, #0
 8005398:	4b5e      	ldr	r3, [pc, #376]	; (8005514 <fn_get_lsm303ah+0x28c>)
 800539a:	f7fc f94f 	bl	800163c <__aeabi_dmul>
 800539e:	4a5e      	ldr	r2, [pc, #376]	; (8005518 <fn_get_lsm303ah+0x290>)
 80053a0:	4b5e      	ldr	r3, [pc, #376]	; (800551c <fn_get_lsm303ah+0x294>)
 80053a2:	f7fb fd17 	bl	8000dd4 <__aeabi_ddiv>
 80053a6:	f7fc feff 	bl	80021a8 <__aeabi_d2iz>
 80053aa:	80e0      	strh	r0, [r4, #6]
	st_accelerometer.pitch = (atan2(st_accelerometer.a_x, sqrt(st_accelerometer.a_y * st_accelerometer.a_y + st_accelerometer.a_z * st_accelerometer.a_z)) * 180.0) / M_PI; // angulo eixo x
 80053ac:	2300      	movs	r3, #0
 80053ae:	5ee0      	ldrsh	r0, [r4, r3]
 80053b0:	f7fc ff2e 	bl	8002210 <__aeabi_i2d>
 80053b4:	0006      	movs	r6, r0
 80053b6:	2302      	movs	r3, #2
 80053b8:	5ee0      	ldrsh	r0, [r4, r3]
 80053ba:	2204      	movs	r2, #4
 80053bc:	5ea3      	ldrsh	r3, [r4, r2]
 80053be:	4340      	muls	r0, r0
 80053c0:	435b      	muls	r3, r3
 80053c2:	18c0      	adds	r0, r0, r3
 80053c4:	000f      	movs	r7, r1
 80053c6:	f7fc ff23 	bl	8002210 <__aeabi_i2d>
 80053ca:	f000 fdab 	bl	8005f24 <sqrt>
 80053ce:	0002      	movs	r2, r0
 80053d0:	000b      	movs	r3, r1
 80053d2:	0030      	movs	r0, r6
 80053d4:	0039      	movs	r1, r7
 80053d6:	f000 fda1 	bl	8005f1c <atan2>
 80053da:	2200      	movs	r2, #0
 80053dc:	4b4d      	ldr	r3, [pc, #308]	; (8005514 <fn_get_lsm303ah+0x28c>)
 80053de:	f7fc f92d 	bl	800163c <__aeabi_dmul>
 80053e2:	4b4e      	ldr	r3, [pc, #312]	; (800551c <fn_get_lsm303ah+0x294>)
 80053e4:	4a4c      	ldr	r2, [pc, #304]	; (8005518 <fn_get_lsm303ah+0x290>)
 80053e6:	f7fb fcf5 	bl	8000dd4 <__aeabi_ddiv>
 80053ea:	f7fc fedd 	bl	80021a8 <__aeabi_d2iz>
 80053ee:	8120      	strh	r0, [r4, #8]
	st_accelerometer.roll = (atan2(st_accelerometer.a_y,st_accelerometer.a_z) * 180.0) / M_PI;
 80053f0:	2304      	movs	r3, #4
 80053f2:	5ee0      	ldrsh	r0, [r4, r3]
 80053f4:	f7fc ff0c 	bl	8002210 <__aeabi_i2d>
 80053f8:	0006      	movs	r6, r0
 80053fa:	000f      	movs	r7, r1
 80053fc:	2302      	movs	r3, #2
 80053fe:	5ee0      	ldrsh	r0, [r4, r3]
 8005400:	f7fc ff06 	bl	8002210 <__aeabi_i2d>
 8005404:	0032      	movs	r2, r6
 8005406:	003b      	movs	r3, r7
 8005408:	f000 fd88 	bl	8005f1c <atan2>
 800540c:	2200      	movs	r2, #0
 800540e:	4b41      	ldr	r3, [pc, #260]	; (8005514 <fn_get_lsm303ah+0x28c>)
 8005410:	f7fc f914 	bl	800163c <__aeabi_dmul>
 8005414:	4b41      	ldr	r3, [pc, #260]	; (800551c <fn_get_lsm303ah+0x294>)
 8005416:	4a40      	ldr	r2, [pc, #256]	; (8005518 <fn_get_lsm303ah+0x290>)
 8005418:	f7fb fcdc 	bl	8000dd4 <__aeabi_ddiv>
 800541c:	f7fc fec4 	bl	80021a8 <__aeabi_d2iz>
 8005420:	8160      	strh	r0, [r4, #10]
	st_accelerometer.roll_x = (atan2(st_accelerometer.a_x, st_accelerometer.a_z) * 180.0) / M_PI;
 8005422:	2304      	movs	r3, #4
 8005424:	5ee0      	ldrsh	r0, [r4, r3]
 8005426:	f7fc fef3 	bl	8002210 <__aeabi_i2d>
 800542a:	0006      	movs	r6, r0
 800542c:	000f      	movs	r7, r1
 800542e:	2300      	movs	r3, #0
 8005430:	5ee0      	ldrsh	r0, [r4, r3]
 8005432:	f7fc feed 	bl	8002210 <__aeabi_i2d>
 8005436:	0032      	movs	r2, r6
 8005438:	003b      	movs	r3, r7
 800543a:	f000 fd6f 	bl	8005f1c <atan2>
 800543e:	2200      	movs	r2, #0
 8005440:	4b34      	ldr	r3, [pc, #208]	; (8005514 <fn_get_lsm303ah+0x28c>)
 8005442:	f7fc f8fb 	bl	800163c <__aeabi_dmul>
 8005446:	4a34      	ldr	r2, [pc, #208]	; (8005518 <fn_get_lsm303ah+0x290>)
 8005448:	4b34      	ldr	r3, [pc, #208]	; (800551c <fn_get_lsm303ah+0x294>)
 800544a:	f7fb fcc3 	bl	8000dd4 <__aeabi_ddiv>
 800544e:	f7fc feab 	bl	80021a8 <__aeabi_d2iz>
	st_accelerometer.yaw = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 8005452:	2304      	movs	r3, #4
 8005454:	5ee6      	ldrsh	r6, [r4, r3]
	st_accelerometer.roll_x = (atan2(st_accelerometer.a_x, st_accelerometer.a_z) * 180.0) / M_PI;
 8005456:	81a0      	strh	r0, [r4, #12]
	st_accelerometer.yaw = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 8005458:	2300      	movs	r3, #0
 800545a:	5ee0      	ldrsh	r0, [r4, r3]
 800545c:	0033      	movs	r3, r6
 800545e:	4340      	muls	r0, r0
 8005460:	4373      	muls	r3, r6
 8005462:	18c0      	adds	r0, r0, r3
 8005464:	f7fc fed4 	bl	8002210 <__aeabi_i2d>
 8005468:	f000 fd5c 	bl	8005f24 <sqrt>
 800546c:	9000      	str	r0, [sp, #0]
 800546e:	9101      	str	r1, [sp, #4]
 8005470:	0030      	movs	r0, r6
 8005472:	f7fc fecd 	bl	8002210 <__aeabi_i2d>
 8005476:	9a00      	ldr	r2, [sp, #0]
 8005478:	9b01      	ldr	r3, [sp, #4]
 800547a:	f000 fd4f 	bl	8005f1c <atan2>
 800547e:	2200      	movs	r2, #0
 8005480:	4b24      	ldr	r3, [pc, #144]	; (8005514 <fn_get_lsm303ah+0x28c>)
 8005482:	f7fc f8db 	bl	800163c <__aeabi_dmul>
 8005486:	4a24      	ldr	r2, [pc, #144]	; (8005518 <fn_get_lsm303ah+0x290>)
 8005488:	4b24      	ldr	r3, [pc, #144]	; (800551c <fn_get_lsm303ah+0x294>)
 800548a:	f7fb fca3 	bl	8000dd4 <__aeabi_ddiv>
 800548e:	f7fc fe8b 	bl	80021a8 <__aeabi_d2iz>
	st_accelerometer.yaw_y = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 8005492:	2304      	movs	r3, #4
 8005494:	5ee6      	ldrsh	r6, [r4, r3]
	st_accelerometer.yaw = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 8005496:	81e0      	strh	r0, [r4, #14]
	st_accelerometer.yaw_y = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 8005498:	2300      	movs	r3, #0
 800549a:	5ee0      	ldrsh	r0, [r4, r3]
 800549c:	0033      	movs	r3, r6
 800549e:	4340      	muls	r0, r0
 80054a0:	4373      	muls	r3, r6
 80054a2:	18c0      	adds	r0, r0, r3
 80054a4:	f7fc feb4 	bl	8002210 <__aeabi_i2d>
 80054a8:	f000 fd3c 	bl	8005f24 <sqrt>
 80054ac:	9000      	str	r0, [sp, #0]
 80054ae:	9101      	str	r1, [sp, #4]
 80054b0:	0030      	movs	r0, r6
 80054b2:	f7fc fead 	bl	8002210 <__aeabi_i2d>
 80054b6:	9a00      	ldr	r2, [sp, #0]
 80054b8:	9b01      	ldr	r3, [sp, #4]
 80054ba:	f000 fd2f 	bl	8005f1c <atan2>
 80054be:	2200      	movs	r2, #0
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <fn_get_lsm303ah+0x28c>)
 80054c2:	f7fc f8bb 	bl	800163c <__aeabi_dmul>
 80054c6:	4a14      	ldr	r2, [pc, #80]	; (8005518 <fn_get_lsm303ah+0x290>)
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <fn_get_lsm303ah+0x294>)
 80054ca:	f7fb fc83 	bl	8000dd4 <__aeabi_ddiv>
 80054ce:	f7fc fe6b 	bl	80021a8 <__aeabi_d2iz>
 80054d2:	8220      	strh	r0, [r4, #16]
	st_magnetometer.m_x = magnetic_mG[0];
 80054d4:	6828      	ldr	r0, [r5, #0]
 80054d6:	f7fb f8fd 	bl	80006d4 <__aeabi_f2iz>
 80054da:	4c11      	ldr	r4, [pc, #68]	; (8005520 <fn_get_lsm303ah+0x298>)
 80054dc:	8020      	strh	r0, [r4, #0]
	st_magnetometer.m_y = magnetic_mG[1];
 80054de:	6868      	ldr	r0, [r5, #4]
 80054e0:	f7fb f8f8 	bl	80006d4 <__aeabi_f2iz>
 80054e4:	8060      	strh	r0, [r4, #2]
	st_magnetometer.m_z = magnetic_mG[2];
 80054e6:	68a8      	ldr	r0, [r5, #8]
 80054e8:	f7fb f8f4 	bl	80006d4 <__aeabi_f2iz>
 80054ec:	80a0      	strh	r0, [r4, #4]
}
 80054ee:	b00b      	add	sp, #44	; 0x2c
 80054f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	08005081 	.word	0x08005081
 80054f8:	0800505d 	.word	0x0800505d
 80054fc:	20000088 	.word	0x20000088
 8005500:	20000094 	.word	0x20000094
 8005504:	3d79db23 	.word	0x3d79db23
 8005508:	200000a0 	.word	0x200000a0
 800550c:	2000009a 	.word	0x2000009a
 8005510:	200001c0 	.word	0x200001c0
 8005514:	40668000 	.word	0x40668000
 8005518:	54442d18 	.word	0x54442d18
 800551c:	400921fb 	.word	0x400921fb
 8005520:	20000270 	.word	0x20000270

08005524 <lsm303ah_xl_device_id_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  buff   buffer that stores data read.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff) {
 8005524:	b510      	push	{r4, lr}
 8005526:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_WHO_AM_I_A, buff, 1);
 8005528:	2301      	movs	r3, #1
 800552a:	210f      	movs	r1, #15
 800552c:	f7ff fdba 	bl	80050a4 <lsm303ah_read_reg>
	return ret;
}
 8005530:	bd10      	pop	{r4, pc}

08005532 <lsm303ah_mg_device_id_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  buff   buffer that stores data read.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff) {
 8005532:	b510      	push	{r4, lr}
 8005534:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_WHO_AM_I_M, buff, 1);
 8005536:	2301      	movs	r3, #1
 8005538:	214f      	movs	r1, #79	; 0x4f
 800553a:	f7ff fdb3 	bl	80050a4 <lsm303ah_read_reg>
	return ret;
}
 800553e:	bd10      	pop	{r4, pc}

08005540 <lsm303ah_xl_reset_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of soft_reset in reg CTRL2
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8005540:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_ctrl2_a_t ctrl2_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8005542:	ac01      	add	r4, sp, #4
int32_t lsm303ah_xl_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8005544:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8005546:	2301      	movs	r3, #1
 8005548:	0022      	movs	r2, r4
 800554a:	2121      	movs	r1, #33	; 0x21
int32_t lsm303ah_xl_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 800554c:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 800554e:	f7ff fda9 	bl	80050a4 <lsm303ah_read_reg>
	if (ret == 0) {
 8005552:	2800      	cmp	r0, #0
 8005554:	d10c      	bne.n	8005570 <lsm303ah_xl_reset_set+0x30>
		ctrl2_a.soft_reset = val;
 8005556:	2301      	movs	r3, #1
 8005558:	2240      	movs	r2, #64	; 0x40
 800555a:	7821      	ldrb	r1, [r4, #0]
 800555c:	401e      	ands	r6, r3
 800555e:	4391      	bics	r1, r2
 8005560:	01b6      	lsls	r6, r6, #6
 8005562:	4331      	orrs	r1, r6
 8005564:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8005566:	0022      	movs	r2, r4
 8005568:	2121      	movs	r1, #33	; 0x21
 800556a:	0028      	movs	r0, r5
 800556c:	f7ff fd9f 	bl	80050ae <lsm303ah_write_reg>
	}

	return ret;
}
 8005570:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08005572 <lsm303ah_xl_reset_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Get the values of soft_reset in reg CTRL2.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_reset_get(stmdev_ctx_t *ctx, uint8_t *val) {
 8005572:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005574:	000c      	movs	r4, r1
	lsm303ah_ctrl2_a_t ctrl2_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8005576:	ad01      	add	r5, sp, #4
 8005578:	002a      	movs	r2, r5
 800557a:	2301      	movs	r3, #1
 800557c:	2121      	movs	r1, #33	; 0x21
 800557e:	f7ff fd91 	bl	80050a4 <lsm303ah_read_reg>
	*val = ctrl2_a.soft_reset;
 8005582:	782b      	ldrb	r3, [r5, #0]
 8005584:	065b      	lsls	r3, r3, #25
 8005586:	0fdb      	lsrs	r3, r3, #31
 8005588:	7023      	strb	r3, [r4, #0]

	return ret;
}
 800558a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800558c <lsm303ah_mg_reset_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of soft_rst in reg CFG_REG_A
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 800558c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 800558e:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8005590:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 8005592:	2301      	movs	r3, #1
 8005594:	0022      	movs	r2, r4
 8005596:	2160      	movs	r1, #96	; 0x60
int32_t lsm303ah_mg_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8005598:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 800559a:	f7ff fd83 	bl	80050a4 <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 800559e:	2800      	cmp	r0, #0
 80055a0:	d10c      	bne.n	80055bc <lsm303ah_mg_reset_set+0x30>
		cfg_reg_a_m.soft_rst = val;
 80055a2:	2301      	movs	r3, #1
 80055a4:	2220      	movs	r2, #32
 80055a6:	7821      	ldrb	r1, [r4, #0]
 80055a8:	401e      	ands	r6, r3
 80055aa:	4391      	bics	r1, r2
 80055ac:	0176      	lsls	r6, r6, #5
 80055ae:	4331      	orrs	r1, r6
 80055b0:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_A_M,
 80055b2:	0022      	movs	r2, r4
 80055b4:	2160      	movs	r1, #96	; 0x60
 80055b6:	0028      	movs	r0, r5
 80055b8:	f7ff fd79 	bl	80050ae <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_a_m, 1);
	}

	return ret;
}
 80055bc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080055be <lsm303ah_mg_reset_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Get the values of soft_rst in reg CFG_REG_A.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_reset_get(stmdev_ctx_t *ctx, uint8_t *val) {
 80055be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055c0:	000c      	movs	r4, r1
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80055c2:	ad01      	add	r5, sp, #4
 80055c4:	002a      	movs	r2, r5
 80055c6:	2301      	movs	r3, #1
 80055c8:	2160      	movs	r1, #96	; 0x60
 80055ca:	f7ff fd6b 	bl	80050a4 <lsm303ah_read_reg>
			1);
	*val = cfg_reg_a_m.soft_rst;
 80055ce:	782b      	ldrb	r3, [r5, #0]
 80055d0:	069b      	lsls	r3, r3, #26
 80055d2:	0fdb      	lsrs	r3, r3, #31
 80055d4:	7023      	strb	r3, [r4, #0]

	return ret;
}
 80055d6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080055d8 <fn_init_lsm303ah>:
void fn_init_lsm303ah() {
 80055d8:	b530      	push	{r4, r5, lr}
	dev_ctx_xl.read_reg = platform_read;
 80055da:	4b2c      	ldr	r3, [pc, #176]	; (800568c <fn_init_lsm303ah+0xb4>)
void fn_init_lsm303ah() {
 80055dc:	b087      	sub	sp, #28
	dev_ctx_xl.handle = (void*) LSM303AH_I2C_ADD_XL;
 80055de:	213b      	movs	r1, #59	; 0x3b
	dev_ctx_xl.read_reg = platform_read;
 80055e0:	9301      	str	r3, [sp, #4]
	dev_ctx_mg.read_reg = platform_read;
 80055e2:	9304      	str	r3, [sp, #16]
	whoamI = 0;
 80055e4:	2500      	movs	r5, #0
	dev_ctx_mg.handle = (void*) LSM303AH_I2C_ADD_MG;
 80055e6:	233d      	movs	r3, #61	; 0x3d
	whoamI = 0;
 80055e8:	4c29      	ldr	r4, [pc, #164]	; (8005690 <fn_init_lsm303ah+0xb8>)
	dev_ctx_xl.write_reg = platform_write;
 80055ea:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <fn_init_lsm303ah+0xbc>)
	dev_ctx_xl.handle = (void*) LSM303AH_I2C_ADD_XL;
 80055ec:	9102      	str	r1, [sp, #8]
	lsm303ah_xl_device_id_get(&dev_ctx_xl, &whoamI);
 80055ee:	4668      	mov	r0, sp
 80055f0:	0021      	movs	r1, r4
	dev_ctx_mg.handle = (void*) LSM303AH_I2C_ADD_MG;
 80055f2:	9305      	str	r3, [sp, #20]
	dev_ctx_xl.write_reg = platform_write;
 80055f4:	9200      	str	r2, [sp, #0]
	dev_ctx_mg.write_reg = platform_write;
 80055f6:	9203      	str	r2, [sp, #12]
	whoamI = 0;
 80055f8:	7025      	strb	r5, [r4, #0]
	lsm303ah_xl_device_id_get(&dev_ctx_xl, &whoamI);
 80055fa:	f7ff ff93 	bl	8005524 <lsm303ah_xl_device_id_get>
	if (whoamI != LSM303AH_ID_XL)
 80055fe:	7823      	ldrb	r3, [r4, #0]
 8005600:	2b43      	cmp	r3, #67	; 0x43
 8005602:	d000      	beq.n	8005606 <fn_init_lsm303ah+0x2e>
 8005604:	e7fe      	b.n	8005604 <fn_init_lsm303ah+0x2c>
	lsm303ah_mg_device_id_get(&dev_ctx_mg, &whoamI);
 8005606:	0021      	movs	r1, r4
 8005608:	a803      	add	r0, sp, #12
	whoamI = 0;
 800560a:	7025      	strb	r5, [r4, #0]
	lsm303ah_mg_device_id_get(&dev_ctx_mg, &whoamI);
 800560c:	f7ff ff91 	bl	8005532 <lsm303ah_mg_device_id_get>
	if (whoamI != LSM303AH_ID_MG)
 8005610:	7823      	ldrb	r3, [r4, #0]
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d000      	beq.n	8005618 <fn_init_lsm303ah+0x40>
 8005616:	e7fe      	b.n	8005616 <fn_init_lsm303ah+0x3e>
	lsm303ah_xl_reset_set(&dev_ctx_xl, PROPERTY_ENABLE);
 8005618:	2101      	movs	r1, #1
 800561a:	4668      	mov	r0, sp
 800561c:	f7ff ff90 	bl	8005540 <lsm303ah_xl_reset_set>
		lsm303ah_xl_reset_get(&dev_ctx_xl, &rst);
 8005620:	4d1d      	ldr	r5, [pc, #116]	; (8005698 <fn_init_lsm303ah+0xc0>)
 8005622:	4668      	mov	r0, sp
 8005624:	0029      	movs	r1, r5
 8005626:	f7ff ffa4 	bl	8005572 <lsm303ah_xl_reset_get>
	} while (rst);
 800562a:	782b      	ldrb	r3, [r5, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f7      	bne.n	8005620 <fn_init_lsm303ah+0x48>
	lsm303ah_mg_reset_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8005630:	2101      	movs	r1, #1
 8005632:	a803      	add	r0, sp, #12
 8005634:	f7ff ffaa 	bl	800558c <lsm303ah_mg_reset_set>
		lsm303ah_mg_reset_get(&dev_ctx_mg, &rst);
 8005638:	0029      	movs	r1, r5
 800563a:	a803      	add	r0, sp, #12
 800563c:	f7ff ffbf 	bl	80055be <lsm303ah_mg_reset_get>
	} while (rst);
 8005640:	782c      	ldrb	r4, [r5, #0]
 8005642:	2c00      	cmp	r4, #0
 8005644:	d1f8      	bne.n	8005638 <fn_init_lsm303ah+0x60>
	lsm303ah_xl_block_data_update_set(&dev_ctx_xl, PROPERTY_ENABLE);
 8005646:	2101      	movs	r1, #1
 8005648:	4668      	mov	r0, sp
 800564a:	f7ff fd35 	bl	80050b8 <lsm303ah_xl_block_data_update_set>
	lsm303ah_mg_block_data_update_set(&dev_ctx_mg, PROPERTY_ENABLE);
 800564e:	2101      	movs	r1, #1
 8005650:	a803      	add	r0, sp, #12
 8005652:	f7ff fd48 	bl	80050e6 <lsm303ah_mg_block_data_update_set>
	lsm303ah_xl_full_scale_set(&dev_ctx_xl, LSM303AH_XL_2g);
 8005656:	0021      	movs	r1, r4
 8005658:	4668      	mov	r0, sp
 800565a:	f7ff fd5d 	bl	8005118 <lsm303ah_xl_full_scale_set>
	lsm303ah_mg_set_rst_mode_set(&dev_ctx_mg,
 800565e:	2101      	movs	r1, #1
 8005660:	a803      	add	r0, sp, #12
 8005662:	f7ff fde9 	bl	8005238 <lsm303ah_mg_set_rst_mode_set>
	lsm303ah_mg_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8005666:	2101      	movs	r1, #1
 8005668:	a803      	add	r0, sp, #12
 800566a:	f7ff fdcd 	bl	8005208 <lsm303ah_mg_offset_temp_comp_set>
	lsm303ah_xl_data_rate_set(&dev_ctx_xl, LSM303AH_XL_ODR_100Hz_LP);
 800566e:	210c      	movs	r1, #12
 8005670:	4668      	mov	r0, sp
 8005672:	f7ff fd6b 	bl	800514c <lsm303ah_xl_data_rate_set>
	lsm303ah_mg_data_rate_set(&dev_ctx_mg, LSM303AH_MG_ODR_10Hz);
 8005676:	0021      	movs	r1, r4
 8005678:	a803      	add	r0, sp, #12
 800567a:	f7ff fdab 	bl	80051d4 <lsm303ah_mg_data_rate_set>
	lsm303ah_mg_operating_mode_set(&dev_ctx_mg, LSM303AH_MG_CONTINUOUS_MODE);
 800567e:	0021      	movs	r1, r4
 8005680:	a803      	add	r0, sp, #12
 8005682:	f7ff fd8f 	bl	80051a4 <lsm303ah_mg_operating_mode_set>
}
 8005686:	b007      	add	sp, #28
 8005688:	bd30      	pop	{r4, r5, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	08005081 	.word	0x08005081
 8005690:	200000ad 	.word	0x200000ad
 8005694:	0800505d 	.word	0x0800505d
 8005698:	200000ac 	.word	0x200000ac

0800569c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800569c:	b530      	push	{r4, r5, lr}
 800569e:	b09d      	sub	sp, #116	; 0x74
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80056a0:	2238      	movs	r2, #56	; 0x38
 80056a2:	2100      	movs	r1, #0
 80056a4:	a80e      	add	r0, sp, #56	; 0x38
 80056a6:	f000 fc29 	bl	8005efc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80056aa:	2214      	movs	r2, #20
 80056ac:	2100      	movs	r1, #0
 80056ae:	4668      	mov	r0, sp
 80056b0:	f000 fc24 	bl	8005efc <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80056b4:	2224      	movs	r2, #36	; 0x24
 80056b6:	2100      	movs	r1, #0
 80056b8:	a805      	add	r0, sp, #20
 80056ba:	f000 fc1f 	bl	8005efc <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056be:	4914      	ldr	r1, [pc, #80]	; (8005710 <SystemClock_Config+0x74>)
 80056c0:	4a14      	ldr	r2, [pc, #80]	; (8005714 <SystemClock_Config+0x78>)
 80056c2:	680b      	ldr	r3, [r1, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80056c4:	2400      	movs	r4, #0
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056c6:	401a      	ands	r2, r3
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80056d0:	2310      	movs	r3, #16
 80056d2:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80056d4:	3b0f      	subs	r3, #15
 80056d6:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80056d8:	23a0      	movs	r3, #160	; 0xa0
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80056da:	250f      	movs	r5, #15
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80056dc:	021b      	lsls	r3, r3, #8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80056de:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80056e0:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80056e2:	9416      	str	r4, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80056e4:	9418      	str	r4, [sp, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80056e6:	f7fe fa5f 	bl	8003ba8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80056ea:	0021      	movs	r1, r4
 80056ec:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80056ee:	9500      	str	r5, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80056f0:	9401      	str	r4, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056f2:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80056f4:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80056f6:	9404      	str	r4, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80056f8:	f7fe fdb4 	bl	8004264 <HAL_RCC_ClockConfig>
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80056fc:	a805      	add	r0, sp, #20
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80056fe:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005700:	9407      	str	r4, [sp, #28]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005702:	9408      	str	r4, [sp, #32]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005704:	9409      	str	r4, [sp, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005706:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8005708:	f7fe fef0 	bl	80044ec <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 800570c:	b01d      	add	sp, #116	; 0x74
 800570e:	bd30      	pop	{r4, r5, pc}
 8005710:	40007000 	.word	0x40007000
 8005714:	ffffe7ff 	.word	0xffffe7ff

08005718 <blink>:

}

/* USER CODE BEGIN 4 */

void blink(uint8_t times) {
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int var = 0; var < times; ++var) {
		LED_ON
 800571a:	2580      	movs	r5, #128	; 0x80
 800571c:	26a0      	movs	r6, #160	; 0xa0
void blink(uint8_t times) {
 800571e:	0007      	movs	r7, r0
	for (int var = 0; var < times; ++var) {
 8005720:	2400      	movs	r4, #0
		LED_ON
 8005722:	006d      	lsls	r5, r5, #1
 8005724:	05f6      	lsls	r6, r6, #23
	for (int var = 0; var < times; ++var) {
 8005726:	42bc      	cmp	r4, r7
 8005728:	db00      	blt.n	800572c <blink+0x14>
		HAL_Delay(25);
		LED_OFF
		HAL_Delay(25);
	}

}
 800572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LED_ON
 800572c:	2200      	movs	r2, #0
 800572e:	0029      	movs	r1, r5
 8005730:	0030      	movs	r0, r6
 8005732:	f7fd fd6b 	bl	800320c <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8005736:	2019      	movs	r0, #25
 8005738:	f7fc fe10 	bl	800235c <HAL_Delay>
		LED_OFF
 800573c:	2201      	movs	r2, #1
 800573e:	0029      	movs	r1, r5
 8005740:	0030      	movs	r0, r6
 8005742:	f7fd fd63 	bl	800320c <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8005746:	2019      	movs	r0, #25
 8005748:	f7fc fe08 	bl	800235c <HAL_Delay>
	for (int var = 0; var < times; ++var) {
 800574c:	3401      	adds	r4, #1
 800574e:	e7ea      	b.n	8005726 <blink+0xe>

08005750 <fn_fprint>:

void fn_fprint(char *data) {
 8005750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005752:	af00      	add	r7, sp, #0
 8005754:	0005      	movs	r5, r0
	int tamanho = strlen(data);
 8005756:	f7fa fcd7 	bl	8000108 <strlen>
	char new_command[tamanho];
 800575a:	466a      	mov	r2, sp
 800575c:	1dc3      	adds	r3, r0, #7
 800575e:	08db      	lsrs	r3, r3, #3
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	469d      	mov	sp, r3
	strcpy(new_command, data);
 8005766:	0029      	movs	r1, r5
	int tamanho = strlen(data);
 8005768:	0004      	movs	r4, r0
	strcpy(new_command, data);
 800576a:	4668      	mov	r0, sp
 800576c:	f000 fbce 	bl	8005f0c <strcpy>
 8005770:	466e      	mov	r6, sp
	char new_com[1]; // (uint8_t*)new_command;
	for (int var = 0; var < tamanho; ++var) {
 8005772:	466d      	mov	r5, sp
 8005774:	1bab      	subs	r3, r5, r6
 8005776:	429c      	cmp	r4, r3
 8005778:	dc01      	bgt.n	800577e <fn_fprint+0x2e>
		new_com[0] = new_command[var];
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
	}
}
 800577a:	46bd      	mov	sp, r7
 800577c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		new_com[0] = new_command[var];
 800577e:	782b      	ldrb	r3, [r5, #0]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8005780:	2201      	movs	r2, #1
		new_com[0] = new_command[var];
 8005782:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8005784:	1d39      	adds	r1, r7, #4
 8005786:	230a      	movs	r3, #10
 8005788:	4802      	ldr	r0, [pc, #8]	; (8005794 <fn_fprint+0x44>)
 800578a:	f7ff fb63 	bl	8004e54 <HAL_UART_Transmit>
 800578e:	3501      	adds	r5, #1
 8005790:	e7f0      	b.n	8005774 <fn_fprint+0x24>
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	20000288 	.word	0x20000288

08005798 <main>:
int main(void) {
 8005798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800579a:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 800579c:	f7fc fdbc 	bl	8002318 <HAL_Init>
	SystemClock_Config();
 80057a0:	f7ff ff7c 	bl	800569c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80057a4:	2214      	movs	r2, #20
 80057a6:	2100      	movs	r1, #0
 80057a8:	a805      	add	r0, sp, #20
 80057aa:	f000 fba7 	bl	8005efc <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80057ae:	2204      	movs	r2, #4
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80057b0:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80057b2:	4da9      	ldr	r5, [pc, #676]	; (8005a58 <main+0x2c0>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80057b4:	2601      	movs	r6, #1
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80057b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin,
 80057b8:	48a8      	ldr	r0, [pc, #672]	; (8005a5c <main+0x2c4>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80057ba:	4313      	orrs	r3, r2
 80057bc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80057be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057c0:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80057c2:	4013      	ands	r3, r2
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80057c8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057ca:	2703      	movs	r7, #3
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80057cc:	430a      	orrs	r2, r1
 80057ce:	62ea      	str	r2, [r5, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80057d0:	2202      	movs	r2, #2
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80057d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80057d4:	400b      	ands	r3, r1
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80057da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin,
 80057dc:	49a0      	ldr	r1, [pc, #640]	; (8005a60 <main+0x2c8>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80057de:	4333      	orrs	r3, r6
 80057e0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80057e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80057e4:	4033      	ands	r3, r6
 80057e6:	9303      	str	r3, [sp, #12]
 80057e8:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80057ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80057ec:	4313      	orrs	r3, r2
 80057ee:	62eb      	str	r3, [r5, #44]	; 0x2c
 80057f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80057f2:	4013      	ands	r3, r2
 80057f4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin,
 80057f6:	0032      	movs	r2, r6
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80057f8:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin,
 80057fa:	f7fd fd07 	bl	800320c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,
 80057fe:	219f      	movs	r1, #159	; 0x9f
 8005800:	20a0      	movs	r0, #160	; 0xa0
 8005802:	2200      	movs	r2, #0
 8005804:	0209      	lsls	r1, r1, #8
 8005806:	05c0      	lsls	r0, r0, #23
 8005808:	f7fd fd00 	bl	800320c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPRS_PWR_ON_GPIO_Port, GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 800580c:	2200      	movs	r2, #0
 800580e:	2120      	movs	r1, #32
 8005810:	4892      	ldr	r0, [pc, #584]	; (8005a5c <main+0x2c4>)
 8005812:	f7fd fcfb 	bl	800320c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8005816:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8005818:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 800581a:	019b      	lsls	r3, r3, #6
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 800581c:	4891      	ldr	r0, [pc, #580]	; (8005a64 <main+0x2cc>)
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 800581e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005820:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005822:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8005824:	f7fd fbbc 	bl	8002fa0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8005828:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800582a:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 800582c:	021b      	lsls	r3, r3, #8
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800582e:	488d      	ldr	r0, [pc, #564]	; (8005a64 <main+0x2cc>)
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8005830:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005832:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005834:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005836:	f7fd fbb3 	bl	8002fa0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800583a:	a905      	add	r1, sp, #20
 800583c:	488a      	ldr	r0, [pc, #552]	; (8005a68 <main+0x2d0>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800583e:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005840:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005842:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005844:	f7fd fbac 	bl	8002fa0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005848:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = HC_SR04_TRG_Pin | HC_SR04_PULSE_Pin;
 800584a:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584c:	a905      	add	r1, sp, #20
 800584e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = HC_SR04_TRG_Pin | HC_SR04_PULSE_Pin;
 8005850:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005852:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005854:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005856:	f7fd fba3 	bl	8002fa0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EXT_INT1_XL_Pin | EXT_INT_MAG_Pin | GPS_EXTI_Pin
 800585a:	4b84      	ldr	r3, [pc, #528]	; (8005a6c <main+0x2d4>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800585c:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = EXT_INT1_XL_Pin | EXT_INT_MAG_Pin | GPS_EXTI_Pin
 800585e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005860:	4b83      	ldr	r3, [pc, #524]	; (8005a70 <main+0x2d8>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005862:	487e      	ldr	r0, [pc, #504]	; (8005a5c <main+0x2c4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005864:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005866:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005868:	f7fd fb9a 	bl	8002fa0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPRS_RST_Pin;
 800586c:	2304      	movs	r3, #4
	HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 800586e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = GPRS_RST_Pin;
 8005870:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8005872:	487a      	ldr	r0, [pc, #488]	; (8005a5c <main+0x2c4>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005874:	330d      	adds	r3, #13
 8005876:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005878:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800587a:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 800587c:	f7fd fb90 	bl	8002fa0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = WISOL_WKP_Pin | WISOL_RST_Pin | GPRS_PWR_ON_Pin;
 8005880:	4b7c      	ldr	r3, [pc, #496]	; (8005a74 <main+0x2dc>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005882:	a905      	add	r1, sp, #20
 8005884:	4875      	ldr	r0, [pc, #468]	; (8005a5c <main+0x2c4>)
	GPIO_InitStruct.Pin = WISOL_WKP_Pin | WISOL_RST_Pin | GPRS_PWR_ON_Pin;
 8005886:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005888:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800588a:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800588c:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800588e:	f7fd fb87 	bl	8002fa0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8005892:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8005894:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800589a:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800589c:	3bfe      	subs	r3, #254	; 0xfe
	HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800589e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058a0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058a2:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058a4:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80058a6:	f7fd fb7b 	bl	8002fa0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin | EN_BLE_Pin
 80058aa:	239e      	movs	r3, #158	; 0x9e
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ac:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin | EN_BLE_Pin
 80058ae:	021b      	lsls	r3, r3, #8
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b0:	a905      	add	r1, sp, #20
 80058b2:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin | EN_BLE_Pin
 80058b4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058b6:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b8:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ba:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058bc:	f7fd fb70 	bl	8002fa0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE()
 80058c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80058c2:	0022      	movs	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 80058c4:	4333      	orrs	r3, r6
 80058c6:	632b      	str	r3, [r5, #48]	; 0x30
 80058c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80058ca:	0021      	movs	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 80058cc:	4033      	ands	r3, r6
 80058ce:	9300      	str	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80058d0:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE()
 80058d2:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80058d4:	f7fd f97a 	bl	8002bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80058d8:	2009      	movs	r0, #9
 80058da:	f7fd f9b1 	bl	8002c40 <HAL_NVIC_EnableIRQ>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80058de:	2208      	movs	r2, #8
 80058e0:	0021      	movs	r1, r4
 80058e2:	a805      	add	r0, sp, #20
 80058e4:	f000 fb0a 	bl	8005efc <memset>
	hadc.Instance = ADC1;
 80058e8:	4d63      	ldr	r5, [pc, #396]	; (8005a78 <main+0x2e0>)
 80058ea:	4b64      	ldr	r3, [pc, #400]	; (8005a7c <main+0x2e4>)
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80058ec:	0028      	movs	r0, r5
	hadc.Instance = ADC1;
 80058ee:	602b      	str	r3, [r5, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80058f0:	23c0      	movs	r3, #192	; 0xc0
 80058f2:	061b      	lsls	r3, r3, #24
 80058f4:	606b      	str	r3, [r5, #4]
	hadc.Init.ContinuousConvMode = DISABLE;
 80058f6:	19ab      	adds	r3, r5, r6
 80058f8:	77dc      	strb	r4, [r3, #31]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80058fa:	1cab      	adds	r3, r5, #2
 80058fc:	77dc      	strb	r4, [r3, #31]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80058fe:	23c2      	movs	r3, #194	; 0xc2
 8005900:	33ff      	adds	r3, #255	; 0xff
 8005902:	626b      	str	r3, [r5, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8005904:	002b      	movs	r3, r5
 8005906:	332c      	adds	r3, #44	; 0x2c
 8005908:	701c      	strb	r4, [r3, #0]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800590a:	2304      	movs	r3, #4
	hadc.Init.OversamplingMode = DISABLE;
 800590c:	63ec      	str	r4, [r5, #60]	; 0x3c
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800590e:	616b      	str	r3, [r5, #20]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005910:	60ac      	str	r4, [r5, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005912:	63ac      	str	r4, [r5, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005914:	612e      	str	r6, [r5, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005916:	60ec      	str	r4, [r5, #12]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005918:	62ac      	str	r4, [r5, #40]	; 0x28
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800591a:	632c      	str	r4, [r5, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 800591c:	61ac      	str	r4, [r5, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 800591e:	636c      	str	r4, [r5, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005920:	61ec      	str	r4, [r5, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8005922:	f7fc fd79 	bl	8002418 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_4;
 8005926:	4b56      	ldr	r3, [pc, #344]	; (8005a80 <main+0x2e8>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005928:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_4;
 800592a:	9305      	str	r3, [sp, #20]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800592c:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800592e:	0028      	movs	r0, r5
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005930:	015b      	lsls	r3, r3, #5
 8005932:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005934:	f7fd f87e 	bl	8002a34 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_5;
 8005938:	4b52      	ldr	r3, [pc, #328]	; (8005a84 <main+0x2ec>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800593a:	a905      	add	r1, sp, #20
 800593c:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 800593e:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005940:	f7fd f878 	bl	8002a34 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005944:	4b50      	ldr	r3, [pc, #320]	; (8005a88 <main+0x2f0>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005946:	a905      	add	r1, sp, #20
 8005948:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800594a:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800594c:	f7fd f872 	bl	8002a34 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start_DMA(&hadc, value, 3);
 8005950:	003a      	movs	r2, r7
 8005952:	494e      	ldr	r1, [pc, #312]	; (8005a8c <main+0x2f4>)
 8005954:	0028      	movs	r0, r5
 8005956:	f7fc ff2f 	bl	80027b8 <HAL_ADC_Start_DMA>
	hi2c1.Instance = I2C1;
 800595a:	4d4d      	ldr	r5, [pc, #308]	; (8005a90 <main+0x2f8>)
 800595c:	4b4d      	ldr	r3, [pc, #308]	; (8005a94 <main+0x2fc>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800595e:	0028      	movs	r0, r5
	hi2c1.Instance = I2C1;
 8005960:	602b      	str	r3, [r5, #0]
	hi2c1.Init.Timing = 0x00000708;
 8005962:	23e1      	movs	r3, #225	; 0xe1
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	606b      	str	r3, [r5, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8005968:	60ac      	str	r4, [r5, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800596a:	60ee      	str	r6, [r5, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800596c:	612c      	str	r4, [r5, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800596e:	616c      	str	r4, [r5, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005970:	61ac      	str	r4, [r5, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005972:	61ec      	str	r4, [r5, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005974:	622c      	str	r4, [r5, #32]
	hlpuart1.Init.BaudRate = 9600;
 8005976:	2796      	movs	r7, #150	; 0x96
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005978:	f7fd fe0c 	bl	8003594 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800597c:	0021      	movs	r1, r4
 800597e:	0028      	movs	r0, r5
 8005980:	f7fe f84e 	bl	8003a20 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005984:	0028      	movs	r0, r5
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005986:	250c      	movs	r5, #12
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005988:	0021      	movs	r1, r4
 800598a:	f7fe f88f 	bl	8003aac <HAL_I2CEx_ConfigDigitalFilter>
	hlpuart1.Instance = LPUART1;
 800598e:	4842      	ldr	r0, [pc, #264]	; (8005a98 <main+0x300>)
 8005990:	4b42      	ldr	r3, [pc, #264]	; (8005a9c <main+0x304>)
	hlpuart1.Init.BaudRate = 9600;
 8005992:	01bf      	lsls	r7, r7, #6
	hlpuart1.Instance = LPUART1;
 8005994:	6003      	str	r3, [r0, #0]
	hlpuart1.Init.BaudRate = 9600;
 8005996:	6047      	str	r7, [r0, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005998:	6084      	str	r4, [r0, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800599a:	60c4      	str	r4, [r0, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800599c:	6104      	str	r4, [r0, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800599e:	6145      	str	r5, [r0, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059a0:	6184      	str	r4, [r0, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059a2:	6204      	str	r4, [r0, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059a4:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80059a6:	f7ff faef 	bl	8004f88 <HAL_UART_Init>
	huart1.Instance = USART1;
 80059aa:	483d      	ldr	r0, [pc, #244]	; (8005aa0 <main+0x308>)
 80059ac:	4b3d      	ldr	r3, [pc, #244]	; (8005aa4 <main+0x30c>)
	huart1.Init.BaudRate = 9600;
 80059ae:	6047      	str	r7, [r0, #4]
	huart1.Instance = USART1;
 80059b0:	6003      	str	r3, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059b2:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80059b4:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80059b6:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80059b8:	6145      	str	r5, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059ba:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059bc:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059be:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059c0:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80059c2:	f7ff fae1 	bl	8004f88 <HAL_UART_Init>
	huart2.Instance = USART2;
 80059c6:	4838      	ldr	r0, [pc, #224]	; (8005aa8 <main+0x310>)
 80059c8:	4b38      	ldr	r3, [pc, #224]	; (8005aac <main+0x314>)
	huart2.Init.BaudRate = 9600;
 80059ca:	6047      	str	r7, [r0, #4]
	huart2.Instance = USART2;
 80059cc:	6003      	str	r3, [r0, #0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80059ce:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80059d0:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80059d2:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80059d4:	6145      	str	r5, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059d6:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80059d8:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059da:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059dc:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80059de:	f7ff fad3 	bl	8004f88 <HAL_UART_Init>
	huart4.Instance = USART4;
 80059e2:	4833      	ldr	r0, [pc, #204]	; (8005ab0 <main+0x318>)
 80059e4:	4b33      	ldr	r3, [pc, #204]	; (8005ab4 <main+0x31c>)
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80059e6:	6084      	str	r4, [r0, #8]
	huart4.Instance = USART4;
 80059e8:	6003      	str	r3, [r0, #0]
	huart4.Init.BaudRate = 115200;
 80059ea:	23e1      	movs	r3, #225	; 0xe1
 80059ec:	025b      	lsls	r3, r3, #9
 80059ee:	6043      	str	r3, [r0, #4]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80059f0:	60c4      	str	r4, [r0, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80059f2:	6104      	str	r4, [r0, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80059f4:	6145      	str	r5, [r0, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059f6:	6184      	str	r4, [r0, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80059f8:	61c4      	str	r4, [r0, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059fa:	6204      	str	r4, [r0, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059fc:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80059fe:	f7ff fac3 	bl	8004f88 <HAL_UART_Init>
	huart5.Instance = USART5;
 8005a02:	482d      	ldr	r0, [pc, #180]	; (8005ab8 <main+0x320>)
 8005a04:	4b2d      	ldr	r3, [pc, #180]	; (8005abc <main+0x324>)
	huart5.Init.BaudRate = 9600;
 8005a06:	6047      	str	r7, [r0, #4]
	huart5.Instance = USART5;
 8005a08:	6003      	str	r3, [r0, #0]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005a0a:	6084      	str	r4, [r0, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8005a0c:	60c4      	str	r4, [r0, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8005a0e:	6104      	str	r4, [r0, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8005a10:	6145      	str	r5, [r0, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a12:	6184      	str	r4, [r0, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a14:	61c4      	str	r4, [r0, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a16:	6204      	str	r4, [r0, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a18:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8005a1a:	f7ff fab5 	bl	8004f88 <HAL_UART_Init>
	blink(5);
 8005a1e:	2005      	movs	r0, #5
 8005a20:	f7ff fe7a 	bl	8005718 <blink>
	LED_ON
 8005a24:	2180      	movs	r1, #128	; 0x80
 8005a26:	20a0      	movs	r0, #160	; 0xa0
 8005a28:	0022      	movs	r2, r4
 8005a2a:	0049      	lsls	r1, r1, #1
 8005a2c:	05c0      	lsls	r0, r0, #23
 8005a2e:	f7fd fbed 	bl	800320c <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8005a32:	4823      	ldr	r0, [pc, #140]	; (8005ac0 <main+0x328>)
 8005a34:	f7fc fc92 	bl	800235c <HAL_Delay>
	fn_fprint("START PROGRAM\r\n");
 8005a38:	4822      	ldr	r0, [pc, #136]	; (8005ac4 <main+0x32c>)
 8005a3a:	f7ff fe89 	bl	8005750 <fn_fprint>
	LED_OFF
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	20a0      	movs	r0, #160	; 0xa0
 8005a42:	0032      	movs	r2, r6
 8005a44:	0049      	lsls	r1, r1, #1
 8005a46:	05c0      	lsls	r0, r0, #23
 8005a48:	f7fd fbe0 	bl	800320c <HAL_GPIO_WritePin>
fn_init_lsm303ah();
 8005a4c:	f7ff fdc4 	bl	80055d8 <fn_init_lsm303ah>
		fn_get_lsm303ah();
 8005a50:	f7ff fc1a 	bl	8005288 <fn_get_lsm303ah>
 8005a54:	e7fc      	b.n	8005a50 <main+0x2b8>
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	50000400 	.word	0x50000400
 8005a60:	0000c004 	.word	0x0000c004
 8005a64:	50000800 	.word	0x50000800
 8005a68:	50001c00 	.word	0x50001c00
 8005a6c:	00003003 	.word	0x00003003
 8005a70:	10110000 	.word	0x10110000
 8005a74:	0000c020 	.word	0x0000c020
 8005a78:	20000888 	.word	0x20000888
 8005a7c:	40012400 	.word	0x40012400
 8005a80:	10000010 	.word	0x10000010
 8005a84:	14000020 	.word	0x14000020
 8005a88:	48040000 	.word	0x48040000
 8005a8c:	20000278 	.word	0x20000278
 8005a90:	20000774 	.word	0x20000774
 8005a94:	40005400 	.word	0x40005400
 8005a98:	20000288 	.word	0x20000288
 8005a9c:	40004800 	.word	0x40004800
 8005aa0:	20000140 	.word	0x20000140
 8005aa4:	40013800 	.word	0x40013800
 8005aa8:	200001f0 	.word	0x200001f0
 8005aac:	40004400 	.word	0x40004400
 8005ab0:	200007c0 	.word	0x200007c0
 8005ab4:	40004c00 	.word	0x40004c00
 8005ab8:	200004fc 	.word	0x200004fc
 8005abc:	40005000 	.word	0x40005000
 8005ac0:	00000bb8 	.word	0x00000bb8
 8005ac4:	080068a4 	.word	0x080068a4

08005ac8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	UartReady = SET;
 8005ac8:	2201      	movs	r2, #1
 8005aca:	4b01      	ldr	r3, [pc, #4]	; (8005ad0 <HAL_UART_TxCpltCallback+0x8>)
 8005acc:	701a      	strb	r2, [r3, #0]
}
 8005ace:	4770      	bx	lr
 8005ad0:	200000f0 	.word	0x200000f0

08005ad4 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005ad4:	4770      	bx	lr

08005ad6 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ad8:	2201      	movs	r2, #1
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_MspInit+0x18>)
 8005adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	2280      	movs	r2, #128	; 0x80
 8005ae4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005ae6:	0552      	lsls	r2, r2, #21
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005aec:	4770      	bx	lr
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	40021000 	.word	0x40021000

08005af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005af4:	b530      	push	{r4, r5, lr}
 8005af6:	0005      	movs	r5, r0
 8005af8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005afa:	2214      	movs	r2, #20
 8005afc:	2100      	movs	r1, #0
 8005afe:	a801      	add	r0, sp, #4
 8005b00:	f000 f9fc 	bl	8005efc <memset>
  if(hadc->Instance==ADC1)
 8005b04:	4b1f      	ldr	r3, [pc, #124]	; (8005b84 <HAL_ADC_MspInit+0x90>)
 8005b06:	682a      	ldr	r2, [r5, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d138      	bne.n	8005b7e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	4b1e      	ldr	r3, [pc, #120]	; (8005b88 <HAL_ADC_MspInit+0x94>)
 8005b10:	0092      	lsls	r2, r2, #2
 8005b12:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b14:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b16:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b18:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b1a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b1e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b20:	430a      	orrs	r2, r1
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	400b      	ands	r3, r1
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 8005b2c:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b2e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 8005b30:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b32:	3b2d      	subs	r3, #45	; 0x2d
 8005b34:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b36:	f7fd fa33 	bl	8002fa0 <HAL_GPIO_Init>
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Request = DMA_REQUEST_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005b3a:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8005b3c:	4c13      	ldr	r4, [pc, #76]	; (8005b8c <HAL_ADC_MspInit+0x98>)
 8005b3e:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <HAL_ADC_MspInit+0x9c>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005b40:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b42:	1892      	adds	r2, r2, r2
 8005b44:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005b46:	2280      	movs	r2, #128	; 0x80
 8005b48:	0112      	lsls	r2, r2, #4
    hdma_adc.Instance = DMA1_Channel1;
 8005b4a:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005b4c:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8005b4e:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005b50:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005b52:	0020      	movs	r0, r4
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8005b54:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b56:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b58:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005b5a:	61e2      	str	r2, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8005b5c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005b5e:	f7fd f89b 	bl	8002c98 <HAL_DMA_Init>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8005b66:	f7ff ffb5 	bl	8005ad4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005b6e:	64ec      	str	r4, [r5, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005b70:	0011      	movs	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005b72:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005b74:	f7fd f82a 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005b78:	200c      	movs	r0, #12
 8005b7a:	f7fd f861 	bl	8002c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005b7e:	b007      	add	sp, #28
 8005b80:	bd30      	pop	{r4, r5, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	40012400 	.word	0x40012400
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	20000840 	.word	0x20000840
 8005b90:	40020008 	.word	0x40020008

08005b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b94:	b510      	push	{r4, lr}
 8005b96:	0004      	movs	r4, r0
 8005b98:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9a:	2214      	movs	r2, #20
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	a801      	add	r0, sp, #4
 8005ba0:	f000 f9ac 	bl	8005efc <memset>
  if(hi2c->Instance==I2C1)
 8005ba4:	4b11      	ldr	r3, [pc, #68]	; (8005bec <HAL_I2C_MspInit+0x58>)
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d11c      	bne.n	8005be6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bac:	2102      	movs	r1, #2
 8005bae:	4c10      	ldr	r4, [pc, #64]	; (8005bf0 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb0:	4810      	ldr	r0, [pc, #64]	; (8005bf4 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005bb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005bba:	400b      	ands	r3, r1
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005bc0:	23c0      	movs	r3, #192	; 0xc0
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bc6:	2312      	movs	r3, #18
 8005bc8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bca:	3b11      	subs	r3, #17
 8005bcc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bce:	185b      	adds	r3, r3, r1
 8005bd0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bd2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bd8:	f7fd f9e2 	bl	8002fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005be0:	039b      	lsls	r3, r3, #14
 8005be2:	4313      	orrs	r3, r2
 8005be4:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005be6:	b006      	add	sp, #24
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	40005400 	.word	0x40005400
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	50000400 	.word	0x50000400

08005bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	0004      	movs	r4, r0
 8005bfc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bfe:	2214      	movs	r2, #20
 8005c00:	2100      	movs	r1, #0
 8005c02:	a805      	add	r0, sp, #20
 8005c04:	f000 f97a 	bl	8005efc <memset>
  if(huart->Instance==LPUART1)
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	4a56      	ldr	r2, [pc, #344]	; (8005d64 <HAL_UART_MspInit+0x16c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d123      	bne.n	8005c58 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	4b55      	ldr	r3, [pc, #340]	; (8005d68 <HAL_UART_MspInit+0x170>)
 8005c14:	02d2      	lsls	r2, r2, #11
 8005c16:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c18:	4854      	ldr	r0, [pc, #336]	; (8005d6c <HAL_UART_MspInit+0x174>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c1e:	2202      	movs	r2, #2
 8005c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c22:	4311      	orrs	r1, r2
 8005c24:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c28:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
 8005c30:	23c0      	movs	r3, #192	; 0xc0
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c36:	2303      	movs	r3, #3
 8005c38:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8005c3a:	3301      	adds	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8005c3e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c40:	f7fd f9ae 	bl	8002fa0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8005c44:	2200      	movs	r2, #0
 8005c46:	201d      	movs	r0, #29
 8005c48:	0011      	movs	r1, r2
 8005c4a:	f7fc ffbf 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8005c4e:	201d      	movs	r0, #29
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART5 interrupt Init */
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8005c50:	f7fc fff6 	bl	8002c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8005c54:	b00a      	add	sp, #40	; 0x28
 8005c56:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 8005c58:	4a45      	ldr	r2, [pc, #276]	; (8005d70 <HAL_UART_MspInit+0x178>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d11d      	bne.n	8005c9a <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c5e:	2280      	movs	r2, #128	; 0x80
 8005c60:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <HAL_UART_MspInit+0x170>)
 8005c62:	01d2      	lsls	r2, r2, #7
 8005c64:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c66:	4841      	ldr	r0, [pc, #260]	; (8005d6c <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c70:	4311      	orrs	r1, r2
 8005c72:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c76:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c78:	4013      	ands	r3, r2
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SFOX_RX_Pin|SFOX_TX_Pin;
 8005c7e:	23c0      	movs	r3, #192	; 0xc0
 8005c80:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c82:	3bbd      	subs	r3, #189	; 0xbd
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c84:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c86:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c88:	f7fd f98a 	bl	8002fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	201b      	movs	r0, #27
 8005c90:	0011      	movs	r1, r2
 8005c92:	f7fc ff9b 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c96:	201b      	movs	r0, #27
 8005c98:	e7da      	b.n	8005c50 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART2)
 8005c9a:	4a36      	ldr	r2, [pc, #216]	; (8005d74 <HAL_UART_MspInit+0x17c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d121      	bne.n	8005ce4 <HAL_UART_MspInit+0xec>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <HAL_UART_MspInit+0x170>)
 8005ca4:	0292      	lsls	r2, r2, #10
 8005ca6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8005caa:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cac:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	400b      	ands	r3, r1
 8005cbc:	9302      	str	r3, [sp, #8]
 8005cbe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = US_RX_Pin|US_TX_Pin;
 8005cc0:	230c      	movs	r3, #12
 8005cc2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc4:	3b0a      	subs	r3, #10
 8005cc6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cc8:	185b      	adds	r3, r3, r1
 8005cca:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8005ccc:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cce:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8005cd0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd2:	f7fd f965 	bl	8002fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	201c      	movs	r0, #28
 8005cda:	0011      	movs	r1, r2
 8005cdc:	f7fc ff76 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005ce0:	201c      	movs	r0, #28
 8005ce2:	e7b5      	b.n	8005c50 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART4)
 8005ce4:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <HAL_UART_MspInit+0x180>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d120      	bne.n	8005d2c <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART4_CLK_ENABLE();
 8005cea:	2280      	movs	r2, #128	; 0x80
 8005cec:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <HAL_UART_MspInit+0x170>)
 8005cee:	0312      	lsls	r2, r2, #12
 8005cf0:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART4_CLK_ENABLE();
 8005cf4:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cf6:	2101      	movs	r1, #1
    __HAL_RCC_USART4_CLK_ENABLE();
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cfc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d04:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d06:	400b      	ands	r3, r1
 8005d08:	9303      	str	r3, [sp, #12]
 8005d0a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d10:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8005d12:	18db      	adds	r3, r3, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d14:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8005d16:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d18:	a905      	add	r1, sp, #20
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d1a:	f7fd f941 	bl	8002fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	200e      	movs	r0, #14
 8005d22:	0011      	movs	r1, r2
 8005d24:	f7fc ff52 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8005d28:	200e      	movs	r0, #14
 8005d2a:	e791      	b.n	8005c50 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART5)
 8005d2c:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <HAL_UART_MspInit+0x184>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d000      	beq.n	8005d34 <HAL_UART_MspInit+0x13c>
 8005d32:	e78f      	b.n	8005c54 <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART5_CLK_ENABLE();
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <HAL_UART_MspInit+0x170>)
 8005d38:	0352      	lsls	r2, r2, #13
 8005d3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d3c:	480b      	ldr	r0, [pc, #44]	; (8005d6c <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART5_CLK_ENABLE();
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d42:	2202      	movs	r2, #2
 8005d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d46:	4311      	orrs	r1, r2
 8005d48:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d4c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d4e:	4013      	ands	r3, r2
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPRS_RX_Pin|GPRS_TX_Pin;
 8005d54:	2318      	movs	r3, #24
 8005d56:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d58:	3b15      	subs	r3, #21
 8005d5a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8005d5c:	3303      	adds	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d5e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8005d60:	9309      	str	r3, [sp, #36]	; 0x24
 8005d62:	e7da      	b.n	8005d1a <HAL_UART_MspInit+0x122>
 8005d64:	40004800 	.word	0x40004800
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	50000400 	.word	0x50000400
 8005d70:	40013800 	.word	0x40013800
 8005d74:	40004400 	.word	0x40004400
 8005d78:	40004c00 	.word	0x40004c00
 8005d7c:	40005000 	.word	0x40005000

08005d80 <NMI_Handler>:
 8005d80:	4770      	bx	lr

08005d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d82:	e7fe      	b.n	8005d82 <HardFault_Handler>

08005d84 <SVC_Handler>:
 8005d84:	4770      	bx	lr

08005d86 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d86:	4770      	bx	lr

08005d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d8a:	f7fc fad9 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d8e:	bd10      	pop	{r4, pc}

08005d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005d92:	4802      	ldr	r0, [pc, #8]	; (8005d9c <DMA1_Channel1_IRQHandler+0xc>)
 8005d94:	f7fd f8b9 	bl	8002f0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d98:	bd10      	pop	{r4, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	20000840 	.word	0x20000840

08005da0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8005da0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8005da2:	4802      	ldr	r0, [pc, #8]	; (8005dac <ADC1_COMP_IRQHandler+0xc>)
 8005da4:	f7fc fdb0 	bl	8002908 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	20000888 	.word	0x20000888

08005db0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8005db0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005db2:	4803      	ldr	r0, [pc, #12]	; (8005dc0 <USART4_5_IRQHandler+0x10>)
 8005db4:	f7fe fcf6 	bl	80047a4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8005db8:	4802      	ldr	r0, [pc, #8]	; (8005dc4 <USART4_5_IRQHandler+0x14>)
 8005dba:	f7fe fcf3 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8005dbe:	bd10      	pop	{r4, pc}
 8005dc0:	200007c0 	.word	0x200007c0
 8005dc4:	200004fc 	.word	0x200004fc

08005dc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005dc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005dca:	4802      	ldr	r0, [pc, #8]	; (8005dd4 <USART1_IRQHandler+0xc>)
 8005dcc:	f7fe fcea 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	20000140 	.word	0x20000140

08005dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005dd8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005dda:	4802      	ldr	r0, [pc, #8]	; (8005de4 <USART2_IRQHandler+0xc>)
 8005ddc:	f7fe fce2 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	200001f0 	.word	0x200001f0

08005de8 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8005de8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005dea:	4802      	ldr	r0, [pc, #8]	; (8005df4 <RNG_LPUART1_IRQHandler+0xc>)
 8005dec:	f7fe fcda 	bl	80047a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	20000288 	.word	0x20000288

08005df8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005df8:	2280      	movs	r2, #128	; 0x80
 8005dfa:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <SystemInit+0x44>)
 8005dfc:	0052      	lsls	r2, r2, #1
 8005dfe:	6819      	ldr	r1, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	490e      	ldr	r1, [pc, #56]	; (8005e40 <SystemInit+0x48>)
 8005e08:	400a      	ands	r2, r1
 8005e0a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	490d      	ldr	r1, [pc, #52]	; (8005e44 <SystemInit+0x4c>)
 8005e10:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005e12:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005e14:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	438a      	bics	r2, r1
 8005e1a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	490a      	ldr	r1, [pc, #40]	; (8005e48 <SystemInit+0x50>)
 8005e20:	400a      	ands	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	4909      	ldr	r1, [pc, #36]	; (8005e4c <SystemInit+0x54>)
 8005e28:	400a      	ands	r2, r1
 8005e2a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e30:	2280      	movs	r2, #128	; 0x80
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <SystemInit+0x58>)
 8005e34:	0512      	lsls	r2, r2, #20
 8005e36:	609a      	str	r2, [r3, #8]
#endif
}
 8005e38:	4770      	bx	lr
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	88ff400c 	.word	0x88ff400c
 8005e44:	fef6fff6 	.word	0xfef6fff6
 8005e48:	fffbffff 	.word	0xfffbffff
 8005e4c:	ff02ffff 	.word	0xff02ffff
 8005e50:	e000ed00 	.word	0xe000ed00

08005e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005e54:	480d      	ldr	r0, [pc, #52]	; (8005e8c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005e56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005e58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005e5a:	e003      	b.n	8005e64 <LoopCopyDataInit>

08005e5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005e5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005e60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005e62:	3104      	adds	r1, #4

08005e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e64:	480b      	ldr	r0, [pc, #44]	; (8005e94 <LoopForever+0xa>)
  ldr  r3, =_edata
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005e68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005e6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005e6c:	d3f6      	bcc.n	8005e5c <CopyDataInit>
  ldr  r2, =_sbss
 8005e6e:	4a0b      	ldr	r2, [pc, #44]	; (8005e9c <LoopForever+0x12>)
  b  LoopFillZerobss
 8005e70:	e002      	b.n	8005e78 <LoopFillZerobss>

08005e72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005e72:	2300      	movs	r3, #0
  str  r3, [r2]
 8005e74:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e76:	3204      	adds	r2, #4

08005e78 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005e78:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <LoopForever+0x16>)
  cmp  r2, r3
 8005e7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005e7c:	d3f9      	bcc.n	8005e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005e7e:	f7ff ffbb 	bl	8005df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e82:	f000 f817 	bl	8005eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e86:	f7ff fc87 	bl	8005798 <main>

08005e8a <LoopForever>:

LoopForever:
    b LoopForever
 8005e8a:	e7fe      	b.n	8005e8a <LoopForever>
   ldr   r0, =_estack
 8005e8c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8005e90:	08006930 	.word	0x08006930
  ldr  r0, =_sdata
 8005e94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e98:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8005e9c:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8005ea0:	200008e4 	.word	0x200008e4

08005ea4 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ea4:	e7fe      	b.n	8005ea4 <DMA1_Channel2_3_IRQHandler>
	...

08005ea8 <__errno>:
 8005ea8:	4b01      	ldr	r3, [pc, #4]	; (8005eb0 <__errno+0x8>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	4770      	bx	lr
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	20000004 	.word	0x20000004

08005eb4 <__libc_init_array>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	4d0c      	ldr	r5, [pc, #48]	; (8005eec <__libc_init_array+0x38>)
 8005eba:	4c0d      	ldr	r4, [pc, #52]	; (8005ef0 <__libc_init_array+0x3c>)
 8005ebc:	1b64      	subs	r4, r4, r5
 8005ebe:	10a4      	asrs	r4, r4, #2
 8005ec0:	42a6      	cmp	r6, r4
 8005ec2:	d109      	bne.n	8005ed8 <__libc_init_array+0x24>
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	f000 fb77 	bl	80065b8 <_init>
 8005eca:	4d0a      	ldr	r5, [pc, #40]	; (8005ef4 <__libc_init_array+0x40>)
 8005ecc:	4c0a      	ldr	r4, [pc, #40]	; (8005ef8 <__libc_init_array+0x44>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	42a6      	cmp	r6, r4
 8005ed4:	d105      	bne.n	8005ee2 <__libc_init_array+0x2e>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	00b3      	lsls	r3, r6, #2
 8005eda:	58eb      	ldr	r3, [r5, r3]
 8005edc:	4798      	blx	r3
 8005ede:	3601      	adds	r6, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__libc_init_array+0xc>
 8005ee2:	00b3      	lsls	r3, r6, #2
 8005ee4:	58eb      	ldr	r3, [r5, r3]
 8005ee6:	4798      	blx	r3
 8005ee8:	3601      	adds	r6, #1
 8005eea:	e7f2      	b.n	8005ed2 <__libc_init_array+0x1e>
 8005eec:	08006928 	.word	0x08006928
 8005ef0:	08006928 	.word	0x08006928
 8005ef4:	08006928 	.word	0x08006928
 8005ef8:	0800692c 	.word	0x0800692c

08005efc <memset>:
 8005efc:	0003      	movs	r3, r0
 8005efe:	1882      	adds	r2, r0, r2
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d100      	bne.n	8005f06 <memset+0xa>
 8005f04:	4770      	bx	lr
 8005f06:	7019      	strb	r1, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	e7f9      	b.n	8005f00 <memset+0x4>

08005f0c <strcpy>:
 8005f0c:	1c03      	adds	r3, r0, #0
 8005f0e:	780a      	ldrb	r2, [r1, #0]
 8005f10:	3101      	adds	r1, #1
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	d1f9      	bne.n	8005f0e <strcpy+0x2>
 8005f1a:	4770      	bx	lr

08005f1c <atan2>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	f000 f85b 	bl	8005fd8 <__ieee754_atan2>
 8005f22:	bd10      	pop	{r4, pc}

08005f24 <sqrt>:
 8005f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f26:	b08f      	sub	sp, #60	; 0x3c
 8005f28:	0004      	movs	r4, r0
 8005f2a:	000d      	movs	r5, r1
 8005f2c:	f000 f906 	bl	800613c <__ieee754_sqrt>
 8005f30:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <sqrt+0xac>)
 8005f32:	9000      	str	r0, [sp, #0]
 8005f34:	9101      	str	r1, [sp, #4]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b25b      	sxtb	r3, r3
 8005f3a:	9302      	str	r3, [sp, #8]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	d033      	beq.n	8005fa8 <sqrt+0x84>
 8005f40:	0022      	movs	r2, r4
 8005f42:	002b      	movs	r3, r5
 8005f44:	0020      	movs	r0, r4
 8005f46:	0029      	movs	r1, r5
 8005f48:	f7fc f90e 	bl	8002168 <__aeabi_dcmpun>
 8005f4c:	9003      	str	r0, [sp, #12]
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d12a      	bne.n	8005fa8 <sqrt+0x84>
 8005f52:	2600      	movs	r6, #0
 8005f54:	2700      	movs	r7, #0
 8005f56:	0032      	movs	r2, r6
 8005f58:	003b      	movs	r3, r7
 8005f5a:	0020      	movs	r0, r4
 8005f5c:	0029      	movs	r1, r5
 8005f5e:	f7fa f991 	bl	8000284 <__aeabi_dcmplt>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d020      	beq.n	8005fa8 <sqrt+0x84>
 8005f66:	2301      	movs	r3, #1
 8005f68:	9304      	str	r3, [sp, #16]
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <sqrt+0xb0>)
 8005f6c:	9408      	str	r4, [sp, #32]
 8005f6e:	9509      	str	r5, [sp, #36]	; 0x24
 8005f70:	9305      	str	r3, [sp, #20]
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	9406      	str	r4, [sp, #24]
 8005f76:	9507      	str	r5, [sp, #28]
 8005f78:	930c      	str	r3, [sp, #48]	; 0x30
 8005f7a:	9b02      	ldr	r3, [sp, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d117      	bne.n	8005fb0 <sqrt+0x8c>
 8005f80:	960a      	str	r6, [sp, #40]	; 0x28
 8005f82:	970b      	str	r7, [sp, #44]	; 0x2c
 8005f84:	a804      	add	r0, sp, #16
 8005f86:	f000 fb15 	bl	80065b4 <matherr>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d01b      	beq.n	8005fc6 <sqrt+0xa2>
 8005f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f90:	9302      	str	r3, [sp, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <sqrt+0x7c>
 8005f96:	f7ff ff87 	bl	8005ea8 <__errno>
 8005f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f9c:	9302      	str	r3, [sp, #8]
 8005f9e:	6003      	str	r3, [r0, #0]
 8005fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	9401      	str	r4, [sp, #4]
 8005fa8:	9800      	ldr	r0, [sp, #0]
 8005faa:	9901      	ldr	r1, [sp, #4]
 8005fac:	b00f      	add	sp, #60	; 0x3c
 8005fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb0:	003b      	movs	r3, r7
 8005fb2:	0032      	movs	r2, r6
 8005fb4:	0030      	movs	r0, r6
 8005fb6:	0039      	movs	r1, r7
 8005fb8:	f7fa ff0c 	bl	8000dd4 <__aeabi_ddiv>
 8005fbc:	9b02      	ldr	r3, [sp, #8]
 8005fbe:	900a      	str	r0, [sp, #40]	; 0x28
 8005fc0:	910b      	str	r1, [sp, #44]	; 0x2c
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d1de      	bne.n	8005f84 <sqrt+0x60>
 8005fc6:	f7ff ff6f 	bl	8005ea8 <__errno>
 8005fca:	2321      	movs	r3, #33	; 0x21
 8005fcc:	6003      	str	r3, [r0, #0]
 8005fce:	e7de      	b.n	8005f8e <sqrt+0x6a>
 8005fd0:	20000068 	.word	0x20000068
 8005fd4:	080068d5 	.word	0x080068d5

08005fd8 <__ieee754_atan2>:
 8005fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fda:	4254      	negs	r4, r2
 8005fdc:	005e      	lsls	r6, r3, #1
 8005fde:	4314      	orrs	r4, r2
 8005fe0:	4d48      	ldr	r5, [pc, #288]	; (8006104 <__ieee754_atan2+0x12c>)
 8005fe2:	0876      	lsrs	r6, r6, #1
 8005fe4:	0fe4      	lsrs	r4, r4, #31
 8005fe6:	9001      	str	r0, [sp, #4]
 8005fe8:	9100      	str	r1, [sp, #0]
 8005fea:	4334      	orrs	r4, r6
 8005fec:	42ac      	cmp	r4, r5
 8005fee:	d808      	bhi.n	8006002 <__ieee754_atan2+0x2a>
 8005ff0:	4244      	negs	r4, r0
 8005ff2:	004d      	lsls	r5, r1, #1
 8005ff4:	4304      	orrs	r4, r0
 8005ff6:	4f43      	ldr	r7, [pc, #268]	; (8006104 <__ieee754_atan2+0x12c>)
 8005ff8:	086d      	lsrs	r5, r5, #1
 8005ffa:	0fe4      	lsrs	r4, r4, #31
 8005ffc:	432c      	orrs	r4, r5
 8005ffe:	42bc      	cmp	r4, r7
 8006000:	d903      	bls.n	800600a <__ieee754_atan2+0x32>
 8006002:	f7fa fbd7 	bl	80007b4 <__aeabi_dadd>
 8006006:	b003      	add	sp, #12
 8006008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800600a:	4c3f      	ldr	r4, [pc, #252]	; (8006108 <__ieee754_atan2+0x130>)
 800600c:	191c      	adds	r4, r3, r4
 800600e:	4314      	orrs	r4, r2
 8006010:	d102      	bne.n	8006018 <__ieee754_atan2+0x40>
 8006012:	f000 f943 	bl	800629c <atan>
 8006016:	e7f6      	b.n	8006006 <__ieee754_atan2+0x2e>
 8006018:	179c      	asrs	r4, r3, #30
 800601a:	46a4      	mov	ip, r4
 800601c:	2402      	movs	r4, #2
 800601e:	4667      	mov	r7, ip
 8006020:	403c      	ands	r4, r7
 8006022:	9f00      	ldr	r7, [sp, #0]
 8006024:	0fff      	lsrs	r7, r7, #31
 8006026:	433c      	orrs	r4, r7
 8006028:	9f01      	ldr	r7, [sp, #4]
 800602a:	432f      	orrs	r7, r5
 800602c:	d106      	bne.n	800603c <__ieee754_atan2+0x64>
 800602e:	2c02      	cmp	r4, #2
 8006030:	d02c      	beq.n	800608c <__ieee754_atan2+0xb4>
 8006032:	2c03      	cmp	r4, #3
 8006034:	d1e7      	bne.n	8006006 <__ieee754_atan2+0x2e>
 8006036:	4835      	ldr	r0, [pc, #212]	; (800610c <__ieee754_atan2+0x134>)
 8006038:	4935      	ldr	r1, [pc, #212]	; (8006110 <__ieee754_atan2+0x138>)
 800603a:	e7e4      	b.n	8006006 <__ieee754_atan2+0x2e>
 800603c:	0037      	movs	r7, r6
 800603e:	4317      	orrs	r7, r2
 8006040:	d105      	bne.n	800604e <__ieee754_atan2+0x76>
 8006042:	9b00      	ldr	r3, [sp, #0]
 8006044:	4831      	ldr	r0, [pc, #196]	; (800610c <__ieee754_atan2+0x134>)
 8006046:	2b00      	cmp	r3, #0
 8006048:	da59      	bge.n	80060fe <__ieee754_atan2+0x126>
 800604a:	4932      	ldr	r1, [pc, #200]	; (8006114 <__ieee754_atan2+0x13c>)
 800604c:	e7db      	b.n	8006006 <__ieee754_atan2+0x2e>
 800604e:	4f2d      	ldr	r7, [pc, #180]	; (8006104 <__ieee754_atan2+0x12c>)
 8006050:	42be      	cmp	r6, r7
 8006052:	d11e      	bne.n	8006092 <__ieee754_atan2+0xba>
 8006054:	42b5      	cmp	r5, r6
 8006056:	d10e      	bne.n	8006076 <__ieee754_atan2+0x9e>
 8006058:	2c02      	cmp	r4, #2
 800605a:	d006      	beq.n	800606a <__ieee754_atan2+0x92>
 800605c:	2c03      	cmp	r4, #3
 800605e:	d007      	beq.n	8006070 <__ieee754_atan2+0x98>
 8006060:	482a      	ldr	r0, [pc, #168]	; (800610c <__ieee754_atan2+0x134>)
 8006062:	2c01      	cmp	r4, #1
 8006064:	d149      	bne.n	80060fa <__ieee754_atan2+0x122>
 8006066:	492c      	ldr	r1, [pc, #176]	; (8006118 <__ieee754_atan2+0x140>)
 8006068:	e7cd      	b.n	8006006 <__ieee754_atan2+0x2e>
 800606a:	482c      	ldr	r0, [pc, #176]	; (800611c <__ieee754_atan2+0x144>)
 800606c:	492c      	ldr	r1, [pc, #176]	; (8006120 <__ieee754_atan2+0x148>)
 800606e:	e7ca      	b.n	8006006 <__ieee754_atan2+0x2e>
 8006070:	482a      	ldr	r0, [pc, #168]	; (800611c <__ieee754_atan2+0x144>)
 8006072:	492c      	ldr	r1, [pc, #176]	; (8006124 <__ieee754_atan2+0x14c>)
 8006074:	e7c7      	b.n	8006006 <__ieee754_atan2+0x2e>
 8006076:	2c02      	cmp	r4, #2
 8006078:	d008      	beq.n	800608c <__ieee754_atan2+0xb4>
 800607a:	2c03      	cmp	r4, #3
 800607c:	d0db      	beq.n	8006036 <__ieee754_atan2+0x5e>
 800607e:	2000      	movs	r0, #0
 8006080:	2100      	movs	r1, #0
 8006082:	2c01      	cmp	r4, #1
 8006084:	d1bf      	bne.n	8006006 <__ieee754_atan2+0x2e>
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	0609      	lsls	r1, r1, #24
 800608a:	e7bc      	b.n	8006006 <__ieee754_atan2+0x2e>
 800608c:	481f      	ldr	r0, [pc, #124]	; (800610c <__ieee754_atan2+0x134>)
 800608e:	4926      	ldr	r1, [pc, #152]	; (8006128 <__ieee754_atan2+0x150>)
 8006090:	e7b9      	b.n	8006006 <__ieee754_atan2+0x2e>
 8006092:	4f1c      	ldr	r7, [pc, #112]	; (8006104 <__ieee754_atan2+0x12c>)
 8006094:	42bd      	cmp	r5, r7
 8006096:	d0d4      	beq.n	8006042 <__ieee754_atan2+0x6a>
 8006098:	1bad      	subs	r5, r5, r6
 800609a:	152d      	asrs	r5, r5, #20
 800609c:	2d3c      	cmp	r5, #60	; 0x3c
 800609e:	dc16      	bgt.n	80060ce <__ieee754_atan2+0xf6>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	da01      	bge.n	80060a8 <__ieee754_atan2+0xd0>
 80060a4:	353c      	adds	r5, #60	; 0x3c
 80060a6:	db15      	blt.n	80060d4 <__ieee754_atan2+0xfc>
 80060a8:	f7fa fe94 	bl	8000dd4 <__aeabi_ddiv>
 80060ac:	f000 fa7e 	bl	80065ac <fabs>
 80060b0:	f000 f8f4 	bl	800629c <atan>
 80060b4:	2c01      	cmp	r4, #1
 80060b6:	d010      	beq.n	80060da <__ieee754_atan2+0x102>
 80060b8:	2c02      	cmp	r4, #2
 80060ba:	d013      	beq.n	80060e4 <__ieee754_atan2+0x10c>
 80060bc:	2c00      	cmp	r4, #0
 80060be:	d0a2      	beq.n	8006006 <__ieee754_atan2+0x2e>
 80060c0:	4a1a      	ldr	r2, [pc, #104]	; (800612c <__ieee754_atan2+0x154>)
 80060c2:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <__ieee754_atan2+0x158>)
 80060c4:	f7fb fd3a 	bl	8001b3c <__aeabi_dsub>
 80060c8:	4a10      	ldr	r2, [pc, #64]	; (800610c <__ieee754_atan2+0x134>)
 80060ca:	4b17      	ldr	r3, [pc, #92]	; (8006128 <__ieee754_atan2+0x150>)
 80060cc:	e012      	b.n	80060f4 <__ieee754_atan2+0x11c>
 80060ce:	480f      	ldr	r0, [pc, #60]	; (800610c <__ieee754_atan2+0x134>)
 80060d0:	4918      	ldr	r1, [pc, #96]	; (8006134 <__ieee754_atan2+0x15c>)
 80060d2:	e7ef      	b.n	80060b4 <__ieee754_atan2+0xdc>
 80060d4:	2000      	movs	r0, #0
 80060d6:	2100      	movs	r1, #0
 80060d8:	e7ec      	b.n	80060b4 <__ieee754_atan2+0xdc>
 80060da:	2480      	movs	r4, #128	; 0x80
 80060dc:	0624      	lsls	r4, r4, #24
 80060de:	190b      	adds	r3, r1, r4
 80060e0:	0019      	movs	r1, r3
 80060e2:	e790      	b.n	8006006 <__ieee754_atan2+0x2e>
 80060e4:	4a11      	ldr	r2, [pc, #68]	; (800612c <__ieee754_atan2+0x154>)
 80060e6:	4b12      	ldr	r3, [pc, #72]	; (8006130 <__ieee754_atan2+0x158>)
 80060e8:	f7fb fd28 	bl	8001b3c <__aeabi_dsub>
 80060ec:	0002      	movs	r2, r0
 80060ee:	000b      	movs	r3, r1
 80060f0:	4806      	ldr	r0, [pc, #24]	; (800610c <__ieee754_atan2+0x134>)
 80060f2:	490d      	ldr	r1, [pc, #52]	; (8006128 <__ieee754_atan2+0x150>)
 80060f4:	f7fb fd22 	bl	8001b3c <__aeabi_dsub>
 80060f8:	e785      	b.n	8006006 <__ieee754_atan2+0x2e>
 80060fa:	490f      	ldr	r1, [pc, #60]	; (8006138 <__ieee754_atan2+0x160>)
 80060fc:	e783      	b.n	8006006 <__ieee754_atan2+0x2e>
 80060fe:	490d      	ldr	r1, [pc, #52]	; (8006134 <__ieee754_atan2+0x15c>)
 8006100:	e781      	b.n	8006006 <__ieee754_atan2+0x2e>
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	7ff00000 	.word	0x7ff00000
 8006108:	c0100000 	.word	0xc0100000
 800610c:	54442d18 	.word	0x54442d18
 8006110:	c00921fb 	.word	0xc00921fb
 8006114:	bff921fb 	.word	0xbff921fb
 8006118:	bfe921fb 	.word	0xbfe921fb
 800611c:	7f3321d2 	.word	0x7f3321d2
 8006120:	4002d97c 	.word	0x4002d97c
 8006124:	c002d97c 	.word	0xc002d97c
 8006128:	400921fb 	.word	0x400921fb
 800612c:	33145c07 	.word	0x33145c07
 8006130:	3ca1a626 	.word	0x3ca1a626
 8006134:	3ff921fb 	.word	0x3ff921fb
 8006138:	3fe921fb 	.word	0x3fe921fb

0800613c <__ieee754_sqrt>:
 800613c:	4b54      	ldr	r3, [pc, #336]	; (8006290 <__ieee754_sqrt+0x154>)
 800613e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006140:	001e      	movs	r6, r3
 8006142:	0005      	movs	r5, r0
 8006144:	000c      	movs	r4, r1
 8006146:	0002      	movs	r2, r0
 8006148:	400e      	ands	r6, r1
 800614a:	429e      	cmp	r6, r3
 800614c:	d10f      	bne.n	800616e <__ieee754_sqrt+0x32>
 800614e:	0002      	movs	r2, r0
 8006150:	000b      	movs	r3, r1
 8006152:	f7fb fa73 	bl	800163c <__aeabi_dmul>
 8006156:	0002      	movs	r2, r0
 8006158:	000b      	movs	r3, r1
 800615a:	0028      	movs	r0, r5
 800615c:	0021      	movs	r1, r4
 800615e:	f7fa fb29 	bl	80007b4 <__aeabi_dadd>
 8006162:	0005      	movs	r5, r0
 8006164:	000c      	movs	r4, r1
 8006166:	0028      	movs	r0, r5
 8006168:	0021      	movs	r1, r4
 800616a:	b003      	add	sp, #12
 800616c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616e:	2900      	cmp	r1, #0
 8006170:	dc0e      	bgt.n	8006190 <__ieee754_sqrt+0x54>
 8006172:	004b      	lsls	r3, r1, #1
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	4303      	orrs	r3, r0
 8006178:	d0f5      	beq.n	8006166 <__ieee754_sqrt+0x2a>
 800617a:	2900      	cmp	r1, #0
 800617c:	d00a      	beq.n	8006194 <__ieee754_sqrt+0x58>
 800617e:	0002      	movs	r2, r0
 8006180:	000b      	movs	r3, r1
 8006182:	f7fb fcdb 	bl	8001b3c <__aeabi_dsub>
 8006186:	0002      	movs	r2, r0
 8006188:	000b      	movs	r3, r1
 800618a:	f7fa fe23 	bl	8000dd4 <__aeabi_ddiv>
 800618e:	e7e8      	b.n	8006162 <__ieee754_sqrt+0x26>
 8006190:	150b      	asrs	r3, r1, #20
 8006192:	d10f      	bne.n	80061b4 <__ieee754_sqrt+0x78>
 8006194:	2300      	movs	r3, #0
 8006196:	2900      	cmp	r1, #0
 8006198:	d06f      	beq.n	800627a <__ieee754_sqrt+0x13e>
 800619a:	2480      	movs	r4, #128	; 0x80
 800619c:	2000      	movs	r0, #0
 800619e:	0364      	lsls	r4, r4, #13
 80061a0:	4221      	tst	r1, r4
 80061a2:	d06e      	beq.n	8006282 <__ieee754_sqrt+0x146>
 80061a4:	1e44      	subs	r4, r0, #1
 80061a6:	1b1b      	subs	r3, r3, r4
 80061a8:	2420      	movs	r4, #32
 80061aa:	0015      	movs	r5, r2
 80061ac:	1a24      	subs	r4, r4, r0
 80061ae:	40e5      	lsrs	r5, r4
 80061b0:	4082      	lsls	r2, r0
 80061b2:	4329      	orrs	r1, r5
 80061b4:	4837      	ldr	r0, [pc, #220]	; (8006294 <__ieee754_sqrt+0x158>)
 80061b6:	0309      	lsls	r1, r1, #12
 80061b8:	1818      	adds	r0, r3, r0
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	0b09      	lsrs	r1, r1, #12
 80061be:	035b      	lsls	r3, r3, #13
 80061c0:	4319      	orrs	r1, r3
 80061c2:	07c3      	lsls	r3, r0, #31
 80061c4:	d503      	bpl.n	80061ce <__ieee754_sqrt+0x92>
 80061c6:	0fd3      	lsrs	r3, r2, #31
 80061c8:	0049      	lsls	r1, r1, #1
 80061ca:	1859      	adds	r1, r3, r1
 80061cc:	0052      	lsls	r2, r2, #1
 80061ce:	2400      	movs	r4, #0
 80061d0:	1043      	asrs	r3, r0, #1
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	0fd3      	lsrs	r3, r2, #31
 80061d6:	185b      	adds	r3, r3, r1
 80061d8:	2580      	movs	r5, #128	; 0x80
 80061da:	185b      	adds	r3, r3, r1
 80061dc:	0020      	movs	r0, r4
 80061de:	2116      	movs	r1, #22
 80061e0:	0052      	lsls	r2, r2, #1
 80061e2:	03ad      	lsls	r5, r5, #14
 80061e4:	1946      	adds	r6, r0, r5
 80061e6:	429e      	cmp	r6, r3
 80061e8:	dc02      	bgt.n	80061f0 <__ieee754_sqrt+0xb4>
 80061ea:	1970      	adds	r0, r6, r5
 80061ec:	1b9b      	subs	r3, r3, r6
 80061ee:	1964      	adds	r4, r4, r5
 80061f0:	0fd6      	lsrs	r6, r2, #31
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	3901      	subs	r1, #1
 80061f6:	18f3      	adds	r3, r6, r3
 80061f8:	0052      	lsls	r2, r2, #1
 80061fa:	086d      	lsrs	r5, r5, #1
 80061fc:	2900      	cmp	r1, #0
 80061fe:	d1f1      	bne.n	80061e4 <__ieee754_sqrt+0xa8>
 8006200:	2520      	movs	r5, #32
 8006202:	2680      	movs	r6, #128	; 0x80
 8006204:	46ac      	mov	ip, r5
 8006206:	9100      	str	r1, [sp, #0]
 8006208:	0636      	lsls	r6, r6, #24
 800620a:	9d00      	ldr	r5, [sp, #0]
 800620c:	1977      	adds	r7, r6, r5
 800620e:	4283      	cmp	r3, r0
 8006210:	dc02      	bgt.n	8006218 <__ieee754_sqrt+0xdc>
 8006212:	d112      	bne.n	800623a <__ieee754_sqrt+0xfe>
 8006214:	4297      	cmp	r7, r2
 8006216:	d810      	bhi.n	800623a <__ieee754_sqrt+0xfe>
 8006218:	19bd      	adds	r5, r7, r6
 800621a:	9500      	str	r5, [sp, #0]
 800621c:	0005      	movs	r5, r0
 800621e:	2f00      	cmp	r7, #0
 8006220:	da03      	bge.n	800622a <__ieee754_sqrt+0xee>
 8006222:	9d00      	ldr	r5, [sp, #0]
 8006224:	43ed      	mvns	r5, r5
 8006226:	0fed      	lsrs	r5, r5, #31
 8006228:	1945      	adds	r5, r0, r5
 800622a:	1a1b      	subs	r3, r3, r0
 800622c:	42ba      	cmp	r2, r7
 800622e:	4180      	sbcs	r0, r0
 8006230:	4240      	negs	r0, r0
 8006232:	1a1b      	subs	r3, r3, r0
 8006234:	0028      	movs	r0, r5
 8006236:	1bd2      	subs	r2, r2, r7
 8006238:	1989      	adds	r1, r1, r6
 800623a:	0fd5      	lsrs	r5, r2, #31
 800623c:	18ed      	adds	r5, r5, r3
 800623e:	18eb      	adds	r3, r5, r3
 8006240:	2501      	movs	r5, #1
 8006242:	426d      	negs	r5, r5
 8006244:	44ac      	add	ip, r5
 8006246:	4665      	mov	r5, ip
 8006248:	0052      	lsls	r2, r2, #1
 800624a:	0876      	lsrs	r6, r6, #1
 800624c:	2d00      	cmp	r5, #0
 800624e:	d1dc      	bne.n	800620a <__ieee754_sqrt+0xce>
 8006250:	4313      	orrs	r3, r2
 8006252:	d003      	beq.n	800625c <__ieee754_sqrt+0x120>
 8006254:	1c4b      	adds	r3, r1, #1
 8006256:	d117      	bne.n	8006288 <__ieee754_sqrt+0x14c>
 8006258:	4661      	mov	r1, ip
 800625a:	3401      	adds	r4, #1
 800625c:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <__ieee754_sqrt+0x15c>)
 800625e:	1060      	asrs	r0, r4, #1
 8006260:	18c0      	adds	r0, r0, r3
 8006262:	0849      	lsrs	r1, r1, #1
 8006264:	07e3      	lsls	r3, r4, #31
 8006266:	d502      	bpl.n	800626e <__ieee754_sqrt+0x132>
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	4319      	orrs	r1, r3
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	000d      	movs	r5, r1
 8006272:	051c      	lsls	r4, r3, #20
 8006274:	1823      	adds	r3, r4, r0
 8006276:	001c      	movs	r4, r3
 8006278:	e775      	b.n	8006166 <__ieee754_sqrt+0x2a>
 800627a:	0ad1      	lsrs	r1, r2, #11
 800627c:	3b15      	subs	r3, #21
 800627e:	0552      	lsls	r2, r2, #21
 8006280:	e789      	b.n	8006196 <__ieee754_sqrt+0x5a>
 8006282:	0049      	lsls	r1, r1, #1
 8006284:	3001      	adds	r0, #1
 8006286:	e78b      	b.n	80061a0 <__ieee754_sqrt+0x64>
 8006288:	2301      	movs	r3, #1
 800628a:	3101      	adds	r1, #1
 800628c:	4399      	bics	r1, r3
 800628e:	e7e5      	b.n	800625c <__ieee754_sqrt+0x120>
 8006290:	7ff00000 	.word	0x7ff00000
 8006294:	fffffc01 	.word	0xfffffc01
 8006298:	3fe00000 	.word	0x3fe00000

0800629c <atan>:
 800629c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629e:	4b9c      	ldr	r3, [pc, #624]	; (8006510 <atan+0x274>)
 80062a0:	b085      	sub	sp, #20
 80062a2:	004e      	lsls	r6, r1, #1
 80062a4:	0004      	movs	r4, r0
 80062a6:	000d      	movs	r5, r1
 80062a8:	9103      	str	r1, [sp, #12]
 80062aa:	0876      	lsrs	r6, r6, #1
 80062ac:	429e      	cmp	r6, r3
 80062ae:	dd18      	ble.n	80062e2 <atan+0x46>
 80062b0:	4b98      	ldr	r3, [pc, #608]	; (8006514 <atan+0x278>)
 80062b2:	429e      	cmp	r6, r3
 80062b4:	dc02      	bgt.n	80062bc <atan+0x20>
 80062b6:	d10a      	bne.n	80062ce <atan+0x32>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d008      	beq.n	80062ce <atan+0x32>
 80062bc:	0022      	movs	r2, r4
 80062be:	002b      	movs	r3, r5
 80062c0:	0020      	movs	r0, r4
 80062c2:	0029      	movs	r1, r5
 80062c4:	f7fa fa76 	bl	80007b4 <__aeabi_dadd>
 80062c8:	0004      	movs	r4, r0
 80062ca:	000d      	movs	r5, r1
 80062cc:	e005      	b.n	80062da <atan+0x3e>
 80062ce:	9b03      	ldr	r3, [sp, #12]
 80062d0:	4c91      	ldr	r4, [pc, #580]	; (8006518 <atan+0x27c>)
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dd00      	ble.n	80062d8 <atan+0x3c>
 80062d6:	e118      	b.n	800650a <atan+0x26e>
 80062d8:	4d90      	ldr	r5, [pc, #576]	; (800651c <atan+0x280>)
 80062da:	0020      	movs	r0, r4
 80062dc:	0029      	movs	r1, r5
 80062de:	b005      	add	sp, #20
 80062e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e2:	4b8f      	ldr	r3, [pc, #572]	; (8006520 <atan+0x284>)
 80062e4:	429e      	cmp	r6, r3
 80062e6:	dc0f      	bgt.n	8006308 <atan+0x6c>
 80062e8:	4b8e      	ldr	r3, [pc, #568]	; (8006524 <atan+0x288>)
 80062ea:	429e      	cmp	r6, r3
 80062ec:	dc09      	bgt.n	8006302 <atan+0x66>
 80062ee:	4a8e      	ldr	r2, [pc, #568]	; (8006528 <atan+0x28c>)
 80062f0:	4b8e      	ldr	r3, [pc, #568]	; (800652c <atan+0x290>)
 80062f2:	f7fa fa5f 	bl	80007b4 <__aeabi_dadd>
 80062f6:	2200      	movs	r2, #0
 80062f8:	4b8d      	ldr	r3, [pc, #564]	; (8006530 <atan+0x294>)
 80062fa:	f7f9 ffd7 	bl	80002ac <__aeabi_dcmpgt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d1eb      	bne.n	80062da <atan+0x3e>
 8006302:	2301      	movs	r3, #1
 8006304:	425b      	negs	r3, r3
 8006306:	e025      	b.n	8006354 <atan+0xb8>
 8006308:	f000 f950 	bl	80065ac <fabs>
 800630c:	4b89      	ldr	r3, [pc, #548]	; (8006534 <atan+0x298>)
 800630e:	0004      	movs	r4, r0
 8006310:	000d      	movs	r5, r1
 8006312:	429e      	cmp	r6, r3
 8006314:	dd00      	ble.n	8006318 <atan+0x7c>
 8006316:	e0aa      	b.n	800646e <atan+0x1d2>
 8006318:	4b87      	ldr	r3, [pc, #540]	; (8006538 <atan+0x29c>)
 800631a:	429e      	cmp	r6, r3
 800631c:	dd00      	ble.n	8006320 <atan+0x84>
 800631e:	e090      	b.n	8006442 <atan+0x1a6>
 8006320:	0002      	movs	r2, r0
 8006322:	000b      	movs	r3, r1
 8006324:	f7fa fa46 	bl	80007b4 <__aeabi_dadd>
 8006328:	2200      	movs	r2, #0
 800632a:	4b81      	ldr	r3, [pc, #516]	; (8006530 <atan+0x294>)
 800632c:	f7fb fc06 	bl	8001b3c <__aeabi_dsub>
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	0006      	movs	r6, r0
 8006334:	000f      	movs	r7, r1
 8006336:	2200      	movs	r2, #0
 8006338:	05db      	lsls	r3, r3, #23
 800633a:	0020      	movs	r0, r4
 800633c:	0029      	movs	r1, r5
 800633e:	f7fa fa39 	bl	80007b4 <__aeabi_dadd>
 8006342:	000b      	movs	r3, r1
 8006344:	0002      	movs	r2, r0
 8006346:	0039      	movs	r1, r7
 8006348:	0030      	movs	r0, r6
 800634a:	f7fa fd43 	bl	8000dd4 <__aeabi_ddiv>
 800634e:	2300      	movs	r3, #0
 8006350:	0004      	movs	r4, r0
 8006352:	000d      	movs	r5, r1
 8006354:	9302      	str	r3, [sp, #8]
 8006356:	0022      	movs	r2, r4
 8006358:	002b      	movs	r3, r5
 800635a:	0020      	movs	r0, r4
 800635c:	0029      	movs	r1, r5
 800635e:	f7fb f96d 	bl	800163c <__aeabi_dmul>
 8006362:	0002      	movs	r2, r0
 8006364:	000b      	movs	r3, r1
 8006366:	9000      	str	r0, [sp, #0]
 8006368:	9101      	str	r1, [sp, #4]
 800636a:	f7fb f967 	bl	800163c <__aeabi_dmul>
 800636e:	0006      	movs	r6, r0
 8006370:	000f      	movs	r7, r1
 8006372:	4a72      	ldr	r2, [pc, #456]	; (800653c <atan+0x2a0>)
 8006374:	4b72      	ldr	r3, [pc, #456]	; (8006540 <atan+0x2a4>)
 8006376:	f7fb f961 	bl	800163c <__aeabi_dmul>
 800637a:	4a72      	ldr	r2, [pc, #456]	; (8006544 <atan+0x2a8>)
 800637c:	4b72      	ldr	r3, [pc, #456]	; (8006548 <atan+0x2ac>)
 800637e:	f7fa fa19 	bl	80007b4 <__aeabi_dadd>
 8006382:	0032      	movs	r2, r6
 8006384:	003b      	movs	r3, r7
 8006386:	f7fb f959 	bl	800163c <__aeabi_dmul>
 800638a:	4a70      	ldr	r2, [pc, #448]	; (800654c <atan+0x2b0>)
 800638c:	4b70      	ldr	r3, [pc, #448]	; (8006550 <atan+0x2b4>)
 800638e:	f7fa fa11 	bl	80007b4 <__aeabi_dadd>
 8006392:	0032      	movs	r2, r6
 8006394:	003b      	movs	r3, r7
 8006396:	f7fb f951 	bl	800163c <__aeabi_dmul>
 800639a:	4a6e      	ldr	r2, [pc, #440]	; (8006554 <atan+0x2b8>)
 800639c:	4b6e      	ldr	r3, [pc, #440]	; (8006558 <atan+0x2bc>)
 800639e:	f7fa fa09 	bl	80007b4 <__aeabi_dadd>
 80063a2:	0032      	movs	r2, r6
 80063a4:	003b      	movs	r3, r7
 80063a6:	f7fb f949 	bl	800163c <__aeabi_dmul>
 80063aa:	4a6c      	ldr	r2, [pc, #432]	; (800655c <atan+0x2c0>)
 80063ac:	4b6c      	ldr	r3, [pc, #432]	; (8006560 <atan+0x2c4>)
 80063ae:	f7fa fa01 	bl	80007b4 <__aeabi_dadd>
 80063b2:	0032      	movs	r2, r6
 80063b4:	003b      	movs	r3, r7
 80063b6:	f7fb f941 	bl	800163c <__aeabi_dmul>
 80063ba:	4a6a      	ldr	r2, [pc, #424]	; (8006564 <atan+0x2c8>)
 80063bc:	4b6a      	ldr	r3, [pc, #424]	; (8006568 <atan+0x2cc>)
 80063be:	f7fa f9f9 	bl	80007b4 <__aeabi_dadd>
 80063c2:	9a00      	ldr	r2, [sp, #0]
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	f7fb f939 	bl	800163c <__aeabi_dmul>
 80063ca:	4a68      	ldr	r2, [pc, #416]	; (800656c <atan+0x2d0>)
 80063cc:	9000      	str	r0, [sp, #0]
 80063ce:	9101      	str	r1, [sp, #4]
 80063d0:	4b67      	ldr	r3, [pc, #412]	; (8006570 <atan+0x2d4>)
 80063d2:	0030      	movs	r0, r6
 80063d4:	0039      	movs	r1, r7
 80063d6:	f7fb f931 	bl	800163c <__aeabi_dmul>
 80063da:	4a66      	ldr	r2, [pc, #408]	; (8006574 <atan+0x2d8>)
 80063dc:	4b66      	ldr	r3, [pc, #408]	; (8006578 <atan+0x2dc>)
 80063de:	f7fb fbad 	bl	8001b3c <__aeabi_dsub>
 80063e2:	0032      	movs	r2, r6
 80063e4:	003b      	movs	r3, r7
 80063e6:	f7fb f929 	bl	800163c <__aeabi_dmul>
 80063ea:	4a64      	ldr	r2, [pc, #400]	; (800657c <atan+0x2e0>)
 80063ec:	4b64      	ldr	r3, [pc, #400]	; (8006580 <atan+0x2e4>)
 80063ee:	f7fb fba5 	bl	8001b3c <__aeabi_dsub>
 80063f2:	0032      	movs	r2, r6
 80063f4:	003b      	movs	r3, r7
 80063f6:	f7fb f921 	bl	800163c <__aeabi_dmul>
 80063fa:	4a62      	ldr	r2, [pc, #392]	; (8006584 <atan+0x2e8>)
 80063fc:	4b62      	ldr	r3, [pc, #392]	; (8006588 <atan+0x2ec>)
 80063fe:	f7fb fb9d 	bl	8001b3c <__aeabi_dsub>
 8006402:	0032      	movs	r2, r6
 8006404:	003b      	movs	r3, r7
 8006406:	f7fb f919 	bl	800163c <__aeabi_dmul>
 800640a:	4a60      	ldr	r2, [pc, #384]	; (800658c <atan+0x2f0>)
 800640c:	4b60      	ldr	r3, [pc, #384]	; (8006590 <atan+0x2f4>)
 800640e:	f7fb fb95 	bl	8001b3c <__aeabi_dsub>
 8006412:	0032      	movs	r2, r6
 8006414:	003b      	movs	r3, r7
 8006416:	f7fb f911 	bl	800163c <__aeabi_dmul>
 800641a:	000b      	movs	r3, r1
 800641c:	9902      	ldr	r1, [sp, #8]
 800641e:	0002      	movs	r2, r0
 8006420:	3101      	adds	r1, #1
 8006422:	d14b      	bne.n	80064bc <atan+0x220>
 8006424:	9800      	ldr	r0, [sp, #0]
 8006426:	9901      	ldr	r1, [sp, #4]
 8006428:	f7fa f9c4 	bl	80007b4 <__aeabi_dadd>
 800642c:	0022      	movs	r2, r4
 800642e:	002b      	movs	r3, r5
 8006430:	f7fb f904 	bl	800163c <__aeabi_dmul>
 8006434:	0002      	movs	r2, r0
 8006436:	000b      	movs	r3, r1
 8006438:	0020      	movs	r0, r4
 800643a:	0029      	movs	r1, r5
 800643c:	f7fb fb7e 	bl	8001b3c <__aeabi_dsub>
 8006440:	e742      	b.n	80062c8 <atan+0x2c>
 8006442:	2200      	movs	r2, #0
 8006444:	4b3a      	ldr	r3, [pc, #232]	; (8006530 <atan+0x294>)
 8006446:	f7fb fb79 	bl	8001b3c <__aeabi_dsub>
 800644a:	2200      	movs	r2, #0
 800644c:	0006      	movs	r6, r0
 800644e:	000f      	movs	r7, r1
 8006450:	4b37      	ldr	r3, [pc, #220]	; (8006530 <atan+0x294>)
 8006452:	0020      	movs	r0, r4
 8006454:	0029      	movs	r1, r5
 8006456:	f7fa f9ad 	bl	80007b4 <__aeabi_dadd>
 800645a:	000b      	movs	r3, r1
 800645c:	0002      	movs	r2, r0
 800645e:	0039      	movs	r1, r7
 8006460:	0030      	movs	r0, r6
 8006462:	f7fa fcb7 	bl	8000dd4 <__aeabi_ddiv>
 8006466:	2301      	movs	r3, #1
 8006468:	0004      	movs	r4, r0
 800646a:	000d      	movs	r5, r1
 800646c:	e772      	b.n	8006354 <atan+0xb8>
 800646e:	4b49      	ldr	r3, [pc, #292]	; (8006594 <atan+0x2f8>)
 8006470:	429e      	cmp	r6, r3
 8006472:	dc19      	bgt.n	80064a8 <atan+0x20c>
 8006474:	2200      	movs	r2, #0
 8006476:	4b48      	ldr	r3, [pc, #288]	; (8006598 <atan+0x2fc>)
 8006478:	f7fb fb60 	bl	8001b3c <__aeabi_dsub>
 800647c:	2200      	movs	r2, #0
 800647e:	0006      	movs	r6, r0
 8006480:	000f      	movs	r7, r1
 8006482:	4b45      	ldr	r3, [pc, #276]	; (8006598 <atan+0x2fc>)
 8006484:	0020      	movs	r0, r4
 8006486:	0029      	movs	r1, r5
 8006488:	f7fb f8d8 	bl	800163c <__aeabi_dmul>
 800648c:	2200      	movs	r2, #0
 800648e:	4b28      	ldr	r3, [pc, #160]	; (8006530 <atan+0x294>)
 8006490:	f7fa f990 	bl	80007b4 <__aeabi_dadd>
 8006494:	000b      	movs	r3, r1
 8006496:	0002      	movs	r2, r0
 8006498:	0039      	movs	r1, r7
 800649a:	0030      	movs	r0, r6
 800649c:	f7fa fc9a 	bl	8000dd4 <__aeabi_ddiv>
 80064a0:	2302      	movs	r3, #2
 80064a2:	0004      	movs	r4, r0
 80064a4:	000d      	movs	r5, r1
 80064a6:	e755      	b.n	8006354 <atan+0xb8>
 80064a8:	000b      	movs	r3, r1
 80064aa:	0002      	movs	r2, r0
 80064ac:	493b      	ldr	r1, [pc, #236]	; (800659c <atan+0x300>)
 80064ae:	2000      	movs	r0, #0
 80064b0:	f7fa fc90 	bl	8000dd4 <__aeabi_ddiv>
 80064b4:	2303      	movs	r3, #3
 80064b6:	0004      	movs	r4, r0
 80064b8:	000d      	movs	r5, r1
 80064ba:	e74b      	b.n	8006354 <atan+0xb8>
 80064bc:	9902      	ldr	r1, [sp, #8]
 80064be:	4f38      	ldr	r7, [pc, #224]	; (80065a0 <atan+0x304>)
 80064c0:	00ce      	lsls	r6, r1, #3
 80064c2:	9800      	ldr	r0, [sp, #0]
 80064c4:	9901      	ldr	r1, [sp, #4]
 80064c6:	f7fa f975 	bl	80007b4 <__aeabi_dadd>
 80064ca:	0022      	movs	r2, r4
 80064cc:	002b      	movs	r3, r5
 80064ce:	f7fb f8b5 	bl	800163c <__aeabi_dmul>
 80064d2:	4b34      	ldr	r3, [pc, #208]	; (80065a4 <atan+0x308>)
 80064d4:	19bf      	adds	r7, r7, r6
 80064d6:	199e      	adds	r6, r3, r6
 80064d8:	6832      	ldr	r2, [r6, #0]
 80064da:	6873      	ldr	r3, [r6, #4]
 80064dc:	f7fb fb2e 	bl	8001b3c <__aeabi_dsub>
 80064e0:	0022      	movs	r2, r4
 80064e2:	002b      	movs	r3, r5
 80064e4:	f7fb fb2a 	bl	8001b3c <__aeabi_dsub>
 80064e8:	000b      	movs	r3, r1
 80064ea:	0002      	movs	r2, r0
 80064ec:	6838      	ldr	r0, [r7, #0]
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	f7fb fb24 	bl	8001b3c <__aeabi_dsub>
 80064f4:	9b03      	ldr	r3, [sp, #12]
 80064f6:	0004      	movs	r4, r0
 80064f8:	000d      	movs	r5, r1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	db00      	blt.n	8006500 <atan+0x264>
 80064fe:	e6ec      	b.n	80062da <atan+0x3e>
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	0609      	lsls	r1, r1, #24
 8006504:	186b      	adds	r3, r5, r1
 8006506:	001d      	movs	r5, r3
 8006508:	e6e7      	b.n	80062da <atan+0x3e>
 800650a:	4d27      	ldr	r5, [pc, #156]	; (80065a8 <atan+0x30c>)
 800650c:	e6e5      	b.n	80062da <atan+0x3e>
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	440fffff 	.word	0x440fffff
 8006514:	7ff00000 	.word	0x7ff00000
 8006518:	54442d18 	.word	0x54442d18
 800651c:	bff921fb 	.word	0xbff921fb
 8006520:	3fdbffff 	.word	0x3fdbffff
 8006524:	3e1fffff 	.word	0x3e1fffff
 8006528:	8800759c 	.word	0x8800759c
 800652c:	7e37e43c 	.word	0x7e37e43c
 8006530:	3ff00000 	.word	0x3ff00000
 8006534:	3ff2ffff 	.word	0x3ff2ffff
 8006538:	3fe5ffff 	.word	0x3fe5ffff
 800653c:	e322da11 	.word	0xe322da11
 8006540:	3f90ad3a 	.word	0x3f90ad3a
 8006544:	24760deb 	.word	0x24760deb
 8006548:	3fa97b4b 	.word	0x3fa97b4b
 800654c:	a0d03d51 	.word	0xa0d03d51
 8006550:	3fb10d66 	.word	0x3fb10d66
 8006554:	c54c206e 	.word	0xc54c206e
 8006558:	3fb745cd 	.word	0x3fb745cd
 800655c:	920083ff 	.word	0x920083ff
 8006560:	3fc24924 	.word	0x3fc24924
 8006564:	5555550d 	.word	0x5555550d
 8006568:	3fd55555 	.word	0x3fd55555
 800656c:	2c6a6c2f 	.word	0x2c6a6c2f
 8006570:	bfa2b444 	.word	0xbfa2b444
 8006574:	52defd9a 	.word	0x52defd9a
 8006578:	3fadde2d 	.word	0x3fadde2d
 800657c:	af749a6d 	.word	0xaf749a6d
 8006580:	3fb3b0f2 	.word	0x3fb3b0f2
 8006584:	fe231671 	.word	0xfe231671
 8006588:	3fbc71c6 	.word	0x3fbc71c6
 800658c:	9998ebc4 	.word	0x9998ebc4
 8006590:	3fc99999 	.word	0x3fc99999
 8006594:	40037fff 	.word	0x40037fff
 8006598:	3ff80000 	.word	0x3ff80000
 800659c:	bff00000 	.word	0xbff00000
 80065a0:	080068e0 	.word	0x080068e0
 80065a4:	08006900 	.word	0x08006900
 80065a8:	3ff921fb 	.word	0x3ff921fb

080065ac <fabs>:
 80065ac:	0049      	lsls	r1, r1, #1
 80065ae:	084b      	lsrs	r3, r1, #1
 80065b0:	0019      	movs	r1, r3
 80065b2:	4770      	bx	lr

080065b4 <matherr>:
 80065b4:	2000      	movs	r0, #0
 80065b6:	4770      	bx	lr

080065b8 <_init>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr

080065c4 <_fini>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr
