
Box_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08005e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003f8  200001d4  08006038  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005cc  08006038  000205cc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014f56  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b4a  00000000  00000000  00035152  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008552  00000000  00000000  00037c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ae8  00000000  00000000  000401f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000dc8  00000000  00000000  00040cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007afb  00000000  00000000  00041aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003c38  00000000  00000000  0004959b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d1d3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000247c  00000000  00000000  0004d250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005944 	.word	0x08005944

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08005944 	.word	0x08005944

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	1c08      	adds	r0, r1, #0
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	; (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__udivmoddi4>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	4657      	mov	r7, sl
 800029c:	464e      	mov	r6, r9
 800029e:	4645      	mov	r5, r8
 80002a0:	46de      	mov	lr, fp
 80002a2:	b5e0      	push	{r5, r6, r7, lr}
 80002a4:	0004      	movs	r4, r0
 80002a6:	b083      	sub	sp, #12
 80002a8:	000d      	movs	r5, r1
 80002aa:	4692      	mov	sl, r2
 80002ac:	4699      	mov	r9, r3
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d82f      	bhi.n	8000312 <__udivmoddi4+0x7a>
 80002b2:	d02c      	beq.n	800030e <__udivmoddi4+0x76>
 80002b4:	4649      	mov	r1, r9
 80002b6:	4650      	mov	r0, sl
 80002b8:	f001 fef6 	bl	80020a8 <__clzdi2>
 80002bc:	0029      	movs	r1, r5
 80002be:	0006      	movs	r6, r0
 80002c0:	0020      	movs	r0, r4
 80002c2:	f001 fef1 	bl	80020a8 <__clzdi2>
 80002c6:	1a33      	subs	r3, r6, r0
 80002c8:	4698      	mov	r8, r3
 80002ca:	3b20      	subs	r3, #32
 80002cc:	469b      	mov	fp, r3
 80002ce:	d500      	bpl.n	80002d2 <__udivmoddi4+0x3a>
 80002d0:	e074      	b.n	80003bc <__udivmoddi4+0x124>
 80002d2:	4653      	mov	r3, sl
 80002d4:	465a      	mov	r2, fp
 80002d6:	4093      	lsls	r3, r2
 80002d8:	001f      	movs	r7, r3
 80002da:	4653      	mov	r3, sl
 80002dc:	4642      	mov	r2, r8
 80002de:	4093      	lsls	r3, r2
 80002e0:	001e      	movs	r6, r3
 80002e2:	42af      	cmp	r7, r5
 80002e4:	d829      	bhi.n	800033a <__udivmoddi4+0xa2>
 80002e6:	d026      	beq.n	8000336 <__udivmoddi4+0x9e>
 80002e8:	465b      	mov	r3, fp
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	41bd      	sbcs	r5, r7
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	da00      	bge.n	80002f4 <__udivmoddi4+0x5c>
 80002f2:	e079      	b.n	80003e8 <__udivmoddi4+0x150>
 80002f4:	2200      	movs	r2, #0
 80002f6:	2300      	movs	r3, #0
 80002f8:	9200      	str	r2, [sp, #0]
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	2301      	movs	r3, #1
 80002fe:	465a      	mov	r2, fp
 8000300:	4093      	lsls	r3, r2
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	2301      	movs	r3, #1
 8000306:	4642      	mov	r2, r8
 8000308:	4093      	lsls	r3, r2
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	e019      	b.n	8000342 <__udivmoddi4+0xaa>
 800030e:	4282      	cmp	r2, r0
 8000310:	d9d0      	bls.n	80002b4 <__udivmoddi4+0x1c>
 8000312:	2200      	movs	r2, #0
 8000314:	2300      	movs	r3, #0
 8000316:	9200      	str	r2, [sp, #0]
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <__udivmoddi4+0x8c>
 8000320:	601c      	str	r4, [r3, #0]
 8000322:	605d      	str	r5, [r3, #4]
 8000324:	9800      	ldr	r0, [sp, #0]
 8000326:	9901      	ldr	r1, [sp, #4]
 8000328:	b003      	add	sp, #12
 800032a:	bc3c      	pop	{r2, r3, r4, r5}
 800032c:	4690      	mov	r8, r2
 800032e:	4699      	mov	r9, r3
 8000330:	46a2      	mov	sl, r4
 8000332:	46ab      	mov	fp, r5
 8000334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000336:	42a3      	cmp	r3, r4
 8000338:	d9d6      	bls.n	80002e8 <__udivmoddi4+0x50>
 800033a:	2200      	movs	r2, #0
 800033c:	2300      	movs	r3, #0
 800033e:	9200      	str	r2, [sp, #0]
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	4643      	mov	r3, r8
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0e8      	beq.n	800031a <__udivmoddi4+0x82>
 8000348:	07fb      	lsls	r3, r7, #31
 800034a:	0872      	lsrs	r2, r6, #1
 800034c:	431a      	orrs	r2, r3
 800034e:	4646      	mov	r6, r8
 8000350:	087b      	lsrs	r3, r7, #1
 8000352:	e00e      	b.n	8000372 <__udivmoddi4+0xda>
 8000354:	42ab      	cmp	r3, r5
 8000356:	d101      	bne.n	800035c <__udivmoddi4+0xc4>
 8000358:	42a2      	cmp	r2, r4
 800035a:	d80c      	bhi.n	8000376 <__udivmoddi4+0xde>
 800035c:	1aa4      	subs	r4, r4, r2
 800035e:	419d      	sbcs	r5, r3
 8000360:	2001      	movs	r0, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2100      	movs	r1, #0
 8000368:	3e01      	subs	r6, #1
 800036a:	1824      	adds	r4, r4, r0
 800036c:	414d      	adcs	r5, r1
 800036e:	2e00      	cmp	r6, #0
 8000370:	d006      	beq.n	8000380 <__udivmoddi4+0xe8>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d9ee      	bls.n	8000354 <__udivmoddi4+0xbc>
 8000376:	3e01      	subs	r6, #1
 8000378:	1924      	adds	r4, r4, r4
 800037a:	416d      	adcs	r5, r5
 800037c:	2e00      	cmp	r6, #0
 800037e:	d1f8      	bne.n	8000372 <__udivmoddi4+0xda>
 8000380:	465b      	mov	r3, fp
 8000382:	9800      	ldr	r0, [sp, #0]
 8000384:	9901      	ldr	r1, [sp, #4]
 8000386:	1900      	adds	r0, r0, r4
 8000388:	4169      	adcs	r1, r5
 800038a:	2b00      	cmp	r3, #0
 800038c:	db22      	blt.n	80003d4 <__udivmoddi4+0x13c>
 800038e:	002b      	movs	r3, r5
 8000390:	465a      	mov	r2, fp
 8000392:	40d3      	lsrs	r3, r2
 8000394:	002a      	movs	r2, r5
 8000396:	4644      	mov	r4, r8
 8000398:	40e2      	lsrs	r2, r4
 800039a:	001c      	movs	r4, r3
 800039c:	465b      	mov	r3, fp
 800039e:	0015      	movs	r5, r2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	db2c      	blt.n	80003fe <__udivmoddi4+0x166>
 80003a4:	0026      	movs	r6, r4
 80003a6:	409e      	lsls	r6, r3
 80003a8:	0033      	movs	r3, r6
 80003aa:	0026      	movs	r6, r4
 80003ac:	4647      	mov	r7, r8
 80003ae:	40be      	lsls	r6, r7
 80003b0:	0032      	movs	r2, r6
 80003b2:	1a80      	subs	r0, r0, r2
 80003b4:	4199      	sbcs	r1, r3
 80003b6:	9000      	str	r0, [sp, #0]
 80003b8:	9101      	str	r1, [sp, #4]
 80003ba:	e7ae      	b.n	800031a <__udivmoddi4+0x82>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	4652      	mov	r2, sl
 80003c4:	40da      	lsrs	r2, r3
 80003c6:	4641      	mov	r1, r8
 80003c8:	0013      	movs	r3, r2
 80003ca:	464a      	mov	r2, r9
 80003cc:	408a      	lsls	r2, r1
 80003ce:	0017      	movs	r7, r2
 80003d0:	431f      	orrs	r7, r3
 80003d2:	e782      	b.n	80002da <__udivmoddi4+0x42>
 80003d4:	4642      	mov	r2, r8
 80003d6:	2320      	movs	r3, #32
 80003d8:	1a9b      	subs	r3, r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	4646      	mov	r6, r8
 80003de:	409a      	lsls	r2, r3
 80003e0:	0023      	movs	r3, r4
 80003e2:	40f3      	lsrs	r3, r6
 80003e4:	4313      	orrs	r3, r2
 80003e6:	e7d5      	b.n	8000394 <__udivmoddi4+0xfc>
 80003e8:	4642      	mov	r2, r8
 80003ea:	2320      	movs	r3, #32
 80003ec:	2100      	movs	r1, #0
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	9100      	str	r1, [sp, #0]
 80003f4:	9201      	str	r2, [sp, #4]
 80003f6:	2201      	movs	r2, #1
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	9201      	str	r2, [sp, #4]
 80003fc:	e782      	b.n	8000304 <__udivmoddi4+0x6c>
 80003fe:	4642      	mov	r2, r8
 8000400:	2320      	movs	r3, #32
 8000402:	0026      	movs	r6, r4
 8000404:	1a9b      	subs	r3, r3, r2
 8000406:	40de      	lsrs	r6, r3
 8000408:	002f      	movs	r7, r5
 800040a:	46b4      	mov	ip, r6
 800040c:	4097      	lsls	r7, r2
 800040e:	4666      	mov	r6, ip
 8000410:	003b      	movs	r3, r7
 8000412:	4333      	orrs	r3, r6
 8000414:	e7c9      	b.n	80003aa <__udivmoddi4+0x112>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_fdiv>:
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	4657      	mov	r7, sl
 800041c:	464e      	mov	r6, r9
 800041e:	46de      	mov	lr, fp
 8000420:	4645      	mov	r5, r8
 8000422:	b5e0      	push	{r5, r6, r7, lr}
 8000424:	0244      	lsls	r4, r0, #9
 8000426:	0043      	lsls	r3, r0, #1
 8000428:	0fc6      	lsrs	r6, r0, #31
 800042a:	b083      	sub	sp, #12
 800042c:	1c0f      	adds	r7, r1, #0
 800042e:	0a64      	lsrs	r4, r4, #9
 8000430:	0e1b      	lsrs	r3, r3, #24
 8000432:	46b2      	mov	sl, r6
 8000434:	d053      	beq.n	80004de <__aeabi_fdiv+0xc6>
 8000436:	2bff      	cmp	r3, #255	; 0xff
 8000438:	d027      	beq.n	800048a <__aeabi_fdiv+0x72>
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	00e4      	lsls	r4, r4, #3
 800043e:	04d2      	lsls	r2, r2, #19
 8000440:	4314      	orrs	r4, r2
 8000442:	227f      	movs	r2, #127	; 0x7f
 8000444:	4252      	negs	r2, r2
 8000446:	4690      	mov	r8, r2
 8000448:	4498      	add	r8, r3
 800044a:	2300      	movs	r3, #0
 800044c:	4699      	mov	r9, r3
 800044e:	469b      	mov	fp, r3
 8000450:	027d      	lsls	r5, r7, #9
 8000452:	0078      	lsls	r0, r7, #1
 8000454:	0ffb      	lsrs	r3, r7, #31
 8000456:	0a6d      	lsrs	r5, r5, #9
 8000458:	0e00      	lsrs	r0, r0, #24
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	d024      	beq.n	80004a8 <__aeabi_fdiv+0x90>
 800045e:	28ff      	cmp	r0, #255	; 0xff
 8000460:	d046      	beq.n	80004f0 <__aeabi_fdiv+0xd8>
 8000462:	2380      	movs	r3, #128	; 0x80
 8000464:	2100      	movs	r1, #0
 8000466:	00ed      	lsls	r5, r5, #3
 8000468:	04db      	lsls	r3, r3, #19
 800046a:	431d      	orrs	r5, r3
 800046c:	387f      	subs	r0, #127	; 0x7f
 800046e:	4647      	mov	r7, r8
 8000470:	1a38      	subs	r0, r7, r0
 8000472:	464f      	mov	r7, r9
 8000474:	430f      	orrs	r7, r1
 8000476:	00bf      	lsls	r7, r7, #2
 8000478:	46b9      	mov	r9, r7
 800047a:	0033      	movs	r3, r6
 800047c:	9a00      	ldr	r2, [sp, #0]
 800047e:	4f87      	ldr	r7, [pc, #540]	; (800069c <__aeabi_fdiv+0x284>)
 8000480:	4053      	eors	r3, r2
 8000482:	464a      	mov	r2, r9
 8000484:	58ba      	ldr	r2, [r7, r2]
 8000486:	9301      	str	r3, [sp, #4]
 8000488:	4697      	mov	pc, r2
 800048a:	2c00      	cmp	r4, #0
 800048c:	d14e      	bne.n	800052c <__aeabi_fdiv+0x114>
 800048e:	2308      	movs	r3, #8
 8000490:	4699      	mov	r9, r3
 8000492:	33f7      	adds	r3, #247	; 0xf7
 8000494:	4698      	mov	r8, r3
 8000496:	3bfd      	subs	r3, #253	; 0xfd
 8000498:	469b      	mov	fp, r3
 800049a:	027d      	lsls	r5, r7, #9
 800049c:	0078      	lsls	r0, r7, #1
 800049e:	0ffb      	lsrs	r3, r7, #31
 80004a0:	0a6d      	lsrs	r5, r5, #9
 80004a2:	0e00      	lsrs	r0, r0, #24
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	d1da      	bne.n	800045e <__aeabi_fdiv+0x46>
 80004a8:	2d00      	cmp	r5, #0
 80004aa:	d126      	bne.n	80004fa <__aeabi_fdiv+0xe2>
 80004ac:	2000      	movs	r0, #0
 80004ae:	2101      	movs	r1, #1
 80004b0:	0033      	movs	r3, r6
 80004b2:	9a00      	ldr	r2, [sp, #0]
 80004b4:	4f7a      	ldr	r7, [pc, #488]	; (80006a0 <__aeabi_fdiv+0x288>)
 80004b6:	4053      	eors	r3, r2
 80004b8:	4642      	mov	r2, r8
 80004ba:	1a10      	subs	r0, r2, r0
 80004bc:	464a      	mov	r2, r9
 80004be:	430a      	orrs	r2, r1
 80004c0:	0092      	lsls	r2, r2, #2
 80004c2:	58ba      	ldr	r2, [r7, r2]
 80004c4:	001d      	movs	r5, r3
 80004c6:	4697      	mov	pc, r2
 80004c8:	9b00      	ldr	r3, [sp, #0]
 80004ca:	002c      	movs	r4, r5
 80004cc:	469a      	mov	sl, r3
 80004ce:	468b      	mov	fp, r1
 80004d0:	465b      	mov	r3, fp
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d131      	bne.n	800053a <__aeabi_fdiv+0x122>
 80004d6:	4653      	mov	r3, sl
 80004d8:	21ff      	movs	r1, #255	; 0xff
 80004da:	2400      	movs	r4, #0
 80004dc:	e038      	b.n	8000550 <__aeabi_fdiv+0x138>
 80004de:	2c00      	cmp	r4, #0
 80004e0:	d117      	bne.n	8000512 <__aeabi_fdiv+0xfa>
 80004e2:	2304      	movs	r3, #4
 80004e4:	4699      	mov	r9, r3
 80004e6:	2300      	movs	r3, #0
 80004e8:	4698      	mov	r8, r3
 80004ea:	3301      	adds	r3, #1
 80004ec:	469b      	mov	fp, r3
 80004ee:	e7af      	b.n	8000450 <__aeabi_fdiv+0x38>
 80004f0:	20ff      	movs	r0, #255	; 0xff
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d10b      	bne.n	800050e <__aeabi_fdiv+0xf6>
 80004f6:	2102      	movs	r1, #2
 80004f8:	e7da      	b.n	80004b0 <__aeabi_fdiv+0x98>
 80004fa:	0028      	movs	r0, r5
 80004fc:	f001 fdb6 	bl	800206c <__clzsi2>
 8000500:	1f43      	subs	r3, r0, #5
 8000502:	409d      	lsls	r5, r3
 8000504:	2376      	movs	r3, #118	; 0x76
 8000506:	425b      	negs	r3, r3
 8000508:	1a18      	subs	r0, r3, r0
 800050a:	2100      	movs	r1, #0
 800050c:	e7af      	b.n	800046e <__aeabi_fdiv+0x56>
 800050e:	2103      	movs	r1, #3
 8000510:	e7ad      	b.n	800046e <__aeabi_fdiv+0x56>
 8000512:	0020      	movs	r0, r4
 8000514:	f001 fdaa 	bl	800206c <__clzsi2>
 8000518:	1f43      	subs	r3, r0, #5
 800051a:	409c      	lsls	r4, r3
 800051c:	2376      	movs	r3, #118	; 0x76
 800051e:	425b      	negs	r3, r3
 8000520:	1a1b      	subs	r3, r3, r0
 8000522:	4698      	mov	r8, r3
 8000524:	2300      	movs	r3, #0
 8000526:	4699      	mov	r9, r3
 8000528:	469b      	mov	fp, r3
 800052a:	e791      	b.n	8000450 <__aeabi_fdiv+0x38>
 800052c:	230c      	movs	r3, #12
 800052e:	4699      	mov	r9, r3
 8000530:	33f3      	adds	r3, #243	; 0xf3
 8000532:	4698      	mov	r8, r3
 8000534:	3bfc      	subs	r3, #252	; 0xfc
 8000536:	469b      	mov	fp, r3
 8000538:	e78a      	b.n	8000450 <__aeabi_fdiv+0x38>
 800053a:	2b03      	cmp	r3, #3
 800053c:	d100      	bne.n	8000540 <__aeabi_fdiv+0x128>
 800053e:	e0a5      	b.n	800068c <__aeabi_fdiv+0x274>
 8000540:	4655      	mov	r5, sl
 8000542:	2b01      	cmp	r3, #1
 8000544:	d000      	beq.n	8000548 <__aeabi_fdiv+0x130>
 8000546:	e081      	b.n	800064c <__aeabi_fdiv+0x234>
 8000548:	2301      	movs	r3, #1
 800054a:	2100      	movs	r1, #0
 800054c:	2400      	movs	r4, #0
 800054e:	402b      	ands	r3, r5
 8000550:	0264      	lsls	r4, r4, #9
 8000552:	05c9      	lsls	r1, r1, #23
 8000554:	0a60      	lsrs	r0, r4, #9
 8000556:	07db      	lsls	r3, r3, #31
 8000558:	4308      	orrs	r0, r1
 800055a:	4318      	orrs	r0, r3
 800055c:	b003      	add	sp, #12
 800055e:	bc3c      	pop	{r2, r3, r4, r5}
 8000560:	4690      	mov	r8, r2
 8000562:	4699      	mov	r9, r3
 8000564:	46a2      	mov	sl, r4
 8000566:	46ab      	mov	fp, r5
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	2480      	movs	r4, #128	; 0x80
 800056c:	2300      	movs	r3, #0
 800056e:	03e4      	lsls	r4, r4, #15
 8000570:	21ff      	movs	r1, #255	; 0xff
 8000572:	e7ed      	b.n	8000550 <__aeabi_fdiv+0x138>
 8000574:	21ff      	movs	r1, #255	; 0xff
 8000576:	2400      	movs	r4, #0
 8000578:	e7ea      	b.n	8000550 <__aeabi_fdiv+0x138>
 800057a:	2301      	movs	r3, #1
 800057c:	1a59      	subs	r1, r3, r1
 800057e:	291b      	cmp	r1, #27
 8000580:	dd66      	ble.n	8000650 <__aeabi_fdiv+0x238>
 8000582:	9a01      	ldr	r2, [sp, #4]
 8000584:	4013      	ands	r3, r2
 8000586:	2100      	movs	r1, #0
 8000588:	2400      	movs	r4, #0
 800058a:	e7e1      	b.n	8000550 <__aeabi_fdiv+0x138>
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	03db      	lsls	r3, r3, #15
 8000590:	421c      	tst	r4, r3
 8000592:	d038      	beq.n	8000606 <__aeabi_fdiv+0x1ee>
 8000594:	421d      	tst	r5, r3
 8000596:	d051      	beq.n	800063c <__aeabi_fdiv+0x224>
 8000598:	431c      	orrs	r4, r3
 800059a:	0264      	lsls	r4, r4, #9
 800059c:	0a64      	lsrs	r4, r4, #9
 800059e:	0033      	movs	r3, r6
 80005a0:	21ff      	movs	r1, #255	; 0xff
 80005a2:	e7d5      	b.n	8000550 <__aeabi_fdiv+0x138>
 80005a4:	0163      	lsls	r3, r4, #5
 80005a6:	016c      	lsls	r4, r5, #5
 80005a8:	42a3      	cmp	r3, r4
 80005aa:	d23b      	bcs.n	8000624 <__aeabi_fdiv+0x20c>
 80005ac:	261b      	movs	r6, #27
 80005ae:	2100      	movs	r1, #0
 80005b0:	3801      	subs	r0, #1
 80005b2:	2501      	movs	r5, #1
 80005b4:	001f      	movs	r7, r3
 80005b6:	0049      	lsls	r1, r1, #1
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2f00      	cmp	r7, #0
 80005bc:	db01      	blt.n	80005c2 <__aeabi_fdiv+0x1aa>
 80005be:	429c      	cmp	r4, r3
 80005c0:	d801      	bhi.n	80005c6 <__aeabi_fdiv+0x1ae>
 80005c2:	1b1b      	subs	r3, r3, r4
 80005c4:	4329      	orrs	r1, r5
 80005c6:	3e01      	subs	r6, #1
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d1f3      	bne.n	80005b4 <__aeabi_fdiv+0x19c>
 80005cc:	001c      	movs	r4, r3
 80005ce:	1e63      	subs	r3, r4, #1
 80005d0:	419c      	sbcs	r4, r3
 80005d2:	430c      	orrs	r4, r1
 80005d4:	0001      	movs	r1, r0
 80005d6:	317f      	adds	r1, #127	; 0x7f
 80005d8:	2900      	cmp	r1, #0
 80005da:	ddce      	ble.n	800057a <__aeabi_fdiv+0x162>
 80005dc:	0763      	lsls	r3, r4, #29
 80005de:	d004      	beq.n	80005ea <__aeabi_fdiv+0x1d2>
 80005e0:	230f      	movs	r3, #15
 80005e2:	4023      	ands	r3, r4
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d000      	beq.n	80005ea <__aeabi_fdiv+0x1d2>
 80005e8:	3404      	adds	r4, #4
 80005ea:	0123      	lsls	r3, r4, #4
 80005ec:	d503      	bpl.n	80005f6 <__aeabi_fdiv+0x1de>
 80005ee:	0001      	movs	r1, r0
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <__aeabi_fdiv+0x28c>)
 80005f2:	3180      	adds	r1, #128	; 0x80
 80005f4:	401c      	ands	r4, r3
 80005f6:	29fe      	cmp	r1, #254	; 0xfe
 80005f8:	dd0d      	ble.n	8000616 <__aeabi_fdiv+0x1fe>
 80005fa:	2301      	movs	r3, #1
 80005fc:	9a01      	ldr	r2, [sp, #4]
 80005fe:	21ff      	movs	r1, #255	; 0xff
 8000600:	4013      	ands	r3, r2
 8000602:	2400      	movs	r4, #0
 8000604:	e7a4      	b.n	8000550 <__aeabi_fdiv+0x138>
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	03db      	lsls	r3, r3, #15
 800060a:	431c      	orrs	r4, r3
 800060c:	0264      	lsls	r4, r4, #9
 800060e:	0a64      	lsrs	r4, r4, #9
 8000610:	0033      	movs	r3, r6
 8000612:	21ff      	movs	r1, #255	; 0xff
 8000614:	e79c      	b.n	8000550 <__aeabi_fdiv+0x138>
 8000616:	2301      	movs	r3, #1
 8000618:	9a01      	ldr	r2, [sp, #4]
 800061a:	01a4      	lsls	r4, r4, #6
 800061c:	0a64      	lsrs	r4, r4, #9
 800061e:	b2c9      	uxtb	r1, r1
 8000620:	4013      	ands	r3, r2
 8000622:	e795      	b.n	8000550 <__aeabi_fdiv+0x138>
 8000624:	1b1b      	subs	r3, r3, r4
 8000626:	261a      	movs	r6, #26
 8000628:	2101      	movs	r1, #1
 800062a:	e7c2      	b.n	80005b2 <__aeabi_fdiv+0x19a>
 800062c:	9b00      	ldr	r3, [sp, #0]
 800062e:	468b      	mov	fp, r1
 8000630:	469a      	mov	sl, r3
 8000632:	2400      	movs	r4, #0
 8000634:	e74c      	b.n	80004d0 <__aeabi_fdiv+0xb8>
 8000636:	0263      	lsls	r3, r4, #9
 8000638:	d5e5      	bpl.n	8000606 <__aeabi_fdiv+0x1ee>
 800063a:	2500      	movs	r5, #0
 800063c:	2480      	movs	r4, #128	; 0x80
 800063e:	03e4      	lsls	r4, r4, #15
 8000640:	432c      	orrs	r4, r5
 8000642:	0264      	lsls	r4, r4, #9
 8000644:	0a64      	lsrs	r4, r4, #9
 8000646:	9b00      	ldr	r3, [sp, #0]
 8000648:	21ff      	movs	r1, #255	; 0xff
 800064a:	e781      	b.n	8000550 <__aeabi_fdiv+0x138>
 800064c:	9501      	str	r5, [sp, #4]
 800064e:	e7c1      	b.n	80005d4 <__aeabi_fdiv+0x1bc>
 8000650:	0023      	movs	r3, r4
 8000652:	2020      	movs	r0, #32
 8000654:	40cb      	lsrs	r3, r1
 8000656:	1a41      	subs	r1, r0, r1
 8000658:	408c      	lsls	r4, r1
 800065a:	1e61      	subs	r1, r4, #1
 800065c:	418c      	sbcs	r4, r1
 800065e:	431c      	orrs	r4, r3
 8000660:	0763      	lsls	r3, r4, #29
 8000662:	d004      	beq.n	800066e <__aeabi_fdiv+0x256>
 8000664:	230f      	movs	r3, #15
 8000666:	4023      	ands	r3, r4
 8000668:	2b04      	cmp	r3, #4
 800066a:	d000      	beq.n	800066e <__aeabi_fdiv+0x256>
 800066c:	3404      	adds	r4, #4
 800066e:	0163      	lsls	r3, r4, #5
 8000670:	d505      	bpl.n	800067e <__aeabi_fdiv+0x266>
 8000672:	2301      	movs	r3, #1
 8000674:	9a01      	ldr	r2, [sp, #4]
 8000676:	2101      	movs	r1, #1
 8000678:	4013      	ands	r3, r2
 800067a:	2400      	movs	r4, #0
 800067c:	e768      	b.n	8000550 <__aeabi_fdiv+0x138>
 800067e:	2301      	movs	r3, #1
 8000680:	9a01      	ldr	r2, [sp, #4]
 8000682:	01a4      	lsls	r4, r4, #6
 8000684:	0a64      	lsrs	r4, r4, #9
 8000686:	4013      	ands	r3, r2
 8000688:	2100      	movs	r1, #0
 800068a:	e761      	b.n	8000550 <__aeabi_fdiv+0x138>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	03db      	lsls	r3, r3, #15
 8000690:	431c      	orrs	r4, r3
 8000692:	0264      	lsls	r4, r4, #9
 8000694:	0a64      	lsrs	r4, r4, #9
 8000696:	4653      	mov	r3, sl
 8000698:	21ff      	movs	r1, #255	; 0xff
 800069a:	e759      	b.n	8000550 <__aeabi_fdiv+0x138>
 800069c:	08005980 	.word	0x08005980
 80006a0:	080059c0 	.word	0x080059c0
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_ui2f>:
 80006a8:	b510      	push	{r4, lr}
 80006aa:	1e04      	subs	r4, r0, #0
 80006ac:	d027      	beq.n	80006fe <__aeabi_ui2f+0x56>
 80006ae:	f001 fcdd 	bl	800206c <__clzsi2>
 80006b2:	239e      	movs	r3, #158	; 0x9e
 80006b4:	1a1b      	subs	r3, r3, r0
 80006b6:	2b96      	cmp	r3, #150	; 0x96
 80006b8:	dc0a      	bgt.n	80006d0 <__aeabi_ui2f+0x28>
 80006ba:	2296      	movs	r2, #150	; 0x96
 80006bc:	1ad2      	subs	r2, r2, r3
 80006be:	4094      	lsls	r4, r2
 80006c0:	0264      	lsls	r4, r4, #9
 80006c2:	0a64      	lsrs	r4, r4, #9
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	0264      	lsls	r4, r4, #9
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	0a60      	lsrs	r0, r4, #9
 80006cc:	4318      	orrs	r0, r3
 80006ce:	bd10      	pop	{r4, pc}
 80006d0:	2b99      	cmp	r3, #153	; 0x99
 80006d2:	dc17      	bgt.n	8000704 <__aeabi_ui2f+0x5c>
 80006d4:	2299      	movs	r2, #153	; 0x99
 80006d6:	1ad2      	subs	r2, r2, r3
 80006d8:	2a00      	cmp	r2, #0
 80006da:	dd27      	ble.n	800072c <__aeabi_ui2f+0x84>
 80006dc:	4094      	lsls	r4, r2
 80006de:	0022      	movs	r2, r4
 80006e0:	4c13      	ldr	r4, [pc, #76]	; (8000730 <__aeabi_ui2f+0x88>)
 80006e2:	4014      	ands	r4, r2
 80006e4:	0751      	lsls	r1, r2, #29
 80006e6:	d004      	beq.n	80006f2 <__aeabi_ui2f+0x4a>
 80006e8:	210f      	movs	r1, #15
 80006ea:	400a      	ands	r2, r1
 80006ec:	2a04      	cmp	r2, #4
 80006ee:	d000      	beq.n	80006f2 <__aeabi_ui2f+0x4a>
 80006f0:	3404      	adds	r4, #4
 80006f2:	0162      	lsls	r2, r4, #5
 80006f4:	d412      	bmi.n	800071c <__aeabi_ui2f+0x74>
 80006f6:	01a4      	lsls	r4, r4, #6
 80006f8:	0a64      	lsrs	r4, r4, #9
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	e7e3      	b.n	80006c6 <__aeabi_ui2f+0x1e>
 80006fe:	2300      	movs	r3, #0
 8000700:	2400      	movs	r4, #0
 8000702:	e7e0      	b.n	80006c6 <__aeabi_ui2f+0x1e>
 8000704:	22b9      	movs	r2, #185	; 0xb9
 8000706:	0021      	movs	r1, r4
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	4091      	lsls	r1, r2
 800070c:	000a      	movs	r2, r1
 800070e:	1e51      	subs	r1, r2, #1
 8000710:	418a      	sbcs	r2, r1
 8000712:	2105      	movs	r1, #5
 8000714:	1a09      	subs	r1, r1, r0
 8000716:	40cc      	lsrs	r4, r1
 8000718:	4314      	orrs	r4, r2
 800071a:	e7db      	b.n	80006d4 <__aeabi_ui2f+0x2c>
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <__aeabi_ui2f+0x88>)
 800071e:	401c      	ands	r4, r3
 8000720:	239f      	movs	r3, #159	; 0x9f
 8000722:	01a4      	lsls	r4, r4, #6
 8000724:	1a1b      	subs	r3, r3, r0
 8000726:	0a64      	lsrs	r4, r4, #9
 8000728:	b2db      	uxtb	r3, r3
 800072a:	e7cc      	b.n	80006c6 <__aeabi_ui2f+0x1e>
 800072c:	0022      	movs	r2, r4
 800072e:	e7d7      	b.n	80006e0 <__aeabi_ui2f+0x38>
 8000730:	fbffffff 	.word	0xfbffffff

08000734 <__aeabi_dadd>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	4645      	mov	r5, r8
 8000738:	46de      	mov	lr, fp
 800073a:	4657      	mov	r7, sl
 800073c:	464e      	mov	r6, r9
 800073e:	030c      	lsls	r4, r1, #12
 8000740:	b5e0      	push	{r5, r6, r7, lr}
 8000742:	004e      	lsls	r6, r1, #1
 8000744:	0fc9      	lsrs	r1, r1, #31
 8000746:	4688      	mov	r8, r1
 8000748:	000d      	movs	r5, r1
 800074a:	0a61      	lsrs	r1, r4, #9
 800074c:	0f44      	lsrs	r4, r0, #29
 800074e:	430c      	orrs	r4, r1
 8000750:	00c7      	lsls	r7, r0, #3
 8000752:	0319      	lsls	r1, r3, #12
 8000754:	0058      	lsls	r0, r3, #1
 8000756:	0fdb      	lsrs	r3, r3, #31
 8000758:	469b      	mov	fp, r3
 800075a:	0a4b      	lsrs	r3, r1, #9
 800075c:	0f51      	lsrs	r1, r2, #29
 800075e:	430b      	orrs	r3, r1
 8000760:	0d76      	lsrs	r6, r6, #21
 8000762:	0d40      	lsrs	r0, r0, #21
 8000764:	0019      	movs	r1, r3
 8000766:	00d2      	lsls	r2, r2, #3
 8000768:	45d8      	cmp	r8, fp
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x3a>
 800076c:	e0ae      	b.n	80008cc <__aeabi_dadd+0x198>
 800076e:	1a35      	subs	r5, r6, r0
 8000770:	2d00      	cmp	r5, #0
 8000772:	dc00      	bgt.n	8000776 <__aeabi_dadd+0x42>
 8000774:	e0f6      	b.n	8000964 <__aeabi_dadd+0x230>
 8000776:	2800      	cmp	r0, #0
 8000778:	d10f      	bne.n	800079a <__aeabi_dadd+0x66>
 800077a:	4313      	orrs	r3, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x4c>
 800077e:	e0db      	b.n	8000938 <__aeabi_dadd+0x204>
 8000780:	1e6b      	subs	r3, r5, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d000      	beq.n	8000788 <__aeabi_dadd+0x54>
 8000786:	e137      	b.n	80009f8 <__aeabi_dadd+0x2c4>
 8000788:	1aba      	subs	r2, r7, r2
 800078a:	4297      	cmp	r7, r2
 800078c:	41bf      	sbcs	r7, r7
 800078e:	1a64      	subs	r4, r4, r1
 8000790:	427f      	negs	r7, r7
 8000792:	1be4      	subs	r4, r4, r7
 8000794:	2601      	movs	r6, #1
 8000796:	0017      	movs	r7, r2
 8000798:	e024      	b.n	80007e4 <__aeabi_dadd+0xb0>
 800079a:	4bc6      	ldr	r3, [pc, #792]	; (8000ab4 <__aeabi_dadd+0x380>)
 800079c:	429e      	cmp	r6, r3
 800079e:	d04d      	beq.n	800083c <__aeabi_dadd+0x108>
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	4319      	orrs	r1, r3
 80007a6:	2d38      	cmp	r5, #56	; 0x38
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x78>
 80007aa:	e107      	b.n	80009bc <__aeabi_dadd+0x288>
 80007ac:	2d1f      	cmp	r5, #31
 80007ae:	dd00      	ble.n	80007b2 <__aeabi_dadd+0x7e>
 80007b0:	e138      	b.n	8000a24 <__aeabi_dadd+0x2f0>
 80007b2:	2020      	movs	r0, #32
 80007b4:	1b43      	subs	r3, r0, r5
 80007b6:	469a      	mov	sl, r3
 80007b8:	000b      	movs	r3, r1
 80007ba:	4650      	mov	r0, sl
 80007bc:	4083      	lsls	r3, r0
 80007be:	4699      	mov	r9, r3
 80007c0:	0013      	movs	r3, r2
 80007c2:	4648      	mov	r0, r9
 80007c4:	40eb      	lsrs	r3, r5
 80007c6:	4318      	orrs	r0, r3
 80007c8:	0003      	movs	r3, r0
 80007ca:	4650      	mov	r0, sl
 80007cc:	4082      	lsls	r2, r0
 80007ce:	1e50      	subs	r0, r2, #1
 80007d0:	4182      	sbcs	r2, r0
 80007d2:	40e9      	lsrs	r1, r5
 80007d4:	431a      	orrs	r2, r3
 80007d6:	1aba      	subs	r2, r7, r2
 80007d8:	1a61      	subs	r1, r4, r1
 80007da:	4297      	cmp	r7, r2
 80007dc:	41a4      	sbcs	r4, r4
 80007de:	0017      	movs	r7, r2
 80007e0:	4264      	negs	r4, r4
 80007e2:	1b0c      	subs	r4, r1, r4
 80007e4:	0223      	lsls	r3, r4, #8
 80007e6:	d562      	bpl.n	80008ae <__aeabi_dadd+0x17a>
 80007e8:	0264      	lsls	r4, r4, #9
 80007ea:	0a65      	lsrs	r5, r4, #9
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0xbe>
 80007f0:	e0df      	b.n	80009b2 <__aeabi_dadd+0x27e>
 80007f2:	0028      	movs	r0, r5
 80007f4:	f001 fc3a 	bl	800206c <__clzsi2>
 80007f8:	0003      	movs	r3, r0
 80007fa:	3b08      	subs	r3, #8
 80007fc:	2b1f      	cmp	r3, #31
 80007fe:	dd00      	ble.n	8000802 <__aeabi_dadd+0xce>
 8000800:	e0d2      	b.n	80009a8 <__aeabi_dadd+0x274>
 8000802:	2220      	movs	r2, #32
 8000804:	003c      	movs	r4, r7
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	409d      	lsls	r5, r3
 800080a:	40d4      	lsrs	r4, r2
 800080c:	409f      	lsls	r7, r3
 800080e:	4325      	orrs	r5, r4
 8000810:	429e      	cmp	r6, r3
 8000812:	dd00      	ble.n	8000816 <__aeabi_dadd+0xe2>
 8000814:	e0c4      	b.n	80009a0 <__aeabi_dadd+0x26c>
 8000816:	1b9e      	subs	r6, r3, r6
 8000818:	1c73      	adds	r3, r6, #1
 800081a:	2b1f      	cmp	r3, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0xec>
 800081e:	e0f1      	b.n	8000a04 <__aeabi_dadd+0x2d0>
 8000820:	2220      	movs	r2, #32
 8000822:	0038      	movs	r0, r7
 8000824:	0029      	movs	r1, r5
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	40d8      	lsrs	r0, r3
 800082a:	4091      	lsls	r1, r2
 800082c:	4097      	lsls	r7, r2
 800082e:	002c      	movs	r4, r5
 8000830:	4301      	orrs	r1, r0
 8000832:	1e78      	subs	r0, r7, #1
 8000834:	4187      	sbcs	r7, r0
 8000836:	40dc      	lsrs	r4, r3
 8000838:	2600      	movs	r6, #0
 800083a:	430f      	orrs	r7, r1
 800083c:	077b      	lsls	r3, r7, #29
 800083e:	d009      	beq.n	8000854 <__aeabi_dadd+0x120>
 8000840:	230f      	movs	r3, #15
 8000842:	403b      	ands	r3, r7
 8000844:	2b04      	cmp	r3, #4
 8000846:	d005      	beq.n	8000854 <__aeabi_dadd+0x120>
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	42bb      	cmp	r3, r7
 800084c:	41bf      	sbcs	r7, r7
 800084e:	427f      	negs	r7, r7
 8000850:	19e4      	adds	r4, r4, r7
 8000852:	001f      	movs	r7, r3
 8000854:	0223      	lsls	r3, r4, #8
 8000856:	d52c      	bpl.n	80008b2 <__aeabi_dadd+0x17e>
 8000858:	4b96      	ldr	r3, [pc, #600]	; (8000ab4 <__aeabi_dadd+0x380>)
 800085a:	3601      	adds	r6, #1
 800085c:	429e      	cmp	r6, r3
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x12e>
 8000860:	e09a      	b.n	8000998 <__aeabi_dadd+0x264>
 8000862:	4645      	mov	r5, r8
 8000864:	4b94      	ldr	r3, [pc, #592]	; (8000ab8 <__aeabi_dadd+0x384>)
 8000866:	08ff      	lsrs	r7, r7, #3
 8000868:	401c      	ands	r4, r3
 800086a:	0760      	lsls	r0, r4, #29
 800086c:	0576      	lsls	r6, r6, #21
 800086e:	0264      	lsls	r4, r4, #9
 8000870:	4307      	orrs	r7, r0
 8000872:	0b24      	lsrs	r4, r4, #12
 8000874:	0d76      	lsrs	r6, r6, #21
 8000876:	2100      	movs	r1, #0
 8000878:	0324      	lsls	r4, r4, #12
 800087a:	0b23      	lsrs	r3, r4, #12
 800087c:	0d0c      	lsrs	r4, r1, #20
 800087e:	4a8f      	ldr	r2, [pc, #572]	; (8000abc <__aeabi_dadd+0x388>)
 8000880:	0524      	lsls	r4, r4, #20
 8000882:	431c      	orrs	r4, r3
 8000884:	4014      	ands	r4, r2
 8000886:	0533      	lsls	r3, r6, #20
 8000888:	4323      	orrs	r3, r4
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	07ed      	lsls	r5, r5, #31
 800088e:	085b      	lsrs	r3, r3, #1
 8000890:	432b      	orrs	r3, r5
 8000892:	0038      	movs	r0, r7
 8000894:	0019      	movs	r1, r3
 8000896:	bc3c      	pop	{r2, r3, r4, r5}
 8000898:	4690      	mov	r8, r2
 800089a:	4699      	mov	r9, r3
 800089c:	46a2      	mov	sl, r4
 800089e:	46ab      	mov	fp, r5
 80008a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a2:	4664      	mov	r4, ip
 80008a4:	4304      	orrs	r4, r0
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x176>
 80008a8:	e211      	b.n	8000cce <__aeabi_dadd+0x59a>
 80008aa:	0004      	movs	r4, r0
 80008ac:	4667      	mov	r7, ip
 80008ae:	077b      	lsls	r3, r7, #29
 80008b0:	d1c6      	bne.n	8000840 <__aeabi_dadd+0x10c>
 80008b2:	4645      	mov	r5, r8
 80008b4:	0760      	lsls	r0, r4, #29
 80008b6:	08ff      	lsrs	r7, r7, #3
 80008b8:	4307      	orrs	r7, r0
 80008ba:	08e4      	lsrs	r4, r4, #3
 80008bc:	4b7d      	ldr	r3, [pc, #500]	; (8000ab4 <__aeabi_dadd+0x380>)
 80008be:	429e      	cmp	r6, r3
 80008c0:	d030      	beq.n	8000924 <__aeabi_dadd+0x1f0>
 80008c2:	0324      	lsls	r4, r4, #12
 80008c4:	0576      	lsls	r6, r6, #21
 80008c6:	0b24      	lsrs	r4, r4, #12
 80008c8:	0d76      	lsrs	r6, r6, #21
 80008ca:	e7d4      	b.n	8000876 <__aeabi_dadd+0x142>
 80008cc:	1a33      	subs	r3, r6, r0
 80008ce:	469a      	mov	sl, r3
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	dd78      	ble.n	80009c6 <__aeabi_dadd+0x292>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	d031      	beq.n	800093c <__aeabi_dadd+0x208>
 80008d8:	4876      	ldr	r0, [pc, #472]	; (8000ab4 <__aeabi_dadd+0x380>)
 80008da:	4286      	cmp	r6, r0
 80008dc:	d0ae      	beq.n	800083c <__aeabi_dadd+0x108>
 80008de:	2080      	movs	r0, #128	; 0x80
 80008e0:	0400      	lsls	r0, r0, #16
 80008e2:	4301      	orrs	r1, r0
 80008e4:	4653      	mov	r3, sl
 80008e6:	2b38      	cmp	r3, #56	; 0x38
 80008e8:	dc00      	bgt.n	80008ec <__aeabi_dadd+0x1b8>
 80008ea:	e0e9      	b.n	8000ac0 <__aeabi_dadd+0x38c>
 80008ec:	430a      	orrs	r2, r1
 80008ee:	1e51      	subs	r1, r2, #1
 80008f0:	418a      	sbcs	r2, r1
 80008f2:	2100      	movs	r1, #0
 80008f4:	19d2      	adds	r2, r2, r7
 80008f6:	42ba      	cmp	r2, r7
 80008f8:	41bf      	sbcs	r7, r7
 80008fa:	1909      	adds	r1, r1, r4
 80008fc:	427c      	negs	r4, r7
 80008fe:	0017      	movs	r7, r2
 8000900:	190c      	adds	r4, r1, r4
 8000902:	0223      	lsls	r3, r4, #8
 8000904:	d5d3      	bpl.n	80008ae <__aeabi_dadd+0x17a>
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <__aeabi_dadd+0x380>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x1dc>
 800090e:	e13a      	b.n	8000b86 <__aeabi_dadd+0x452>
 8000910:	2001      	movs	r0, #1
 8000912:	4b69      	ldr	r3, [pc, #420]	; (8000ab8 <__aeabi_dadd+0x384>)
 8000914:	401c      	ands	r4, r3
 8000916:	087b      	lsrs	r3, r7, #1
 8000918:	4007      	ands	r7, r0
 800091a:	431f      	orrs	r7, r3
 800091c:	07e0      	lsls	r0, r4, #31
 800091e:	4307      	orrs	r7, r0
 8000920:	0864      	lsrs	r4, r4, #1
 8000922:	e78b      	b.n	800083c <__aeabi_dadd+0x108>
 8000924:	0023      	movs	r3, r4
 8000926:	433b      	orrs	r3, r7
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x1f8>
 800092a:	e1cb      	b.n	8000cc4 <__aeabi_dadd+0x590>
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0312      	lsls	r2, r2, #12
 8000930:	4314      	orrs	r4, r2
 8000932:	0324      	lsls	r4, r4, #12
 8000934:	0b24      	lsrs	r4, r4, #12
 8000936:	e79e      	b.n	8000876 <__aeabi_dadd+0x142>
 8000938:	002e      	movs	r6, r5
 800093a:	e77f      	b.n	800083c <__aeabi_dadd+0x108>
 800093c:	0008      	movs	r0, r1
 800093e:	4310      	orrs	r0, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x210>
 8000942:	e0b4      	b.n	8000aae <__aeabi_dadd+0x37a>
 8000944:	1e58      	subs	r0, r3, #1
 8000946:	2800      	cmp	r0, #0
 8000948:	d000      	beq.n	800094c <__aeabi_dadd+0x218>
 800094a:	e0de      	b.n	8000b0a <__aeabi_dadd+0x3d6>
 800094c:	18ba      	adds	r2, r7, r2
 800094e:	42ba      	cmp	r2, r7
 8000950:	419b      	sbcs	r3, r3
 8000952:	1864      	adds	r4, r4, r1
 8000954:	425b      	negs	r3, r3
 8000956:	18e4      	adds	r4, r4, r3
 8000958:	0017      	movs	r7, r2
 800095a:	2601      	movs	r6, #1
 800095c:	0223      	lsls	r3, r4, #8
 800095e:	d5a6      	bpl.n	80008ae <__aeabi_dadd+0x17a>
 8000960:	2602      	movs	r6, #2
 8000962:	e7d5      	b.n	8000910 <__aeabi_dadd+0x1dc>
 8000964:	2d00      	cmp	r5, #0
 8000966:	d16e      	bne.n	8000a46 <__aeabi_dadd+0x312>
 8000968:	1c70      	adds	r0, r6, #1
 800096a:	0540      	lsls	r0, r0, #21
 800096c:	0d40      	lsrs	r0, r0, #21
 800096e:	2801      	cmp	r0, #1
 8000970:	dc00      	bgt.n	8000974 <__aeabi_dadd+0x240>
 8000972:	e0f9      	b.n	8000b68 <__aeabi_dadd+0x434>
 8000974:	1ab8      	subs	r0, r7, r2
 8000976:	4684      	mov	ip, r0
 8000978:	4287      	cmp	r7, r0
 800097a:	4180      	sbcs	r0, r0
 800097c:	1ae5      	subs	r5, r4, r3
 800097e:	4240      	negs	r0, r0
 8000980:	1a2d      	subs	r5, r5, r0
 8000982:	0228      	lsls	r0, r5, #8
 8000984:	d400      	bmi.n	8000988 <__aeabi_dadd+0x254>
 8000986:	e089      	b.n	8000a9c <__aeabi_dadd+0x368>
 8000988:	1bd7      	subs	r7, r2, r7
 800098a:	42ba      	cmp	r2, r7
 800098c:	4192      	sbcs	r2, r2
 800098e:	1b1c      	subs	r4, r3, r4
 8000990:	4252      	negs	r2, r2
 8000992:	1aa5      	subs	r5, r4, r2
 8000994:	46d8      	mov	r8, fp
 8000996:	e729      	b.n	80007ec <__aeabi_dadd+0xb8>
 8000998:	4645      	mov	r5, r8
 800099a:	2400      	movs	r4, #0
 800099c:	2700      	movs	r7, #0
 800099e:	e76a      	b.n	8000876 <__aeabi_dadd+0x142>
 80009a0:	4c45      	ldr	r4, [pc, #276]	; (8000ab8 <__aeabi_dadd+0x384>)
 80009a2:	1af6      	subs	r6, r6, r3
 80009a4:	402c      	ands	r4, r5
 80009a6:	e749      	b.n	800083c <__aeabi_dadd+0x108>
 80009a8:	003d      	movs	r5, r7
 80009aa:	3828      	subs	r0, #40	; 0x28
 80009ac:	4085      	lsls	r5, r0
 80009ae:	2700      	movs	r7, #0
 80009b0:	e72e      	b.n	8000810 <__aeabi_dadd+0xdc>
 80009b2:	0038      	movs	r0, r7
 80009b4:	f001 fb5a 	bl	800206c <__clzsi2>
 80009b8:	3020      	adds	r0, #32
 80009ba:	e71d      	b.n	80007f8 <__aeabi_dadd+0xc4>
 80009bc:	430a      	orrs	r2, r1
 80009be:	1e51      	subs	r1, r2, #1
 80009c0:	418a      	sbcs	r2, r1
 80009c2:	2100      	movs	r1, #0
 80009c4:	e707      	b.n	80007d6 <__aeabi_dadd+0xa2>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x298>
 80009ca:	e0f3      	b.n	8000bb4 <__aeabi_dadd+0x480>
 80009cc:	1c70      	adds	r0, r6, #1
 80009ce:	0543      	lsls	r3, r0, #21
 80009d0:	0d5b      	lsrs	r3, r3, #21
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	dc00      	bgt.n	80009d8 <__aeabi_dadd+0x2a4>
 80009d6:	e0ad      	b.n	8000b34 <__aeabi_dadd+0x400>
 80009d8:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <__aeabi_dadd+0x380>)
 80009da:	4298      	cmp	r0, r3
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x2ac>
 80009de:	e0d1      	b.n	8000b84 <__aeabi_dadd+0x450>
 80009e0:	18ba      	adds	r2, r7, r2
 80009e2:	42ba      	cmp	r2, r7
 80009e4:	41bf      	sbcs	r7, r7
 80009e6:	1864      	adds	r4, r4, r1
 80009e8:	427f      	negs	r7, r7
 80009ea:	19e4      	adds	r4, r4, r7
 80009ec:	07e7      	lsls	r7, r4, #31
 80009ee:	0852      	lsrs	r2, r2, #1
 80009f0:	4317      	orrs	r7, r2
 80009f2:	0864      	lsrs	r4, r4, #1
 80009f4:	0006      	movs	r6, r0
 80009f6:	e721      	b.n	800083c <__aeabi_dadd+0x108>
 80009f8:	482e      	ldr	r0, [pc, #184]	; (8000ab4 <__aeabi_dadd+0x380>)
 80009fa:	4285      	cmp	r5, r0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dadd+0x2cc>
 80009fe:	e093      	b.n	8000b28 <__aeabi_dadd+0x3f4>
 8000a00:	001d      	movs	r5, r3
 8000a02:	e6d0      	b.n	80007a6 <__aeabi_dadd+0x72>
 8000a04:	0029      	movs	r1, r5
 8000a06:	3e1f      	subs	r6, #31
 8000a08:	40f1      	lsrs	r1, r6
 8000a0a:	2b20      	cmp	r3, #32
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dadd+0x2dc>
 8000a0e:	e08d      	b.n	8000b2c <__aeabi_dadd+0x3f8>
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	409d      	lsls	r5, r3
 8000a16:	432f      	orrs	r7, r5
 8000a18:	1e7d      	subs	r5, r7, #1
 8000a1a:	41af      	sbcs	r7, r5
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	430f      	orrs	r7, r1
 8000a20:	2600      	movs	r6, #0
 8000a22:	e744      	b.n	80008ae <__aeabi_dadd+0x17a>
 8000a24:	002b      	movs	r3, r5
 8000a26:	0008      	movs	r0, r1
 8000a28:	3b20      	subs	r3, #32
 8000a2a:	40d8      	lsrs	r0, r3
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	2d20      	cmp	r5, #32
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x300>
 8000a32:	e07d      	b.n	8000b30 <__aeabi_dadd+0x3fc>
 8000a34:	2040      	movs	r0, #64	; 0x40
 8000a36:	1b45      	subs	r5, r0, r5
 8000a38:	40a9      	lsls	r1, r5
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	1e51      	subs	r1, r2, #1
 8000a3e:	418a      	sbcs	r2, r1
 8000a40:	2100      	movs	r1, #0
 8000a42:	431a      	orrs	r2, r3
 8000a44:	e6c7      	b.n	80007d6 <__aeabi_dadd+0xa2>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	d050      	beq.n	8000aec <__aeabi_dadd+0x3b8>
 8000a4a:	4e1a      	ldr	r6, [pc, #104]	; (8000ab4 <__aeabi_dadd+0x380>)
 8000a4c:	42b0      	cmp	r0, r6
 8000a4e:	d057      	beq.n	8000b00 <__aeabi_dadd+0x3cc>
 8000a50:	2680      	movs	r6, #128	; 0x80
 8000a52:	426b      	negs	r3, r5
 8000a54:	4699      	mov	r9, r3
 8000a56:	0436      	lsls	r6, r6, #16
 8000a58:	4334      	orrs	r4, r6
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	2b38      	cmp	r3, #56	; 0x38
 8000a5e:	dd00      	ble.n	8000a62 <__aeabi_dadd+0x32e>
 8000a60:	e0d6      	b.n	8000c10 <__aeabi_dadd+0x4dc>
 8000a62:	2b1f      	cmp	r3, #31
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_dadd+0x334>
 8000a66:	e135      	b.n	8000cd4 <__aeabi_dadd+0x5a0>
 8000a68:	2620      	movs	r6, #32
 8000a6a:	1af5      	subs	r5, r6, r3
 8000a6c:	0026      	movs	r6, r4
 8000a6e:	40ae      	lsls	r6, r5
 8000a70:	46b2      	mov	sl, r6
 8000a72:	003e      	movs	r6, r7
 8000a74:	40de      	lsrs	r6, r3
 8000a76:	46ac      	mov	ip, r5
 8000a78:	0035      	movs	r5, r6
 8000a7a:	4656      	mov	r6, sl
 8000a7c:	432e      	orrs	r6, r5
 8000a7e:	4665      	mov	r5, ip
 8000a80:	40af      	lsls	r7, r5
 8000a82:	1e7d      	subs	r5, r7, #1
 8000a84:	41af      	sbcs	r7, r5
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	4337      	orrs	r7, r6
 8000a8a:	1bd7      	subs	r7, r2, r7
 8000a8c:	42ba      	cmp	r2, r7
 8000a8e:	4192      	sbcs	r2, r2
 8000a90:	1b0c      	subs	r4, r1, r4
 8000a92:	4252      	negs	r2, r2
 8000a94:	1aa4      	subs	r4, r4, r2
 8000a96:	0006      	movs	r6, r0
 8000a98:	46d8      	mov	r8, fp
 8000a9a:	e6a3      	b.n	80007e4 <__aeabi_dadd+0xb0>
 8000a9c:	4664      	mov	r4, ip
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	432c      	orrs	r4, r5
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_dadd+0x372>
 8000aa4:	e6a2      	b.n	80007ec <__aeabi_dadd+0xb8>
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	2700      	movs	r7, #0
 8000aac:	e706      	b.n	80008bc <__aeabi_dadd+0x188>
 8000aae:	001e      	movs	r6, r3
 8000ab0:	e6c4      	b.n	800083c <__aeabi_dadd+0x108>
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	000007ff 	.word	0x000007ff
 8000ab8:	ff7fffff 	.word	0xff7fffff
 8000abc:	800fffff 	.word	0x800fffff
 8000ac0:	2b1f      	cmp	r3, #31
 8000ac2:	dc63      	bgt.n	8000b8c <__aeabi_dadd+0x458>
 8000ac4:	2020      	movs	r0, #32
 8000ac6:	1ac3      	subs	r3, r0, r3
 8000ac8:	0008      	movs	r0, r1
 8000aca:	4098      	lsls	r0, r3
 8000acc:	469c      	mov	ip, r3
 8000ace:	4683      	mov	fp, r0
 8000ad0:	4653      	mov	r3, sl
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	40d8      	lsrs	r0, r3
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	4658      	mov	r0, fp
 8000ada:	4318      	orrs	r0, r3
 8000adc:	4663      	mov	r3, ip
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	1e53      	subs	r3, r2, #1
 8000ae2:	419a      	sbcs	r2, r3
 8000ae4:	4653      	mov	r3, sl
 8000ae6:	4302      	orrs	r2, r0
 8000ae8:	40d9      	lsrs	r1, r3
 8000aea:	e703      	b.n	80008f4 <__aeabi_dadd+0x1c0>
 8000aec:	0026      	movs	r6, r4
 8000aee:	433e      	orrs	r6, r7
 8000af0:	d006      	beq.n	8000b00 <__aeabi_dadd+0x3cc>
 8000af2:	43eb      	mvns	r3, r5
 8000af4:	4699      	mov	r9, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0c7      	beq.n	8000a8a <__aeabi_dadd+0x356>
 8000afa:	4e94      	ldr	r6, [pc, #592]	; (8000d4c <__aeabi_dadd+0x618>)
 8000afc:	42b0      	cmp	r0, r6
 8000afe:	d1ac      	bne.n	8000a5a <__aeabi_dadd+0x326>
 8000b00:	000c      	movs	r4, r1
 8000b02:	0017      	movs	r7, r2
 8000b04:	0006      	movs	r6, r0
 8000b06:	46d8      	mov	r8, fp
 8000b08:	e698      	b.n	800083c <__aeabi_dadd+0x108>
 8000b0a:	4b90      	ldr	r3, [pc, #576]	; (8000d4c <__aeabi_dadd+0x618>)
 8000b0c:	459a      	cmp	sl, r3
 8000b0e:	d00b      	beq.n	8000b28 <__aeabi_dadd+0x3f4>
 8000b10:	4682      	mov	sl, r0
 8000b12:	e6e7      	b.n	80008e4 <__aeabi_dadd+0x1b0>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d000      	beq.n	8000b1a <__aeabi_dadd+0x3e6>
 8000b18:	e09e      	b.n	8000c58 <__aeabi_dadd+0x524>
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	4310      	orrs	r0, r2
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x3ee>
 8000b20:	e0e9      	b.n	8000cf6 <__aeabi_dadd+0x5c2>
 8000b22:	001c      	movs	r4, r3
 8000b24:	0017      	movs	r7, r2
 8000b26:	46d8      	mov	r8, fp
 8000b28:	4e88      	ldr	r6, [pc, #544]	; (8000d4c <__aeabi_dadd+0x618>)
 8000b2a:	e687      	b.n	800083c <__aeabi_dadd+0x108>
 8000b2c:	2500      	movs	r5, #0
 8000b2e:	e772      	b.n	8000a16 <__aeabi_dadd+0x2e2>
 8000b30:	2100      	movs	r1, #0
 8000b32:	e782      	b.n	8000a3a <__aeabi_dadd+0x306>
 8000b34:	0023      	movs	r3, r4
 8000b36:	433b      	orrs	r3, r7
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_dadd+0x40a>
 8000b3c:	e0ab      	b.n	8000c96 <__aeabi_dadd+0x562>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dadd+0x410>
 8000b42:	e0e7      	b.n	8000d14 <__aeabi_dadd+0x5e0>
 8000b44:	000b      	movs	r3, r1
 8000b46:	4313      	orrs	r3, r2
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x418>
 8000b4a:	e677      	b.n	800083c <__aeabi_dadd+0x108>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	42ba      	cmp	r2, r7
 8000b50:	41bf      	sbcs	r7, r7
 8000b52:	1864      	adds	r4, r4, r1
 8000b54:	427f      	negs	r7, r7
 8000b56:	19e4      	adds	r4, r4, r7
 8000b58:	0223      	lsls	r3, r4, #8
 8000b5a:	d400      	bmi.n	8000b5e <__aeabi_dadd+0x42a>
 8000b5c:	e0f2      	b.n	8000d44 <__aeabi_dadd+0x610>
 8000b5e:	4b7c      	ldr	r3, [pc, #496]	; (8000d50 <__aeabi_dadd+0x61c>)
 8000b60:	0017      	movs	r7, r2
 8000b62:	401c      	ands	r4, r3
 8000b64:	0006      	movs	r6, r0
 8000b66:	e669      	b.n	800083c <__aeabi_dadd+0x108>
 8000b68:	0020      	movs	r0, r4
 8000b6a:	4338      	orrs	r0, r7
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d1d1      	bne.n	8000b14 <__aeabi_dadd+0x3e0>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d15b      	bne.n	8000c2c <__aeabi_dadd+0x4f8>
 8000b74:	001c      	movs	r4, r3
 8000b76:	4314      	orrs	r4, r2
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x448>
 8000b7a:	e0a8      	b.n	8000cce <__aeabi_dadd+0x59a>
 8000b7c:	001c      	movs	r4, r3
 8000b7e:	0017      	movs	r7, r2
 8000b80:	46d8      	mov	r8, fp
 8000b82:	e65b      	b.n	800083c <__aeabi_dadd+0x108>
 8000b84:	0006      	movs	r6, r0
 8000b86:	2400      	movs	r4, #0
 8000b88:	2700      	movs	r7, #0
 8000b8a:	e697      	b.n	80008bc <__aeabi_dadd+0x188>
 8000b8c:	4650      	mov	r0, sl
 8000b8e:	000b      	movs	r3, r1
 8000b90:	3820      	subs	r0, #32
 8000b92:	40c3      	lsrs	r3, r0
 8000b94:	4699      	mov	r9, r3
 8000b96:	4653      	mov	r3, sl
 8000b98:	2b20      	cmp	r3, #32
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dadd+0x46a>
 8000b9c:	e095      	b.n	8000cca <__aeabi_dadd+0x596>
 8000b9e:	2340      	movs	r3, #64	; 0x40
 8000ba0:	4650      	mov	r0, sl
 8000ba2:	1a1b      	subs	r3, r3, r0
 8000ba4:	4099      	lsls	r1, r3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	1e51      	subs	r1, r2, #1
 8000baa:	418a      	sbcs	r2, r1
 8000bac:	464b      	mov	r3, r9
 8000bae:	2100      	movs	r1, #0
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	e69f      	b.n	80008f4 <__aeabi_dadd+0x1c0>
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d130      	bne.n	8000c1a <__aeabi_dadd+0x4e6>
 8000bb8:	0026      	movs	r6, r4
 8000bba:	433e      	orrs	r6, r7
 8000bbc:	d067      	beq.n	8000c8e <__aeabi_dadd+0x55a>
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d01c      	beq.n	8000c00 <__aeabi_dadd+0x4cc>
 8000bc6:	4e61      	ldr	r6, [pc, #388]	; (8000d4c <__aeabi_dadd+0x618>)
 8000bc8:	42b0      	cmp	r0, r6
 8000bca:	d060      	beq.n	8000c8e <__aeabi_dadd+0x55a>
 8000bcc:	4653      	mov	r3, sl
 8000bce:	2b38      	cmp	r3, #56	; 0x38
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_dadd+0x4a0>
 8000bd2:	e096      	b.n	8000d02 <__aeabi_dadd+0x5ce>
 8000bd4:	2b1f      	cmp	r3, #31
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_dadd+0x4a6>
 8000bd8:	e09f      	b.n	8000d1a <__aeabi_dadd+0x5e6>
 8000bda:	2620      	movs	r6, #32
 8000bdc:	1af3      	subs	r3, r6, r3
 8000bde:	0026      	movs	r6, r4
 8000be0:	409e      	lsls	r6, r3
 8000be2:	469c      	mov	ip, r3
 8000be4:	46b3      	mov	fp, r6
 8000be6:	4653      	mov	r3, sl
 8000be8:	003e      	movs	r6, r7
 8000bea:	40de      	lsrs	r6, r3
 8000bec:	0033      	movs	r3, r6
 8000bee:	465e      	mov	r6, fp
 8000bf0:	431e      	orrs	r6, r3
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	409f      	lsls	r7, r3
 8000bf6:	1e7b      	subs	r3, r7, #1
 8000bf8:	419f      	sbcs	r7, r3
 8000bfa:	4653      	mov	r3, sl
 8000bfc:	40dc      	lsrs	r4, r3
 8000bfe:	4337      	orrs	r7, r6
 8000c00:	18bf      	adds	r7, r7, r2
 8000c02:	4297      	cmp	r7, r2
 8000c04:	4192      	sbcs	r2, r2
 8000c06:	1864      	adds	r4, r4, r1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	18a4      	adds	r4, r4, r2
 8000c0c:	0006      	movs	r6, r0
 8000c0e:	e678      	b.n	8000902 <__aeabi_dadd+0x1ce>
 8000c10:	4327      	orrs	r7, r4
 8000c12:	1e7c      	subs	r4, r7, #1
 8000c14:	41a7      	sbcs	r7, r4
 8000c16:	2400      	movs	r4, #0
 8000c18:	e737      	b.n	8000a8a <__aeabi_dadd+0x356>
 8000c1a:	4e4c      	ldr	r6, [pc, #304]	; (8000d4c <__aeabi_dadd+0x618>)
 8000c1c:	42b0      	cmp	r0, r6
 8000c1e:	d036      	beq.n	8000c8e <__aeabi_dadd+0x55a>
 8000c20:	2680      	movs	r6, #128	; 0x80
 8000c22:	425b      	negs	r3, r3
 8000c24:	0436      	lsls	r6, r6, #16
 8000c26:	469a      	mov	sl, r3
 8000c28:	4334      	orrs	r4, r6
 8000c2a:	e7cf      	b.n	8000bcc <__aeabi_dadd+0x498>
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	4310      	orrs	r0, r2
 8000c30:	d100      	bne.n	8000c34 <__aeabi_dadd+0x500>
 8000c32:	e603      	b.n	800083c <__aeabi_dadd+0x108>
 8000c34:	1ab8      	subs	r0, r7, r2
 8000c36:	4684      	mov	ip, r0
 8000c38:	4567      	cmp	r7, ip
 8000c3a:	41ad      	sbcs	r5, r5
 8000c3c:	1ae0      	subs	r0, r4, r3
 8000c3e:	426d      	negs	r5, r5
 8000c40:	1b40      	subs	r0, r0, r5
 8000c42:	0205      	lsls	r5, r0, #8
 8000c44:	d400      	bmi.n	8000c48 <__aeabi_dadd+0x514>
 8000c46:	e62c      	b.n	80008a2 <__aeabi_dadd+0x16e>
 8000c48:	1bd7      	subs	r7, r2, r7
 8000c4a:	42ba      	cmp	r2, r7
 8000c4c:	4192      	sbcs	r2, r2
 8000c4e:	1b1c      	subs	r4, r3, r4
 8000c50:	4252      	negs	r2, r2
 8000c52:	1aa4      	subs	r4, r4, r2
 8000c54:	46d8      	mov	r8, fp
 8000c56:	e5f1      	b.n	800083c <__aeabi_dadd+0x108>
 8000c58:	0018      	movs	r0, r3
 8000c5a:	4310      	orrs	r0, r2
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x52c>
 8000c5e:	e763      	b.n	8000b28 <__aeabi_dadd+0x3f4>
 8000c60:	08f8      	lsrs	r0, r7, #3
 8000c62:	0767      	lsls	r7, r4, #29
 8000c64:	4307      	orrs	r7, r0
 8000c66:	2080      	movs	r0, #128	; 0x80
 8000c68:	08e4      	lsrs	r4, r4, #3
 8000c6a:	0300      	lsls	r0, r0, #12
 8000c6c:	4204      	tst	r4, r0
 8000c6e:	d008      	beq.n	8000c82 <__aeabi_dadd+0x54e>
 8000c70:	08dd      	lsrs	r5, r3, #3
 8000c72:	4205      	tst	r5, r0
 8000c74:	d105      	bne.n	8000c82 <__aeabi_dadd+0x54e>
 8000c76:	08d2      	lsrs	r2, r2, #3
 8000c78:	0759      	lsls	r1, r3, #29
 8000c7a:	4311      	orrs	r1, r2
 8000c7c:	000f      	movs	r7, r1
 8000c7e:	002c      	movs	r4, r5
 8000c80:	46d8      	mov	r8, fp
 8000c82:	0f7b      	lsrs	r3, r7, #29
 8000c84:	00e4      	lsls	r4, r4, #3
 8000c86:	431c      	orrs	r4, r3
 8000c88:	00ff      	lsls	r7, r7, #3
 8000c8a:	4e30      	ldr	r6, [pc, #192]	; (8000d4c <__aeabi_dadd+0x618>)
 8000c8c:	e5d6      	b.n	800083c <__aeabi_dadd+0x108>
 8000c8e:	000c      	movs	r4, r1
 8000c90:	0017      	movs	r7, r2
 8000c92:	0006      	movs	r6, r0
 8000c94:	e5d2      	b.n	800083c <__aeabi_dadd+0x108>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d038      	beq.n	8000d0c <__aeabi_dadd+0x5d8>
 8000c9a:	000b      	movs	r3, r1
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x56e>
 8000ca0:	e742      	b.n	8000b28 <__aeabi_dadd+0x3f4>
 8000ca2:	08f8      	lsrs	r0, r7, #3
 8000ca4:	0767      	lsls	r7, r4, #29
 8000ca6:	4307      	orrs	r7, r0
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	08e4      	lsrs	r4, r4, #3
 8000cac:	0300      	lsls	r0, r0, #12
 8000cae:	4204      	tst	r4, r0
 8000cb0:	d0e7      	beq.n	8000c82 <__aeabi_dadd+0x54e>
 8000cb2:	08cb      	lsrs	r3, r1, #3
 8000cb4:	4203      	tst	r3, r0
 8000cb6:	d1e4      	bne.n	8000c82 <__aeabi_dadd+0x54e>
 8000cb8:	08d2      	lsrs	r2, r2, #3
 8000cba:	0749      	lsls	r1, r1, #29
 8000cbc:	4311      	orrs	r1, r2
 8000cbe:	000f      	movs	r7, r1
 8000cc0:	001c      	movs	r4, r3
 8000cc2:	e7de      	b.n	8000c82 <__aeabi_dadd+0x54e>
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	e5d5      	b.n	8000876 <__aeabi_dadd+0x142>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e76b      	b.n	8000ba6 <__aeabi_dadd+0x472>
 8000cce:	2500      	movs	r5, #0
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	e5f3      	b.n	80008bc <__aeabi_dadd+0x188>
 8000cd4:	464e      	mov	r6, r9
 8000cd6:	0025      	movs	r5, r4
 8000cd8:	3e20      	subs	r6, #32
 8000cda:	40f5      	lsrs	r5, r6
 8000cdc:	464b      	mov	r3, r9
 8000cde:	002e      	movs	r6, r5
 8000ce0:	2b20      	cmp	r3, #32
 8000ce2:	d02d      	beq.n	8000d40 <__aeabi_dadd+0x60c>
 8000ce4:	2540      	movs	r5, #64	; 0x40
 8000ce6:	1aed      	subs	r5, r5, r3
 8000ce8:	40ac      	lsls	r4, r5
 8000cea:	4327      	orrs	r7, r4
 8000cec:	1e7c      	subs	r4, r7, #1
 8000cee:	41a7      	sbcs	r7, r4
 8000cf0:	2400      	movs	r4, #0
 8000cf2:	4337      	orrs	r7, r6
 8000cf4:	e6c9      	b.n	8000a8a <__aeabi_dadd+0x356>
 8000cf6:	2480      	movs	r4, #128	; 0x80
 8000cf8:	2500      	movs	r5, #0
 8000cfa:	0324      	lsls	r4, r4, #12
 8000cfc:	4e13      	ldr	r6, [pc, #76]	; (8000d4c <__aeabi_dadd+0x618>)
 8000cfe:	2700      	movs	r7, #0
 8000d00:	e5dc      	b.n	80008bc <__aeabi_dadd+0x188>
 8000d02:	4327      	orrs	r7, r4
 8000d04:	1e7c      	subs	r4, r7, #1
 8000d06:	41a7      	sbcs	r7, r4
 8000d08:	2400      	movs	r4, #0
 8000d0a:	e779      	b.n	8000c00 <__aeabi_dadd+0x4cc>
 8000d0c:	000c      	movs	r4, r1
 8000d0e:	0017      	movs	r7, r2
 8000d10:	4e0e      	ldr	r6, [pc, #56]	; (8000d4c <__aeabi_dadd+0x618>)
 8000d12:	e593      	b.n	800083c <__aeabi_dadd+0x108>
 8000d14:	000c      	movs	r4, r1
 8000d16:	0017      	movs	r7, r2
 8000d18:	e590      	b.n	800083c <__aeabi_dadd+0x108>
 8000d1a:	4656      	mov	r6, sl
 8000d1c:	0023      	movs	r3, r4
 8000d1e:	3e20      	subs	r6, #32
 8000d20:	40f3      	lsrs	r3, r6
 8000d22:	4699      	mov	r9, r3
 8000d24:	4653      	mov	r3, sl
 8000d26:	2b20      	cmp	r3, #32
 8000d28:	d00e      	beq.n	8000d48 <__aeabi_dadd+0x614>
 8000d2a:	2340      	movs	r3, #64	; 0x40
 8000d2c:	4656      	mov	r6, sl
 8000d2e:	1b9b      	subs	r3, r3, r6
 8000d30:	409c      	lsls	r4, r3
 8000d32:	4327      	orrs	r7, r4
 8000d34:	1e7c      	subs	r4, r7, #1
 8000d36:	41a7      	sbcs	r7, r4
 8000d38:	464b      	mov	r3, r9
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	431f      	orrs	r7, r3
 8000d3e:	e75f      	b.n	8000c00 <__aeabi_dadd+0x4cc>
 8000d40:	2400      	movs	r4, #0
 8000d42:	e7d2      	b.n	8000cea <__aeabi_dadd+0x5b6>
 8000d44:	0017      	movs	r7, r2
 8000d46:	e5b2      	b.n	80008ae <__aeabi_dadd+0x17a>
 8000d48:	2400      	movs	r4, #0
 8000d4a:	e7f2      	b.n	8000d32 <__aeabi_dadd+0x5fe>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	4645      	mov	r5, r8
 8000d5a:	46de      	mov	lr, fp
 8000d5c:	464e      	mov	r6, r9
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	004c      	lsls	r4, r1, #1
 8000d62:	030e      	lsls	r6, r1, #12
 8000d64:	b087      	sub	sp, #28
 8000d66:	4683      	mov	fp, r0
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001d      	movs	r5, r3
 8000d6c:	4680      	mov	r8, r0
 8000d6e:	0b36      	lsrs	r6, r6, #12
 8000d70:	0d64      	lsrs	r4, r4, #21
 8000d72:	0fcf      	lsrs	r7, r1, #31
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d04f      	beq.n	8000e18 <__aeabi_ddiv+0xc4>
 8000d78:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <__aeabi_ddiv+0x1e4>)
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	d035      	beq.n	8000dea <__aeabi_ddiv+0x96>
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	0f42      	lsrs	r2, r0, #29
 8000d82:	041b      	lsls	r3, r3, #16
 8000d84:	00f6      	lsls	r6, r6, #3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	4333      	orrs	r3, r6
 8000d8a:	4699      	mov	r9, r3
 8000d8c:	00c3      	lsls	r3, r0, #3
 8000d8e:	4698      	mov	r8, r3
 8000d90:	4b6a      	ldr	r3, [pc, #424]	; (8000f3c <__aeabi_ddiv+0x1e8>)
 8000d92:	2600      	movs	r6, #0
 8000d94:	469c      	mov	ip, r3
 8000d96:	2300      	movs	r3, #0
 8000d98:	4464      	add	r4, ip
 8000d9a:	9303      	str	r3, [sp, #12]
 8000d9c:	032b      	lsls	r3, r5, #12
 8000d9e:	0b1b      	lsrs	r3, r3, #12
 8000da0:	469b      	mov	fp, r3
 8000da2:	006b      	lsls	r3, r5, #1
 8000da4:	0fed      	lsrs	r5, r5, #31
 8000da6:	4650      	mov	r0, sl
 8000da8:	0d5b      	lsrs	r3, r3, #21
 8000daa:	9501      	str	r5, [sp, #4]
 8000dac:	d05e      	beq.n	8000e6c <__aeabi_ddiv+0x118>
 8000dae:	4a62      	ldr	r2, [pc, #392]	; (8000f38 <__aeabi_ddiv+0x1e4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d053      	beq.n	8000e5c <__aeabi_ddiv+0x108>
 8000db4:	465a      	mov	r2, fp
 8000db6:	00d1      	lsls	r1, r2, #3
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	0f40      	lsrs	r0, r0, #29
 8000dbc:	0412      	lsls	r2, r2, #16
 8000dbe:	4302      	orrs	r2, r0
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	4693      	mov	fp, r2
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	00d1      	lsls	r1, r2, #3
 8000dc8:	4a5c      	ldr	r2, [pc, #368]	; (8000f3c <__aeabi_ddiv+0x1e8>)
 8000dca:	4694      	mov	ip, r2
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4463      	add	r3, ip
 8000dd0:	0038      	movs	r0, r7
 8000dd2:	4068      	eors	r0, r5
 8000dd4:	4684      	mov	ip, r0
 8000dd6:	9002      	str	r0, [sp, #8]
 8000dd8:	1ae4      	subs	r4, r4, r3
 8000dda:	4316      	orrs	r6, r2
 8000ddc:	2e0f      	cmp	r6, #15
 8000dde:	d900      	bls.n	8000de2 <__aeabi_ddiv+0x8e>
 8000de0:	e0b4      	b.n	8000f4c <__aeabi_ddiv+0x1f8>
 8000de2:	4b57      	ldr	r3, [pc, #348]	; (8000f40 <__aeabi_ddiv+0x1ec>)
 8000de4:	00b6      	lsls	r6, r6, #2
 8000de6:	599b      	ldr	r3, [r3, r6]
 8000de8:	469f      	mov	pc, r3
 8000dea:	0003      	movs	r3, r0
 8000dec:	4333      	orrs	r3, r6
 8000dee:	4699      	mov	r9, r3
 8000df0:	d16c      	bne.n	8000ecc <__aeabi_ddiv+0x178>
 8000df2:	2300      	movs	r3, #0
 8000df4:	4698      	mov	r8, r3
 8000df6:	3302      	adds	r3, #2
 8000df8:	2608      	movs	r6, #8
 8000dfa:	9303      	str	r3, [sp, #12]
 8000dfc:	e7ce      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000dfe:	46cb      	mov	fp, r9
 8000e00:	4641      	mov	r1, r8
 8000e02:	9a03      	ldr	r2, [sp, #12]
 8000e04:	9701      	str	r7, [sp, #4]
 8000e06:	2a02      	cmp	r2, #2
 8000e08:	d165      	bne.n	8000ed6 <__aeabi_ddiv+0x182>
 8000e0a:	9b01      	ldr	r3, [sp, #4]
 8000e0c:	4c4a      	ldr	r4, [pc, #296]	; (8000f38 <__aeabi_ddiv+0x1e4>)
 8000e0e:	469c      	mov	ip, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	2200      	movs	r2, #0
 8000e14:	4698      	mov	r8, r3
 8000e16:	e06b      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	4333      	orrs	r3, r6
 8000e1c:	4699      	mov	r9, r3
 8000e1e:	d04e      	beq.n	8000ebe <__aeabi_ddiv+0x16a>
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0xd2>
 8000e24:	e1bc      	b.n	80011a0 <__aeabi_ddiv+0x44c>
 8000e26:	0030      	movs	r0, r6
 8000e28:	f001 f920 	bl	800206c <__clzsi2>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	3b0b      	subs	r3, #11
 8000e30:	2b1c      	cmp	r3, #28
 8000e32:	dd00      	ble.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e1ac      	b.n	8001190 <__aeabi_ddiv+0x43c>
 8000e36:	221d      	movs	r2, #29
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	465a      	mov	r2, fp
 8000e3c:	0001      	movs	r1, r0
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	3908      	subs	r1, #8
 8000e42:	408e      	lsls	r6, r1
 8000e44:	0013      	movs	r3, r2
 8000e46:	4333      	orrs	r3, r6
 8000e48:	4699      	mov	r9, r3
 8000e4a:	465b      	mov	r3, fp
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	4698      	mov	r8, r3
 8000e50:	2300      	movs	r3, #0
 8000e52:	4c3c      	ldr	r4, [pc, #240]	; (8000f44 <__aeabi_ddiv+0x1f0>)
 8000e54:	2600      	movs	r6, #0
 8000e56:	1a24      	subs	r4, r4, r0
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	e79f      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000e5c:	4651      	mov	r1, sl
 8000e5e:	465a      	mov	r2, fp
 8000e60:	4311      	orrs	r1, r2
 8000e62:	d129      	bne.n	8000eb8 <__aeabi_ddiv+0x164>
 8000e64:	2200      	movs	r2, #0
 8000e66:	4693      	mov	fp, r2
 8000e68:	3202      	adds	r2, #2
 8000e6a:	e7b1      	b.n	8000dd0 <__aeabi_ddiv+0x7c>
 8000e6c:	4659      	mov	r1, fp
 8000e6e:	4301      	orrs	r1, r0
 8000e70:	d01e      	beq.n	8000eb0 <__aeabi_ddiv+0x15c>
 8000e72:	465b      	mov	r3, fp
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_ddiv+0x126>
 8000e78:	e19e      	b.n	80011b8 <__aeabi_ddiv+0x464>
 8000e7a:	4658      	mov	r0, fp
 8000e7c:	f001 f8f6 	bl	800206c <__clzsi2>
 8000e80:	0003      	movs	r3, r0
 8000e82:	3b0b      	subs	r3, #11
 8000e84:	2b1c      	cmp	r3, #28
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_ddiv+0x136>
 8000e88:	e18f      	b.n	80011aa <__aeabi_ddiv+0x456>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4659      	mov	r1, fp
 8000e8e:	3a08      	subs	r2, #8
 8000e90:	4091      	lsls	r1, r2
 8000e92:	468b      	mov	fp, r1
 8000e94:	211d      	movs	r1, #29
 8000e96:	1acb      	subs	r3, r1, r3
 8000e98:	4651      	mov	r1, sl
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	000b      	movs	r3, r1
 8000e9e:	4659      	mov	r1, fp
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	4651      	mov	r1, sl
 8000ea4:	469b      	mov	fp, r3
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <__aeabi_ddiv+0x1f0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	1a1b      	subs	r3, r3, r0
 8000eae:	e78f      	b.n	8000dd0 <__aeabi_ddiv+0x7c>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	469b      	mov	fp, r3
 8000eb6:	e78b      	b.n	8000dd0 <__aeabi_ddiv+0x7c>
 8000eb8:	4651      	mov	r1, sl
 8000eba:	2203      	movs	r2, #3
 8000ebc:	e788      	b.n	8000dd0 <__aeabi_ddiv+0x7c>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	4698      	mov	r8, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	2604      	movs	r6, #4
 8000ec6:	2400      	movs	r4, #0
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	e767      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	46b1      	mov	r9, r6
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	260c      	movs	r6, #12
 8000ed4:	e762      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000ed6:	2a03      	cmp	r2, #3
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x188>
 8000eda:	e25c      	b.n	8001396 <__aeabi_ddiv+0x642>
 8000edc:	9b01      	ldr	r3, [sp, #4]
 8000ede:	2a01      	cmp	r2, #1
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_ddiv+0x190>
 8000ee2:	e1e4      	b.n	80012ae <__aeabi_ddiv+0x55a>
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2400      	movs	r4, #0
 8000eec:	2200      	movs	r2, #0
 8000eee:	4698      	mov	r8, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	0312      	lsls	r2, r2, #12
 8000ef4:	0b13      	lsrs	r3, r2, #12
 8000ef6:	0d0a      	lsrs	r2, r1, #20
 8000ef8:	0512      	lsls	r2, r2, #20
 8000efa:	431a      	orrs	r2, r3
 8000efc:	0523      	lsls	r3, r4, #20
 8000efe:	4c12      	ldr	r4, [pc, #72]	; (8000f48 <__aeabi_ddiv+0x1f4>)
 8000f00:	4640      	mov	r0, r8
 8000f02:	4022      	ands	r2, r4
 8000f04:	4313      	orrs	r3, r2
 8000f06:	4662      	mov	r2, ip
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	07d2      	lsls	r2, r2, #31
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	0019      	movs	r1, r3
 8000f12:	b007      	add	sp, #28
 8000f14:	bc3c      	pop	{r2, r3, r4, r5}
 8000f16:	4690      	mov	r8, r2
 8000f18:	4699      	mov	r9, r3
 8000f1a:	46a2      	mov	sl, r4
 8000f1c:	46ab      	mov	fp, r5
 8000f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f20:	2300      	movs	r3, #0
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	469c      	mov	ip, r3
 8000f26:	0312      	lsls	r2, r2, #12
 8000f28:	4698      	mov	r8, r3
 8000f2a:	4c03      	ldr	r4, [pc, #12]	; (8000f38 <__aeabi_ddiv+0x1e4>)
 8000f2c:	e7e0      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	4c01      	ldr	r4, [pc, #4]	; (8000f38 <__aeabi_ddiv+0x1e4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	4698      	mov	r8, r3
 8000f36:	e7db      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 8000f38:	000007ff 	.word	0x000007ff
 8000f3c:	fffffc01 	.word	0xfffffc01
 8000f40:	08005a00 	.word	0x08005a00
 8000f44:	fffffc0d 	.word	0xfffffc0d
 8000f48:	800fffff 	.word	0x800fffff
 8000f4c:	45d9      	cmp	r9, fp
 8000f4e:	d900      	bls.n	8000f52 <__aeabi_ddiv+0x1fe>
 8000f50:	e139      	b.n	80011c6 <__aeabi_ddiv+0x472>
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0x202>
 8000f54:	e134      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8000f56:	2300      	movs	r3, #0
 8000f58:	4646      	mov	r6, r8
 8000f5a:	464d      	mov	r5, r9
 8000f5c:	469a      	mov	sl, r3
 8000f5e:	3c01      	subs	r4, #1
 8000f60:	465b      	mov	r3, fp
 8000f62:	0e0a      	lsrs	r2, r1, #24
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	431a      	orrs	r2, r3
 8000f68:	020b      	lsls	r3, r1, #8
 8000f6a:	0c17      	lsrs	r7, r2, #16
 8000f6c:	9303      	str	r3, [sp, #12]
 8000f6e:	0413      	lsls	r3, r2, #16
 8000f70:	0c1b      	lsrs	r3, r3, #16
 8000f72:	0039      	movs	r1, r7
 8000f74:	0028      	movs	r0, r5
 8000f76:	4690      	mov	r8, r2
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	f7ff f8e1 	bl	8000140 <__udivsi3>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	4683      	mov	fp, r0
 8000f84:	435a      	muls	r2, r3
 8000f86:	0028      	movs	r0, r5
 8000f88:	0039      	movs	r1, r7
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	f7ff f95e 	bl	800024c <__aeabi_uidivmod>
 8000f90:	0c35      	lsrs	r5, r6, #16
 8000f92:	0409      	lsls	r1, r1, #16
 8000f94:	430d      	orrs	r5, r1
 8000f96:	45a9      	cmp	r9, r5
 8000f98:	d90d      	bls.n	8000fb6 <__aeabi_ddiv+0x262>
 8000f9a:	465b      	mov	r3, fp
 8000f9c:	4445      	add	r5, r8
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	45a8      	cmp	r8, r5
 8000fa2:	d900      	bls.n	8000fa6 <__aeabi_ddiv+0x252>
 8000fa4:	e13a      	b.n	800121c <__aeabi_ddiv+0x4c8>
 8000fa6:	45a9      	cmp	r9, r5
 8000fa8:	d800      	bhi.n	8000fac <__aeabi_ddiv+0x258>
 8000faa:	e137      	b.n	800121c <__aeabi_ddiv+0x4c8>
 8000fac:	2302      	movs	r3, #2
 8000fae:	425b      	negs	r3, r3
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	4445      	add	r5, r8
 8000fb4:	44e3      	add	fp, ip
 8000fb6:	464b      	mov	r3, r9
 8000fb8:	1aeb      	subs	r3, r5, r3
 8000fba:	0039      	movs	r1, r7
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	9304      	str	r3, [sp, #16]
 8000fc0:	f7ff f8be 	bl	8000140 <__udivsi3>
 8000fc4:	9b01      	ldr	r3, [sp, #4]
 8000fc6:	0005      	movs	r5, r0
 8000fc8:	4343      	muls	r3, r0
 8000fca:	0039      	movs	r1, r7
 8000fcc:	9804      	ldr	r0, [sp, #16]
 8000fce:	4699      	mov	r9, r3
 8000fd0:	f7ff f93c 	bl	800024c <__aeabi_uidivmod>
 8000fd4:	0433      	lsls	r3, r6, #16
 8000fd6:	0409      	lsls	r1, r1, #16
 8000fd8:	0c1b      	lsrs	r3, r3, #16
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	4599      	cmp	r9, r3
 8000fde:	d909      	bls.n	8000ff4 <__aeabi_ddiv+0x2a0>
 8000fe0:	4443      	add	r3, r8
 8000fe2:	1e6a      	subs	r2, r5, #1
 8000fe4:	4598      	cmp	r8, r3
 8000fe6:	d900      	bls.n	8000fea <__aeabi_ddiv+0x296>
 8000fe8:	e11a      	b.n	8001220 <__aeabi_ddiv+0x4cc>
 8000fea:	4599      	cmp	r9, r3
 8000fec:	d800      	bhi.n	8000ff0 <__aeabi_ddiv+0x29c>
 8000fee:	e117      	b.n	8001220 <__aeabi_ddiv+0x4cc>
 8000ff0:	3d02      	subs	r5, #2
 8000ff2:	4443      	add	r3, r8
 8000ff4:	464a      	mov	r2, r9
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	465a      	mov	r2, fp
 8000ffa:	0412      	lsls	r2, r2, #16
 8000ffc:	432a      	orrs	r2, r5
 8000ffe:	9903      	ldr	r1, [sp, #12]
 8001000:	4693      	mov	fp, r2
 8001002:	0c10      	lsrs	r0, r2, #16
 8001004:	0c0a      	lsrs	r2, r1, #16
 8001006:	4691      	mov	r9, r2
 8001008:	0409      	lsls	r1, r1, #16
 800100a:	465a      	mov	r2, fp
 800100c:	0c09      	lsrs	r1, r1, #16
 800100e:	464e      	mov	r6, r9
 8001010:	000d      	movs	r5, r1
 8001012:	0412      	lsls	r2, r2, #16
 8001014:	0c12      	lsrs	r2, r2, #16
 8001016:	4345      	muls	r5, r0
 8001018:	9105      	str	r1, [sp, #20]
 800101a:	4351      	muls	r1, r2
 800101c:	4372      	muls	r2, r6
 800101e:	4370      	muls	r0, r6
 8001020:	1952      	adds	r2, r2, r5
 8001022:	0c0e      	lsrs	r6, r1, #16
 8001024:	18b2      	adds	r2, r6, r2
 8001026:	4295      	cmp	r5, r2
 8001028:	d903      	bls.n	8001032 <__aeabi_ddiv+0x2de>
 800102a:	2580      	movs	r5, #128	; 0x80
 800102c:	026d      	lsls	r5, r5, #9
 800102e:	46ac      	mov	ip, r5
 8001030:	4460      	add	r0, ip
 8001032:	0c15      	lsrs	r5, r2, #16
 8001034:	0409      	lsls	r1, r1, #16
 8001036:	0412      	lsls	r2, r2, #16
 8001038:	0c09      	lsrs	r1, r1, #16
 800103a:	1828      	adds	r0, r5, r0
 800103c:	1852      	adds	r2, r2, r1
 800103e:	4283      	cmp	r3, r0
 8001040:	d200      	bcs.n	8001044 <__aeabi_ddiv+0x2f0>
 8001042:	e0ce      	b.n	80011e2 <__aeabi_ddiv+0x48e>
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0x2f4>
 8001046:	e0c8      	b.n	80011da <__aeabi_ddiv+0x486>
 8001048:	1a1d      	subs	r5, r3, r0
 800104a:	4653      	mov	r3, sl
 800104c:	1a9e      	subs	r6, r3, r2
 800104e:	45b2      	cmp	sl, r6
 8001050:	4192      	sbcs	r2, r2
 8001052:	4252      	negs	r2, r2
 8001054:	1aab      	subs	r3, r5, r2
 8001056:	469a      	mov	sl, r3
 8001058:	4598      	cmp	r8, r3
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x30a>
 800105c:	e117      	b.n	800128e <__aeabi_ddiv+0x53a>
 800105e:	0039      	movs	r1, r7
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff f86d 	bl	8000140 <__udivsi3>
 8001066:	9b01      	ldr	r3, [sp, #4]
 8001068:	0005      	movs	r5, r0
 800106a:	4343      	muls	r3, r0
 800106c:	0039      	movs	r1, r7
 800106e:	4650      	mov	r0, sl
 8001070:	9304      	str	r3, [sp, #16]
 8001072:	f7ff f8eb 	bl	800024c <__aeabi_uidivmod>
 8001076:	9804      	ldr	r0, [sp, #16]
 8001078:	040b      	lsls	r3, r1, #16
 800107a:	0c31      	lsrs	r1, r6, #16
 800107c:	4319      	orrs	r1, r3
 800107e:	4288      	cmp	r0, r1
 8001080:	d909      	bls.n	8001096 <__aeabi_ddiv+0x342>
 8001082:	4441      	add	r1, r8
 8001084:	1e6b      	subs	r3, r5, #1
 8001086:	4588      	cmp	r8, r1
 8001088:	d900      	bls.n	800108c <__aeabi_ddiv+0x338>
 800108a:	e107      	b.n	800129c <__aeabi_ddiv+0x548>
 800108c:	4288      	cmp	r0, r1
 800108e:	d800      	bhi.n	8001092 <__aeabi_ddiv+0x33e>
 8001090:	e104      	b.n	800129c <__aeabi_ddiv+0x548>
 8001092:	3d02      	subs	r5, #2
 8001094:	4441      	add	r1, r8
 8001096:	9b04      	ldr	r3, [sp, #16]
 8001098:	1acb      	subs	r3, r1, r3
 800109a:	0018      	movs	r0, r3
 800109c:	0039      	movs	r1, r7
 800109e:	9304      	str	r3, [sp, #16]
 80010a0:	f7ff f84e 	bl	8000140 <__udivsi3>
 80010a4:	9b01      	ldr	r3, [sp, #4]
 80010a6:	4682      	mov	sl, r0
 80010a8:	4343      	muls	r3, r0
 80010aa:	0039      	movs	r1, r7
 80010ac:	9804      	ldr	r0, [sp, #16]
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	f7ff f8cc 	bl	800024c <__aeabi_uidivmod>
 80010b4:	9801      	ldr	r0, [sp, #4]
 80010b6:	040b      	lsls	r3, r1, #16
 80010b8:	0431      	lsls	r1, r6, #16
 80010ba:	0c09      	lsrs	r1, r1, #16
 80010bc:	4319      	orrs	r1, r3
 80010be:	4288      	cmp	r0, r1
 80010c0:	d90d      	bls.n	80010de <__aeabi_ddiv+0x38a>
 80010c2:	4653      	mov	r3, sl
 80010c4:	4441      	add	r1, r8
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4588      	cmp	r8, r1
 80010ca:	d900      	bls.n	80010ce <__aeabi_ddiv+0x37a>
 80010cc:	e0e8      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 80010ce:	4288      	cmp	r0, r1
 80010d0:	d800      	bhi.n	80010d4 <__aeabi_ddiv+0x380>
 80010d2:	e0e5      	b.n	80012a0 <__aeabi_ddiv+0x54c>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	4441      	add	r1, r8
 80010dc:	44e2      	add	sl, ip
 80010de:	9b01      	ldr	r3, [sp, #4]
 80010e0:	042d      	lsls	r5, r5, #16
 80010e2:	1ace      	subs	r6, r1, r3
 80010e4:	4651      	mov	r1, sl
 80010e6:	4329      	orrs	r1, r5
 80010e8:	9d05      	ldr	r5, [sp, #20]
 80010ea:	464f      	mov	r7, r9
 80010ec:	002a      	movs	r2, r5
 80010ee:	040b      	lsls	r3, r1, #16
 80010f0:	0c08      	lsrs	r0, r1, #16
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	435a      	muls	r2, r3
 80010f6:	4345      	muls	r5, r0
 80010f8:	437b      	muls	r3, r7
 80010fa:	4378      	muls	r0, r7
 80010fc:	195b      	adds	r3, r3, r5
 80010fe:	0c17      	lsrs	r7, r2, #16
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	429d      	cmp	r5, r3
 8001104:	d903      	bls.n	800110e <__aeabi_ddiv+0x3ba>
 8001106:	2580      	movs	r5, #128	; 0x80
 8001108:	026d      	lsls	r5, r5, #9
 800110a:	46ac      	mov	ip, r5
 800110c:	4460      	add	r0, ip
 800110e:	0c1d      	lsrs	r5, r3, #16
 8001110:	0412      	lsls	r2, r2, #16
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	0c12      	lsrs	r2, r2, #16
 8001116:	1828      	adds	r0, r5, r0
 8001118:	189b      	adds	r3, r3, r2
 800111a:	4286      	cmp	r6, r0
 800111c:	d200      	bcs.n	8001120 <__aeabi_ddiv+0x3cc>
 800111e:	e093      	b.n	8001248 <__aeabi_ddiv+0x4f4>
 8001120:	d100      	bne.n	8001124 <__aeabi_ddiv+0x3d0>
 8001122:	e08e      	b.n	8001242 <__aeabi_ddiv+0x4ee>
 8001124:	2301      	movs	r3, #1
 8001126:	4319      	orrs	r1, r3
 8001128:	4ba0      	ldr	r3, [pc, #640]	; (80013ac <__aeabi_ddiv+0x658>)
 800112a:	18e3      	adds	r3, r4, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	dc00      	bgt.n	8001132 <__aeabi_ddiv+0x3de>
 8001130:	e099      	b.n	8001266 <__aeabi_ddiv+0x512>
 8001132:	074a      	lsls	r2, r1, #29
 8001134:	d000      	beq.n	8001138 <__aeabi_ddiv+0x3e4>
 8001136:	e09e      	b.n	8001276 <__aeabi_ddiv+0x522>
 8001138:	465a      	mov	r2, fp
 800113a:	01d2      	lsls	r2, r2, #7
 800113c:	d506      	bpl.n	800114c <__aeabi_ddiv+0x3f8>
 800113e:	465a      	mov	r2, fp
 8001140:	4b9b      	ldr	r3, [pc, #620]	; (80013b0 <__aeabi_ddiv+0x65c>)
 8001142:	401a      	ands	r2, r3
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	4693      	mov	fp, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	18e3      	adds	r3, r4, r3
 800114c:	4a99      	ldr	r2, [pc, #612]	; (80013b4 <__aeabi_ddiv+0x660>)
 800114e:	4293      	cmp	r3, r2
 8001150:	dd68      	ble.n	8001224 <__aeabi_ddiv+0x4d0>
 8001152:	2301      	movs	r3, #1
 8001154:	9a02      	ldr	r2, [sp, #8]
 8001156:	4c98      	ldr	r4, [pc, #608]	; (80013b8 <__aeabi_ddiv+0x664>)
 8001158:	401a      	ands	r2, r3
 800115a:	2300      	movs	r3, #0
 800115c:	4694      	mov	ip, r2
 800115e:	4698      	mov	r8, r3
 8001160:	2200      	movs	r2, #0
 8001162:	e6c5      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	464b      	mov	r3, r9
 8001168:	0312      	lsls	r2, r2, #12
 800116a:	4213      	tst	r3, r2
 800116c:	d00a      	beq.n	8001184 <__aeabi_ddiv+0x430>
 800116e:	465b      	mov	r3, fp
 8001170:	4213      	tst	r3, r2
 8001172:	d106      	bne.n	8001182 <__aeabi_ddiv+0x42e>
 8001174:	431a      	orrs	r2, r3
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	0b12      	lsrs	r2, r2, #12
 800117a:	46ac      	mov	ip, r5
 800117c:	4688      	mov	r8, r1
 800117e:	4c8e      	ldr	r4, [pc, #568]	; (80013b8 <__aeabi_ddiv+0x664>)
 8001180:	e6b6      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 8001182:	464b      	mov	r3, r9
 8001184:	431a      	orrs	r2, r3
 8001186:	0312      	lsls	r2, r2, #12
 8001188:	0b12      	lsrs	r2, r2, #12
 800118a:	46bc      	mov	ip, r7
 800118c:	4c8a      	ldr	r4, [pc, #552]	; (80013b8 <__aeabi_ddiv+0x664>)
 800118e:	e6af      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 8001190:	0003      	movs	r3, r0
 8001192:	465a      	mov	r2, fp
 8001194:	3b28      	subs	r3, #40	; 0x28
 8001196:	409a      	lsls	r2, r3
 8001198:	2300      	movs	r3, #0
 800119a:	4691      	mov	r9, r2
 800119c:	4698      	mov	r8, r3
 800119e:	e657      	b.n	8000e50 <__aeabi_ddiv+0xfc>
 80011a0:	4658      	mov	r0, fp
 80011a2:	f000 ff63 	bl	800206c <__clzsi2>
 80011a6:	3020      	adds	r0, #32
 80011a8:	e640      	b.n	8000e2c <__aeabi_ddiv+0xd8>
 80011aa:	0003      	movs	r3, r0
 80011ac:	4652      	mov	r2, sl
 80011ae:	3b28      	subs	r3, #40	; 0x28
 80011b0:	409a      	lsls	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	4693      	mov	fp, r2
 80011b6:	e677      	b.n	8000ea8 <__aeabi_ddiv+0x154>
 80011b8:	f000 ff58 	bl	800206c <__clzsi2>
 80011bc:	3020      	adds	r0, #32
 80011be:	e65f      	b.n	8000e80 <__aeabi_ddiv+0x12c>
 80011c0:	4588      	cmp	r8, r1
 80011c2:	d200      	bcs.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e6c7      	b.n	8000f56 <__aeabi_ddiv+0x202>
 80011c6:	464b      	mov	r3, r9
 80011c8:	07de      	lsls	r6, r3, #31
 80011ca:	085d      	lsrs	r5, r3, #1
 80011cc:	4643      	mov	r3, r8
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	431e      	orrs	r6, r3
 80011d2:	4643      	mov	r3, r8
 80011d4:	07db      	lsls	r3, r3, #31
 80011d6:	469a      	mov	sl, r3
 80011d8:	e6c2      	b.n	8000f60 <__aeabi_ddiv+0x20c>
 80011da:	2500      	movs	r5, #0
 80011dc:	4592      	cmp	sl, r2
 80011de:	d300      	bcc.n	80011e2 <__aeabi_ddiv+0x48e>
 80011e0:	e733      	b.n	800104a <__aeabi_ddiv+0x2f6>
 80011e2:	9e03      	ldr	r6, [sp, #12]
 80011e4:	4659      	mov	r1, fp
 80011e6:	46b4      	mov	ip, r6
 80011e8:	44e2      	add	sl, ip
 80011ea:	45b2      	cmp	sl, r6
 80011ec:	41ad      	sbcs	r5, r5
 80011ee:	426d      	negs	r5, r5
 80011f0:	4445      	add	r5, r8
 80011f2:	18eb      	adds	r3, r5, r3
 80011f4:	3901      	subs	r1, #1
 80011f6:	4598      	cmp	r8, r3
 80011f8:	d207      	bcs.n	800120a <__aeabi_ddiv+0x4b6>
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d900      	bls.n	8001200 <__aeabi_ddiv+0x4ac>
 80011fe:	e07f      	b.n	8001300 <__aeabi_ddiv+0x5ac>
 8001200:	d100      	bne.n	8001204 <__aeabi_ddiv+0x4b0>
 8001202:	e0bc      	b.n	800137e <__aeabi_ddiv+0x62a>
 8001204:	1a1d      	subs	r5, r3, r0
 8001206:	468b      	mov	fp, r1
 8001208:	e71f      	b.n	800104a <__aeabi_ddiv+0x2f6>
 800120a:	4598      	cmp	r8, r3
 800120c:	d1fa      	bne.n	8001204 <__aeabi_ddiv+0x4b0>
 800120e:	9d03      	ldr	r5, [sp, #12]
 8001210:	4555      	cmp	r5, sl
 8001212:	d9f2      	bls.n	80011fa <__aeabi_ddiv+0x4a6>
 8001214:	4643      	mov	r3, r8
 8001216:	468b      	mov	fp, r1
 8001218:	1a1d      	subs	r5, r3, r0
 800121a:	e716      	b.n	800104a <__aeabi_ddiv+0x2f6>
 800121c:	469b      	mov	fp, r3
 800121e:	e6ca      	b.n	8000fb6 <__aeabi_ddiv+0x262>
 8001220:	0015      	movs	r5, r2
 8001222:	e6e7      	b.n	8000ff4 <__aeabi_ddiv+0x2a0>
 8001224:	465a      	mov	r2, fp
 8001226:	08c9      	lsrs	r1, r1, #3
 8001228:	0752      	lsls	r2, r2, #29
 800122a:	430a      	orrs	r2, r1
 800122c:	055b      	lsls	r3, r3, #21
 800122e:	4690      	mov	r8, r2
 8001230:	0d5c      	lsrs	r4, r3, #21
 8001232:	465a      	mov	r2, fp
 8001234:	2301      	movs	r3, #1
 8001236:	9902      	ldr	r1, [sp, #8]
 8001238:	0252      	lsls	r2, r2, #9
 800123a:	4019      	ands	r1, r3
 800123c:	0b12      	lsrs	r2, r2, #12
 800123e:	468c      	mov	ip, r1
 8001240:	e656      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 8001242:	2b00      	cmp	r3, #0
 8001244:	d100      	bne.n	8001248 <__aeabi_ddiv+0x4f4>
 8001246:	e76f      	b.n	8001128 <__aeabi_ddiv+0x3d4>
 8001248:	4446      	add	r6, r8
 800124a:	1e4a      	subs	r2, r1, #1
 800124c:	45b0      	cmp	r8, r6
 800124e:	d929      	bls.n	80012a4 <__aeabi_ddiv+0x550>
 8001250:	0011      	movs	r1, r2
 8001252:	4286      	cmp	r6, r0
 8001254:	d000      	beq.n	8001258 <__aeabi_ddiv+0x504>
 8001256:	e765      	b.n	8001124 <__aeabi_ddiv+0x3d0>
 8001258:	9a03      	ldr	r2, [sp, #12]
 800125a:	4293      	cmp	r3, r2
 800125c:	d000      	beq.n	8001260 <__aeabi_ddiv+0x50c>
 800125e:	e761      	b.n	8001124 <__aeabi_ddiv+0x3d0>
 8001260:	e762      	b.n	8001128 <__aeabi_ddiv+0x3d4>
 8001262:	2101      	movs	r1, #1
 8001264:	4249      	negs	r1, r1
 8001266:	2001      	movs	r0, #1
 8001268:	1ac2      	subs	r2, r0, r3
 800126a:	2a38      	cmp	r2, #56	; 0x38
 800126c:	dd21      	ble.n	80012b2 <__aeabi_ddiv+0x55e>
 800126e:	9b02      	ldr	r3, [sp, #8]
 8001270:	4003      	ands	r3, r0
 8001272:	469c      	mov	ip, r3
 8001274:	e638      	b.n	8000ee8 <__aeabi_ddiv+0x194>
 8001276:	220f      	movs	r2, #15
 8001278:	400a      	ands	r2, r1
 800127a:	2a04      	cmp	r2, #4
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x52c>
 800127e:	e75b      	b.n	8001138 <__aeabi_ddiv+0x3e4>
 8001280:	000a      	movs	r2, r1
 8001282:	1d11      	adds	r1, r2, #4
 8001284:	4291      	cmp	r1, r2
 8001286:	4192      	sbcs	r2, r2
 8001288:	4252      	negs	r2, r2
 800128a:	4493      	add	fp, r2
 800128c:	e754      	b.n	8001138 <__aeabi_ddiv+0x3e4>
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <__aeabi_ddiv+0x658>)
 8001290:	18e3      	adds	r3, r4, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	dde5      	ble.n	8001262 <__aeabi_ddiv+0x50e>
 8001296:	2201      	movs	r2, #1
 8001298:	4252      	negs	r2, r2
 800129a:	e7f2      	b.n	8001282 <__aeabi_ddiv+0x52e>
 800129c:	001d      	movs	r5, r3
 800129e:	e6fa      	b.n	8001096 <__aeabi_ddiv+0x342>
 80012a0:	469a      	mov	sl, r3
 80012a2:	e71c      	b.n	80010de <__aeabi_ddiv+0x38a>
 80012a4:	42b0      	cmp	r0, r6
 80012a6:	d839      	bhi.n	800131c <__aeabi_ddiv+0x5c8>
 80012a8:	d06e      	beq.n	8001388 <__aeabi_ddiv+0x634>
 80012aa:	0011      	movs	r1, r2
 80012ac:	e73a      	b.n	8001124 <__aeabi_ddiv+0x3d0>
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	e73a      	b.n	8001128 <__aeabi_ddiv+0x3d4>
 80012b2:	2a1f      	cmp	r2, #31
 80012b4:	dc3c      	bgt.n	8001330 <__aeabi_ddiv+0x5dc>
 80012b6:	2320      	movs	r3, #32
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	000c      	movs	r4, r1
 80012bc:	4658      	mov	r0, fp
 80012be:	4099      	lsls	r1, r3
 80012c0:	4098      	lsls	r0, r3
 80012c2:	1e4b      	subs	r3, r1, #1
 80012c4:	4199      	sbcs	r1, r3
 80012c6:	465b      	mov	r3, fp
 80012c8:	40d4      	lsrs	r4, r2
 80012ca:	40d3      	lsrs	r3, r2
 80012cc:	4320      	orrs	r0, r4
 80012ce:	4308      	orrs	r0, r1
 80012d0:	001a      	movs	r2, r3
 80012d2:	0743      	lsls	r3, r0, #29
 80012d4:	d009      	beq.n	80012ea <__aeabi_ddiv+0x596>
 80012d6:	230f      	movs	r3, #15
 80012d8:	4003      	ands	r3, r0
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d005      	beq.n	80012ea <__aeabi_ddiv+0x596>
 80012de:	0001      	movs	r1, r0
 80012e0:	1d08      	adds	r0, r1, #4
 80012e2:	4288      	cmp	r0, r1
 80012e4:	419b      	sbcs	r3, r3
 80012e6:	425b      	negs	r3, r3
 80012e8:	18d2      	adds	r2, r2, r3
 80012ea:	0213      	lsls	r3, r2, #8
 80012ec:	d53a      	bpl.n	8001364 <__aeabi_ddiv+0x610>
 80012ee:	2301      	movs	r3, #1
 80012f0:	9a02      	ldr	r2, [sp, #8]
 80012f2:	2401      	movs	r4, #1
 80012f4:	401a      	ands	r2, r3
 80012f6:	2300      	movs	r3, #0
 80012f8:	4694      	mov	ip, r2
 80012fa:	4698      	mov	r8, r3
 80012fc:	2200      	movs	r2, #0
 80012fe:	e5f7      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 8001300:	2102      	movs	r1, #2
 8001302:	4249      	negs	r1, r1
 8001304:	468c      	mov	ip, r1
 8001306:	9d03      	ldr	r5, [sp, #12]
 8001308:	44e3      	add	fp, ip
 800130a:	46ac      	mov	ip, r5
 800130c:	44e2      	add	sl, ip
 800130e:	45aa      	cmp	sl, r5
 8001310:	41ad      	sbcs	r5, r5
 8001312:	426d      	negs	r5, r5
 8001314:	4445      	add	r5, r8
 8001316:	18ed      	adds	r5, r5, r3
 8001318:	1a2d      	subs	r5, r5, r0
 800131a:	e696      	b.n	800104a <__aeabi_ddiv+0x2f6>
 800131c:	1e8a      	subs	r2, r1, #2
 800131e:	9903      	ldr	r1, [sp, #12]
 8001320:	004d      	lsls	r5, r1, #1
 8001322:	428d      	cmp	r5, r1
 8001324:	4189      	sbcs	r1, r1
 8001326:	4249      	negs	r1, r1
 8001328:	4441      	add	r1, r8
 800132a:	1876      	adds	r6, r6, r1
 800132c:	9503      	str	r5, [sp, #12]
 800132e:	e78f      	b.n	8001250 <__aeabi_ddiv+0x4fc>
 8001330:	201f      	movs	r0, #31
 8001332:	4240      	negs	r0, r0
 8001334:	1ac3      	subs	r3, r0, r3
 8001336:	4658      	mov	r0, fp
 8001338:	40d8      	lsrs	r0, r3
 800133a:	0003      	movs	r3, r0
 800133c:	2a20      	cmp	r2, #32
 800133e:	d028      	beq.n	8001392 <__aeabi_ddiv+0x63e>
 8001340:	2040      	movs	r0, #64	; 0x40
 8001342:	465d      	mov	r5, fp
 8001344:	1a82      	subs	r2, r0, r2
 8001346:	4095      	lsls	r5, r2
 8001348:	4329      	orrs	r1, r5
 800134a:	1e4a      	subs	r2, r1, #1
 800134c:	4191      	sbcs	r1, r2
 800134e:	4319      	orrs	r1, r3
 8001350:	2307      	movs	r3, #7
 8001352:	2200      	movs	r2, #0
 8001354:	400b      	ands	r3, r1
 8001356:	d009      	beq.n	800136c <__aeabi_ddiv+0x618>
 8001358:	230f      	movs	r3, #15
 800135a:	2200      	movs	r2, #0
 800135c:	400b      	ands	r3, r1
 800135e:	0008      	movs	r0, r1
 8001360:	2b04      	cmp	r3, #4
 8001362:	d1bd      	bne.n	80012e0 <__aeabi_ddiv+0x58c>
 8001364:	0001      	movs	r1, r0
 8001366:	0753      	lsls	r3, r2, #29
 8001368:	0252      	lsls	r2, r2, #9
 800136a:	0b12      	lsrs	r2, r2, #12
 800136c:	08c9      	lsrs	r1, r1, #3
 800136e:	4319      	orrs	r1, r3
 8001370:	2301      	movs	r3, #1
 8001372:	4688      	mov	r8, r1
 8001374:	9902      	ldr	r1, [sp, #8]
 8001376:	2400      	movs	r4, #0
 8001378:	4019      	ands	r1, r3
 800137a:	468c      	mov	ip, r1
 800137c:	e5b8      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 800137e:	4552      	cmp	r2, sl
 8001380:	d8be      	bhi.n	8001300 <__aeabi_ddiv+0x5ac>
 8001382:	468b      	mov	fp, r1
 8001384:	2500      	movs	r5, #0
 8001386:	e660      	b.n	800104a <__aeabi_ddiv+0x2f6>
 8001388:	9d03      	ldr	r5, [sp, #12]
 800138a:	429d      	cmp	r5, r3
 800138c:	d3c6      	bcc.n	800131c <__aeabi_ddiv+0x5c8>
 800138e:	0011      	movs	r1, r2
 8001390:	e762      	b.n	8001258 <__aeabi_ddiv+0x504>
 8001392:	2500      	movs	r5, #0
 8001394:	e7d8      	b.n	8001348 <__aeabi_ddiv+0x5f4>
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	465b      	mov	r3, fp
 800139a:	0312      	lsls	r2, r2, #12
 800139c:	431a      	orrs	r2, r3
 800139e:	9b01      	ldr	r3, [sp, #4]
 80013a0:	0312      	lsls	r2, r2, #12
 80013a2:	0b12      	lsrs	r2, r2, #12
 80013a4:	469c      	mov	ip, r3
 80013a6:	4688      	mov	r8, r1
 80013a8:	4c03      	ldr	r4, [pc, #12]	; (80013b8 <__aeabi_ddiv+0x664>)
 80013aa:	e5a1      	b.n	8000ef0 <__aeabi_ddiv+0x19c>
 80013ac:	000003ff 	.word	0x000003ff
 80013b0:	feffffff 	.word	0xfeffffff
 80013b4:	000007fe 	.word	0x000007fe
 80013b8:	000007ff 	.word	0x000007ff

080013bc <__aeabi_dmul>:
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	4657      	mov	r7, sl
 80013c0:	4645      	mov	r5, r8
 80013c2:	46de      	mov	lr, fp
 80013c4:	464e      	mov	r6, r9
 80013c6:	b5e0      	push	{r5, r6, r7, lr}
 80013c8:	030c      	lsls	r4, r1, #12
 80013ca:	4698      	mov	r8, r3
 80013cc:	004e      	lsls	r6, r1, #1
 80013ce:	0b23      	lsrs	r3, r4, #12
 80013d0:	b087      	sub	sp, #28
 80013d2:	0007      	movs	r7, r0
 80013d4:	4692      	mov	sl, r2
 80013d6:	469b      	mov	fp, r3
 80013d8:	0d76      	lsrs	r6, r6, #21
 80013da:	0fcd      	lsrs	r5, r1, #31
 80013dc:	2e00      	cmp	r6, #0
 80013de:	d06b      	beq.n	80014b8 <__aeabi_dmul+0xfc>
 80013e0:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <__aeabi_dmul+0x1dc>)
 80013e2:	429e      	cmp	r6, r3
 80013e4:	d035      	beq.n	8001452 <__aeabi_dmul+0x96>
 80013e6:	2480      	movs	r4, #128	; 0x80
 80013e8:	465b      	mov	r3, fp
 80013ea:	0f42      	lsrs	r2, r0, #29
 80013ec:	0424      	lsls	r4, r4, #16
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4314      	orrs	r4, r2
 80013f2:	431c      	orrs	r4, r3
 80013f4:	00c3      	lsls	r3, r0, #3
 80013f6:	4699      	mov	r9, r3
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <__aeabi_dmul+0x1e0>)
 80013fa:	46a3      	mov	fp, r4
 80013fc:	469c      	mov	ip, r3
 80013fe:	2300      	movs	r3, #0
 8001400:	2700      	movs	r7, #0
 8001402:	4466      	add	r6, ip
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	4643      	mov	r3, r8
 8001408:	031c      	lsls	r4, r3, #12
 800140a:	005a      	lsls	r2, r3, #1
 800140c:	0fdb      	lsrs	r3, r3, #31
 800140e:	4650      	mov	r0, sl
 8001410:	0b24      	lsrs	r4, r4, #12
 8001412:	0d52      	lsrs	r2, r2, #21
 8001414:	4698      	mov	r8, r3
 8001416:	d100      	bne.n	800141a <__aeabi_dmul+0x5e>
 8001418:	e076      	b.n	8001508 <__aeabi_dmul+0x14c>
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <__aeabi_dmul+0x1dc>)
 800141c:	429a      	cmp	r2, r3
 800141e:	d06d      	beq.n	80014fc <__aeabi_dmul+0x140>
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	0f41      	lsrs	r1, r0, #29
 8001424:	041b      	lsls	r3, r3, #16
 8001426:	430b      	orrs	r3, r1
 8001428:	495c      	ldr	r1, [pc, #368]	; (800159c <__aeabi_dmul+0x1e0>)
 800142a:	00e4      	lsls	r4, r4, #3
 800142c:	468c      	mov	ip, r1
 800142e:	431c      	orrs	r4, r3
 8001430:	00c3      	lsls	r3, r0, #3
 8001432:	2000      	movs	r0, #0
 8001434:	4462      	add	r2, ip
 8001436:	4641      	mov	r1, r8
 8001438:	18b6      	adds	r6, r6, r2
 800143a:	4069      	eors	r1, r5
 800143c:	1c72      	adds	r2, r6, #1
 800143e:	9101      	str	r1, [sp, #4]
 8001440:	4694      	mov	ip, r2
 8001442:	4307      	orrs	r7, r0
 8001444:	2f0f      	cmp	r7, #15
 8001446:	d900      	bls.n	800144a <__aeabi_dmul+0x8e>
 8001448:	e0b0      	b.n	80015ac <__aeabi_dmul+0x1f0>
 800144a:	4a55      	ldr	r2, [pc, #340]	; (80015a0 <__aeabi_dmul+0x1e4>)
 800144c:	00bf      	lsls	r7, r7, #2
 800144e:	59d2      	ldr	r2, [r2, r7]
 8001450:	4697      	mov	pc, r2
 8001452:	465b      	mov	r3, fp
 8001454:	4303      	orrs	r3, r0
 8001456:	4699      	mov	r9, r3
 8001458:	d000      	beq.n	800145c <__aeabi_dmul+0xa0>
 800145a:	e087      	b.n	800156c <__aeabi_dmul+0x1b0>
 800145c:	2300      	movs	r3, #0
 800145e:	469b      	mov	fp, r3
 8001460:	3302      	adds	r3, #2
 8001462:	2708      	movs	r7, #8
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	e7ce      	b.n	8001406 <__aeabi_dmul+0x4a>
 8001468:	4642      	mov	r2, r8
 800146a:	9201      	str	r2, [sp, #4]
 800146c:	2802      	cmp	r0, #2
 800146e:	d067      	beq.n	8001540 <__aeabi_dmul+0x184>
 8001470:	2803      	cmp	r0, #3
 8001472:	d100      	bne.n	8001476 <__aeabi_dmul+0xba>
 8001474:	e20e      	b.n	8001894 <__aeabi_dmul+0x4d8>
 8001476:	2801      	cmp	r0, #1
 8001478:	d000      	beq.n	800147c <__aeabi_dmul+0xc0>
 800147a:	e162      	b.n	8001742 <__aeabi_dmul+0x386>
 800147c:	2300      	movs	r3, #0
 800147e:	2400      	movs	r4, #0
 8001480:	2200      	movs	r2, #0
 8001482:	4699      	mov	r9, r3
 8001484:	9901      	ldr	r1, [sp, #4]
 8001486:	4001      	ands	r1, r0
 8001488:	b2cd      	uxtb	r5, r1
 800148a:	2100      	movs	r1, #0
 800148c:	0312      	lsls	r2, r2, #12
 800148e:	0d0b      	lsrs	r3, r1, #20
 8001490:	0b12      	lsrs	r2, r2, #12
 8001492:	051b      	lsls	r3, r3, #20
 8001494:	4313      	orrs	r3, r2
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <__aeabi_dmul+0x1e8>)
 8001498:	0524      	lsls	r4, r4, #20
 800149a:	4013      	ands	r3, r2
 800149c:	431c      	orrs	r4, r3
 800149e:	0064      	lsls	r4, r4, #1
 80014a0:	07ed      	lsls	r5, r5, #31
 80014a2:	0864      	lsrs	r4, r4, #1
 80014a4:	432c      	orrs	r4, r5
 80014a6:	4648      	mov	r0, r9
 80014a8:	0021      	movs	r1, r4
 80014aa:	b007      	add	sp, #28
 80014ac:	bc3c      	pop	{r2, r3, r4, r5}
 80014ae:	4690      	mov	r8, r2
 80014b0:	4699      	mov	r9, r3
 80014b2:	46a2      	mov	sl, r4
 80014b4:	46ab      	mov	fp, r5
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	4303      	orrs	r3, r0
 80014ba:	4699      	mov	r9, r3
 80014bc:	d04f      	beq.n	800155e <__aeabi_dmul+0x1a2>
 80014be:	465b      	mov	r3, fp
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dmul+0x10a>
 80014c4:	e189      	b.n	80017da <__aeabi_dmul+0x41e>
 80014c6:	4658      	mov	r0, fp
 80014c8:	f000 fdd0 	bl	800206c <__clzsi2>
 80014cc:	0003      	movs	r3, r0
 80014ce:	3b0b      	subs	r3, #11
 80014d0:	2b1c      	cmp	r3, #28
 80014d2:	dd00      	ble.n	80014d6 <__aeabi_dmul+0x11a>
 80014d4:	e17a      	b.n	80017cc <__aeabi_dmul+0x410>
 80014d6:	221d      	movs	r2, #29
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	003a      	movs	r2, r7
 80014dc:	0001      	movs	r1, r0
 80014de:	465c      	mov	r4, fp
 80014e0:	40da      	lsrs	r2, r3
 80014e2:	3908      	subs	r1, #8
 80014e4:	408c      	lsls	r4, r1
 80014e6:	0013      	movs	r3, r2
 80014e8:	408f      	lsls	r7, r1
 80014ea:	4323      	orrs	r3, r4
 80014ec:	469b      	mov	fp, r3
 80014ee:	46b9      	mov	r9, r7
 80014f0:	2300      	movs	r3, #0
 80014f2:	4e2d      	ldr	r6, [pc, #180]	; (80015a8 <__aeabi_dmul+0x1ec>)
 80014f4:	2700      	movs	r7, #0
 80014f6:	1a36      	subs	r6, r6, r0
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	e784      	b.n	8001406 <__aeabi_dmul+0x4a>
 80014fc:	4653      	mov	r3, sl
 80014fe:	4323      	orrs	r3, r4
 8001500:	d12a      	bne.n	8001558 <__aeabi_dmul+0x19c>
 8001502:	2400      	movs	r4, #0
 8001504:	2002      	movs	r0, #2
 8001506:	e796      	b.n	8001436 <__aeabi_dmul+0x7a>
 8001508:	4653      	mov	r3, sl
 800150a:	4323      	orrs	r3, r4
 800150c:	d020      	beq.n	8001550 <__aeabi_dmul+0x194>
 800150e:	2c00      	cmp	r4, #0
 8001510:	d100      	bne.n	8001514 <__aeabi_dmul+0x158>
 8001512:	e157      	b.n	80017c4 <__aeabi_dmul+0x408>
 8001514:	0020      	movs	r0, r4
 8001516:	f000 fda9 	bl	800206c <__clzsi2>
 800151a:	0003      	movs	r3, r0
 800151c:	3b0b      	subs	r3, #11
 800151e:	2b1c      	cmp	r3, #28
 8001520:	dd00      	ble.n	8001524 <__aeabi_dmul+0x168>
 8001522:	e149      	b.n	80017b8 <__aeabi_dmul+0x3fc>
 8001524:	211d      	movs	r1, #29
 8001526:	1acb      	subs	r3, r1, r3
 8001528:	4651      	mov	r1, sl
 800152a:	0002      	movs	r2, r0
 800152c:	40d9      	lsrs	r1, r3
 800152e:	4653      	mov	r3, sl
 8001530:	3a08      	subs	r2, #8
 8001532:	4094      	lsls	r4, r2
 8001534:	4093      	lsls	r3, r2
 8001536:	430c      	orrs	r4, r1
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <__aeabi_dmul+0x1ec>)
 800153a:	1a12      	subs	r2, r2, r0
 800153c:	2000      	movs	r0, #0
 800153e:	e77a      	b.n	8001436 <__aeabi_dmul+0x7a>
 8001540:	2501      	movs	r5, #1
 8001542:	9b01      	ldr	r3, [sp, #4]
 8001544:	4c14      	ldr	r4, [pc, #80]	; (8001598 <__aeabi_dmul+0x1dc>)
 8001546:	401d      	ands	r5, r3
 8001548:	2300      	movs	r3, #0
 800154a:	2200      	movs	r2, #0
 800154c:	4699      	mov	r9, r3
 800154e:	e79c      	b.n	800148a <__aeabi_dmul+0xce>
 8001550:	2400      	movs	r4, #0
 8001552:	2200      	movs	r2, #0
 8001554:	2001      	movs	r0, #1
 8001556:	e76e      	b.n	8001436 <__aeabi_dmul+0x7a>
 8001558:	4653      	mov	r3, sl
 800155a:	2003      	movs	r0, #3
 800155c:	e76b      	b.n	8001436 <__aeabi_dmul+0x7a>
 800155e:	2300      	movs	r3, #0
 8001560:	469b      	mov	fp, r3
 8001562:	3301      	adds	r3, #1
 8001564:	2704      	movs	r7, #4
 8001566:	2600      	movs	r6, #0
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	e74c      	b.n	8001406 <__aeabi_dmul+0x4a>
 800156c:	2303      	movs	r3, #3
 800156e:	4681      	mov	r9, r0
 8001570:	270c      	movs	r7, #12
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	e747      	b.n	8001406 <__aeabi_dmul+0x4a>
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	2300      	movs	r3, #0
 800157a:	2500      	movs	r5, #0
 800157c:	0312      	lsls	r2, r2, #12
 800157e:	4699      	mov	r9, r3
 8001580:	4c05      	ldr	r4, [pc, #20]	; (8001598 <__aeabi_dmul+0x1dc>)
 8001582:	e782      	b.n	800148a <__aeabi_dmul+0xce>
 8001584:	465c      	mov	r4, fp
 8001586:	464b      	mov	r3, r9
 8001588:	9802      	ldr	r0, [sp, #8]
 800158a:	e76f      	b.n	800146c <__aeabi_dmul+0xb0>
 800158c:	465c      	mov	r4, fp
 800158e:	464b      	mov	r3, r9
 8001590:	9501      	str	r5, [sp, #4]
 8001592:	9802      	ldr	r0, [sp, #8]
 8001594:	e76a      	b.n	800146c <__aeabi_dmul+0xb0>
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	000007ff 	.word	0x000007ff
 800159c:	fffffc01 	.word	0xfffffc01
 80015a0:	08005a40 	.word	0x08005a40
 80015a4:	800fffff 	.word	0x800fffff
 80015a8:	fffffc0d 	.word	0xfffffc0d
 80015ac:	464a      	mov	r2, r9
 80015ae:	4649      	mov	r1, r9
 80015b0:	0c17      	lsrs	r7, r2, #16
 80015b2:	0c1a      	lsrs	r2, r3, #16
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	0408      	lsls	r0, r1, #16
 80015ba:	0019      	movs	r1, r3
 80015bc:	0c00      	lsrs	r0, r0, #16
 80015be:	4341      	muls	r1, r0
 80015c0:	0015      	movs	r5, r2
 80015c2:	4688      	mov	r8, r1
 80015c4:	0019      	movs	r1, r3
 80015c6:	437d      	muls	r5, r7
 80015c8:	4379      	muls	r1, r7
 80015ca:	9503      	str	r5, [sp, #12]
 80015cc:	4689      	mov	r9, r1
 80015ce:	0029      	movs	r1, r5
 80015d0:	0015      	movs	r5, r2
 80015d2:	4345      	muls	r5, r0
 80015d4:	444d      	add	r5, r9
 80015d6:	9502      	str	r5, [sp, #8]
 80015d8:	4645      	mov	r5, r8
 80015da:	0c2d      	lsrs	r5, r5, #16
 80015dc:	46aa      	mov	sl, r5
 80015de:	9d02      	ldr	r5, [sp, #8]
 80015e0:	4455      	add	r5, sl
 80015e2:	45a9      	cmp	r9, r5
 80015e4:	d906      	bls.n	80015f4 <__aeabi_dmul+0x238>
 80015e6:	468a      	mov	sl, r1
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0249      	lsls	r1, r1, #9
 80015ec:	4689      	mov	r9, r1
 80015ee:	44ca      	add	sl, r9
 80015f0:	4651      	mov	r1, sl
 80015f2:	9103      	str	r1, [sp, #12]
 80015f4:	0c29      	lsrs	r1, r5, #16
 80015f6:	9104      	str	r1, [sp, #16]
 80015f8:	4641      	mov	r1, r8
 80015fa:	0409      	lsls	r1, r1, #16
 80015fc:	042d      	lsls	r5, r5, #16
 80015fe:	0c09      	lsrs	r1, r1, #16
 8001600:	4688      	mov	r8, r1
 8001602:	0029      	movs	r1, r5
 8001604:	0c25      	lsrs	r5, r4, #16
 8001606:	0424      	lsls	r4, r4, #16
 8001608:	4441      	add	r1, r8
 800160a:	0c24      	lsrs	r4, r4, #16
 800160c:	9105      	str	r1, [sp, #20]
 800160e:	0021      	movs	r1, r4
 8001610:	4341      	muls	r1, r0
 8001612:	4688      	mov	r8, r1
 8001614:	0021      	movs	r1, r4
 8001616:	4379      	muls	r1, r7
 8001618:	468a      	mov	sl, r1
 800161a:	4368      	muls	r0, r5
 800161c:	4641      	mov	r1, r8
 800161e:	4450      	add	r0, sl
 8001620:	4681      	mov	r9, r0
 8001622:	0c08      	lsrs	r0, r1, #16
 8001624:	4448      	add	r0, r9
 8001626:	436f      	muls	r7, r5
 8001628:	4582      	cmp	sl, r0
 800162a:	d903      	bls.n	8001634 <__aeabi_dmul+0x278>
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0249      	lsls	r1, r1, #9
 8001630:	4689      	mov	r9, r1
 8001632:	444f      	add	r7, r9
 8001634:	0c01      	lsrs	r1, r0, #16
 8001636:	4689      	mov	r9, r1
 8001638:	0039      	movs	r1, r7
 800163a:	4449      	add	r1, r9
 800163c:	9102      	str	r1, [sp, #8]
 800163e:	4641      	mov	r1, r8
 8001640:	040f      	lsls	r7, r1, #16
 8001642:	9904      	ldr	r1, [sp, #16]
 8001644:	0c3f      	lsrs	r7, r7, #16
 8001646:	4688      	mov	r8, r1
 8001648:	0400      	lsls	r0, r0, #16
 800164a:	19c0      	adds	r0, r0, r7
 800164c:	4480      	add	r8, r0
 800164e:	4641      	mov	r1, r8
 8001650:	9104      	str	r1, [sp, #16]
 8001652:	4659      	mov	r1, fp
 8001654:	0c0f      	lsrs	r7, r1, #16
 8001656:	0409      	lsls	r1, r1, #16
 8001658:	0c09      	lsrs	r1, r1, #16
 800165a:	4688      	mov	r8, r1
 800165c:	4359      	muls	r1, r3
 800165e:	468a      	mov	sl, r1
 8001660:	0039      	movs	r1, r7
 8001662:	4351      	muls	r1, r2
 8001664:	4689      	mov	r9, r1
 8001666:	4641      	mov	r1, r8
 8001668:	434a      	muls	r2, r1
 800166a:	4651      	mov	r1, sl
 800166c:	0c09      	lsrs	r1, r1, #16
 800166e:	468b      	mov	fp, r1
 8001670:	437b      	muls	r3, r7
 8001672:	18d2      	adds	r2, r2, r3
 8001674:	445a      	add	r2, fp
 8001676:	4293      	cmp	r3, r2
 8001678:	d903      	bls.n	8001682 <__aeabi_dmul+0x2c6>
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	025b      	lsls	r3, r3, #9
 800167e:	469b      	mov	fp, r3
 8001680:	44d9      	add	r9, fp
 8001682:	4651      	mov	r1, sl
 8001684:	0409      	lsls	r1, r1, #16
 8001686:	0c09      	lsrs	r1, r1, #16
 8001688:	468a      	mov	sl, r1
 800168a:	4641      	mov	r1, r8
 800168c:	4361      	muls	r1, r4
 800168e:	437c      	muls	r4, r7
 8001690:	0c13      	lsrs	r3, r2, #16
 8001692:	0412      	lsls	r2, r2, #16
 8001694:	444b      	add	r3, r9
 8001696:	4452      	add	r2, sl
 8001698:	46a1      	mov	r9, r4
 800169a:	468a      	mov	sl, r1
 800169c:	003c      	movs	r4, r7
 800169e:	4641      	mov	r1, r8
 80016a0:	436c      	muls	r4, r5
 80016a2:	434d      	muls	r5, r1
 80016a4:	4651      	mov	r1, sl
 80016a6:	444d      	add	r5, r9
 80016a8:	0c0f      	lsrs	r7, r1, #16
 80016aa:	197d      	adds	r5, r7, r5
 80016ac:	45a9      	cmp	r9, r5
 80016ae:	d903      	bls.n	80016b8 <__aeabi_dmul+0x2fc>
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0249      	lsls	r1, r1, #9
 80016b4:	4688      	mov	r8, r1
 80016b6:	4444      	add	r4, r8
 80016b8:	9f04      	ldr	r7, [sp, #16]
 80016ba:	9903      	ldr	r1, [sp, #12]
 80016bc:	46b8      	mov	r8, r7
 80016be:	4441      	add	r1, r8
 80016c0:	468b      	mov	fp, r1
 80016c2:	4583      	cmp	fp, r0
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	4241      	negs	r1, r0
 80016c8:	4688      	mov	r8, r1
 80016ca:	4651      	mov	r1, sl
 80016cc:	0408      	lsls	r0, r1, #16
 80016ce:	042f      	lsls	r7, r5, #16
 80016d0:	0c00      	lsrs	r0, r0, #16
 80016d2:	183f      	adds	r7, r7, r0
 80016d4:	4658      	mov	r0, fp
 80016d6:	9902      	ldr	r1, [sp, #8]
 80016d8:	1810      	adds	r0, r2, r0
 80016da:	4689      	mov	r9, r1
 80016dc:	4290      	cmp	r0, r2
 80016de:	4192      	sbcs	r2, r2
 80016e0:	444f      	add	r7, r9
 80016e2:	46ba      	mov	sl, r7
 80016e4:	4252      	negs	r2, r2
 80016e6:	4699      	mov	r9, r3
 80016e8:	4693      	mov	fp, r2
 80016ea:	44c2      	add	sl, r8
 80016ec:	44d1      	add	r9, sl
 80016ee:	44cb      	add	fp, r9
 80016f0:	428f      	cmp	r7, r1
 80016f2:	41bf      	sbcs	r7, r7
 80016f4:	45c2      	cmp	sl, r8
 80016f6:	4189      	sbcs	r1, r1
 80016f8:	4599      	cmp	r9, r3
 80016fa:	419b      	sbcs	r3, r3
 80016fc:	4593      	cmp	fp, r2
 80016fe:	4192      	sbcs	r2, r2
 8001700:	427f      	negs	r7, r7
 8001702:	4249      	negs	r1, r1
 8001704:	0c2d      	lsrs	r5, r5, #16
 8001706:	4252      	negs	r2, r2
 8001708:	430f      	orrs	r7, r1
 800170a:	425b      	negs	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	197f      	adds	r7, r7, r5
 8001710:	18ff      	adds	r7, r7, r3
 8001712:	465b      	mov	r3, fp
 8001714:	193c      	adds	r4, r7, r4
 8001716:	0ddb      	lsrs	r3, r3, #23
 8001718:	9a05      	ldr	r2, [sp, #20]
 800171a:	0264      	lsls	r4, r4, #9
 800171c:	431c      	orrs	r4, r3
 800171e:	0243      	lsls	r3, r0, #9
 8001720:	4313      	orrs	r3, r2
 8001722:	1e5d      	subs	r5, r3, #1
 8001724:	41ab      	sbcs	r3, r5
 8001726:	465a      	mov	r2, fp
 8001728:	0dc0      	lsrs	r0, r0, #23
 800172a:	4303      	orrs	r3, r0
 800172c:	0252      	lsls	r2, r2, #9
 800172e:	4313      	orrs	r3, r2
 8001730:	01e2      	lsls	r2, r4, #7
 8001732:	d556      	bpl.n	80017e2 <__aeabi_dmul+0x426>
 8001734:	2001      	movs	r0, #1
 8001736:	085a      	lsrs	r2, r3, #1
 8001738:	4003      	ands	r3, r0
 800173a:	4313      	orrs	r3, r2
 800173c:	07e2      	lsls	r2, r4, #31
 800173e:	4313      	orrs	r3, r2
 8001740:	0864      	lsrs	r4, r4, #1
 8001742:	485a      	ldr	r0, [pc, #360]	; (80018ac <__aeabi_dmul+0x4f0>)
 8001744:	4460      	add	r0, ip
 8001746:	2800      	cmp	r0, #0
 8001748:	dd4d      	ble.n	80017e6 <__aeabi_dmul+0x42a>
 800174a:	075a      	lsls	r2, r3, #29
 800174c:	d009      	beq.n	8001762 <__aeabi_dmul+0x3a6>
 800174e:	220f      	movs	r2, #15
 8001750:	401a      	ands	r2, r3
 8001752:	2a04      	cmp	r2, #4
 8001754:	d005      	beq.n	8001762 <__aeabi_dmul+0x3a6>
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	429a      	cmp	r2, r3
 800175a:	419b      	sbcs	r3, r3
 800175c:	425b      	negs	r3, r3
 800175e:	18e4      	adds	r4, r4, r3
 8001760:	0013      	movs	r3, r2
 8001762:	01e2      	lsls	r2, r4, #7
 8001764:	d504      	bpl.n	8001770 <__aeabi_dmul+0x3b4>
 8001766:	2080      	movs	r0, #128	; 0x80
 8001768:	4a51      	ldr	r2, [pc, #324]	; (80018b0 <__aeabi_dmul+0x4f4>)
 800176a:	00c0      	lsls	r0, r0, #3
 800176c:	4014      	ands	r4, r2
 800176e:	4460      	add	r0, ip
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <__aeabi_dmul+0x4f8>)
 8001772:	4290      	cmp	r0, r2
 8001774:	dd00      	ble.n	8001778 <__aeabi_dmul+0x3bc>
 8001776:	e6e3      	b.n	8001540 <__aeabi_dmul+0x184>
 8001778:	2501      	movs	r5, #1
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	0762      	lsls	r2, r4, #29
 800177e:	431a      	orrs	r2, r3
 8001780:	0264      	lsls	r4, r4, #9
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	4691      	mov	r9, r2
 8001786:	0b22      	lsrs	r2, r4, #12
 8001788:	0544      	lsls	r4, r0, #21
 800178a:	0d64      	lsrs	r4, r4, #21
 800178c:	401d      	ands	r5, r3
 800178e:	e67c      	b.n	800148a <__aeabi_dmul+0xce>
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	4659      	mov	r1, fp
 8001794:	0312      	lsls	r2, r2, #12
 8001796:	4211      	tst	r1, r2
 8001798:	d008      	beq.n	80017ac <__aeabi_dmul+0x3f0>
 800179a:	4214      	tst	r4, r2
 800179c:	d106      	bne.n	80017ac <__aeabi_dmul+0x3f0>
 800179e:	4322      	orrs	r2, r4
 80017a0:	0312      	lsls	r2, r2, #12
 80017a2:	0b12      	lsrs	r2, r2, #12
 80017a4:	4645      	mov	r5, r8
 80017a6:	4699      	mov	r9, r3
 80017a8:	4c43      	ldr	r4, [pc, #268]	; (80018b8 <__aeabi_dmul+0x4fc>)
 80017aa:	e66e      	b.n	800148a <__aeabi_dmul+0xce>
 80017ac:	465b      	mov	r3, fp
 80017ae:	431a      	orrs	r2, r3
 80017b0:	0312      	lsls	r2, r2, #12
 80017b2:	0b12      	lsrs	r2, r2, #12
 80017b4:	4c40      	ldr	r4, [pc, #256]	; (80018b8 <__aeabi_dmul+0x4fc>)
 80017b6:	e668      	b.n	800148a <__aeabi_dmul+0xce>
 80017b8:	0003      	movs	r3, r0
 80017ba:	4654      	mov	r4, sl
 80017bc:	3b28      	subs	r3, #40	; 0x28
 80017be:	409c      	lsls	r4, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	e6b9      	b.n	8001538 <__aeabi_dmul+0x17c>
 80017c4:	f000 fc52 	bl	800206c <__clzsi2>
 80017c8:	3020      	adds	r0, #32
 80017ca:	e6a6      	b.n	800151a <__aeabi_dmul+0x15e>
 80017cc:	0003      	movs	r3, r0
 80017ce:	3b28      	subs	r3, #40	; 0x28
 80017d0:	409f      	lsls	r7, r3
 80017d2:	2300      	movs	r3, #0
 80017d4:	46bb      	mov	fp, r7
 80017d6:	4699      	mov	r9, r3
 80017d8:	e68a      	b.n	80014f0 <__aeabi_dmul+0x134>
 80017da:	f000 fc47 	bl	800206c <__clzsi2>
 80017de:	3020      	adds	r0, #32
 80017e0:	e674      	b.n	80014cc <__aeabi_dmul+0x110>
 80017e2:	46b4      	mov	ip, r6
 80017e4:	e7ad      	b.n	8001742 <__aeabi_dmul+0x386>
 80017e6:	2501      	movs	r5, #1
 80017e8:	1a2a      	subs	r2, r5, r0
 80017ea:	2a38      	cmp	r2, #56	; 0x38
 80017ec:	dd06      	ble.n	80017fc <__aeabi_dmul+0x440>
 80017ee:	9b01      	ldr	r3, [sp, #4]
 80017f0:	2400      	movs	r4, #0
 80017f2:	401d      	ands	r5, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	2200      	movs	r2, #0
 80017f8:	4699      	mov	r9, r3
 80017fa:	e646      	b.n	800148a <__aeabi_dmul+0xce>
 80017fc:	2a1f      	cmp	r2, #31
 80017fe:	dc21      	bgt.n	8001844 <__aeabi_dmul+0x488>
 8001800:	2520      	movs	r5, #32
 8001802:	0020      	movs	r0, r4
 8001804:	1aad      	subs	r5, r5, r2
 8001806:	001e      	movs	r6, r3
 8001808:	40ab      	lsls	r3, r5
 800180a:	40a8      	lsls	r0, r5
 800180c:	40d6      	lsrs	r6, r2
 800180e:	1e5d      	subs	r5, r3, #1
 8001810:	41ab      	sbcs	r3, r5
 8001812:	4330      	orrs	r0, r6
 8001814:	4318      	orrs	r0, r3
 8001816:	40d4      	lsrs	r4, r2
 8001818:	0743      	lsls	r3, r0, #29
 800181a:	d009      	beq.n	8001830 <__aeabi_dmul+0x474>
 800181c:	230f      	movs	r3, #15
 800181e:	4003      	ands	r3, r0
 8001820:	2b04      	cmp	r3, #4
 8001822:	d005      	beq.n	8001830 <__aeabi_dmul+0x474>
 8001824:	0003      	movs	r3, r0
 8001826:	1d18      	adds	r0, r3, #4
 8001828:	4298      	cmp	r0, r3
 800182a:	419b      	sbcs	r3, r3
 800182c:	425b      	negs	r3, r3
 800182e:	18e4      	adds	r4, r4, r3
 8001830:	0223      	lsls	r3, r4, #8
 8001832:	d521      	bpl.n	8001878 <__aeabi_dmul+0x4bc>
 8001834:	2501      	movs	r5, #1
 8001836:	9b01      	ldr	r3, [sp, #4]
 8001838:	2401      	movs	r4, #1
 800183a:	401d      	ands	r5, r3
 800183c:	2300      	movs	r3, #0
 800183e:	2200      	movs	r2, #0
 8001840:	4699      	mov	r9, r3
 8001842:	e622      	b.n	800148a <__aeabi_dmul+0xce>
 8001844:	251f      	movs	r5, #31
 8001846:	0021      	movs	r1, r4
 8001848:	426d      	negs	r5, r5
 800184a:	1a28      	subs	r0, r5, r0
 800184c:	40c1      	lsrs	r1, r0
 800184e:	0008      	movs	r0, r1
 8001850:	2a20      	cmp	r2, #32
 8001852:	d01d      	beq.n	8001890 <__aeabi_dmul+0x4d4>
 8001854:	355f      	adds	r5, #95	; 0x5f
 8001856:	1aaa      	subs	r2, r5, r2
 8001858:	4094      	lsls	r4, r2
 800185a:	4323      	orrs	r3, r4
 800185c:	1e5c      	subs	r4, r3, #1
 800185e:	41a3      	sbcs	r3, r4
 8001860:	2507      	movs	r5, #7
 8001862:	4303      	orrs	r3, r0
 8001864:	401d      	ands	r5, r3
 8001866:	2200      	movs	r2, #0
 8001868:	2d00      	cmp	r5, #0
 800186a:	d009      	beq.n	8001880 <__aeabi_dmul+0x4c4>
 800186c:	220f      	movs	r2, #15
 800186e:	2400      	movs	r4, #0
 8001870:	401a      	ands	r2, r3
 8001872:	0018      	movs	r0, r3
 8001874:	2a04      	cmp	r2, #4
 8001876:	d1d6      	bne.n	8001826 <__aeabi_dmul+0x46a>
 8001878:	0003      	movs	r3, r0
 800187a:	0765      	lsls	r5, r4, #29
 800187c:	0264      	lsls	r4, r4, #9
 800187e:	0b22      	lsrs	r2, r4, #12
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	432b      	orrs	r3, r5
 8001884:	2501      	movs	r5, #1
 8001886:	4699      	mov	r9, r3
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	2400      	movs	r4, #0
 800188c:	401d      	ands	r5, r3
 800188e:	e5fc      	b.n	800148a <__aeabi_dmul+0xce>
 8001890:	2400      	movs	r4, #0
 8001892:	e7e2      	b.n	800185a <__aeabi_dmul+0x49e>
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	2501      	movs	r5, #1
 8001898:	0312      	lsls	r2, r2, #12
 800189a:	4322      	orrs	r2, r4
 800189c:	9901      	ldr	r1, [sp, #4]
 800189e:	0312      	lsls	r2, r2, #12
 80018a0:	0b12      	lsrs	r2, r2, #12
 80018a2:	400d      	ands	r5, r1
 80018a4:	4699      	mov	r9, r3
 80018a6:	4c04      	ldr	r4, [pc, #16]	; (80018b8 <__aeabi_dmul+0x4fc>)
 80018a8:	e5ef      	b.n	800148a <__aeabi_dmul+0xce>
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	000003ff 	.word	0x000003ff
 80018b0:	feffffff 	.word	0xfeffffff
 80018b4:	000007fe 	.word	0x000007fe
 80018b8:	000007ff 	.word	0x000007ff

080018bc <__aeabi_dsub>:
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	4646      	mov	r6, r8
 80018c0:	46d6      	mov	lr, sl
 80018c2:	464f      	mov	r7, r9
 80018c4:	030c      	lsls	r4, r1, #12
 80018c6:	b5c0      	push	{r6, r7, lr}
 80018c8:	0fcd      	lsrs	r5, r1, #31
 80018ca:	004e      	lsls	r6, r1, #1
 80018cc:	0a61      	lsrs	r1, r4, #9
 80018ce:	0f44      	lsrs	r4, r0, #29
 80018d0:	430c      	orrs	r4, r1
 80018d2:	00c1      	lsls	r1, r0, #3
 80018d4:	0058      	lsls	r0, r3, #1
 80018d6:	0d40      	lsrs	r0, r0, #21
 80018d8:	4684      	mov	ip, r0
 80018da:	468a      	mov	sl, r1
 80018dc:	000f      	movs	r7, r1
 80018de:	0319      	lsls	r1, r3, #12
 80018e0:	0f50      	lsrs	r0, r2, #29
 80018e2:	0a49      	lsrs	r1, r1, #9
 80018e4:	4301      	orrs	r1, r0
 80018e6:	48c6      	ldr	r0, [pc, #792]	; (8001c00 <__aeabi_dsub+0x344>)
 80018e8:	0d76      	lsrs	r6, r6, #21
 80018ea:	46a8      	mov	r8, r5
 80018ec:	0fdb      	lsrs	r3, r3, #31
 80018ee:	00d2      	lsls	r2, r2, #3
 80018f0:	4584      	cmp	ip, r0
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dsub+0x3a>
 80018f4:	e0d8      	b.n	8001aa8 <__aeabi_dsub+0x1ec>
 80018f6:	2001      	movs	r0, #1
 80018f8:	4043      	eors	r3, r0
 80018fa:	42ab      	cmp	r3, r5
 80018fc:	d100      	bne.n	8001900 <__aeabi_dsub+0x44>
 80018fe:	e0a6      	b.n	8001a4e <__aeabi_dsub+0x192>
 8001900:	4660      	mov	r0, ip
 8001902:	1a35      	subs	r5, r6, r0
 8001904:	2d00      	cmp	r5, #0
 8001906:	dc00      	bgt.n	800190a <__aeabi_dsub+0x4e>
 8001908:	e105      	b.n	8001b16 <__aeabi_dsub+0x25a>
 800190a:	2800      	cmp	r0, #0
 800190c:	d110      	bne.n	8001930 <__aeabi_dsub+0x74>
 800190e:	000b      	movs	r3, r1
 8001910:	4313      	orrs	r3, r2
 8001912:	d100      	bne.n	8001916 <__aeabi_dsub+0x5a>
 8001914:	e0d7      	b.n	8001ac6 <__aeabi_dsub+0x20a>
 8001916:	1e6b      	subs	r3, r5, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d000      	beq.n	800191e <__aeabi_dsub+0x62>
 800191c:	e14b      	b.n	8001bb6 <__aeabi_dsub+0x2fa>
 800191e:	4653      	mov	r3, sl
 8001920:	1a9f      	subs	r7, r3, r2
 8001922:	45ba      	cmp	sl, r7
 8001924:	4180      	sbcs	r0, r0
 8001926:	1a64      	subs	r4, r4, r1
 8001928:	4240      	negs	r0, r0
 800192a:	1a24      	subs	r4, r4, r0
 800192c:	2601      	movs	r6, #1
 800192e:	e01e      	b.n	800196e <__aeabi_dsub+0xb2>
 8001930:	4bb3      	ldr	r3, [pc, #716]	; (8001c00 <__aeabi_dsub+0x344>)
 8001932:	429e      	cmp	r6, r3
 8001934:	d048      	beq.n	80019c8 <__aeabi_dsub+0x10c>
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	041b      	lsls	r3, r3, #16
 800193a:	4319      	orrs	r1, r3
 800193c:	2d38      	cmp	r5, #56	; 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0x86>
 8001940:	e119      	b.n	8001b76 <__aeabi_dsub+0x2ba>
 8001942:	2d1f      	cmp	r5, #31
 8001944:	dd00      	ble.n	8001948 <__aeabi_dsub+0x8c>
 8001946:	e14c      	b.n	8001be2 <__aeabi_dsub+0x326>
 8001948:	2320      	movs	r3, #32
 800194a:	000f      	movs	r7, r1
 800194c:	1b5b      	subs	r3, r3, r5
 800194e:	0010      	movs	r0, r2
 8001950:	409a      	lsls	r2, r3
 8001952:	409f      	lsls	r7, r3
 8001954:	40e8      	lsrs	r0, r5
 8001956:	1e53      	subs	r3, r2, #1
 8001958:	419a      	sbcs	r2, r3
 800195a:	40e9      	lsrs	r1, r5
 800195c:	4307      	orrs	r7, r0
 800195e:	4317      	orrs	r7, r2
 8001960:	4653      	mov	r3, sl
 8001962:	1bdf      	subs	r7, r3, r7
 8001964:	1a61      	subs	r1, r4, r1
 8001966:	45ba      	cmp	sl, r7
 8001968:	41a4      	sbcs	r4, r4
 800196a:	4264      	negs	r4, r4
 800196c:	1b0c      	subs	r4, r1, r4
 800196e:	0223      	lsls	r3, r4, #8
 8001970:	d400      	bmi.n	8001974 <__aeabi_dsub+0xb8>
 8001972:	e0c5      	b.n	8001b00 <__aeabi_dsub+0x244>
 8001974:	0264      	lsls	r4, r4, #9
 8001976:	0a65      	lsrs	r5, r4, #9
 8001978:	2d00      	cmp	r5, #0
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0xc2>
 800197c:	e0f6      	b.n	8001b6c <__aeabi_dsub+0x2b0>
 800197e:	0028      	movs	r0, r5
 8001980:	f000 fb74 	bl	800206c <__clzsi2>
 8001984:	0003      	movs	r3, r0
 8001986:	3b08      	subs	r3, #8
 8001988:	2b1f      	cmp	r3, #31
 800198a:	dd00      	ble.n	800198e <__aeabi_dsub+0xd2>
 800198c:	e0e9      	b.n	8001b62 <__aeabi_dsub+0x2a6>
 800198e:	2220      	movs	r2, #32
 8001990:	003c      	movs	r4, r7
 8001992:	1ad2      	subs	r2, r2, r3
 8001994:	409d      	lsls	r5, r3
 8001996:	40d4      	lsrs	r4, r2
 8001998:	409f      	lsls	r7, r3
 800199a:	4325      	orrs	r5, r4
 800199c:	429e      	cmp	r6, r3
 800199e:	dd00      	ble.n	80019a2 <__aeabi_dsub+0xe6>
 80019a0:	e0db      	b.n	8001b5a <__aeabi_dsub+0x29e>
 80019a2:	1b9e      	subs	r6, r3, r6
 80019a4:	1c73      	adds	r3, r6, #1
 80019a6:	2b1f      	cmp	r3, #31
 80019a8:	dd00      	ble.n	80019ac <__aeabi_dsub+0xf0>
 80019aa:	e10a      	b.n	8001bc2 <__aeabi_dsub+0x306>
 80019ac:	2220      	movs	r2, #32
 80019ae:	0038      	movs	r0, r7
 80019b0:	1ad2      	subs	r2, r2, r3
 80019b2:	0029      	movs	r1, r5
 80019b4:	4097      	lsls	r7, r2
 80019b6:	002c      	movs	r4, r5
 80019b8:	4091      	lsls	r1, r2
 80019ba:	40d8      	lsrs	r0, r3
 80019bc:	1e7a      	subs	r2, r7, #1
 80019be:	4197      	sbcs	r7, r2
 80019c0:	40dc      	lsrs	r4, r3
 80019c2:	2600      	movs	r6, #0
 80019c4:	4301      	orrs	r1, r0
 80019c6:	430f      	orrs	r7, r1
 80019c8:	077b      	lsls	r3, r7, #29
 80019ca:	d009      	beq.n	80019e0 <__aeabi_dsub+0x124>
 80019cc:	230f      	movs	r3, #15
 80019ce:	403b      	ands	r3, r7
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d005      	beq.n	80019e0 <__aeabi_dsub+0x124>
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	42bb      	cmp	r3, r7
 80019d8:	41bf      	sbcs	r7, r7
 80019da:	427f      	negs	r7, r7
 80019dc:	19e4      	adds	r4, r4, r7
 80019de:	001f      	movs	r7, r3
 80019e0:	0223      	lsls	r3, r4, #8
 80019e2:	d525      	bpl.n	8001a30 <__aeabi_dsub+0x174>
 80019e4:	4b86      	ldr	r3, [pc, #536]	; (8001c00 <__aeabi_dsub+0x344>)
 80019e6:	3601      	adds	r6, #1
 80019e8:	429e      	cmp	r6, r3
 80019ea:	d100      	bne.n	80019ee <__aeabi_dsub+0x132>
 80019ec:	e0af      	b.n	8001b4e <__aeabi_dsub+0x292>
 80019ee:	4b85      	ldr	r3, [pc, #532]	; (8001c04 <__aeabi_dsub+0x348>)
 80019f0:	2501      	movs	r5, #1
 80019f2:	401c      	ands	r4, r3
 80019f4:	4643      	mov	r3, r8
 80019f6:	0762      	lsls	r2, r4, #29
 80019f8:	08ff      	lsrs	r7, r7, #3
 80019fa:	0264      	lsls	r4, r4, #9
 80019fc:	0576      	lsls	r6, r6, #21
 80019fe:	4317      	orrs	r7, r2
 8001a00:	0b24      	lsrs	r4, r4, #12
 8001a02:	0d76      	lsrs	r6, r6, #21
 8001a04:	401d      	ands	r5, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	0324      	lsls	r4, r4, #12
 8001a0a:	0b23      	lsrs	r3, r4, #12
 8001a0c:	0d0c      	lsrs	r4, r1, #20
 8001a0e:	4a7e      	ldr	r2, [pc, #504]	; (8001c08 <__aeabi_dsub+0x34c>)
 8001a10:	0524      	lsls	r4, r4, #20
 8001a12:	431c      	orrs	r4, r3
 8001a14:	4014      	ands	r4, r2
 8001a16:	0533      	lsls	r3, r6, #20
 8001a18:	4323      	orrs	r3, r4
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	07ed      	lsls	r5, r5, #31
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	432b      	orrs	r3, r5
 8001a22:	0038      	movs	r0, r7
 8001a24:	0019      	movs	r1, r3
 8001a26:	bc1c      	pop	{r2, r3, r4}
 8001a28:	4690      	mov	r8, r2
 8001a2a:	4699      	mov	r9, r3
 8001a2c:	46a2      	mov	sl, r4
 8001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a30:	2501      	movs	r5, #1
 8001a32:	4643      	mov	r3, r8
 8001a34:	0762      	lsls	r2, r4, #29
 8001a36:	08ff      	lsrs	r7, r7, #3
 8001a38:	4317      	orrs	r7, r2
 8001a3a:	08e4      	lsrs	r4, r4, #3
 8001a3c:	401d      	ands	r5, r3
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <__aeabi_dsub+0x344>)
 8001a40:	429e      	cmp	r6, r3
 8001a42:	d036      	beq.n	8001ab2 <__aeabi_dsub+0x1f6>
 8001a44:	0324      	lsls	r4, r4, #12
 8001a46:	0576      	lsls	r6, r6, #21
 8001a48:	0b24      	lsrs	r4, r4, #12
 8001a4a:	0d76      	lsrs	r6, r6, #21
 8001a4c:	e7db      	b.n	8001a06 <__aeabi_dsub+0x14a>
 8001a4e:	4663      	mov	r3, ip
 8001a50:	1af3      	subs	r3, r6, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dc00      	bgt.n	8001a58 <__aeabi_dsub+0x19c>
 8001a56:	e094      	b.n	8001b82 <__aeabi_dsub+0x2c6>
 8001a58:	4660      	mov	r0, ip
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d035      	beq.n	8001aca <__aeabi_dsub+0x20e>
 8001a5e:	4868      	ldr	r0, [pc, #416]	; (8001c00 <__aeabi_dsub+0x344>)
 8001a60:	4286      	cmp	r6, r0
 8001a62:	d0b1      	beq.n	80019c8 <__aeabi_dsub+0x10c>
 8001a64:	2780      	movs	r7, #128	; 0x80
 8001a66:	043f      	lsls	r7, r7, #16
 8001a68:	4339      	orrs	r1, r7
 8001a6a:	2b38      	cmp	r3, #56	; 0x38
 8001a6c:	dc00      	bgt.n	8001a70 <__aeabi_dsub+0x1b4>
 8001a6e:	e0fd      	b.n	8001c6c <__aeabi_dsub+0x3b0>
 8001a70:	430a      	orrs	r2, r1
 8001a72:	0017      	movs	r7, r2
 8001a74:	2100      	movs	r1, #0
 8001a76:	1e7a      	subs	r2, r7, #1
 8001a78:	4197      	sbcs	r7, r2
 8001a7a:	4457      	add	r7, sl
 8001a7c:	4557      	cmp	r7, sl
 8001a7e:	4180      	sbcs	r0, r0
 8001a80:	1909      	adds	r1, r1, r4
 8001a82:	4244      	negs	r4, r0
 8001a84:	190c      	adds	r4, r1, r4
 8001a86:	0223      	lsls	r3, r4, #8
 8001a88:	d53a      	bpl.n	8001b00 <__aeabi_dsub+0x244>
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <__aeabi_dsub+0x344>)
 8001a8c:	3601      	adds	r6, #1
 8001a8e:	429e      	cmp	r6, r3
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x1d8>
 8001a92:	e14b      	b.n	8001d2c <__aeabi_dsub+0x470>
 8001a94:	2201      	movs	r2, #1
 8001a96:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <__aeabi_dsub+0x348>)
 8001a98:	401c      	ands	r4, r3
 8001a9a:	087b      	lsrs	r3, r7, #1
 8001a9c:	4017      	ands	r7, r2
 8001a9e:	431f      	orrs	r7, r3
 8001aa0:	07e2      	lsls	r2, r4, #31
 8001aa2:	4317      	orrs	r7, r2
 8001aa4:	0864      	lsrs	r4, r4, #1
 8001aa6:	e78f      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001aa8:	0008      	movs	r0, r1
 8001aaa:	4310      	orrs	r0, r2
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_dsub+0x1f4>
 8001aae:	e724      	b.n	80018fa <__aeabi_dsub+0x3e>
 8001ab0:	e721      	b.n	80018f6 <__aeabi_dsub+0x3a>
 8001ab2:	0023      	movs	r3, r4
 8001ab4:	433b      	orrs	r3, r7
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dsub+0x1fe>
 8001ab8:	e1b9      	b.n	8001e2e <__aeabi_dsub+0x572>
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	0312      	lsls	r2, r2, #12
 8001abe:	4314      	orrs	r4, r2
 8001ac0:	0324      	lsls	r4, r4, #12
 8001ac2:	0b24      	lsrs	r4, r4, #12
 8001ac4:	e79f      	b.n	8001a06 <__aeabi_dsub+0x14a>
 8001ac6:	002e      	movs	r6, r5
 8001ac8:	e77e      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001aca:	0008      	movs	r0, r1
 8001acc:	4310      	orrs	r0, r2
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x216>
 8001ad0:	e0ca      	b.n	8001c68 <__aeabi_dsub+0x3ac>
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	4684      	mov	ip, r0
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d000      	beq.n	8001adc <__aeabi_dsub+0x220>
 8001ada:	e0e7      	b.n	8001cac <__aeabi_dsub+0x3f0>
 8001adc:	4452      	add	r2, sl
 8001ade:	4552      	cmp	r2, sl
 8001ae0:	4180      	sbcs	r0, r0
 8001ae2:	1864      	adds	r4, r4, r1
 8001ae4:	4240      	negs	r0, r0
 8001ae6:	1824      	adds	r4, r4, r0
 8001ae8:	0017      	movs	r7, r2
 8001aea:	2601      	movs	r6, #1
 8001aec:	0223      	lsls	r3, r4, #8
 8001aee:	d507      	bpl.n	8001b00 <__aeabi_dsub+0x244>
 8001af0:	2602      	movs	r6, #2
 8001af2:	e7cf      	b.n	8001a94 <__aeabi_dsub+0x1d8>
 8001af4:	4664      	mov	r4, ip
 8001af6:	432c      	orrs	r4, r5
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x240>
 8001afa:	e1b3      	b.n	8001e64 <__aeabi_dsub+0x5a8>
 8001afc:	002c      	movs	r4, r5
 8001afe:	4667      	mov	r7, ip
 8001b00:	077b      	lsls	r3, r7, #29
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dsub+0x24a>
 8001b04:	e762      	b.n	80019cc <__aeabi_dsub+0x110>
 8001b06:	0763      	lsls	r3, r4, #29
 8001b08:	08ff      	lsrs	r7, r7, #3
 8001b0a:	431f      	orrs	r7, r3
 8001b0c:	2501      	movs	r5, #1
 8001b0e:	4643      	mov	r3, r8
 8001b10:	08e4      	lsrs	r4, r4, #3
 8001b12:	401d      	ands	r5, r3
 8001b14:	e793      	b.n	8001a3e <__aeabi_dsub+0x182>
 8001b16:	2d00      	cmp	r5, #0
 8001b18:	d178      	bne.n	8001c0c <__aeabi_dsub+0x350>
 8001b1a:	1c75      	adds	r5, r6, #1
 8001b1c:	056d      	lsls	r5, r5, #21
 8001b1e:	0d6d      	lsrs	r5, r5, #21
 8001b20:	2d01      	cmp	r5, #1
 8001b22:	dc00      	bgt.n	8001b26 <__aeabi_dsub+0x26a>
 8001b24:	e0f2      	b.n	8001d0c <__aeabi_dsub+0x450>
 8001b26:	4650      	mov	r0, sl
 8001b28:	1a80      	subs	r0, r0, r2
 8001b2a:	4582      	cmp	sl, r0
 8001b2c:	41bf      	sbcs	r7, r7
 8001b2e:	1a65      	subs	r5, r4, r1
 8001b30:	427f      	negs	r7, r7
 8001b32:	1bed      	subs	r5, r5, r7
 8001b34:	4684      	mov	ip, r0
 8001b36:	0228      	lsls	r0, r5, #8
 8001b38:	d400      	bmi.n	8001b3c <__aeabi_dsub+0x280>
 8001b3a:	e08c      	b.n	8001c56 <__aeabi_dsub+0x39a>
 8001b3c:	4650      	mov	r0, sl
 8001b3e:	1a17      	subs	r7, r2, r0
 8001b40:	42ba      	cmp	r2, r7
 8001b42:	4192      	sbcs	r2, r2
 8001b44:	1b0c      	subs	r4, r1, r4
 8001b46:	4255      	negs	r5, r2
 8001b48:	1b65      	subs	r5, r4, r5
 8001b4a:	4698      	mov	r8, r3
 8001b4c:	e714      	b.n	8001978 <__aeabi_dsub+0xbc>
 8001b4e:	2501      	movs	r5, #1
 8001b50:	4643      	mov	r3, r8
 8001b52:	2400      	movs	r4, #0
 8001b54:	401d      	ands	r5, r3
 8001b56:	2700      	movs	r7, #0
 8001b58:	e755      	b.n	8001a06 <__aeabi_dsub+0x14a>
 8001b5a:	4c2a      	ldr	r4, [pc, #168]	; (8001c04 <__aeabi_dsub+0x348>)
 8001b5c:	1af6      	subs	r6, r6, r3
 8001b5e:	402c      	ands	r4, r5
 8001b60:	e732      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001b62:	003d      	movs	r5, r7
 8001b64:	3828      	subs	r0, #40	; 0x28
 8001b66:	4085      	lsls	r5, r0
 8001b68:	2700      	movs	r7, #0
 8001b6a:	e717      	b.n	800199c <__aeabi_dsub+0xe0>
 8001b6c:	0038      	movs	r0, r7
 8001b6e:	f000 fa7d 	bl	800206c <__clzsi2>
 8001b72:	3020      	adds	r0, #32
 8001b74:	e706      	b.n	8001984 <__aeabi_dsub+0xc8>
 8001b76:	430a      	orrs	r2, r1
 8001b78:	0017      	movs	r7, r2
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	1e7a      	subs	r2, r7, #1
 8001b7e:	4197      	sbcs	r7, r2
 8001b80:	e6ee      	b.n	8001960 <__aeabi_dsub+0xa4>
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d000      	beq.n	8001b88 <__aeabi_dsub+0x2cc>
 8001b86:	e0e5      	b.n	8001d54 <__aeabi_dsub+0x498>
 8001b88:	1c73      	adds	r3, r6, #1
 8001b8a:	469c      	mov	ip, r3
 8001b8c:	055b      	lsls	r3, r3, #21
 8001b8e:	0d5b      	lsrs	r3, r3, #21
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dsub+0x2da>
 8001b94:	e09f      	b.n	8001cd6 <__aeabi_dsub+0x41a>
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <__aeabi_dsub+0x344>)
 8001b98:	459c      	cmp	ip, r3
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_dsub+0x2e2>
 8001b9c:	e0c5      	b.n	8001d2a <__aeabi_dsub+0x46e>
 8001b9e:	4452      	add	r2, sl
 8001ba0:	4552      	cmp	r2, sl
 8001ba2:	4180      	sbcs	r0, r0
 8001ba4:	1864      	adds	r4, r4, r1
 8001ba6:	4240      	negs	r0, r0
 8001ba8:	1824      	adds	r4, r4, r0
 8001baa:	07e7      	lsls	r7, r4, #31
 8001bac:	0852      	lsrs	r2, r2, #1
 8001bae:	4317      	orrs	r7, r2
 8001bb0:	0864      	lsrs	r4, r4, #1
 8001bb2:	4666      	mov	r6, ip
 8001bb4:	e708      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001bb6:	4812      	ldr	r0, [pc, #72]	; (8001c00 <__aeabi_dsub+0x344>)
 8001bb8:	4285      	cmp	r5, r0
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x302>
 8001bbc:	e085      	b.n	8001cca <__aeabi_dsub+0x40e>
 8001bbe:	001d      	movs	r5, r3
 8001bc0:	e6bc      	b.n	800193c <__aeabi_dsub+0x80>
 8001bc2:	0029      	movs	r1, r5
 8001bc4:	3e1f      	subs	r6, #31
 8001bc6:	40f1      	lsrs	r1, r6
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x312>
 8001bcc:	e07f      	b.n	8001cce <__aeabi_dsub+0x412>
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	409d      	lsls	r5, r3
 8001bd4:	432f      	orrs	r7, r5
 8001bd6:	1e7d      	subs	r5, r7, #1
 8001bd8:	41af      	sbcs	r7, r5
 8001bda:	2400      	movs	r4, #0
 8001bdc:	430f      	orrs	r7, r1
 8001bde:	2600      	movs	r6, #0
 8001be0:	e78e      	b.n	8001b00 <__aeabi_dsub+0x244>
 8001be2:	002b      	movs	r3, r5
 8001be4:	000f      	movs	r7, r1
 8001be6:	3b20      	subs	r3, #32
 8001be8:	40df      	lsrs	r7, r3
 8001bea:	2d20      	cmp	r5, #32
 8001bec:	d071      	beq.n	8001cd2 <__aeabi_dsub+0x416>
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	1b5d      	subs	r5, r3, r5
 8001bf2:	40a9      	lsls	r1, r5
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	1e51      	subs	r1, r2, #1
 8001bf8:	418a      	sbcs	r2, r1
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4317      	orrs	r7, r2
 8001bfe:	e6af      	b.n	8001960 <__aeabi_dsub+0xa4>
 8001c00:	000007ff 	.word	0x000007ff
 8001c04:	ff7fffff 	.word	0xff7fffff
 8001c08:	800fffff 	.word	0x800fffff
 8001c0c:	2e00      	cmp	r6, #0
 8001c0e:	d03e      	beq.n	8001c8e <__aeabi_dsub+0x3d2>
 8001c10:	4eb3      	ldr	r6, [pc, #716]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001c12:	45b4      	cmp	ip, r6
 8001c14:	d045      	beq.n	8001ca2 <__aeabi_dsub+0x3e6>
 8001c16:	2680      	movs	r6, #128	; 0x80
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	426d      	negs	r5, r5
 8001c1c:	4334      	orrs	r4, r6
 8001c1e:	2d38      	cmp	r5, #56	; 0x38
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x368>
 8001c22:	e0a8      	b.n	8001d76 <__aeabi_dsub+0x4ba>
 8001c24:	2d1f      	cmp	r5, #31
 8001c26:	dd00      	ble.n	8001c2a <__aeabi_dsub+0x36e>
 8001c28:	e11f      	b.n	8001e6a <__aeabi_dsub+0x5ae>
 8001c2a:	2620      	movs	r6, #32
 8001c2c:	0027      	movs	r7, r4
 8001c2e:	4650      	mov	r0, sl
 8001c30:	1b76      	subs	r6, r6, r5
 8001c32:	40b7      	lsls	r7, r6
 8001c34:	40e8      	lsrs	r0, r5
 8001c36:	4307      	orrs	r7, r0
 8001c38:	4650      	mov	r0, sl
 8001c3a:	40b0      	lsls	r0, r6
 8001c3c:	1e46      	subs	r6, r0, #1
 8001c3e:	41b0      	sbcs	r0, r6
 8001c40:	40ec      	lsrs	r4, r5
 8001c42:	4338      	orrs	r0, r7
 8001c44:	1a17      	subs	r7, r2, r0
 8001c46:	42ba      	cmp	r2, r7
 8001c48:	4192      	sbcs	r2, r2
 8001c4a:	1b0c      	subs	r4, r1, r4
 8001c4c:	4252      	negs	r2, r2
 8001c4e:	1aa4      	subs	r4, r4, r2
 8001c50:	4666      	mov	r6, ip
 8001c52:	4698      	mov	r8, r3
 8001c54:	e68b      	b.n	800196e <__aeabi_dsub+0xb2>
 8001c56:	4664      	mov	r4, ip
 8001c58:	4667      	mov	r7, ip
 8001c5a:	432c      	orrs	r4, r5
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_dsub+0x3a4>
 8001c5e:	e68b      	b.n	8001978 <__aeabi_dsub+0xbc>
 8001c60:	2500      	movs	r5, #0
 8001c62:	2600      	movs	r6, #0
 8001c64:	2700      	movs	r7, #0
 8001c66:	e6ea      	b.n	8001a3e <__aeabi_dsub+0x182>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e6ad      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001c6c:	2b1f      	cmp	r3, #31
 8001c6e:	dc60      	bgt.n	8001d32 <__aeabi_dsub+0x476>
 8001c70:	2720      	movs	r7, #32
 8001c72:	1af8      	subs	r0, r7, r3
 8001c74:	000f      	movs	r7, r1
 8001c76:	4684      	mov	ip, r0
 8001c78:	4087      	lsls	r7, r0
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	40d8      	lsrs	r0, r3
 8001c7e:	4307      	orrs	r7, r0
 8001c80:	4660      	mov	r0, ip
 8001c82:	4082      	lsls	r2, r0
 8001c84:	1e50      	subs	r0, r2, #1
 8001c86:	4182      	sbcs	r2, r0
 8001c88:	40d9      	lsrs	r1, r3
 8001c8a:	4317      	orrs	r7, r2
 8001c8c:	e6f5      	b.n	8001a7a <__aeabi_dsub+0x1be>
 8001c8e:	0026      	movs	r6, r4
 8001c90:	4650      	mov	r0, sl
 8001c92:	4306      	orrs	r6, r0
 8001c94:	d005      	beq.n	8001ca2 <__aeabi_dsub+0x3e6>
 8001c96:	43ed      	mvns	r5, r5
 8001c98:	2d00      	cmp	r5, #0
 8001c9a:	d0d3      	beq.n	8001c44 <__aeabi_dsub+0x388>
 8001c9c:	4e90      	ldr	r6, [pc, #576]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001c9e:	45b4      	cmp	ip, r6
 8001ca0:	d1bd      	bne.n	8001c1e <__aeabi_dsub+0x362>
 8001ca2:	000c      	movs	r4, r1
 8001ca4:	0017      	movs	r7, r2
 8001ca6:	4666      	mov	r6, ip
 8001ca8:	4698      	mov	r8, r3
 8001caa:	e68d      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001cac:	488c      	ldr	r0, [pc, #560]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001cae:	4283      	cmp	r3, r0
 8001cb0:	d00b      	beq.n	8001cca <__aeabi_dsub+0x40e>
 8001cb2:	4663      	mov	r3, ip
 8001cb4:	e6d9      	b.n	8001a6a <__aeabi_dsub+0x1ae>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x400>
 8001cba:	e096      	b.n	8001dea <__aeabi_dsub+0x52e>
 8001cbc:	0008      	movs	r0, r1
 8001cbe:	4310      	orrs	r0, r2
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x408>
 8001cc2:	e0e2      	b.n	8001e8a <__aeabi_dsub+0x5ce>
 8001cc4:	000c      	movs	r4, r1
 8001cc6:	0017      	movs	r7, r2
 8001cc8:	4698      	mov	r8, r3
 8001cca:	4e85      	ldr	r6, [pc, #532]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001ccc:	e67c      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001cce:	2500      	movs	r5, #0
 8001cd0:	e780      	b.n	8001bd4 <__aeabi_dsub+0x318>
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	e78e      	b.n	8001bf4 <__aeabi_dsub+0x338>
 8001cd6:	0023      	movs	r3, r4
 8001cd8:	4650      	mov	r0, sl
 8001cda:	4303      	orrs	r3, r0
 8001cdc:	2e00      	cmp	r6, #0
 8001cde:	d000      	beq.n	8001ce2 <__aeabi_dsub+0x426>
 8001ce0:	e0a8      	b.n	8001e34 <__aeabi_dsub+0x578>
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x42c>
 8001ce6:	e0de      	b.n	8001ea6 <__aeabi_dsub+0x5ea>
 8001ce8:	000b      	movs	r3, r1
 8001cea:	4313      	orrs	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x434>
 8001cee:	e66b      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001cf0:	4452      	add	r2, sl
 8001cf2:	4552      	cmp	r2, sl
 8001cf4:	4180      	sbcs	r0, r0
 8001cf6:	1864      	adds	r4, r4, r1
 8001cf8:	4240      	negs	r0, r0
 8001cfa:	1824      	adds	r4, r4, r0
 8001cfc:	0017      	movs	r7, r2
 8001cfe:	0223      	lsls	r3, r4, #8
 8001d00:	d400      	bmi.n	8001d04 <__aeabi_dsub+0x448>
 8001d02:	e6fd      	b.n	8001b00 <__aeabi_dsub+0x244>
 8001d04:	4b77      	ldr	r3, [pc, #476]	; (8001ee4 <__aeabi_dsub+0x628>)
 8001d06:	4666      	mov	r6, ip
 8001d08:	401c      	ands	r4, r3
 8001d0a:	e65d      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001d0c:	0025      	movs	r5, r4
 8001d0e:	4650      	mov	r0, sl
 8001d10:	4305      	orrs	r5, r0
 8001d12:	2e00      	cmp	r6, #0
 8001d14:	d1cf      	bne.n	8001cb6 <__aeabi_dsub+0x3fa>
 8001d16:	2d00      	cmp	r5, #0
 8001d18:	d14f      	bne.n	8001dba <__aeabi_dsub+0x4fe>
 8001d1a:	000c      	movs	r4, r1
 8001d1c:	4314      	orrs	r4, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x466>
 8001d20:	e0a0      	b.n	8001e64 <__aeabi_dsub+0x5a8>
 8001d22:	000c      	movs	r4, r1
 8001d24:	0017      	movs	r7, r2
 8001d26:	4698      	mov	r8, r3
 8001d28:	e64e      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001d2a:	4666      	mov	r6, ip
 8001d2c:	2400      	movs	r4, #0
 8001d2e:	2700      	movs	r7, #0
 8001d30:	e685      	b.n	8001a3e <__aeabi_dsub+0x182>
 8001d32:	001f      	movs	r7, r3
 8001d34:	0008      	movs	r0, r1
 8001d36:	3f20      	subs	r7, #32
 8001d38:	40f8      	lsrs	r0, r7
 8001d3a:	0007      	movs	r7, r0
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x486>
 8001d40:	e08e      	b.n	8001e60 <__aeabi_dsub+0x5a4>
 8001d42:	2040      	movs	r0, #64	; 0x40
 8001d44:	1ac3      	subs	r3, r0, r3
 8001d46:	4099      	lsls	r1, r3
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	1e51      	subs	r1, r2, #1
 8001d4c:	418a      	sbcs	r2, r1
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4317      	orrs	r7, r2
 8001d52:	e692      	b.n	8001a7a <__aeabi_dsub+0x1be>
 8001d54:	2e00      	cmp	r6, #0
 8001d56:	d114      	bne.n	8001d82 <__aeabi_dsub+0x4c6>
 8001d58:	0026      	movs	r6, r4
 8001d5a:	4650      	mov	r0, sl
 8001d5c:	4306      	orrs	r6, r0
 8001d5e:	d062      	beq.n	8001e26 <__aeabi_dsub+0x56a>
 8001d60:	43db      	mvns	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d15c      	bne.n	8001e20 <__aeabi_dsub+0x564>
 8001d66:	1887      	adds	r7, r0, r2
 8001d68:	4297      	cmp	r7, r2
 8001d6a:	4192      	sbcs	r2, r2
 8001d6c:	1864      	adds	r4, r4, r1
 8001d6e:	4252      	negs	r2, r2
 8001d70:	18a4      	adds	r4, r4, r2
 8001d72:	4666      	mov	r6, ip
 8001d74:	e687      	b.n	8001a86 <__aeabi_dsub+0x1ca>
 8001d76:	4650      	mov	r0, sl
 8001d78:	4320      	orrs	r0, r4
 8001d7a:	1e44      	subs	r4, r0, #1
 8001d7c:	41a0      	sbcs	r0, r4
 8001d7e:	2400      	movs	r4, #0
 8001d80:	e760      	b.n	8001c44 <__aeabi_dsub+0x388>
 8001d82:	4e57      	ldr	r6, [pc, #348]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001d84:	45b4      	cmp	ip, r6
 8001d86:	d04e      	beq.n	8001e26 <__aeabi_dsub+0x56a>
 8001d88:	2680      	movs	r6, #128	; 0x80
 8001d8a:	0436      	lsls	r6, r6, #16
 8001d8c:	425b      	negs	r3, r3
 8001d8e:	4334      	orrs	r4, r6
 8001d90:	2b38      	cmp	r3, #56	; 0x38
 8001d92:	dd00      	ble.n	8001d96 <__aeabi_dsub+0x4da>
 8001d94:	e07f      	b.n	8001e96 <__aeabi_dsub+0x5da>
 8001d96:	2b1f      	cmp	r3, #31
 8001d98:	dd00      	ble.n	8001d9c <__aeabi_dsub+0x4e0>
 8001d9a:	e08b      	b.n	8001eb4 <__aeabi_dsub+0x5f8>
 8001d9c:	2620      	movs	r6, #32
 8001d9e:	0027      	movs	r7, r4
 8001da0:	4650      	mov	r0, sl
 8001da2:	1af6      	subs	r6, r6, r3
 8001da4:	40b7      	lsls	r7, r6
 8001da6:	40d8      	lsrs	r0, r3
 8001da8:	4307      	orrs	r7, r0
 8001daa:	4650      	mov	r0, sl
 8001dac:	40b0      	lsls	r0, r6
 8001dae:	1e46      	subs	r6, r0, #1
 8001db0:	41b0      	sbcs	r0, r6
 8001db2:	4307      	orrs	r7, r0
 8001db4:	40dc      	lsrs	r4, r3
 8001db6:	18bf      	adds	r7, r7, r2
 8001db8:	e7d6      	b.n	8001d68 <__aeabi_dsub+0x4ac>
 8001dba:	000d      	movs	r5, r1
 8001dbc:	4315      	orrs	r5, r2
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x506>
 8001dc0:	e602      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001dc2:	4650      	mov	r0, sl
 8001dc4:	1a80      	subs	r0, r0, r2
 8001dc6:	4582      	cmp	sl, r0
 8001dc8:	41bf      	sbcs	r7, r7
 8001dca:	1a65      	subs	r5, r4, r1
 8001dcc:	427f      	negs	r7, r7
 8001dce:	1bed      	subs	r5, r5, r7
 8001dd0:	4684      	mov	ip, r0
 8001dd2:	0228      	lsls	r0, r5, #8
 8001dd4:	d400      	bmi.n	8001dd8 <__aeabi_dsub+0x51c>
 8001dd6:	e68d      	b.n	8001af4 <__aeabi_dsub+0x238>
 8001dd8:	4650      	mov	r0, sl
 8001dda:	1a17      	subs	r7, r2, r0
 8001ddc:	42ba      	cmp	r2, r7
 8001dde:	4192      	sbcs	r2, r2
 8001de0:	1b0c      	subs	r4, r1, r4
 8001de2:	4252      	negs	r2, r2
 8001de4:	1aa4      	subs	r4, r4, r2
 8001de6:	4698      	mov	r8, r3
 8001de8:	e5ee      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001dea:	000d      	movs	r5, r1
 8001dec:	4315      	orrs	r5, r2
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x536>
 8001df0:	e76b      	b.n	8001cca <__aeabi_dsub+0x40e>
 8001df2:	4650      	mov	r0, sl
 8001df4:	0767      	lsls	r7, r4, #29
 8001df6:	08c0      	lsrs	r0, r0, #3
 8001df8:	4307      	orrs	r7, r0
 8001dfa:	2080      	movs	r0, #128	; 0x80
 8001dfc:	08e4      	lsrs	r4, r4, #3
 8001dfe:	0300      	lsls	r0, r0, #12
 8001e00:	4204      	tst	r4, r0
 8001e02:	d007      	beq.n	8001e14 <__aeabi_dsub+0x558>
 8001e04:	08cd      	lsrs	r5, r1, #3
 8001e06:	4205      	tst	r5, r0
 8001e08:	d104      	bne.n	8001e14 <__aeabi_dsub+0x558>
 8001e0a:	002c      	movs	r4, r5
 8001e0c:	4698      	mov	r8, r3
 8001e0e:	08d7      	lsrs	r7, r2, #3
 8001e10:	0749      	lsls	r1, r1, #29
 8001e12:	430f      	orrs	r7, r1
 8001e14:	0f7b      	lsrs	r3, r7, #29
 8001e16:	00e4      	lsls	r4, r4, #3
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	00ff      	lsls	r7, r7, #3
 8001e1c:	4e30      	ldr	r6, [pc, #192]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001e1e:	e5d3      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001e20:	4e2f      	ldr	r6, [pc, #188]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001e22:	45b4      	cmp	ip, r6
 8001e24:	d1b4      	bne.n	8001d90 <__aeabi_dsub+0x4d4>
 8001e26:	000c      	movs	r4, r1
 8001e28:	0017      	movs	r7, r2
 8001e2a:	4666      	mov	r6, ip
 8001e2c:	e5cc      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001e2e:	2700      	movs	r7, #0
 8001e30:	2400      	movs	r4, #0
 8001e32:	e5e8      	b.n	8001a06 <__aeabi_dsub+0x14a>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d039      	beq.n	8001eac <__aeabi_dsub+0x5f0>
 8001e38:	000b      	movs	r3, r1
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x584>
 8001e3e:	e744      	b.n	8001cca <__aeabi_dsub+0x40e>
 8001e40:	08c0      	lsrs	r0, r0, #3
 8001e42:	0767      	lsls	r7, r4, #29
 8001e44:	4307      	orrs	r7, r0
 8001e46:	2080      	movs	r0, #128	; 0x80
 8001e48:	08e4      	lsrs	r4, r4, #3
 8001e4a:	0300      	lsls	r0, r0, #12
 8001e4c:	4204      	tst	r4, r0
 8001e4e:	d0e1      	beq.n	8001e14 <__aeabi_dsub+0x558>
 8001e50:	08cb      	lsrs	r3, r1, #3
 8001e52:	4203      	tst	r3, r0
 8001e54:	d1de      	bne.n	8001e14 <__aeabi_dsub+0x558>
 8001e56:	08d7      	lsrs	r7, r2, #3
 8001e58:	0749      	lsls	r1, r1, #29
 8001e5a:	430f      	orrs	r7, r1
 8001e5c:	001c      	movs	r4, r3
 8001e5e:	e7d9      	b.n	8001e14 <__aeabi_dsub+0x558>
 8001e60:	2100      	movs	r1, #0
 8001e62:	e771      	b.n	8001d48 <__aeabi_dsub+0x48c>
 8001e64:	2500      	movs	r5, #0
 8001e66:	2700      	movs	r7, #0
 8001e68:	e5e9      	b.n	8001a3e <__aeabi_dsub+0x182>
 8001e6a:	002e      	movs	r6, r5
 8001e6c:	0027      	movs	r7, r4
 8001e6e:	3e20      	subs	r6, #32
 8001e70:	40f7      	lsrs	r7, r6
 8001e72:	2d20      	cmp	r5, #32
 8001e74:	d02f      	beq.n	8001ed6 <__aeabi_dsub+0x61a>
 8001e76:	2640      	movs	r6, #64	; 0x40
 8001e78:	1b75      	subs	r5, r6, r5
 8001e7a:	40ac      	lsls	r4, r5
 8001e7c:	4650      	mov	r0, sl
 8001e7e:	4320      	orrs	r0, r4
 8001e80:	1e44      	subs	r4, r0, #1
 8001e82:	41a0      	sbcs	r0, r4
 8001e84:	2400      	movs	r4, #0
 8001e86:	4338      	orrs	r0, r7
 8001e88:	e6dc      	b.n	8001c44 <__aeabi_dsub+0x388>
 8001e8a:	2480      	movs	r4, #128	; 0x80
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	4e13      	ldr	r6, [pc, #76]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001e92:	2700      	movs	r7, #0
 8001e94:	e5d3      	b.n	8001a3e <__aeabi_dsub+0x182>
 8001e96:	4650      	mov	r0, sl
 8001e98:	4320      	orrs	r0, r4
 8001e9a:	0007      	movs	r7, r0
 8001e9c:	1e78      	subs	r0, r7, #1
 8001e9e:	4187      	sbcs	r7, r0
 8001ea0:	2400      	movs	r4, #0
 8001ea2:	18bf      	adds	r7, r7, r2
 8001ea4:	e760      	b.n	8001d68 <__aeabi_dsub+0x4ac>
 8001ea6:	000c      	movs	r4, r1
 8001ea8:	0017      	movs	r7, r2
 8001eaa:	e58d      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001eac:	000c      	movs	r4, r1
 8001eae:	0017      	movs	r7, r2
 8001eb0:	4e0b      	ldr	r6, [pc, #44]	; (8001ee0 <__aeabi_dsub+0x624>)
 8001eb2:	e589      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001eb4:	001e      	movs	r6, r3
 8001eb6:	0027      	movs	r7, r4
 8001eb8:	3e20      	subs	r6, #32
 8001eba:	40f7      	lsrs	r7, r6
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d00c      	beq.n	8001eda <__aeabi_dsub+0x61e>
 8001ec0:	2640      	movs	r6, #64	; 0x40
 8001ec2:	1af3      	subs	r3, r6, r3
 8001ec4:	409c      	lsls	r4, r3
 8001ec6:	4650      	mov	r0, sl
 8001ec8:	4320      	orrs	r0, r4
 8001eca:	1e44      	subs	r4, r0, #1
 8001ecc:	41a0      	sbcs	r0, r4
 8001ece:	4307      	orrs	r7, r0
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	18bf      	adds	r7, r7, r2
 8001ed4:	e748      	b.n	8001d68 <__aeabi_dsub+0x4ac>
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	e7d0      	b.n	8001e7c <__aeabi_dsub+0x5c0>
 8001eda:	2400      	movs	r4, #0
 8001edc:	e7f3      	b.n	8001ec6 <__aeabi_dsub+0x60a>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000007ff 	.word	0x000007ff
 8001ee4:	ff7fffff 	.word	0xff7fffff

08001ee8 <__aeabi_ui2d>:
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	1e04      	subs	r4, r0, #0
 8001eec:	d028      	beq.n	8001f40 <__aeabi_ui2d+0x58>
 8001eee:	f000 f8bd 	bl	800206c <__clzsi2>
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <__aeabi_ui2d+0x60>)
 8001ef4:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <__aeabi_ui2d+0x64>)
 8001ef6:	1a1b      	subs	r3, r3, r0
 8001ef8:	1ad2      	subs	r2, r2, r3
 8001efa:	2a1f      	cmp	r2, #31
 8001efc:	dd15      	ble.n	8001f2a <__aeabi_ui2d+0x42>
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <__aeabi_ui2d+0x68>)
 8001f00:	1ad2      	subs	r2, r2, r3
 8001f02:	4094      	lsls	r4, r2
 8001f04:	2200      	movs	r2, #0
 8001f06:	0324      	lsls	r4, r4, #12
 8001f08:	055b      	lsls	r3, r3, #21
 8001f0a:	0b24      	lsrs	r4, r4, #12
 8001f0c:	0d5b      	lsrs	r3, r3, #21
 8001f0e:	2100      	movs	r1, #0
 8001f10:	0010      	movs	r0, r2
 8001f12:	0324      	lsls	r4, r4, #12
 8001f14:	0d0a      	lsrs	r2, r1, #20
 8001f16:	0b24      	lsrs	r4, r4, #12
 8001f18:	0512      	lsls	r2, r2, #20
 8001f1a:	4322      	orrs	r2, r4
 8001f1c:	4c0d      	ldr	r4, [pc, #52]	; (8001f54 <__aeabi_ui2d+0x6c>)
 8001f1e:	051b      	lsls	r3, r3, #20
 8001f20:	4022      	ands	r2, r4
 8001f22:	4313      	orrs	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	0859      	lsrs	r1, r3, #1
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	0021      	movs	r1, r4
 8001f2c:	4091      	lsls	r1, r2
 8001f2e:	000a      	movs	r2, r1
 8001f30:	210b      	movs	r1, #11
 8001f32:	1a08      	subs	r0, r1, r0
 8001f34:	40c4      	lsrs	r4, r0
 8001f36:	055b      	lsls	r3, r3, #21
 8001f38:	0324      	lsls	r4, r4, #12
 8001f3a:	0b24      	lsrs	r4, r4, #12
 8001f3c:	0d5b      	lsrs	r3, r3, #21
 8001f3e:	e7e6      	b.n	8001f0e <__aeabi_ui2d+0x26>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2400      	movs	r4, #0
 8001f44:	2200      	movs	r2, #0
 8001f46:	e7e2      	b.n	8001f0e <__aeabi_ui2d+0x26>
 8001f48:	0000041e 	.word	0x0000041e
 8001f4c:	00000433 	.word	0x00000433
 8001f50:	00000413 	.word	0x00000413
 8001f54:	800fffff 	.word	0x800fffff

08001f58 <__aeabi_d2f>:
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	004c      	lsls	r4, r1, #1
 8001f5c:	0d64      	lsrs	r4, r4, #21
 8001f5e:	030b      	lsls	r3, r1, #12
 8001f60:	1c62      	adds	r2, r4, #1
 8001f62:	0f45      	lsrs	r5, r0, #29
 8001f64:	0a5b      	lsrs	r3, r3, #9
 8001f66:	0552      	lsls	r2, r2, #21
 8001f68:	432b      	orrs	r3, r5
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	00c5      	lsls	r5, r0, #3
 8001f6e:	0d52      	lsrs	r2, r2, #21
 8001f70:	2a01      	cmp	r2, #1
 8001f72:	dd28      	ble.n	8001fc6 <__aeabi_d2f+0x6e>
 8001f74:	4a3a      	ldr	r2, [pc, #232]	; (8002060 <__aeabi_d2f+0x108>)
 8001f76:	18a6      	adds	r6, r4, r2
 8001f78:	2efe      	cmp	r6, #254	; 0xfe
 8001f7a:	dc1b      	bgt.n	8001fb4 <__aeabi_d2f+0x5c>
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	dd3e      	ble.n	8001ffe <__aeabi_d2f+0xa6>
 8001f80:	0180      	lsls	r0, r0, #6
 8001f82:	0002      	movs	r2, r0
 8001f84:	1e50      	subs	r0, r2, #1
 8001f86:	4182      	sbcs	r2, r0
 8001f88:	0f6d      	lsrs	r5, r5, #29
 8001f8a:	432a      	orrs	r2, r5
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	075a      	lsls	r2, r3, #29
 8001f92:	d004      	beq.n	8001f9e <__aeabi_d2f+0x46>
 8001f94:	220f      	movs	r2, #15
 8001f96:	401a      	ands	r2, r3
 8001f98:	2a04      	cmp	r2, #4
 8001f9a:	d000      	beq.n	8001f9e <__aeabi_d2f+0x46>
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	04d2      	lsls	r2, r2, #19
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	d05a      	beq.n	800205c <__aeabi_d2f+0x104>
 8001fa6:	3601      	adds	r6, #1
 8001fa8:	2eff      	cmp	r6, #255	; 0xff
 8001faa:	d003      	beq.n	8001fb4 <__aeabi_d2f+0x5c>
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	0a5b      	lsrs	r3, r3, #9
 8001fb0:	b2f4      	uxtb	r4, r6
 8001fb2:	e001      	b.n	8001fb8 <__aeabi_d2f+0x60>
 8001fb4:	24ff      	movs	r4, #255	; 0xff
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	0258      	lsls	r0, r3, #9
 8001fba:	05e4      	lsls	r4, r4, #23
 8001fbc:	0a40      	lsrs	r0, r0, #9
 8001fbe:	07c9      	lsls	r1, r1, #31
 8001fc0:	4320      	orrs	r0, r4
 8001fc2:	4308      	orrs	r0, r1
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	2c00      	cmp	r4, #0
 8001fc8:	d007      	beq.n	8001fda <__aeabi_d2f+0x82>
 8001fca:	431d      	orrs	r5, r3
 8001fcc:	d0f2      	beq.n	8001fb4 <__aeabi_d2f+0x5c>
 8001fce:	2080      	movs	r0, #128	; 0x80
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	0480      	lsls	r0, r0, #18
 8001fd4:	4303      	orrs	r3, r0
 8001fd6:	26ff      	movs	r6, #255	; 0xff
 8001fd8:	e7da      	b.n	8001f90 <__aeabi_d2f+0x38>
 8001fda:	432b      	orrs	r3, r5
 8001fdc:	d003      	beq.n	8001fe6 <__aeabi_d2f+0x8e>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	2cff      	cmp	r4, #255	; 0xff
 8001fe4:	d003      	beq.n	8001fee <__aeabi_d2f+0x96>
 8001fe6:	025b      	lsls	r3, r3, #9
 8001fe8:	0a5b      	lsrs	r3, r3, #9
 8001fea:	b2e4      	uxtb	r4, r4
 8001fec:	e7e4      	b.n	8001fb8 <__aeabi_d2f+0x60>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d032      	beq.n	8002058 <__aeabi_d2f+0x100>
 8001ff2:	2080      	movs	r0, #128	; 0x80
 8001ff4:	03c0      	lsls	r0, r0, #15
 8001ff6:	4303      	orrs	r3, r0
 8001ff8:	025b      	lsls	r3, r3, #9
 8001ffa:	0a5b      	lsrs	r3, r3, #9
 8001ffc:	e7dc      	b.n	8001fb8 <__aeabi_d2f+0x60>
 8001ffe:	0032      	movs	r2, r6
 8002000:	3217      	adds	r2, #23
 8002002:	db14      	blt.n	800202e <__aeabi_d2f+0xd6>
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	271e      	movs	r7, #30
 8002008:	0412      	lsls	r2, r2, #16
 800200a:	4313      	orrs	r3, r2
 800200c:	1bbf      	subs	r7, r7, r6
 800200e:	2f1f      	cmp	r7, #31
 8002010:	dc0f      	bgt.n	8002032 <__aeabi_d2f+0xda>
 8002012:	4a14      	ldr	r2, [pc, #80]	; (8002064 <__aeabi_d2f+0x10c>)
 8002014:	4694      	mov	ip, r2
 8002016:	4464      	add	r4, ip
 8002018:	002a      	movs	r2, r5
 800201a:	40a5      	lsls	r5, r4
 800201c:	002e      	movs	r6, r5
 800201e:	40a3      	lsls	r3, r4
 8002020:	1e75      	subs	r5, r6, #1
 8002022:	41ae      	sbcs	r6, r5
 8002024:	40fa      	lsrs	r2, r7
 8002026:	4333      	orrs	r3, r6
 8002028:	4313      	orrs	r3, r2
 800202a:	2600      	movs	r6, #0
 800202c:	e7b0      	b.n	8001f90 <__aeabi_d2f+0x38>
 800202e:	2400      	movs	r4, #0
 8002030:	e7d5      	b.n	8001fde <__aeabi_d2f+0x86>
 8002032:	2202      	movs	r2, #2
 8002034:	4252      	negs	r2, r2
 8002036:	1b96      	subs	r6, r2, r6
 8002038:	001a      	movs	r2, r3
 800203a:	40f2      	lsrs	r2, r6
 800203c:	2f20      	cmp	r7, #32
 800203e:	d009      	beq.n	8002054 <__aeabi_d2f+0xfc>
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <__aeabi_d2f+0x110>)
 8002042:	4684      	mov	ip, r0
 8002044:	4464      	add	r4, ip
 8002046:	40a3      	lsls	r3, r4
 8002048:	432b      	orrs	r3, r5
 800204a:	1e5d      	subs	r5, r3, #1
 800204c:	41ab      	sbcs	r3, r5
 800204e:	2600      	movs	r6, #0
 8002050:	4313      	orrs	r3, r2
 8002052:	e79d      	b.n	8001f90 <__aeabi_d2f+0x38>
 8002054:	2300      	movs	r3, #0
 8002056:	e7f7      	b.n	8002048 <__aeabi_d2f+0xf0>
 8002058:	2300      	movs	r3, #0
 800205a:	e7ad      	b.n	8001fb8 <__aeabi_d2f+0x60>
 800205c:	0034      	movs	r4, r6
 800205e:	e7bf      	b.n	8001fe0 <__aeabi_d2f+0x88>
 8002060:	fffffc80 	.word	0xfffffc80
 8002064:	fffffc82 	.word	0xfffffc82
 8002068:	fffffca2 	.word	0xfffffca2

0800206c <__clzsi2>:
 800206c:	211c      	movs	r1, #28
 800206e:	2301      	movs	r3, #1
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	4298      	cmp	r0, r3
 8002074:	d301      	bcc.n	800207a <__clzsi2+0xe>
 8002076:	0c00      	lsrs	r0, r0, #16
 8002078:	3910      	subs	r1, #16
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	4298      	cmp	r0, r3
 800207e:	d301      	bcc.n	8002084 <__clzsi2+0x18>
 8002080:	0a00      	lsrs	r0, r0, #8
 8002082:	3908      	subs	r1, #8
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	4298      	cmp	r0, r3
 8002088:	d301      	bcc.n	800208e <__clzsi2+0x22>
 800208a:	0900      	lsrs	r0, r0, #4
 800208c:	3904      	subs	r1, #4
 800208e:	a202      	add	r2, pc, #8	; (adr r2, 8002098 <__clzsi2+0x2c>)
 8002090:	5c10      	ldrb	r0, [r2, r0]
 8002092:	1840      	adds	r0, r0, r1
 8002094:	4770      	bx	lr
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	02020304 	.word	0x02020304
 800209c:	01010101 	.word	0x01010101
	...

080020a8 <__clzdi2>:
 80020a8:	b510      	push	{r4, lr}
 80020aa:	2900      	cmp	r1, #0
 80020ac:	d103      	bne.n	80020b6 <__clzdi2+0xe>
 80020ae:	f7ff ffdd 	bl	800206c <__clzsi2>
 80020b2:	3020      	adds	r0, #32
 80020b4:	e002      	b.n	80020bc <__clzdi2+0x14>
 80020b6:	1c08      	adds	r0, r1, #0
 80020b8:	f7ff ffd8 	bl	800206c <__clzsi2>
 80020bc:	bd10      	pop	{r4, pc}
 80020be:	46c0      	nop			; (mov r8, r8)

080020c0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80020c0:	21fa      	movs	r1, #250	; 0xfa
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_InitTick+0x2c>)
{
 80020c4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80020c6:	0089      	lsls	r1, r1, #2
{
 80020c8:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	f7fe f838 	bl	8000140 <__udivsi3>
 80020d0:	f000 fcb4 	bl	8002a3c <HAL_SYSTICK_Config>
 80020d4:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 80020d6:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80020d8:	2c00      	cmp	r4, #0
 80020da:	d105      	bne.n	80020e8 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80020dc:	3802      	subs	r0, #2
 80020de:	0022      	movs	r2, r4
 80020e0:	0029      	movs	r1, r5
 80020e2:	f000 fc5f 	bl	80029a4 <HAL_NVIC_SetPriority>
 80020e6:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	2302      	movs	r3, #2
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_Init+0x24>)
{
 80020f4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f6:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020fa:	430b      	orrs	r3, r1
 80020fc:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fe:	f7ff ffdf 	bl	80020c0 <HAL_InitTick>
 8002102:	1e04      	subs	r4, r0, #0
 8002104:	d103      	bne.n	800210e <HAL_Init+0x1e>
    HAL_MspInit();
 8002106:	f003 f935 	bl	8005374 <HAL_MspInit>
}
 800210a:	0020      	movs	r0, r4
 800210c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800210e:	2401      	movs	r4, #1
 8002110:	e7fb      	b.n	800210a <HAL_Init+0x1a>
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40022000 	.word	0x40022000

08002118 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002118:	4a02      	ldr	r2, [pc, #8]	; (8002124 <HAL_IncTick+0xc>)
 800211a:	6813      	ldr	r3, [r2, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	4770      	bx	lr
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	200001f0 	.word	0x200001f0

08002128 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002128:	4b01      	ldr	r3, [pc, #4]	; (8002130 <HAL_GetTick+0x8>)
 800212a:	6818      	ldr	r0, [r3, #0]
}
 800212c:	4770      	bx	lr
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	200001f0 	.word	0x200001f0

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fff6 	bl	8002128 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 800213c:	1c63      	adds	r3, r4, #1
 800213e:	1e5a      	subs	r2, r3, #1
 8002140:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8002142:	0005      	movs	r5, r0
    wait++;
 8002144:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002146:	f7ff ffef 	bl	8002128 <HAL_GetTick>
 800214a:	1b40      	subs	r0, r0, r5
 800214c:	4284      	cmp	r4, r0
 800214e:	d8fa      	bhi.n	8002146 <HAL_Delay+0x12>
  {
  }
}
 8002150:	bd70      	pop	{r4, r5, r6, pc}
	...

08002154 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <ADC_DelayMicroSecond+0x24>)
{
 8002156:	b513      	push	{r0, r1, r4, lr}
 8002158:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800215a:	4908      	ldr	r1, [pc, #32]	; (800217c <ADC_DelayMicroSecond+0x28>)
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	f7fd ffef 	bl	8000140 <__udivsi3>
 8002162:	4344      	muls	r4, r0
 8002164:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8002166:	9b01      	ldr	r3, [sp, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d100      	bne.n	800216e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800216c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800216e:	9b01      	ldr	r3, [sp, #4]
 8002170:	3b01      	subs	r3, #1
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	e7f7      	b.n	8002166 <ADC_DelayMicroSecond+0x12>
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	20000000 	.word	0x20000000
 800217c:	000f4240 	.word	0x000f4240

08002180 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002180:	2103      	movs	r1, #3
 8002182:	6803      	ldr	r3, [r0, #0]
{
 8002184:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002186:	689a      	ldr	r2, [r3, #8]
{
 8002188:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800218a:	400a      	ands	r2, r1
 800218c:	2a01      	cmp	r2, #1
 800218e:	d10d      	bne.n	80021ac <ADC_Enable+0x2c>
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	4211      	tst	r1, r2
 8002194:	d00a      	beq.n	80021ac <ADC_Enable+0x2c>
  return HAL_OK;
 8002196:	2000      	movs	r0, #0
}
 8002198:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80021a0:	4313      	orrs	r3, r2
 80021a2:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021a6:	4303      	orrs	r3, r0
 80021a8:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80021aa:	e7f5      	b.n	8002198 <ADC_Enable+0x18>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <ADC_Enable+0x6c>)
 80021b0:	4211      	tst	r1, r2
 80021b2:	d1f2      	bne.n	800219a <ADC_Enable+0x1a>
    __HAL_ADC_ENABLE(hadc);
 80021b4:	2501      	movs	r5, #1
 80021b6:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80021b8:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80021ba:	432a      	orrs	r2, r5
 80021bc:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80021be:	f7ff ffc9 	bl	8002154 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80021c2:	f7ff ffb1 	bl	8002128 <HAL_GetTick>
 80021c6:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	422b      	tst	r3, r5
 80021ce:	d1e2      	bne.n	8002196 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021d0:	f7ff ffaa 	bl	8002128 <HAL_GetTick>
 80021d4:	1b80      	subs	r0, r0, r6
 80021d6:	280a      	cmp	r0, #10
 80021d8:	d9f6      	bls.n	80021c8 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021da:	2310      	movs	r3, #16
 80021dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 80021de:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e0:	4313      	orrs	r3, r2
 80021e2:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021e6:	431d      	orrs	r5, r3
 80021e8:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 80021ea:	e7d5      	b.n	8002198 <ADC_Enable+0x18>
 80021ec:	80000017 	.word	0x80000017

080021f0 <HAL_ADC_Init>:
{
 80021f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021f2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
  if(hadc == NULL)
 80021f6:	2c00      	cmp	r4, #0
 80021f8:	d100      	bne.n	80021fc <HAL_ADC_Init+0xc>
 80021fa:	e0d1      	b.n	80023a0 <HAL_ADC_Init+0x1b0>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80021fc:	4b69      	ldr	r3, [pc, #420]	; (80023a4 <HAL_ADC_Init+0x1b4>)
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d004      	beq.n	800220e <HAL_ADC_Init+0x1e>
 8002204:	21ce      	movs	r1, #206	; 0xce
 8002206:	4868      	ldr	r0, [pc, #416]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002208:	0049      	lsls	r1, r1, #1
 800220a:	f002 ff0a 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800220e:	6862      	ldr	r2, [r4, #4]
 8002210:	4b66      	ldr	r3, [pc, #408]	; (80023ac <HAL_ADC_Init+0x1bc>)
 8002212:	4013      	ands	r3, r2
 8002214:	d016      	beq.n	8002244 <HAL_ADC_Init+0x54>
 8002216:	2080      	movs	r0, #128	; 0x80
 8002218:	0051      	lsls	r1, r2, #1
 800221a:	0849      	lsrs	r1, r1, #1
 800221c:	05c0      	lsls	r0, r0, #23
 800221e:	4281      	cmp	r1, r0
 8002220:	d010      	beq.n	8002244 <HAL_ADC_Init+0x54>
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	0609      	lsls	r1, r1, #24
 8002226:	428a      	cmp	r2, r1
 8002228:	d00c      	beq.n	8002244 <HAL_ADC_Init+0x54>
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	0352      	lsls	r2, r2, #13
 800222e:	4293      	cmp	r3, r2
 8002230:	d008      	beq.n	8002244 <HAL_ADC_Init+0x54>
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	0392      	lsls	r2, r2, #14
 8002236:	4293      	cmp	r3, r2
 8002238:	d004      	beq.n	8002244 <HAL_ADC_Init+0x54>
 800223a:	219e      	movs	r1, #158	; 0x9e
 800223c:	485a      	ldr	r0, [pc, #360]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 800223e:	31ff      	adds	r1, #255	; 0xff
 8002240:	f002 feef 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002244:	2318      	movs	r3, #24
 8002246:	68a2      	ldr	r2, [r4, #8]
 8002248:	439a      	bics	r2, r3
 800224a:	d004      	beq.n	8002256 <HAL_ADC_Init+0x66>
 800224c:	21cf      	movs	r1, #207	; 0xcf
 800224e:	4856      	ldr	r0, [pc, #344]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002250:	0049      	lsls	r1, r1, #1
 8002252:	f002 fee6 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002256:	2320      	movs	r3, #32
 8002258:	68e2      	ldr	r2, [r4, #12]
 800225a:	439a      	bics	r2, r3
 800225c:	d004      	beq.n	8002268 <HAL_ADC_Init+0x78>
 800225e:	21a0      	movs	r1, #160	; 0xa0
 8002260:	4851      	ldr	r0, [pc, #324]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002262:	31ff      	adds	r1, #255	; 0xff
 8002264:	f002 fedd 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002268:	6923      	ldr	r3, [r4, #16]
 800226a:	3b01      	subs	r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d904      	bls.n	800227a <HAL_ADC_Init+0x8a>
 8002270:	21d0      	movs	r1, #208	; 0xd0
 8002272:	484d      	ldr	r0, [pc, #308]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002274:	0049      	lsls	r1, r1, #1
 8002276:	f002 fed4 	bl	8005022 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800227a:	1c66      	adds	r6, r4, #1
 800227c:	7ff3      	ldrb	r3, [r6, #31]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d904      	bls.n	800228c <HAL_ADC_Init+0x9c>
 8002282:	21a2      	movs	r1, #162	; 0xa2
 8002284:	4848      	ldr	r0, [pc, #288]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002286:	31ff      	adds	r1, #255	; 0xff
 8002288:	f002 fecb 	bl	8005022 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800228c:	1ca3      	adds	r3, r4, #2
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	7fdb      	ldrb	r3, [r3, #31]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d904      	bls.n	80022a0 <HAL_ADC_Init+0xb0>
 8002296:	21d1      	movs	r1, #209	; 0xd1
 8002298:	4843      	ldr	r0, [pc, #268]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 800229a:	0049      	lsls	r1, r1, #1
 800229c:	f002 fec1 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80022a0:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_ADC_Init+0x1c0>)
 80022a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022a4:	421a      	tst	r2, r3
 80022a6:	d004      	beq.n	80022b2 <HAL_ADC_Init+0xc2>
 80022a8:	21a4      	movs	r1, #164	; 0xa4
 80022aa:	483f      	ldr	r0, [pc, #252]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 80022ac:	31ff      	adds	r1, #255	; 0xff
 80022ae:	f002 feb8 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80022b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022b4:	2240      	movs	r2, #64	; 0x40
 80022b6:	0019      	movs	r1, r3
 80022b8:	0018      	movs	r0, r3
 80022ba:	4391      	bics	r1, r2
 80022bc:	3280      	adds	r2, #128	; 0x80
 80022be:	4390      	bics	r0, r2
 80022c0:	d00f      	beq.n	80022e2 <HAL_ADC_Init+0xf2>
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	0052      	lsls	r2, r2, #1
 80022c6:	4291      	cmp	r1, r2
 80022c8:	d00b      	beq.n	80022e2 <HAL_ADC_Init+0xf2>
 80022ca:	3280      	adds	r2, #128	; 0x80
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d008      	beq.n	80022e2 <HAL_ADC_Init+0xf2>
 80022d0:	3bc1      	subs	r3, #193	; 0xc1
 80022d2:	3bff      	subs	r3, #255	; 0xff
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d904      	bls.n	80022e2 <HAL_ADC_Init+0xf2>
 80022d8:	21d2      	movs	r1, #210	; 0xd2
 80022da:	4833      	ldr	r0, [pc, #204]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 80022dc:	0049      	lsls	r1, r1, #1
 80022de:	f002 fea0 	bl	8005022 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80022e2:	0023      	movs	r3, r4
 80022e4:	332c      	adds	r3, #44	; 0x2c
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d904      	bls.n	80022f6 <HAL_ADC_Init+0x106>
 80022ec:	21a6      	movs	r1, #166	; 0xa6
 80022ee:	482e      	ldr	r0, [pc, #184]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 80022f0:	31ff      	adds	r1, #255	; 0xff
 80022f2:	f002 fe96 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80022f6:	2204      	movs	r2, #4
 80022f8:	6963      	ldr	r3, [r4, #20]
 80022fa:	3b04      	subs	r3, #4
 80022fc:	4393      	bics	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_ADC_Init+0x11a>
 8002300:	21d3      	movs	r1, #211	; 0xd3
 8002302:	4829      	ldr	r0, [pc, #164]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002304:	0049      	lsls	r1, r1, #1
 8002306:	f002 fe8c 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_ADC_Init+0x1c4>)
 800230c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800230e:	421a      	tst	r2, r3
 8002310:	d004      	beq.n	800231c <HAL_ADC_Init+0x12c>
 8002312:	21a8      	movs	r1, #168	; 0xa8
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002316:	31ff      	adds	r1, #255	; 0xff
 8002318:	f002 fe83 	bl	8005022 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800231c:	69a3      	ldr	r3, [r4, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d904      	bls.n	800232c <HAL_ADC_Init+0x13c>
 8002322:	21d4      	movs	r1, #212	; 0xd4
 8002324:	4820      	ldr	r0, [pc, #128]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002326:	0049      	lsls	r1, r1, #1
 8002328:	f002 fe7b 	bl	8005022 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 800232c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800232e:	2b01      	cmp	r3, #1
 8002330:	d904      	bls.n	800233c <HAL_ADC_Init+0x14c>
 8002332:	21aa      	movs	r1, #170	; 0xaa
 8002334:	481c      	ldr	r0, [pc, #112]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002336:	31ff      	adds	r1, #255	; 0xff
 8002338:	f002 fe73 	bl	8005022 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 800233c:	69e3      	ldr	r3, [r4, #28]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d904      	bls.n	800234c <HAL_ADC_Init+0x15c>
 8002342:	21d5      	movs	r1, #213	; 0xd5
 8002344:	4818      	ldr	r0, [pc, #96]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002346:	0049      	lsls	r1, r1, #1
 8002348:	f002 fe6b 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 800234c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800234e:	2b07      	cmp	r3, #7
 8002350:	d904      	bls.n	800235c <HAL_ADC_Init+0x16c>
 8002352:	21ac      	movs	r1, #172	; 0xac
 8002354:	4814      	ldr	r0, [pc, #80]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002356:	31ff      	adds	r1, #255	; 0xff
 8002358:	f002 fe63 	bl	8005022 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 800235c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800235e:	2b01      	cmp	r3, #1
 8002360:	d904      	bls.n	800236c <HAL_ADC_Init+0x17c>
 8002362:	21d6      	movs	r1, #214	; 0xd6
 8002364:	4810      	ldr	r0, [pc, #64]	; (80023a8 <HAL_ADC_Init+0x1b8>)
 8002366:	0049      	lsls	r1, r1, #1
 8002368:	f002 fe5b 	bl	8005022 <assert_failed>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800236c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_ADC_Init+0x190>
    hadc->Lock = HAL_UNLOCKED;
 8002372:	0022      	movs	r2, r4
 8002374:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8002376:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8002378:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800237a:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800237c:	f003 f808 	bl	8005390 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002380:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002382:	06db      	lsls	r3, r3, #27
 8002384:	d404      	bmi.n	8002390 <HAL_ADC_Init+0x1a0>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002386:	2304      	movs	r3, #4
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	6891      	ldr	r1, [r2, #8]
 800238c:	4019      	ands	r1, r3
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800238e:	d013      	beq.n	80023b8 <HAL_ADC_Init+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002390:	2310      	movs	r3, #16
 8002392:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	4313      	orrs	r3, r2
 8002398:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800239a:	2300      	movs	r3, #0
 800239c:	3450      	adds	r4, #80	; 0x50
 800239e:	7023      	strb	r3, [r4, #0]
}
 80023a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40012400 	.word	0x40012400
 80023a8:	08005a80 	.word	0x08005a80
 80023ac:	fff3ffff 	.word	0xfff3ffff
 80023b0:	fffff3ff 	.word	0xfffff3ff
 80023b4:	ffffefff 	.word	0xffffefff
  ADC_STATE_CLR_SET(hadc->State,
 80023b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023ba:	486a      	ldr	r0, [pc, #424]	; (8002564 <HAL_ADC_Init+0x374>)
 80023bc:	4018      	ands	r0, r3
 80023be:	2302      	movs	r3, #2
 80023c0:	4303      	orrs	r3, r0
 80023c2:	6563      	str	r3, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c4:	2303      	movs	r3, #3
 80023c6:	6890      	ldr	r0, [r2, #8]
 80023c8:	4018      	ands	r0, r3
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_ADC_Init+0x378>)
 80023cc:	2801      	cmp	r0, #1
 80023ce:	d102      	bne.n	80023d6 <HAL_ADC_Init+0x1e6>
 80023d0:	6817      	ldr	r7, [r2, #0]
 80023d2:	4207      	tst	r7, r0
 80023d4:	d11a      	bne.n	800240c <HAL_ADC_Init+0x21c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80023d6:	2580      	movs	r5, #128	; 0x80
 80023d8:	6867      	ldr	r7, [r4, #4]
 80023da:	05ed      	lsls	r5, r5, #23
 80023dc:	0078      	lsls	r0, r7, #1
 80023de:	0840      	lsrs	r0, r0, #1
 80023e0:	42a8      	cmp	r0, r5
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_Init+0x1fe>
 80023e4:	2080      	movs	r0, #128	; 0x80
 80023e6:	0600      	lsls	r0, r0, #24
 80023e8:	4287      	cmp	r7, r0
 80023ea:	d000      	beq.n	80023ee <HAL_ADC_Init+0x1fe>
 80023ec:	e09e      	b.n	800252c <HAL_ADC_Init+0x33c>
 80023ee:	6910      	ldr	r0, [r2, #16]
 80023f0:	0080      	lsls	r0, r0, #2
 80023f2:	0880      	lsrs	r0, r0, #2
 80023f4:	6110      	str	r0, [r2, #16]
 80023f6:	6910      	ldr	r0, [r2, #16]
 80023f8:	4307      	orrs	r7, r0
 80023fa:	6117      	str	r7, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80023fc:	2718      	movs	r7, #24
 80023fe:	68d0      	ldr	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002400:	68a5      	ldr	r5, [r4, #8]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002402:	43b8      	bics	r0, r7
 8002404:	60d0      	str	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002406:	68d0      	ldr	r0, [r2, #12]
 8002408:	4328      	orrs	r0, r5
 800240a:	60d0      	str	r0, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4857      	ldr	r0, [pc, #348]	; (800256c <HAL_ADC_Init+0x37c>)
 8002410:	4002      	ands	r2, r0
 8002412:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002414:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	0652      	lsls	r2, r2, #25
 800241a:	4302      	orrs	r2, r0
 800241c:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	055b      	lsls	r3, r3, #21
 8002424:	6890      	ldr	r0, [r2, #8]
 8002426:	4218      	tst	r0, r3
 8002428:	d102      	bne.n	8002430 <HAL_ADC_Init+0x240>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800242a:	6890      	ldr	r0, [r2, #8]
 800242c:	4303      	orrs	r3, r0
 800242e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002430:	68d3      	ldr	r3, [r2, #12]
 8002432:	484f      	ldr	r0, [pc, #316]	; (8002570 <HAL_ADC_Init+0x380>)
 8002434:	4003      	ands	r3, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002436:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002438:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800243a:	68d7      	ldr	r7, [r2, #12]
 800243c:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800243e:	2802      	cmp	r0, #2
 8002440:	d100      	bne.n	8002444 <HAL_ADC_Init+0x254>
 8002442:	2104      	movs	r1, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002444:	6b25      	ldr	r5, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002446:	7ff0      	ldrb	r0, [r6, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002448:	432b      	orrs	r3, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800244a:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800244c:	433b      	orrs	r3, r7
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800244e:	03ae      	lsls	r6, r5, #14
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002450:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002452:	4333      	orrs	r3, r6
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002454:	03ee      	lsls	r6, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002456:	4333      	orrs	r3, r6
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002458:	0346      	lsls	r6, r0, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800245a:	4333      	orrs	r3, r6
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800245c:	0026      	movs	r6, r4
 800245e:	362c      	adds	r6, #44	; 0x2c
 8002460:	7836      	ldrb	r6, [r6, #0]
 8002462:	0076      	lsls	r6, r6, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002464:	4333      	orrs	r3, r6
 8002466:	430b      	orrs	r3, r1
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002468:	21c2      	movs	r1, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800246a:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800246c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800246e:	31ff      	adds	r1, #255	; 0xff
 8002470:	428b      	cmp	r3, r1
 8002472:	d004      	beq.n	800247e <HAL_ADC_Init+0x28e>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002474:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002476:	68d1      	ldr	r1, [r2, #12]
 8002478:	432b      	orrs	r3, r5
 800247a:	430b      	orrs	r3, r1
 800247c:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800247e:	1ca3      	adds	r3, r4, #2
 8002480:	7fdb      	ldrb	r3, [r3, #31]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d106      	bne.n	8002494 <HAL_ADC_Init+0x2a4>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002486:	2800      	cmp	r0, #0
 8002488:	d15c      	bne.n	8002544 <HAL_ADC_Init+0x354>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	68d1      	ldr	r1, [r2, #12]
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	430b      	orrs	r3, r1
 8002492:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002496:	2b01      	cmp	r3, #1
 8002498:	d15c      	bne.n	8002554 <HAL_ADC_Init+0x364>
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 800249a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800249c:	291c      	cmp	r1, #28
 800249e:	d805      	bhi.n	80024ac <HAL_ADC_Init+0x2bc>
 80024a0:	4a34      	ldr	r2, [pc, #208]	; (8002574 <HAL_ADC_Init+0x384>)
 80024a2:	40ca      	lsrs	r2, r1
 80024a4:	4393      	bics	r3, r2
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_ADC_Init+0x2c6>
 80024ac:	2193      	movs	r1, #147	; 0x93
 80024ae:	4832      	ldr	r0, [pc, #200]	; (8002578 <HAL_ADC_Init+0x388>)
 80024b0:	0089      	lsls	r1, r1, #2
 80024b2:	f002 fdb6 	bl	8005022 <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 80024b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024b8:	2260      	movs	r2, #96	; 0x60
 80024ba:	0019      	movs	r1, r3
 80024bc:	4391      	bics	r1, r2
 80024be:	d009      	beq.n	80024d4 <HAL_ADC_Init+0x2e4>
 80024c0:	2980      	cmp	r1, #128	; 0x80
 80024c2:	d007      	beq.n	80024d4 <HAL_ADC_Init+0x2e4>
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	0052      	lsls	r2, r2, #1
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <HAL_ADC_Init+0x2e4>
 80024cc:	492b      	ldr	r1, [pc, #172]	; (800257c <HAL_ADC_Init+0x38c>)
 80024ce:	482a      	ldr	r0, [pc, #168]	; (8002578 <HAL_ADC_Init+0x388>)
 80024d0:	f002 fda7 	bl	8005022 <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_ADC_Init+0x390>)
 80024d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80024d8:	421a      	tst	r2, r3
 80024da:	d003      	beq.n	80024e4 <HAL_ADC_Init+0x2f4>
 80024dc:	4929      	ldr	r1, [pc, #164]	; (8002584 <HAL_ADC_Init+0x394>)
 80024de:	4826      	ldr	r0, [pc, #152]	; (8002578 <HAL_ADC_Init+0x388>)
 80024e0:	f002 fd9f 	bl	8005022 <assert_failed>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80024e4:	6822      	ldr	r2, [r4, #0]
 80024e6:	4928      	ldr	r1, [pc, #160]	; (8002588 <HAL_ADC_Init+0x398>)
 80024e8:	6913      	ldr	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80024ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80024ec:	400b      	ands	r3, r1
 80024ee:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80024f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024f2:	6911      	ldr	r1, [r2, #16]
 80024f4:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 80024f6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80024f8:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80024fa:	430b      	orrs	r3, r1
 80024fc:	6113      	str	r3, [r2, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80024fe:	2301      	movs	r3, #1
 8002500:	6911      	ldr	r1, [r2, #16]
 8002502:	430b      	orrs	r3, r1
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002504:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002506:	2107      	movs	r1, #7
 8002508:	6823      	ldr	r3, [r4, #0]
  ADC_CLEAR_ERRORCODE(hadc);
 800250a:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	438a      	bics	r2, r1
 8002510:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002516:	430a      	orrs	r2, r1
 8002518:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800251a:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800251c:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 800251e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002520:	4393      	bics	r3, r2
 8002522:	001a      	movs	r2, r3
 8002524:	2301      	movs	r3, #1
 8002526:	4313      	orrs	r3, r2
 8002528:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800252a:	e739      	b.n	80023a0 <HAL_ADC_Init+0x1b0>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800252c:	6910      	ldr	r0, [r2, #16]
 800252e:	4d17      	ldr	r5, [pc, #92]	; (800258c <HAL_ADC_Init+0x39c>)
 8002530:	0080      	lsls	r0, r0, #2
 8002532:	0880      	lsrs	r0, r0, #2
 8002534:	6110      	str	r0, [r2, #16]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	4028      	ands	r0, r5
 800253a:	6018      	str	r0, [r3, #0]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	4307      	orrs	r7, r0
 8002540:	601f      	str	r7, [r3, #0]
 8002542:	e75b      	b.n	80023fc <HAL_ADC_Init+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	2120      	movs	r1, #32
 8002546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002548:	4301      	orrs	r1, r0
 800254a:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800254e:	430b      	orrs	r3, r1
 8002550:	65a3      	str	r3, [r4, #88]	; 0x58
 8002552:	e79f      	b.n	8002494 <HAL_ADC_Init+0x2a4>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002554:	2101      	movs	r1, #1
 8002556:	6913      	ldr	r3, [r2, #16]
 8002558:	420b      	tst	r3, r1
 800255a:	d0d4      	beq.n	8002506 <HAL_ADC_Init+0x316>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800255c:	6913      	ldr	r3, [r2, #16]
 800255e:	438b      	bics	r3, r1
 8002560:	e7d0      	b.n	8002504 <HAL_ADC_Init+0x314>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	fffffefd 	.word	0xfffffefd
 8002568:	40012708 	.word	0x40012708
 800256c:	fdffffff 	.word	0xfdffffff
 8002570:	fffe0219 	.word	0xfffe0219
 8002574:	11111111 	.word	0x11111111
 8002578:	08005a80 	.word	0x08005a80
 800257c:	0000024d 	.word	0x0000024d
 8002580:	fffffdff 	.word	0xfffffdff
 8002584:	0000024e 	.word	0x0000024e
 8002588:	fffffc03 	.word	0xfffffc03
 800258c:	ffc3ffff 	.word	0xffc3ffff

08002590 <HAL_ADC_Start_DMA>:
{
 8002590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_ADC_Start_DMA+0x94>)
{
 8002594:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002596:	6802      	ldr	r2, [r0, #0]
{
 8002598:	0004      	movs	r4, r0
 800259a:	000f      	movs	r7, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800259c:	429a      	cmp	r2, r3
 800259e:	d003      	beq.n	80025a8 <HAL_ADC_Start_DMA+0x18>
 80025a0:	4921      	ldr	r1, [pc, #132]	; (8002628 <HAL_ADC_Start_DMA+0x98>)
 80025a2:	4822      	ldr	r0, [pc, #136]	; (800262c <HAL_ADC_Start_DMA+0x9c>)
 80025a4:	f002 fd3d 	bl	8005022 <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025a8:	6823      	ldr	r3, [r4, #0]
    tmp_hal_status = HAL_BUSY;
 80025aa:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	075b      	lsls	r3, r3, #29
 80025b0:	d430      	bmi.n	8002614 <HAL_ADC_Start_DMA+0x84>
    __HAL_LOCK(hadc);
 80025b2:	0026      	movs	r6, r4
 80025b4:	3650      	adds	r6, #80	; 0x50
 80025b6:	7833      	ldrb	r3, [r6, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d02b      	beq.n	8002614 <HAL_ADC_Start_DMA+0x84>
 80025bc:	2301      	movs	r3, #1
 80025be:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80025c0:	69e3      	ldr	r3, [r4, #28]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d127      	bne.n	8002616 <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State,
 80025c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025c8:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_ADC_Start_DMA+0xa0>)
      ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80025cc:	401a      	ands	r2, r3
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4313      	orrs	r3, r2
 80025d4:	6563      	str	r3, [r4, #84]	; 0x54
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025d6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 80025da:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80025dc:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025de:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025e2:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025e4:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_ADC_Start_DMA+0xac>)
 80025e8:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ea:	231c      	movs	r3, #28
 80025ec:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ee:	684a      	ldr	r2, [r1, #4]
 80025f0:	3b0c      	subs	r3, #12
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80025f6:	2301      	movs	r3, #1
 80025f8:	68ca      	ldr	r2, [r1, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025fe:	003a      	movs	r2, r7
 8002600:	3140      	adds	r1, #64	; 0x40
 8002602:	9b01      	ldr	r3, [sp, #4]
 8002604:	f000 faf8 	bl	8002bf8 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002608:	2304      	movs	r3, #4
 800260a:	0028      	movs	r0, r5
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6891      	ldr	r1, [r2, #8]
 8002610:	430b      	orrs	r3, r1
 8002612:	6093      	str	r3, [r2, #8]
}
 8002614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002616:	0020      	movs	r0, r4
 8002618:	f7ff fdb2 	bl	8002180 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800261c:	2800      	cmp	r0, #0
 800261e:	d1f9      	bne.n	8002614 <HAL_ADC_Start_DMA+0x84>
 8002620:	e7d1      	b.n	80025c6 <HAL_ADC_Start_DMA+0x36>
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	40012400 	.word	0x40012400
 8002628:	000005d9 	.word	0x000005d9
 800262c:	08005a80 	.word	0x08005a80
 8002630:	fffff0fe 	.word	0xfffff0fe
 8002634:	08002645 	.word	0x08002645
 8002638:	080026b7 	.word	0x080026b7
 800263c:	080026c5 	.word	0x080026c5

08002640 <HAL_ADC_ConvCpltCallback>:
 8002640:	4770      	bx	lr
	...

08002644 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002644:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002646:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002648:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800264a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800264c:	4211      	tst	r1, r2
 800264e:	d12b      	bne.n	80026a8 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002652:	32b1      	adds	r2, #177	; 0xb1
 8002654:	32ff      	adds	r2, #255	; 0xff
 8002656:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002658:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	0109      	lsls	r1, r1, #4
 8002660:	68d0      	ldr	r0, [r2, #12]
 8002662:	4208      	tst	r0, r1
 8002664:	d113      	bne.n	800268e <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002666:	1c59      	adds	r1, r3, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002668:	7fc9      	ldrb	r1, [r1, #31]
 800266a:	2900      	cmp	r1, #0
 800266c:	d10f      	bne.n	800268e <ADC_DMAConvCplt+0x4a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800266e:	6811      	ldr	r1, [r2, #0]
 8002670:	0709      	lsls	r1, r1, #28
 8002672:	d50c      	bpl.n	800268e <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002674:	6891      	ldr	r1, [r2, #8]
 8002676:	0749      	lsls	r1, r1, #29
 8002678:	d40d      	bmi.n	8002696 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800267a:	200c      	movs	r0, #12
 800267c:	6851      	ldr	r1, [r2, #4]
 800267e:	4381      	bics	r1, r0
 8002680:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002682:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002684:	490a      	ldr	r1, [pc, #40]	; (80026b0 <ADC_DMAConvCplt+0x6c>)
 8002686:	4011      	ands	r1, r2
 8002688:	2201      	movs	r2, #1
 800268a:	430a      	orrs	r2, r1
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff ffd6 	bl	8002640 <HAL_ADC_ConvCpltCallback>
}
 8002694:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002696:	2220      	movs	r2, #32
 8002698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800269a:	430a      	orrs	r2, r1
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	2201      	movs	r2, #1
 80026a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80026a2:	430a      	orrs	r2, r1
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58
 80026a6:	e7f2      	b.n	800268e <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ac:	4798      	blx	r3
}
 80026ae:	e7f1      	b.n	8002694 <ADC_DMAConvCplt+0x50>
 80026b0:	fffffefe 	.word	0xfffffefe

080026b4 <HAL_ADC_ConvHalfCpltCallback>:
 80026b4:	4770      	bx	lr

080026b6 <ADC_DMAHalfConvCplt>:
{
 80026b6:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80026b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80026ba:	f7ff fffb 	bl	80026b4 <HAL_ADC_ConvHalfCpltCallback>
}
 80026be:	bd10      	pop	{r4, pc}

080026c0 <HAL_ADC_LevelOutOfWindowCallback>:
 80026c0:	4770      	bx	lr

080026c2 <HAL_ADC_ErrorCallback>:
}
 80026c2:	4770      	bx	lr

080026c4 <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026c4:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80026c8:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026ca:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80026cc:	4313      	orrs	r3, r2
 80026ce:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026d0:	2304      	movs	r3, #4
 80026d2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80026d4:	4313      	orrs	r3, r2
 80026d6:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 80026d8:	f7ff fff3 	bl	80026c2 <HAL_ADC_ErrorCallback>
}
 80026dc:	bd10      	pop	{r4, pc}
	...

080026e0 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80026e0:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <HAL_ADC_IRQHandler+0x114>)
 80026e2:	6802      	ldr	r2, [r0, #0]
{
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	0004      	movs	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d003      	beq.n	80026f4 <HAL_ADC_IRQHandler+0x14>
 80026ec:	4942      	ldr	r1, [pc, #264]	; (80027f8 <HAL_ADC_IRQHandler+0x118>)
 80026ee:	4843      	ldr	r0, [pc, #268]	; (80027fc <HAL_ADC_IRQHandler+0x11c>)
 80026f0:	f002 fc97 	bl	8005022 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80026f4:	1c65      	adds	r5, r4, #1
 80026f6:	7feb      	ldrb	r3, [r5, #31]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d903      	bls.n	8002704 <HAL_ADC_IRQHandler+0x24>
 80026fc:	4940      	ldr	r1, [pc, #256]	; (8002800 <HAL_ADC_IRQHandler+0x120>)
 80026fe:	483f      	ldr	r0, [pc, #252]	; (80027fc <HAL_ADC_IRQHandler+0x11c>)
 8002700:	f002 fc8f 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8002704:	2204      	movs	r2, #4
 8002706:	6963      	ldr	r3, [r4, #20]
 8002708:	3b04      	subs	r3, #4
 800270a:	4393      	bics	r3, r2
 800270c:	d003      	beq.n	8002716 <HAL_ADC_IRQHandler+0x36>
 800270e:	493d      	ldr	r1, [pc, #244]	; (8002804 <HAL_ADC_IRQHandler+0x124>)
 8002710:	483a      	ldr	r0, [pc, #232]	; (80027fc <HAL_ADC_IRQHandler+0x11c>)
 8002712:	f002 fc86 	bl	8005022 <assert_failed>
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002716:	2204      	movs	r2, #4
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	4211      	tst	r1, r2
 800271e:	d002      	beq.n	8002726 <HAL_ADC_IRQHandler+0x46>
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	4211      	tst	r1, r2
 8002724:	d106      	bne.n	8002734 <HAL_ADC_IRQHandler+0x54>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002726:	2208      	movs	r2, #8
 8002728:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800272a:	4211      	tst	r1, r2
 800272c:	d02b      	beq.n	8002786 <HAL_ADC_IRQHandler+0xa6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	4211      	tst	r1, r2
 8002732:	d028      	beq.n	8002786 <HAL_ADC_IRQHandler+0xa6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002734:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002736:	06d2      	lsls	r2, r2, #27
 8002738:	d404      	bmi.n	8002744 <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	430a      	orrs	r2, r1
 8002742:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002744:	22c0      	movs	r2, #192	; 0xc0
 8002746:	68d9      	ldr	r1, [r3, #12]
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	4211      	tst	r1, r2
 800274c:	d112      	bne.n	8002774 <HAL_ADC_IRQHandler+0x94>
 800274e:	7fea      	ldrb	r2, [r5, #31]
 8002750:	2a00      	cmp	r2, #0
 8002752:	d10f      	bne.n	8002774 <HAL_ADC_IRQHandler+0x94>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	0712      	lsls	r2, r2, #28
 8002758:	d50c      	bpl.n	8002774 <HAL_ADC_IRQHandler+0x94>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	0752      	lsls	r2, r2, #29
 800275e:	d43f      	bmi.n	80027e0 <HAL_ADC_IRQHandler+0x100>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002760:	210c      	movs	r1, #12
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	438a      	bics	r2, r1
 8002766:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800276a:	4a27      	ldr	r2, [pc, #156]	; (8002808 <HAL_ADC_IRQHandler+0x128>)
 800276c:	401a      	ands	r2, r3
 800276e:	2301      	movs	r3, #1
 8002770:	4313      	orrs	r3, r2
 8002772:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002774:	0020      	movs	r0, r4
 8002776:	f7ff ff63 	bl	8002640 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800277a:	69a3      	ldr	r3, [r4, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d002      	beq.n	8002786 <HAL_ADC_IRQHandler+0xa6>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002780:	220c      	movs	r2, #12
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002786:	2580      	movs	r5, #128	; 0x80
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	422a      	tst	r2, r5
 800278e:	d00c      	beq.n	80027aa <HAL_ADC_IRQHandler+0xca>
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	422b      	tst	r3, r5
 8002794:	d009      	beq.n	80027aa <HAL_ADC_IRQHandler+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800279a:	025b      	lsls	r3, r3, #9
 800279c:	4313      	orrs	r3, r2
 800279e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027a0:	0020      	movs	r0, r4
 80027a2:	f7ff ff8d 	bl	80026c0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80027aa:	2210      	movs	r2, #16
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	4211      	tst	r1, r2
 80027b2:	d014      	beq.n	80027de <HAL_ADC_IRQHandler+0xfe>
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	4211      	tst	r1, r2
 80027b8:	d011      	beq.n	80027de <HAL_ADC_IRQHandler+0xfe>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80027ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d002      	beq.n	80027c6 <HAL_ADC_IRQHandler+0xe6>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80027c0:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80027c2:	07d2      	lsls	r2, r2, #31
 80027c4:	d508      	bpl.n	80027d8 <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027c6:	2202      	movs	r2, #2
 80027c8:	6da1      	ldr	r1, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80027ca:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027cc:	430a      	orrs	r2, r1
 80027ce:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027d0:	2210      	movs	r2, #16
 80027d2:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80027d4:	f7ff ff75 	bl	80026c2 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027d8:	2210      	movs	r2, #16
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	601a      	str	r2, [r3, #0]
}
 80027de:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	2320      	movs	r3, #32
 80027e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80027e4:	4313      	orrs	r3, r2
 80027e6:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e8:	2301      	movs	r3, #1
 80027ea:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80027ec:	4313      	orrs	r3, r2
 80027ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80027f0:	e7c0      	b.n	8002774 <HAL_ADC_IRQHandler+0x94>
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	40012400 	.word	0x40012400
 80027f8:	00000694 	.word	0x00000694
 80027fc:	08005a80 	.word	0x08005a80
 8002800:	00000695 	.word	0x00000695
 8002804:	00000696 	.word	0x00000696
 8002808:	fffffefe 	.word	0xfffffefe

0800280c <HAL_ADC_ConfigChannel>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_ADC_ConfigChannel+0x130>)
 800280e:	6802      	ldr	r2, [r0, #0]
{
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	0005      	movs	r5, r0
 8002814:	000c      	movs	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002816:	429a      	cmp	r2, r3
 8002818:	d003      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x16>
 800281a:	4949      	ldr	r1, [pc, #292]	; (8002940 <HAL_ADC_ConfigChannel+0x134>)
 800281c:	4849      	ldr	r0, [pc, #292]	; (8002944 <HAL_ADC_ConfigChannel+0x138>)
 800281e:	f002 fc00 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d036      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002828:	4a47      	ldr	r2, [pc, #284]	; (8002948 <HAL_ADC_ConfigChannel+0x13c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d033      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 800282e:	4a47      	ldr	r2, [pc, #284]	; (800294c <HAL_ADC_ConfigChannel+0x140>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d030      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002834:	4a46      	ldr	r2, [pc, #280]	; (8002950 <HAL_ADC_ConfigChannel+0x144>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02d      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 800283a:	4a46      	ldr	r2, [pc, #280]	; (8002954 <HAL_ADC_ConfigChannel+0x148>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d02a      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002840:	4a45      	ldr	r2, [pc, #276]	; (8002958 <HAL_ADC_ConfigChannel+0x14c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d027      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002846:	4a45      	ldr	r2, [pc, #276]	; (800295c <HAL_ADC_ConfigChannel+0x150>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d024      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 800284c:	4a44      	ldr	r2, [pc, #272]	; (8002960 <HAL_ADC_ConfigChannel+0x154>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d021      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002852:	4a44      	ldr	r2, [pc, #272]	; (8002964 <HAL_ADC_ConfigChannel+0x158>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d01e      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002858:	4a43      	ldr	r2, [pc, #268]	; (8002968 <HAL_ADC_ConfigChannel+0x15c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01b      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 800285e:	4a43      	ldr	r2, [pc, #268]	; (800296c <HAL_ADC_ConfigChannel+0x160>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d018      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002864:	4a42      	ldr	r2, [pc, #264]	; (8002970 <HAL_ADC_ConfigChannel+0x164>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d015      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 800286a:	4a42      	ldr	r2, [pc, #264]	; (8002974 <HAL_ADC_ConfigChannel+0x168>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d012      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002870:	4a41      	ldr	r2, [pc, #260]	; (8002978 <HAL_ADC_ConfigChannel+0x16c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00f      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002876:	4a41      	ldr	r2, [pc, #260]	; (800297c <HAL_ADC_ConfigChannel+0x170>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00c      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 800287c:	4a40      	ldr	r2, [pc, #256]	; (8002980 <HAL_ADC_ConfigChannel+0x174>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002882:	4a40      	ldr	r2, [pc, #256]	; (8002984 <HAL_ADC_ConfigChannel+0x178>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d006      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 8002888:	4a3f      	ldr	r2, [pc, #252]	; (8002988 <HAL_ADC_ConfigChannel+0x17c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d003      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x8a>
 800288e:	493f      	ldr	r1, [pc, #252]	; (800298c <HAL_ADC_ConfigChannel+0x180>)
 8002890:	482c      	ldr	r0, [pc, #176]	; (8002944 <HAL_ADC_ConfigChannel+0x138>)
 8002892:	f002 fbc6 	bl	8005022 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 8002896:	6863      	ldr	r3, [r4, #4]
 8002898:	4a3d      	ldr	r2, [pc, #244]	; (8002990 <HAL_ADC_ConfigChannel+0x184>)
 800289a:	189b      	adds	r3, r3, r2
 800289c:	2b01      	cmp	r3, #1
 800289e:	d904      	bls.n	80028aa <HAL_ADC_ConfigChannel+0x9e>
 80028a0:	21f0      	movs	r1, #240	; 0xf0
 80028a2:	4828      	ldr	r0, [pc, #160]	; (8002944 <HAL_ADC_ConfigChannel+0x138>)
 80028a4:	00c9      	lsls	r1, r1, #3
 80028a6:	f002 fbbc 	bl	8005022 <assert_failed>
  __HAL_LOCK(hadc);
 80028aa:	002e      	movs	r6, r5
 80028ac:	3650      	adds	r6, #80	; 0x50
 80028ae:	7833      	ldrb	r3, [r6, #0]
 80028b0:	2002      	movs	r0, #2
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d00b      	beq.n	80028ce <HAL_ADC_ConfigChannel+0xc2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80028b6:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 80028b8:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80028ba:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 80028bc:	7030      	strb	r0, [r6, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80028be:	075b      	lsls	r3, r3, #29
 80028c0:	d506      	bpl.n	80028d0 <HAL_ADC_ConfigChannel+0xc4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c2:	2320      	movs	r3, #32
 80028c4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80028c6:	4313      	orrs	r3, r2
 80028c8:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80028ca:	2300      	movs	r3, #0
 80028cc:	7033      	strb	r3, [r6, #0]
}
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 80028d2:	4930      	ldr	r1, [pc, #192]	; (8002994 <HAL_ADC_ConfigChannel+0x188>)
 80028d4:	6865      	ldr	r5, [r4, #4]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	02c0      	lsls	r0, r0, #11
 80028da:	428d      	cmp	r5, r1
 80028dc:	d01b      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80028de:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80028e0:	0359      	lsls	r1, r3, #13
 80028e2:	0b49      	lsrs	r1, r1, #13
 80028e4:	4329      	orrs	r1, r5
 80028e6:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80028e8:	4203      	tst	r3, r0
 80028ea:	d008      	beq.n	80028fe <HAL_ADC_ConfigChannel+0xf2>
      ADC->CCR |= ADC_CCR_TSEN;   
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <HAL_ADC_ConfigChannel+0x18c>)
 80028f0:	041b      	lsls	r3, r3, #16
 80028f2:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80028f4:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80028f6:	430b      	orrs	r3, r1
 80028f8:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80028fa:	f7ff fc2b 	bl	8002154 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	039b      	lsls	r3, r3, #14
 8002902:	d505      	bpl.n	8002910 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <HAL_ADC_ConfigChannel+0x18c>)
 8002908:	03db      	lsls	r3, r3, #15
 800290a:	6811      	ldr	r1, [r2, #0]
 800290c:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800290e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8002910:	2000      	movs	r0, #0
 8002912:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8002914:	e7db      	b.n	80028ce <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002916:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002918:	035c      	lsls	r4, r3, #13
 800291a:	0b64      	lsrs	r4, r4, #13
 800291c:	43a1      	bics	r1, r4
 800291e:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002920:	4203      	tst	r3, r0
 8002922:	d004      	beq.n	800292e <HAL_ADC_ConfigChannel+0x122>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002924:	491c      	ldr	r1, [pc, #112]	; (8002998 <HAL_ADC_ConfigChannel+0x18c>)
 8002926:	481d      	ldr	r0, [pc, #116]	; (800299c <HAL_ADC_ConfigChannel+0x190>)
 8002928:	680a      	ldr	r2, [r1, #0]
 800292a:	4002      	ands	r2, r0
 800292c:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800292e:	039b      	lsls	r3, r3, #14
 8002930:	d5ee      	bpl.n	8002910 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002932:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_ADC_ConfigChannel+0x18c>)
 8002934:	491a      	ldr	r1, [pc, #104]	; (80029a0 <HAL_ADC_ConfigChannel+0x194>)
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	400b      	ands	r3, r1
 800293a:	e7e8      	b.n	800290e <HAL_ADC_ConfigChannel+0x102>
 800293c:	40012400 	.word	0x40012400
 8002940:	0000077e 	.word	0x0000077e
 8002944:	08005a80 	.word	0x08005a80
 8002948:	04000002 	.word	0x04000002
 800294c:	08000004 	.word	0x08000004
 8002950:	0c000008 	.word	0x0c000008
 8002954:	10000010 	.word	0x10000010
 8002958:	14000020 	.word	0x14000020
 800295c:	18000040 	.word	0x18000040
 8002960:	1c000080 	.word	0x1c000080
 8002964:	20000100 	.word	0x20000100
 8002968:	24000200 	.word	0x24000200
 800296c:	28000400 	.word	0x28000400
 8002970:	2c000800 	.word	0x2c000800
 8002974:	30001000 	.word	0x30001000
 8002978:	34002000 	.word	0x34002000
 800297c:	38004000 	.word	0x38004000
 8002980:	3c008000 	.word	0x3c008000
 8002984:	48040000 	.word	0x48040000
 8002988:	44020000 	.word	0x44020000
 800298c:	0000077f 	.word	0x0000077f
 8002990:	fffff000 	.word	0xfffff000
 8002994:	00001001 	.word	0x00001001
 8002998:	40012708 	.word	0x40012708
 800299c:	ff7fffff 	.word	0xff7fffff
 80029a0:	ffbfffff 	.word	0xffbfffff

080029a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	0004      	movs	r4, r0
 80029a8:	000d      	movs	r5, r1
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80029aa:	2903      	cmp	r1, #3
 80029ac:	d903      	bls.n	80029b6 <HAL_NVIC_SetPriority+0x12>
 80029ae:	2187      	movs	r1, #135	; 0x87
 80029b0:	4816      	ldr	r0, [pc, #88]	; (8002a0c <HAL_NVIC_SetPriority+0x68>)
 80029b2:	f002 fb36 	bl	8005022 <assert_failed>
 80029b6:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80029b8:	2c00      	cmp	r4, #0
 80029ba:	da14      	bge.n	80029e6 <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029bc:	230f      	movs	r3, #15
 80029be:	b2e4      	uxtb	r4, r4
 80029c0:	4023      	ands	r3, r4
 80029c2:	3b08      	subs	r3, #8
 80029c4:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_NVIC_SetPriority+0x6c>)
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	2203      	movs	r2, #3
 80029ce:	4014      	ands	r4, r2
 80029d0:	4094      	lsls	r4, r2
 80029d2:	32fc      	adds	r2, #252	; 0xfc
 80029d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029d6:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029d8:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029da:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029dc:	69d8      	ldr	r0, [r3, #28]
 80029de:	43a8      	bics	r0, r5
 80029e0:	4302      	orrs	r2, r0
 80029e2:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e6:	2503      	movs	r5, #3
 80029e8:	08a3      	lsrs	r3, r4, #2
 80029ea:	402c      	ands	r4, r5
 80029ec:	40ac      	lsls	r4, r5
 80029ee:	35fc      	adds	r5, #252	; 0xfc
 80029f0:	002e      	movs	r6, r5
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_NVIC_SetPriority+0x70>)
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	22c0      	movs	r2, #192	; 0xc0
 80029fa:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029fc:	4029      	ands	r1, r5
 80029fe:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	5898      	ldr	r0, [r3, r2]
 8002a04:	43b0      	bics	r0, r6
 8002a06:	4301      	orrs	r1, r0
 8002a08:	5099      	str	r1, [r3, r2]
 8002a0a:	e7eb      	b.n	80029e4 <HAL_NVIC_SetPriority+0x40>
 8002a0c:	08005ab8 	.word	0x08005ab8
 8002a10:	e000ed00 	.word	0xe000ed00
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002a1c:	da03      	bge.n	8002a26 <HAL_NVIC_EnableIRQ+0xe>
 8002a1e:	2197      	movs	r1, #151	; 0x97
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <HAL_NVIC_EnableIRQ+0x1c>)
 8002a22:	f002 fafe 	bl	8005022 <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a26:	231f      	movs	r3, #31
 8002a28:	401c      	ands	r4, r3
 8002a2a:	3b1e      	subs	r3, #30
 8002a2c:	40a3      	lsls	r3, r4
 8002a2e:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <HAL_NVIC_EnableIRQ+0x20>)
 8002a30:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a32:	bd10      	pop	{r4, pc}
 8002a34:	08005ab8 	.word	0x08005ab8
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <HAL_SYSTICK_Config+0x28>)
 8002a3e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a40:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d80d      	bhi.n	8002a62 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a46:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a4a:	4808      	ldr	r0, [pc, #32]	; (8002a6c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a4e:	6a03      	ldr	r3, [r0, #32]
 8002a50:	0609      	lsls	r1, r1, #24
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	430b      	orrs	r3, r1
 8002a58:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a60:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002a62:	4770      	bx	lr
 8002a64:	00ffffff 	.word	0x00ffffff
 8002a68:	e000e010 	.word	0xe000e010
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002a74:	2001      	movs	r0, #1
  if(hdma == NULL)
 8002a76:	2c00      	cmp	r4, #0
 8002a78:	d100      	bne.n	8002a7c <HAL_DMA_Init+0xc>
 8002a7a:	e09e      	b.n	8002bba <HAL_DMA_Init+0x14a>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	4a4f      	ldr	r2, [pc, #316]	; (8002bbc <HAL_DMA_Init+0x14c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d015      	beq.n	8002ab0 <HAL_DMA_Init+0x40>
 8002a84:	4a4e      	ldr	r2, [pc, #312]	; (8002bc0 <HAL_DMA_Init+0x150>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d012      	beq.n	8002ab0 <HAL_DMA_Init+0x40>
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <HAL_DMA_Init+0x154>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00f      	beq.n	8002ab0 <HAL_DMA_Init+0x40>
 8002a90:	4a4d      	ldr	r2, [pc, #308]	; (8002bc8 <HAL_DMA_Init+0x158>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00c      	beq.n	8002ab0 <HAL_DMA_Init+0x40>
 8002a96:	4a4d      	ldr	r2, [pc, #308]	; (8002bcc <HAL_DMA_Init+0x15c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d009      	beq.n	8002ab0 <HAL_DMA_Init+0x40>
 8002a9c:	4a4c      	ldr	r2, [pc, #304]	; (8002bd0 <HAL_DMA_Init+0x160>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d006      	beq.n	8002ab0 <HAL_DMA_Init+0x40>
 8002aa2:	4a4c      	ldr	r2, [pc, #304]	; (8002bd4 <HAL_DMA_Init+0x164>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Init+0x40>
 8002aa8:	2196      	movs	r1, #150	; 0x96
 8002aaa:	484b      	ldr	r0, [pc, #300]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002aac:	f002 fab9 	bl	8005022 <assert_failed>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	2b0a      	cmp	r3, #10
 8002ab4:	d906      	bls.n	8002ac4 <HAL_DMA_Init+0x54>
 8002ab6:	3b0c      	subs	r3, #12
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d903      	bls.n	8002ac4 <HAL_DMA_Init+0x54>
 8002abc:	2197      	movs	r1, #151	; 0x97
 8002abe:	4846      	ldr	r0, [pc, #280]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002ac0:	f002 faaf 	bl	8005022 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002ac4:	68a3      	ldr	r3, [r4, #8]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	0019      	movs	r1, r3
 8002aca:	4391      	bics	r1, r2
 8002acc:	d007      	beq.n	8002ade <HAL_DMA_Init+0x6e>
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	01d2      	lsls	r2, r2, #7
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d003      	beq.n	8002ade <HAL_DMA_Init+0x6e>
 8002ad6:	2198      	movs	r1, #152	; 0x98
 8002ad8:	483f      	ldr	r0, [pc, #252]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002ada:	f002 faa2 	bl	8005022 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002ade:	2340      	movs	r3, #64	; 0x40
 8002ae0:	68e2      	ldr	r2, [r4, #12]
 8002ae2:	439a      	bics	r2, r3
 8002ae4:	d003      	beq.n	8002aee <HAL_DMA_Init+0x7e>
 8002ae6:	2199      	movs	r1, #153	; 0x99
 8002ae8:	483b      	ldr	r0, [pc, #236]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002aea:	f002 fa9a 	bl	8005022 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	6922      	ldr	r2, [r4, #16]
 8002af2:	439a      	bics	r2, r3
 8002af4:	d003      	beq.n	8002afe <HAL_DMA_Init+0x8e>
 8002af6:	219a      	movs	r1, #154	; 0x9a
 8002af8:	4837      	ldr	r0, [pc, #220]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002afa:	f002 fa92 	bl	8005022 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002afe:	6963      	ldr	r3, [r4, #20]
 8002b00:	4a36      	ldr	r2, [pc, #216]	; (8002bdc <HAL_DMA_Init+0x16c>)
 8002b02:	4213      	tst	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_DMA_Init+0xa6>
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d003      	beq.n	8002b16 <HAL_DMA_Init+0xa6>
 8002b0e:	219b      	movs	r1, #155	; 0x9b
 8002b10:	4831      	ldr	r0, [pc, #196]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002b12:	f002 fa86 	bl	8005022 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002b16:	69a3      	ldr	r3, [r4, #24]
 8002b18:	4a31      	ldr	r2, [pc, #196]	; (8002be0 <HAL_DMA_Init+0x170>)
 8002b1a:	4213      	tst	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_Init+0xbe>
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <HAL_DMA_Init+0xbe>
 8002b26:	219c      	movs	r1, #156	; 0x9c
 8002b28:	482b      	ldr	r0, [pc, #172]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002b2a:	f002 fa7a 	bl	8005022 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002b2e:	2320      	movs	r3, #32
 8002b30:	69e2      	ldr	r2, [r4, #28]
 8002b32:	439a      	bics	r2, r3
 8002b34:	d003      	beq.n	8002b3e <HAL_DMA_Init+0xce>
 8002b36:	219d      	movs	r1, #157	; 0x9d
 8002b38:	4827      	ldr	r0, [pc, #156]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002b3a:	f002 fa72 	bl	8005022 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_DMA_Init+0x174>)
 8002b40:	6a22      	ldr	r2, [r4, #32]
 8002b42:	421a      	tst	r2, r3
 8002b44:	d003      	beq.n	8002b4e <HAL_DMA_Init+0xde>
 8002b46:	219e      	movs	r1, #158	; 0x9e
 8002b48:	4823      	ldr	r0, [pc, #140]	; (8002bd8 <HAL_DMA_Init+0x168>)
 8002b4a:	f002 fa6a 	bl	8005022 <assert_failed>

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b4e:	6825      	ldr	r5, [r4, #0]
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_DMA_Init+0x178>)
 8002b52:	2114      	movs	r1, #20
 8002b54:	18e8      	adds	r0, r5, r3
 8002b56:	f7fd faf3 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002b5a:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_DMA_Init+0x17c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b5c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8002b5e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b60:	2302      	movs	r3, #2
 8002b62:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b64:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b66:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b68:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <HAL_DMA_Init+0x180>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b6c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b6e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002b70:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b72:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002b74:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	433b      	orrs	r3, r7
 8002b78:	6967      	ldr	r7, [r4, #20]
 8002b7a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7c:	69a7      	ldr	r7, [r4, #24]
 8002b7e:	433b      	orrs	r3, r7
 8002b80:	69e7      	ldr	r7, [r4, #28]
 8002b82:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b84:	6a27      	ldr	r7, [r4, #32]
 8002b86:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002b88:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b8a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	01db      	lsls	r3, r3, #7
 8002b90:	4299      	cmp	r1, r3
 8002b92:	d00c      	beq.n	8002bae <HAL_DMA_Init+0x13e>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b94:	251c      	movs	r5, #28
 8002b96:	4028      	ands	r0, r5
 8002b98:	3d0d      	subs	r5, #13
 8002b9a:	4085      	lsls	r5, r0
 8002b9c:	4915      	ldr	r1, [pc, #84]	; (8002bf4 <HAL_DMA_Init+0x184>)
 8002b9e:	680b      	ldr	r3, [r1, #0]
 8002ba0:	43ab      	bics	r3, r5
 8002ba2:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ba4:	6863      	ldr	r3, [r4, #4]
 8002ba6:	680d      	ldr	r5, [r1, #0]
 8002ba8:	4083      	lsls	r3, r0
 8002baa:	432b      	orrs	r3, r5
 8002bac:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bae:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002bb0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb2:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bb4:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002bb6:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002bb8:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8002bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bbc:	40020008 	.word	0x40020008
 8002bc0:	4002001c 	.word	0x4002001c
 8002bc4:	40020030 	.word	0x40020030
 8002bc8:	40020044 	.word	0x40020044
 8002bcc:	40020058 	.word	0x40020058
 8002bd0:	4002006c 	.word	0x4002006c
 8002bd4:	40020080 	.word	0x40020080
 8002bd8:	08005af3 	.word	0x08005af3
 8002bdc:	fffffeff 	.word	0xfffffeff
 8002be0:	fffffbff 	.word	0xfffffbff
 8002be4:	ffffcfff 	.word	0xffffcfff
 8002be8:	bffdfff8 	.word	0xbffdfff8
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	ffff800f 	.word	0xffff800f
 8002bf4:	400200a8 	.word	0x400200a8

08002bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bfa:	0015      	movs	r5, r2
 8002bfc:	001f      	movs	r7, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_DMA_Start_IT+0x98>)
{
 8002c02:	0004      	movs	r4, r0
 8002c04:	000e      	movs	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d904      	bls.n	8002c14 <HAL_DMA_Start_IT+0x1c>
 8002c0a:	21ab      	movs	r1, #171	; 0xab
 8002c0c:	4821      	ldr	r0, [pc, #132]	; (8002c94 <HAL_DMA_Start_IT+0x9c>)
 8002c0e:	0049      	lsls	r1, r1, #1
 8002c10:	f002 fa07 	bl	8005022 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c14:	1d63      	adds	r3, r4, #5
 8002c16:	7fda      	ldrb	r2, [r3, #31]
 8002c18:	2002      	movs	r0, #2
 8002c1a:	2a01      	cmp	r2, #1
 8002c1c:	d02a      	beq.n	8002c74 <HAL_DMA_Start_IT+0x7c>
 8002c1e:	2201      	movs	r2, #1
 8002c20:	77da      	strb	r2, [r3, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c22:	1da2      	adds	r2, r4, #6
 8002c24:	4694      	mov	ip, r2
 8002c26:	7fd2      	ldrb	r2, [r2, #31]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	2a01      	cmp	r2, #1
 8002c2e:	d12c      	bne.n	8002c8a <HAL_DMA_Start_IT+0x92>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c30:	4663      	mov	r3, ip
 8002c32:	77d8      	strb	r0, [r3, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c34:	6823      	ldr	r3, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c36:	63e1      	str	r1, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002c38:	6819      	ldr	r1, [r3, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c3a:	301a      	adds	r0, #26
    __HAL_DMA_DISABLE(hdma);
 8002c3c:	4391      	bics	r1, r2
 8002c3e:	6019      	str	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c40:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002c42:	9101      	str	r1, [sp, #4]
 8002c44:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002c46:	4008      	ands	r0, r1
 8002c48:	4082      	lsls	r2, r0
 8002c4a:	9901      	ldr	r1, [sp, #4]
 8002c4c:	604a      	str	r2, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c4e:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CNDTR = DataLength;
 8002c50:	605f      	str	r7, [r3, #4]
 8002c52:	6821      	ldr	r1, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c54:	2a10      	cmp	r2, #16
 8002c56:	d10e      	bne.n	8002c76 <HAL_DMA_Start_IT+0x7e>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c58:	609d      	str	r5, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c5a:	60de      	str	r6, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002c5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c5e:	2a00      	cmp	r2, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c62:	220e      	movs	r2, #14
 8002c64:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c66:	4302      	orrs	r2, r0
 8002c68:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c6a:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002c6e:	680a      	ldr	r2, [r1, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
}
 8002c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c76:	609e      	str	r6, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c78:	60dd      	str	r5, [r3, #12]
 8002c7a:	e7ef      	b.n	8002c5c <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c7c:	2004      	movs	r0, #4
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4382      	bics	r2, r0
 8002c82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	220a      	movs	r2, #10
 8002c88:	e7ed      	b.n	8002c66 <HAL_DMA_Start_IT+0x6e>
    __HAL_UNLOCK(hdma);
 8002c8a:	77d9      	strb	r1, [r3, #31]
 8002c8c:	e7f2      	b.n	8002c74 <HAL_DMA_Start_IT+0x7c>
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	0000fffe 	.word	0x0000fffe
 8002c94:	08005af3 	.word	0x08005af3

08002c98 <HAL_DMA_Abort_IT>:
{
 8002c98:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c9a:	1d84      	adds	r4, r0, #6
 8002c9c:	7fe3      	ldrb	r3, [r4, #31]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d004      	beq.n	8002cac <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002ca6:	3b03      	subs	r3, #3
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cac:	210e      	movs	r1, #14
 8002cae:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cb0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	4391      	bics	r1, r2
 8002cbe:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cc0:	231c      	movs	r3, #28
 8002cc2:	402b      	ands	r3, r5
 8002cc4:	0015      	movs	r5, r2
 8002cc6:	409d      	lsls	r5, r3
 8002cc8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8002cca:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ccc:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002cce:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002cd0:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8002cd2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002cd4:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002cd8:	42a2      	cmp	r2, r4
 8002cda:	d0e5      	beq.n	8002ca8 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002cdc:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002cde:	0023      	movs	r3, r4
 8002ce0:	e7e2      	b.n	8002ca8 <HAL_DMA_Abort_IT+0x10>

08002ce2 <HAL_DMA_IRQHandler>:
{
 8002ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ce4:	221c      	movs	r2, #28
 8002ce6:	2704      	movs	r7, #4
 8002ce8:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cea:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002cec:	4032      	ands	r2, r6
 8002cee:	003e      	movs	r6, r7
 8002cf0:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cf2:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002cf4:	6803      	ldr	r3, [r0, #0]
 8002cf6:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002cf8:	422e      	tst	r6, r5
 8002cfa:	d00d      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x36>
 8002cfc:	423c      	tst	r4, r7
 8002cfe:	d00b      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	0692      	lsls	r2, r2, #26
 8002d04:	d402      	bmi.n	8002d0c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	43ba      	bics	r2, r7
 8002d0a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8002d0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002d0e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d019      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002d14:	4798      	blx	r3
  return;
 8002d16:	e017      	b.n	8002d48 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002d18:	2702      	movs	r7, #2
 8002d1a:	003e      	movs	r6, r7
 8002d1c:	4096      	lsls	r6, r2
 8002d1e:	422e      	tst	r6, r5
 8002d20:	d013      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x68>
 8002d22:	423c      	tst	r4, r7
 8002d24:	d011      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	0692      	lsls	r2, r2, #26
 8002d2a:	d406      	bmi.n	8002d3a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d2c:	240a      	movs	r4, #10
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	43a2      	bics	r2, r4
 8002d32:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002d34:	2201      	movs	r2, #1
 8002d36:	1d83      	adds	r3, r0, #6
 8002d38:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d3e:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002d40:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8002d42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d1e5      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x32>
}
 8002d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002d4a:	2608      	movs	r6, #8
 8002d4c:	0037      	movs	r7, r6
 8002d4e:	4097      	lsls	r7, r2
 8002d50:	423d      	tst	r5, r7
 8002d52:	d0f9      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x66>
 8002d54:	4234      	tst	r4, r6
 8002d56:	d0f7      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d58:	250e      	movs	r5, #14
 8002d5a:	681c      	ldr	r4, [r3, #0]
 8002d5c:	43ac      	bics	r4, r5
 8002d5e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d60:	2301      	movs	r3, #1
 8002d62:	001c      	movs	r4, r3
 8002d64:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8002d66:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d68:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d6a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002d6c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	1d43      	adds	r3, r0, #5
 8002d72:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002d74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d76:	e7e5      	b.n	8002d44 <HAL_DMA_IRQHandler+0x62>

08002d78 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
 
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d78:	684b      	ldr	r3, [r1, #4]
{
 8002d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d7c:	0004      	movs	r4, r0
 8002d7e:	000d      	movs	r5, r1
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d912      	bls.n	8002daa <HAL_GPIO_Init+0x32>
 8002d84:	001a      	movs	r2, r3
 8002d86:	3a11      	subs	r2, #17
 8002d88:	2a01      	cmp	r2, #1
 8002d8a:	d90e      	bls.n	8002daa <HAL_GPIO_Init+0x32>
 8002d8c:	4a85      	ldr	r2, [pc, #532]	; (8002fa4 <HAL_GPIO_Init+0x22c>)
 8002d8e:	4986      	ldr	r1, [pc, #536]	; (8002fa8 <HAL_GPIO_Init+0x230>)
 8002d90:	401a      	ands	r2, r3
 8002d92:	1852      	adds	r2, r2, r1
 8002d94:	4985      	ldr	r1, [pc, #532]	; (8002fac <HAL_GPIO_Init+0x234>)
 8002d96:	420a      	tst	r2, r1
 8002d98:	d007      	beq.n	8002daa <HAL_GPIO_Init+0x32>
 8002d9a:	4a85      	ldr	r2, [pc, #532]	; (8002fb0 <HAL_GPIO_Init+0x238>)
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	420b      	tst	r3, r1
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x32>
 8002da2:	21ae      	movs	r1, #174	; 0xae
 8002da4:	4883      	ldr	r0, [pc, #524]	; (8002fb4 <HAL_GPIO_Init+0x23c>)
 8002da6:	f002 f93c 	bl	8005022 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002daa:	68ab      	ldr	r3, [r5, #8]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d903      	bls.n	8002db8 <HAL_GPIO_Init+0x40>
 8002db0:	21af      	movs	r1, #175	; 0xaf
 8002db2:	4880      	ldr	r0, [pc, #512]	; (8002fb4 <HAL_GPIO_Init+0x23c>)
 8002db4:	f002 f935 	bl	8005022 <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));
 8002db8:	23a0      	movs	r3, #160	; 0xa0
 8002dba:	05db      	lsls	r3, r3, #23
 8002dbc:	429c      	cmp	r4, r3
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_GPIO_Init+0x60>
 8002dc0:	4b7d      	ldr	r3, [pc, #500]	; (8002fb8 <HAL_GPIO_Init+0x240>)
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	d008      	beq.n	8002dd8 <HAL_GPIO_Init+0x60>
 8002dc6:	4b7d      	ldr	r3, [pc, #500]	; (8002fbc <HAL_GPIO_Init+0x244>)
 8002dc8:	429c      	cmp	r4, r3
 8002dca:	d005      	beq.n	8002dd8 <HAL_GPIO_Init+0x60>
 8002dcc:	4b7c      	ldr	r3, [pc, #496]	; (8002fc0 <HAL_GPIO_Init+0x248>)
 8002dce:	429c      	cmp	r4, r3
 8002dd0:	d002      	beq.n	8002dd8 <HAL_GPIO_Init+0x60>
 8002dd2:	4b7c      	ldr	r3, [pc, #496]	; (8002fc4 <HAL_GPIO_Init+0x24c>)
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_GPIO_Init+0x70>
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x70>
 8002de0:	4a79      	ldr	r2, [pc, #484]	; (8002fc8 <HAL_GPIO_Init+0x250>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00d      	beq.n	8002e04 <HAL_GPIO_Init+0x8c>
 8002de8:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <HAL_GPIO_Init+0x254>)
 8002dea:	429c      	cmp	r4, r3
 8002dec:	d106      	bne.n	8002dfc <HAL_GPIO_Init+0x84>
 8002dee:	682b      	ldr	r3, [r5, #0]
 8002df0:	4a77      	ldr	r2, [pc, #476]	; (8002fd0 <HAL_GPIO_Init+0x258>)
 8002df2:	4213      	tst	r3, r2
 8002df4:	d002      	beq.n	8002dfc <HAL_GPIO_Init+0x84>
 8002df6:	4313      	orrs	r3, r2
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x8c>
 8002dfc:	21b0      	movs	r1, #176	; 0xb0
 8002dfe:	486d      	ldr	r0, [pc, #436]	; (8002fb4 <HAL_GPIO_Init+0x23c>)
 8002e00:	f002 f90f 	bl	8005022 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002e04:	2700      	movs	r7, #0
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e06:	682b      	ldr	r3, [r5, #0]
 8002e08:	001a      	movs	r2, r3
 8002e0a:	40fa      	lsrs	r2, r7
 8002e0c:	d100      	bne.n	8002e10 <HAL_GPIO_Init+0x98>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8002e0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002e10:	2201      	movs	r2, #1
 8002e12:	40ba      	lsls	r2, r7
 8002e14:	9201      	str	r2, [sp, #4]
 8002e16:	401a      	ands	r2, r3
 8002e18:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8002e1a:	d100      	bne.n	8002e1e <HAL_GPIO_Init+0xa6>
 8002e1c:	e0c0      	b.n	8002fa0 <HAL_GPIO_Init+0x228>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002e1e:	2210      	movs	r2, #16
 8002e20:	686b      	ldr	r3, [r5, #4]
 8002e22:	4393      	bics	r3, r2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d12c      	bne.n	8002e82 <HAL_GPIO_Init+0x10a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002e28:	23a0      	movs	r3, #160	; 0xa0
 8002e2a:	05db      	lsls	r3, r3, #23
 8002e2c:	429c      	cmp	r4, r3
 8002e2e:	d012      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_GPIO_Init+0x240>)
 8002e32:	429c      	cmp	r4, r3
 8002e34:	d00f      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
 8002e36:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_GPIO_Init+0x244>)
 8002e38:	429c      	cmp	r4, r3
 8002e3a:	d00c      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
 8002e3c:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <HAL_GPIO_Init+0x248>)
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	d009      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
 8002e42:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <HAL_GPIO_Init+0x24c>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d006      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
 8002e48:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <HAL_GPIO_Init+0x254>)
 8002e4a:	429c      	cmp	r4, r3
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0xde>
 8002e4e:	21bf      	movs	r1, #191	; 0xbf
 8002e50:	4858      	ldr	r0, [pc, #352]	; (8002fb4 <HAL_GPIO_Init+0x23c>)
 8002e52:	f002 f8e6 	bl	8005022 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002e56:	692b      	ldr	r3, [r5, #16]
 8002e58:	2b07      	cmp	r3, #7
 8002e5a:	d903      	bls.n	8002e64 <HAL_GPIO_Init+0xec>
 8002e5c:	21c0      	movs	r1, #192	; 0xc0
 8002e5e:	4855      	ldr	r0, [pc, #340]	; (8002fb4 <HAL_GPIO_Init+0x23c>)
 8002e60:	f002 f8df 	bl	8005022 <assert_failed>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002e64:	2207      	movs	r2, #7
 8002e66:	200f      	movs	r0, #15
 8002e68:	403a      	ands	r2, r7
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8002e6e:	08fb      	lsrs	r3, r7, #3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	18e3      	adds	r3, r4, r3
 8002e74:	6a19      	ldr	r1, [r3, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002e76:	4381      	bics	r1, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002e78:	6928      	ldr	r0, [r5, #16]
 8002e7a:	4090      	lsls	r0, r2
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 8002e80:	621a      	str	r2, [r3, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e82:	2210      	movs	r2, #16
 8002e84:	686b      	ldr	r3, [r5, #4]
 8002e86:	007e      	lsls	r6, r7, #1
 8002e88:	4393      	bics	r3, r2
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d819      	bhi.n	8002ec4 <HAL_GPIO_Init+0x14c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e90:	68eb      	ldr	r3, [r5, #12]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d903      	bls.n	8002e9e <HAL_GPIO_Init+0x126>
 8002e96:	21ce      	movs	r1, #206	; 0xce
 8002e98:	4846      	ldr	r0, [pc, #280]	; (8002fb4 <HAL_GPIO_Init+0x23c>)
 8002e9a:	f002 f8c2 	bl	8005022 <assert_failed>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	40b2      	lsls	r2, r6
        temp = GPIOx->OSPEEDR;
 8002ea2:	68a3      	ldr	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ea4:	2101      	movs	r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	001a      	movs	r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eaa:	68eb      	ldr	r3, [r5, #12]
 8002eac:	40b3      	lsls	r3, r6
 8002eae:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8002eb0:	60a3      	str	r3, [r4, #8]
        temp= GPIOx->OTYPER;
 8002eb2:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	9b01      	ldr	r3, [sp, #4]
 8002eb6:	439a      	bics	r2, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002eb8:	686b      	ldr	r3, [r5, #4]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	40bb      	lsls	r3, r7
 8002ec0:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8002ec2:	6063      	str	r3, [r4, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	469c      	mov	ip, r3
 8002ec8:	40b3      	lsls	r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eca:	4661      	mov	r1, ip
 8002ecc:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ece:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed0:	4011      	ands	r1, r2
 8002ed2:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 8002ed4:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ed6:	4018      	ands	r0, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed8:	4301      	orrs	r1, r0
      GPIOx->MODER = temp;
 8002eda:	6021      	str	r1, [r4, #0]
      temp = GPIOx->PUPDR;
 8002edc:	68e1      	ldr	r1, [r4, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ede:	4019      	ands	r1, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002ee0:	68ab      	ldr	r3, [r5, #8]
 8002ee2:	40b3      	lsls	r3, r6
 8002ee4:	430b      	orrs	r3, r1
      GPIOx->PUPDR = temp;
 8002ee6:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002ee8:	00d3      	lsls	r3, r2, #3
 8002eea:	d559      	bpl.n	8002fa0 <HAL_GPIO_Init+0x228>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eec:	2001      	movs	r0, #1
 8002eee:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <HAL_GPIO_Init+0x25c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002ef0:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002ef4:	4303      	orrs	r3, r0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002ef6:	4660      	mov	r0, ip
 8002ef8:	4038      	ands	r0, r7
 8002efa:	0080      	lsls	r0, r0, #2
 8002efc:	4086      	lsls	r6, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	634b      	str	r3, [r1, #52]	; 0x34
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <HAL_GPIO_Init+0x260>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f02:	08b9      	lsrs	r1, r7, #2
 8002f04:	0089      	lsls	r1, r1, #2
 8002f06:	18c9      	adds	r1, r1, r3
 8002f08:	688b      	ldr	r3, [r1, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002f0a:	43b3      	bics	r3, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f0c:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002f0e:	9301      	str	r3, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f10:	05f6      	lsls	r6, r6, #23
 8002f12:	2300      	movs	r3, #0
 8002f14:	42b4      	cmp	r4, r6
 8002f16:	d014      	beq.n	8002f42 <HAL_GPIO_Init+0x1ca>
 8002f18:	4e27      	ldr	r6, [pc, #156]	; (8002fb8 <HAL_GPIO_Init+0x240>)
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	42b4      	cmp	r4, r6
 8002f1e:	d010      	beq.n	8002f42 <HAL_GPIO_Init+0x1ca>
 8002f20:	4e26      	ldr	r6, [pc, #152]	; (8002fbc <HAL_GPIO_Init+0x244>)
 8002f22:	3301      	adds	r3, #1
 8002f24:	42b4      	cmp	r4, r6
 8002f26:	d00c      	beq.n	8002f42 <HAL_GPIO_Init+0x1ca>
 8002f28:	4e25      	ldr	r6, [pc, #148]	; (8002fc0 <HAL_GPIO_Init+0x248>)
 8002f2a:	4663      	mov	r3, ip
 8002f2c:	42b4      	cmp	r4, r6
 8002f2e:	d008      	beq.n	8002f42 <HAL_GPIO_Init+0x1ca>
 8002f30:	4e24      	ldr	r6, [pc, #144]	; (8002fc4 <HAL_GPIO_Init+0x24c>)
 8002f32:	3301      	adds	r3, #1
 8002f34:	42b4      	cmp	r4, r6
 8002f36:	d004      	beq.n	8002f42 <HAL_GPIO_Init+0x1ca>
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_GPIO_Init+0x264>)
 8002f3a:	18e3      	adds	r3, r4, r3
 8002f3c:	1e5e      	subs	r6, r3, #1
 8002f3e:	41b3      	sbcs	r3, r6
 8002f40:	3305      	adds	r3, #5
 8002f42:	4083      	lsls	r3, r0
 8002f44:	9801      	ldr	r0, [sp, #4]
 8002f46:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f48:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8002f4a:	4925      	ldr	r1, [pc, #148]	; (8002fe0 <HAL_GPIO_Init+0x268>)
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	9b00      	ldr	r3, [sp, #0]
        temp = EXTI->IMR;
 8002f4e:	680e      	ldr	r6, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
 8002f50:	43d8      	mvns	r0, r3
          temp |= iocurrent;
 8002f52:	4333      	orrs	r3, r6
 8002f54:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f56:	03d3      	lsls	r3, r2, #15
 8002f58:	d402      	bmi.n	8002f60 <HAL_GPIO_Init+0x1e8>
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	0033      	movs	r3, r6
 8002f5c:	4003      	ands	r3, r0
 8002f5e:	469c      	mov	ip, r3
        EXTI->IMR = temp;
 8002f60:	4663      	mov	r3, ip
 8002f62:	600b      	str	r3, [r1, #0]
        temp = EXTI->EMR;
 8002f64:	684e      	ldr	r6, [r1, #4]
          temp |= iocurrent;
 8002f66:	9b00      	ldr	r3, [sp, #0]
 8002f68:	4333      	orrs	r3, r6
 8002f6a:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f6c:	0393      	lsls	r3, r2, #14
 8002f6e:	d402      	bmi.n	8002f76 <HAL_GPIO_Init+0x1fe>
        temp &= ~((uint32_t)iocurrent);
 8002f70:	0033      	movs	r3, r6
 8002f72:	4003      	ands	r3, r0
 8002f74:	469c      	mov	ip, r3
        EXTI->EMR = temp;
 8002f76:	4663      	mov	r3, ip
 8002f78:	604b      	str	r3, [r1, #4]
        temp = EXTI->RTSR;
 8002f7a:	688e      	ldr	r6, [r1, #8]
          temp |= iocurrent;
 8002f7c:	9b00      	ldr	r3, [sp, #0]
 8002f7e:	4333      	orrs	r3, r6
 8002f80:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f82:	02d3      	lsls	r3, r2, #11
 8002f84:	d402      	bmi.n	8002f8c <HAL_GPIO_Init+0x214>
        temp &= ~((uint32_t)iocurrent);
 8002f86:	0033      	movs	r3, r6
 8002f88:	4003      	ands	r3, r0
 8002f8a:	469c      	mov	ip, r3
        EXTI->RTSR = temp;
 8002f8c:	4663      	mov	r3, ip
 8002f8e:	608b      	str	r3, [r1, #8]
        temp = EXTI->FTSR;
 8002f90:	68ce      	ldr	r6, [r1, #12]
          temp |= iocurrent;
 8002f92:	9b00      	ldr	r3, [sp, #0]
 8002f94:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f96:	0292      	lsls	r2, r2, #10
 8002f98:	d401      	bmi.n	8002f9e <HAL_GPIO_Init+0x226>
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	0033      	movs	r3, r6
 8002f9c:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 8002f9e:	60cb      	str	r3, [r1, #12]
    position++;
 8002fa0:	3701      	adds	r7, #1
 8002fa2:	e730      	b.n	8002e06 <HAL_GPIO_Init+0x8e>
 8002fa4:	ffdfffff 	.word	0xffdfffff
 8002fa8:	efef0000 	.word	0xefef0000
 8002fac:	fffeffff 	.word	0xfffeffff
 8002fb0:	efdf0000 	.word	0xefdf0000
 8002fb4:	08005b2b 	.word	0x08005b2b
 8002fb8:	50000400 	.word	0x50000400
 8002fbc:	50000800 	.word	0x50000800
 8002fc0:	50000c00 	.word	0x50000c00
 8002fc4:	50001000 	.word	0x50001000
 8002fc8:	0000ffff 	.word	0x0000ffff
 8002fcc:	50001c00 	.word	0x50001c00
 8002fd0:	00000603 	.word	0x00000603
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	afffe400 	.word	0xafffe400
 8002fe0:	40010400 	.word	0x40010400

08002fe4 <HAL_GPIO_WritePin>:
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8002fe4:	23a0      	movs	r3, #160	; 0xa0
{
 8002fe6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8002fe8:	05db      	lsls	r3, r3, #23
{
 8002fea:	0004      	movs	r4, r0
 8002fec:	000d      	movs	r5, r1
 8002fee:	0016      	movs	r6, r2
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8002ff0:	4298      	cmp	r0, r3
 8002ff2:	d00b      	beq.n	800300c <HAL_GPIO_WritePin+0x28>
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_GPIO_WritePin+0x68>)
 8002ff6:	4298      	cmp	r0, r3
 8002ff8:	d008      	beq.n	800300c <HAL_GPIO_WritePin+0x28>
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <HAL_GPIO_WritePin+0x6c>)
 8002ffc:	4298      	cmp	r0, r3
 8002ffe:	d005      	beq.n	800300c <HAL_GPIO_WritePin+0x28>
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_GPIO_WritePin+0x70>)
 8003002:	4298      	cmp	r0, r3
 8003004:	d002      	beq.n	800300c <HAL_GPIO_WritePin+0x28>
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_GPIO_WritePin+0x74>)
 8003008:	4298      	cmp	r0, r3
 800300a:	d10a      	bne.n	8003022 <HAL_GPIO_WritePin+0x3e>
 800300c:	2d00      	cmp	r5, #0
 800300e:	d012      	beq.n	8003036 <HAL_GPIO_WritePin+0x52>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003010:	2e01      	cmp	r6, #1
 8003012:	d916      	bls.n	8003042 <HAL_GPIO_WritePin+0x5e>
 8003014:	219e      	movs	r1, #158	; 0x9e
 8003016:	4811      	ldr	r0, [pc, #68]	; (800305c <HAL_GPIO_WritePin+0x78>)
 8003018:	31ff      	adds	r1, #255	; 0xff
 800301a:	f002 f802 	bl	8005022 <assert_failed>
  
  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 800301e:	61a5      	str	r5, [r4, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003020:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_GPIO_WritePin+0x7c>)
 8003024:	4298      	cmp	r0, r3
 8003026:	d106      	bne.n	8003036 <HAL_GPIO_WritePin+0x52>
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <HAL_GPIO_WritePin+0x80>)
 800302a:	4219      	tst	r1, r3
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x52>
 800302e:	001a      	movs	r2, r3
 8003030:	430a      	orrs	r2, r1
 8003032:	429a      	cmp	r2, r3
 8003034:	d0ec      	beq.n	8003010 <HAL_GPIO_WritePin+0x2c>
 8003036:	21ce      	movs	r1, #206	; 0xce
 8003038:	4808      	ldr	r0, [pc, #32]	; (800305c <HAL_GPIO_WritePin+0x78>)
 800303a:	0049      	lsls	r1, r1, #1
 800303c:	f001 fff1 	bl	8005022 <assert_failed>
 8003040:	e7e6      	b.n	8003010 <HAL_GPIO_WritePin+0x2c>
  if(PinState != GPIO_PIN_RESET)
 8003042:	2e00      	cmp	r6, #0
 8003044:	d1eb      	bne.n	800301e <HAL_GPIO_WritePin+0x3a>
    GPIOx->BRR = GPIO_Pin ;
 8003046:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8003048:	e7ea      	b.n	8003020 <HAL_GPIO_WritePin+0x3c>
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	50000400 	.word	0x50000400
 8003050:	50000800 	.word	0x50000800
 8003054:	50000c00 	.word	0x50000c00
 8003058:	50001000 	.word	0x50001000
 800305c:	08005b2b 	.word	0x08005b2b
 8003060:	50001c00 	.word	0x50001c00
 8003064:	00000603 	.word	0x00000603

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 800306c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800306e:	2c00      	cmp	r4, #0
 8003070:	d100      	bne.n	8003074 <HAL_I2C_Init+0xc>
 8003072:	e08a      	b.n	800318a <HAL_I2C_Init+0x122>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	4a4a      	ldr	r2, [pc, #296]	; (80031a0 <HAL_I2C_Init+0x138>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00a      	beq.n	8003092 <HAL_I2C_Init+0x2a>
 800307c:	4a49      	ldr	r2, [pc, #292]	; (80031a4 <HAL_I2C_Init+0x13c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <HAL_I2C_Init+0x2a>
 8003082:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_I2C_Init+0x140>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_I2C_Init+0x2a>
 8003088:	21ef      	movs	r1, #239	; 0xef
 800308a:	4848      	ldr	r0, [pc, #288]	; (80031ac <HAL_I2C_Init+0x144>)
 800308c:	0049      	lsls	r1, r1, #1
 800308e:	f001 ffc8 	bl	8005022 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_I2C_Init+0x148>)
 8003094:	68a2      	ldr	r2, [r4, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	d904      	bls.n	80030a4 <HAL_I2C_Init+0x3c>
 800309a:	21e0      	movs	r1, #224	; 0xe0
 800309c:	4843      	ldr	r0, [pc, #268]	; (80031ac <HAL_I2C_Init+0x144>)
 800309e:	31ff      	adds	r1, #255	; 0xff
 80030a0:	f001 ffbf 	bl	8005022 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80030a4:	68e3      	ldr	r3, [r4, #12]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d904      	bls.n	80030b6 <HAL_I2C_Init+0x4e>
 80030ac:	21f0      	movs	r1, #240	; 0xf0
 80030ae:	483f      	ldr	r0, [pc, #252]	; (80031ac <HAL_I2C_Init+0x144>)
 80030b0:	0049      	lsls	r1, r1, #1
 80030b2:	f001 ffb6 	bl	8005022 <assert_failed>
 80030b6:	4e3f      	ldr	r6, [pc, #252]	; (80031b4 <HAL_I2C_Init+0x14c>)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80030b8:	6923      	ldr	r3, [r4, #16]
 80030ba:	4233      	tst	r3, r6
 80030bc:	d004      	beq.n	80030c8 <HAL_I2C_Init+0x60>
 80030be:	21e2      	movs	r1, #226	; 0xe2
 80030c0:	483a      	ldr	r0, [pc, #232]	; (80031ac <HAL_I2C_Init+0x144>)
 80030c2:	31ff      	adds	r1, #255	; 0xff
 80030c4:	f001 ffad 	bl	8005022 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80030c8:	6963      	ldr	r3, [r4, #20]
 80030ca:	2bff      	cmp	r3, #255	; 0xff
 80030cc:	d904      	bls.n	80030d8 <HAL_I2C_Init+0x70>
 80030ce:	21f1      	movs	r1, #241	; 0xf1
 80030d0:	4836      	ldr	r0, [pc, #216]	; (80031ac <HAL_I2C_Init+0x144>)
 80030d2:	0049      	lsls	r1, r1, #1
 80030d4:	f001 ffa5 	bl	8005022 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80030d8:	69a3      	ldr	r3, [r4, #24]
 80030da:	2b07      	cmp	r3, #7
 80030dc:	d904      	bls.n	80030e8 <HAL_I2C_Init+0x80>
 80030de:	21e4      	movs	r1, #228	; 0xe4
 80030e0:	4832      	ldr	r0, [pc, #200]	; (80031ac <HAL_I2C_Init+0x144>)
 80030e2:	31ff      	adds	r1, #255	; 0xff
 80030e4:	f001 ff9d 	bl	8005022 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80030e8:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_I2C_Init+0x150>)
 80030ea:	69e2      	ldr	r2, [r4, #28]
 80030ec:	421a      	tst	r2, r3
 80030ee:	d004      	beq.n	80030fa <HAL_I2C_Init+0x92>
 80030f0:	21f2      	movs	r1, #242	; 0xf2
 80030f2:	482e      	ldr	r0, [pc, #184]	; (80031ac <HAL_I2C_Init+0x144>)
 80030f4:	0049      	lsls	r1, r1, #1
 80030f6:	f001 ff94 	bl	8005022 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_I2C_Init+0x154>)
 80030fc:	6a22      	ldr	r2, [r4, #32]
 80030fe:	421a      	tst	r2, r3
 8003100:	d004      	beq.n	800310c <HAL_I2C_Init+0xa4>
 8003102:	21e6      	movs	r1, #230	; 0xe6
 8003104:	4829      	ldr	r0, [pc, #164]	; (80031ac <HAL_I2C_Init+0x144>)
 8003106:	31ff      	adds	r1, #255	; 0xff
 8003108:	f001 ff8b 	bl	8005022 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310c:	0025      	movs	r5, r4
 800310e:	3541      	adds	r5, #65	; 0x41
 8003110:	782b      	ldrb	r3, [r5, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <HAL_I2C_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003118:	0022      	movs	r2, r4
 800311a:	3240      	adds	r2, #64	; 0x40
 800311c:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800311e:	0020      	movs	r0, r4
 8003120:	f002 f986 	bl	8005430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003124:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003126:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003128:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	68a0      	ldr	r0, [r4, #8]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	438a      	bics	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003134:	6861      	ldr	r1, [r4, #4]
 8003136:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_I2C_Init+0x158>)
 8003138:	400a      	ands	r2, r1
 800313a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800313c:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800313e:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003140:	4032      	ands	r2, r6
 8003142:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003144:	2901      	cmp	r1, #1
 8003146:	d121      	bne.n	800318c <HAL_I2C_Init+0x124>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	0212      	lsls	r2, r2, #8
 800314c:	4302      	orrs	r2, r0
 800314e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_I2C_Init+0x15c>)
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800315a:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800315c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800315e:	4016      	ands	r6, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003160:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003162:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003164:	430a      	orrs	r2, r1
 8003166:	69a1      	ldr	r1, [r4, #24]
 8003168:	0209      	lsls	r1, r1, #8
 800316a:	430a      	orrs	r2, r1
 800316c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800316e:	6a21      	ldr	r1, [r4, #32]
 8003170:	69e2      	ldr	r2, [r4, #28]
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003176:	2201      	movs	r2, #1
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800317e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003182:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003184:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003186:	3442      	adds	r4, #66	; 0x42
 8003188:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800318a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800318c:	2284      	movs	r2, #132	; 0x84
 800318e:	0212      	lsls	r2, r2, #8
 8003190:	4302      	orrs	r2, r0
 8003192:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003194:	2902      	cmp	r1, #2
 8003196:	d1db      	bne.n	8003150 <HAL_I2C_Init+0xe8>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003198:	2280      	movs	r2, #128	; 0x80
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	e7d7      	b.n	8003150 <HAL_I2C_Init+0xe8>
 80031a0:	40005400 	.word	0x40005400
 80031a4:	40005800 	.word	0x40005800
 80031a8:	40007800 	.word	0x40007800
 80031ac:	08005b64 	.word	0x08005b64
 80031b0:	000003ff 	.word	0x000003ff
 80031b4:	ffff7fff 	.word	0xffff7fff
 80031b8:	fff7ffff 	.word	0xfff7ffff
 80031bc:	fffdffff 	.word	0xfffdffff
 80031c0:	f0ffffff 	.word	0xf0ffffff
 80031c4:	02008000 	.word	0x02008000

080031c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80031ca:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <HAL_I2CEx_ConfigAnalogFilter+0x78>)
 80031cc:	6803      	ldr	r3, [r0, #0]
{
 80031ce:	0006      	movs	r6, r0
 80031d0:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_I2CEx_ConfigAnalogFilter+0x22>
 80031d6:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <HAL_I2CEx_ConfigAnalogFilter+0x7c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d006      	beq.n	80031ea <HAL_I2CEx_ConfigAnalogFilter+0x22>
 80031dc:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <HAL_I2CEx_ConfigAnalogFilter+0x80>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <HAL_I2CEx_ConfigAnalogFilter+0x22>
 80031e2:	2164      	movs	r1, #100	; 0x64
 80031e4:	4819      	ldr	r0, [pc, #100]	; (800324c <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 80031e6:	f001 ff1c 	bl	8005022 <assert_failed>
 80031ea:	4d19      	ldr	r5, [pc, #100]	; (8003250 <HAL_I2CEx_ConfigAnalogFilter+0x88>)
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80031ec:	422c      	tst	r4, r5
 80031ee:	d003      	beq.n	80031f8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80031f0:	2165      	movs	r1, #101	; 0x65
 80031f2:	4816      	ldr	r0, [pc, #88]	; (800324c <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 80031f4:	f001 ff15 	bl	8005022 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f8:	2341      	movs	r3, #65	; 0x41
 80031fa:	469c      	mov	ip, r3
 80031fc:	44b4      	add	ip, r6
 80031fe:	4663      	mov	r3, ip
 8003200:	781a      	ldrb	r2, [r3, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003202:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	2a20      	cmp	r2, #32
 8003208:	d119      	bne.n	800323e <HAL_I2CEx_ConfigAnalogFilter+0x76>
    __HAL_LOCK(hi2c);
 800320a:	0037      	movs	r7, r6
 800320c:	3740      	adds	r7, #64	; 0x40
 800320e:	783b      	ldrb	r3, [r7, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d014      	beq.n	800323e <HAL_I2CEx_ConfigAnalogFilter+0x76>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003214:	2324      	movs	r3, #36	; 0x24
 8003216:	4661      	mov	r1, ip
 8003218:	700b      	strb	r3, [r1, #0]
    __HAL_I2C_DISABLE(hi2c);
 800321a:	2101      	movs	r1, #1
 800321c:	6833      	ldr	r3, [r6, #0]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	4388      	bics	r0, r1
 8003222:	6018      	str	r0, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	4005      	ands	r5, r0
 8003228:	601d      	str	r5, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	4304      	orrs	r4, r0
 800322e:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	4301      	orrs	r1, r0
 8003234:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003236:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	4663      	mov	r3, ip
 800323a:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800323c:	7038      	strb	r0, [r7, #0]
  }
}
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003240:	40005400 	.word	0x40005400
 8003244:	40005800 	.word	0x40005800
 8003248:	40007800 	.word	0x40007800
 800324c:	08005b9c 	.word	0x08005b9c
 8003250:	ffffefff 	.word	0xffffefff

08003254 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_I2CEx_ConfigDigitalFilter+0x70>)
 8003258:	6803      	ldr	r3, [r0, #0]
{
 800325a:	0005      	movs	r5, r0
 800325c:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_I2CEx_ConfigDigitalFilter+0x22>
 8003262:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <HAL_I2CEx_ConfigDigitalFilter+0x74>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d006      	beq.n	8003276 <HAL_I2CEx_ConfigDigitalFilter+0x22>
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <HAL_I2CEx_ConfigDigitalFilter+0x78>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <HAL_I2CEx_ConfigDigitalFilter+0x22>
 800326e:	2192      	movs	r1, #146	; 0x92
 8003270:	4817      	ldr	r0, [pc, #92]	; (80032d0 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 8003272:	f001 fed6 	bl	8005022 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003276:	2c0f      	cmp	r4, #15
 8003278:	d903      	bls.n	8003282 <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 800327a:	2193      	movs	r1, #147	; 0x93
 800327c:	4814      	ldr	r0, [pc, #80]	; (80032d0 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 800327e:	f001 fed0 	bl	8005022 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003282:	002e      	movs	r6, r5
 8003284:	3641      	adds	r6, #65	; 0x41
 8003286:	7832      	ldrb	r2, [r6, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003288:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	2a20      	cmp	r2, #32
 800328e:	d117      	bne.n	80032c0 <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    __HAL_LOCK(hi2c);
 8003290:	0029      	movs	r1, r5
 8003292:	3140      	adds	r1, #64	; 0x40
 8003294:	780b      	ldrb	r3, [r1, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d012      	beq.n	80032c0 <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800329a:	2324      	movs	r3, #36	; 0x24
 800329c:	7033      	strb	r3, [r6, #0]
    __HAL_I2C_DISABLE(hi2c);
 800329e:	682b      	ldr	r3, [r5, #0]
 80032a0:	3801      	subs	r0, #1
 80032a2:	681d      	ldr	r5, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80032a4:	4f0b      	ldr	r7, [pc, #44]	; (80032d4 <HAL_I2CEx_ConfigDigitalFilter+0x80>)
    __HAL_I2C_DISABLE(hi2c);
 80032a6:	4385      	bics	r5, r0
 80032a8:	601d      	str	r5, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80032aa:	681d      	ldr	r5, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80032ac:	0224      	lsls	r4, r4, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80032ae:	403d      	ands	r5, r7
    tmpreg |= DigitalFilter << 8U;
 80032b0:	432c      	orrs	r4, r5
    hi2c->Instance->CR1 = tmpreg;
 80032b2:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80032b4:	681c      	ldr	r4, [r3, #0]
 80032b6:	4320      	orrs	r0, r4
 80032b8:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80032ba:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	7032      	strb	r2, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80032be:	7008      	strb	r0, [r1, #0]
  }
}
 80032c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	40005400 	.word	0x40005400
 80032c8:	40005800 	.word	0x40005800
 80032cc:	40007800 	.word	0x40007800
 80032d0:	08005b9c 	.word	0x08005b9c
 80032d4:	fffff0ff 	.word	0xfffff0ff

080032d8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d8:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80032da:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80032dc:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80032de:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80032e0:	400a      	ands	r2, r1
 80032e2:	2a08      	cmp	r2, #8
 80032e4:	d026      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x5c>
 80032e6:	2a0c      	cmp	r2, #12
 80032e8:	d006      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x20>
 80032ea:	2a04      	cmp	r2, #4
 80032ec:	d11a      	bne.n	8003324 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	06db      	lsls	r3, r3, #27
 80032f2:	d421      	bmi.n	8003338 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80032f4:	4812      	ldr	r0, [pc, #72]	; (8003340 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80032f6:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80032f8:	028a      	lsls	r2, r1, #10
 80032fa:	4812      	ldr	r0, [pc, #72]	; (8003344 <HAL_RCC_GetSysClockFreq+0x6c>)
 80032fc:	0f12      	lsrs	r2, r2, #28
 80032fe:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003300:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003302:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003304:	0f89      	lsrs	r1, r1, #30
 8003306:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003308:	03c0      	lsls	r0, r0, #15
 800330a:	d504      	bpl.n	8003316 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 800330c:	480e      	ldr	r0, [pc, #56]	; (8003348 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800330e:	4350      	muls	r0, r2
 8003310:	f7fc ff16 	bl	8000140 <__udivsi3>
 8003314:	e7ef      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	06db      	lsls	r3, r3, #27
 800331a:	d501      	bpl.n	8003320 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800331c:	480b      	ldr	r0, [pc, #44]	; (800334c <HAL_RCC_GetSysClockFreq+0x74>)
 800331e:	e7f6      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8003320:	4807      	ldr	r0, [pc, #28]	; (8003340 <HAL_RCC_GetSysClockFreq+0x68>)
 8003322:	e7f4      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003324:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003326:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003328:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800332e:	3301      	adds	r3, #1
 8003330:	4098      	lsls	r0, r3
 8003332:	e7e0      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8003334:	4804      	ldr	r0, [pc, #16]	; (8003348 <HAL_RCC_GetSysClockFreq+0x70>)
 8003336:	e7de      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8003338:	4804      	ldr	r0, [pc, #16]	; (800334c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800333a:	e7dc      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x1e>
 800333c:	40021000 	.word	0x40021000
 8003340:	00f42400 	.word	0x00f42400
 8003344:	08005d3e 	.word	0x08005d3e
 8003348:	007a1200 	.word	0x007a1200
 800334c:	003d0900 	.word	0x003d0900

08003350 <HAL_RCC_OscConfig>:
{
 8003350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003352:	0005      	movs	r5, r0
 8003354:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8003356:	2800      	cmp	r0, #0
 8003358:	d102      	bne.n	8003360 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
}
 800335c:	b007      	add	sp, #28
 800335e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003360:	6803      	ldr	r3, [r0, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <HAL_RCC_OscConfig+0x24>
 8003366:	069b      	lsls	r3, r3, #26
 8003368:	d104      	bne.n	8003374 <HAL_RCC_OscConfig+0x24>
 800336a:	21b0      	movs	r1, #176	; 0xb0
 800336c:	48c7      	ldr	r0, [pc, #796]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 800336e:	0049      	lsls	r1, r1, #1
 8003370:	f001 fe57 	bl	8005022 <assert_failed>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003374:	230c      	movs	r3, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003376:	2780      	movs	r7, #128	; 0x80
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003378:	4cc5      	ldr	r4, [pc, #788]	; (8003690 <HAL_RCC_OscConfig+0x340>)
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337a:	027f      	lsls	r7, r7, #9
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800337c:	68e2      	ldr	r2, [r4, #12]
 800337e:	401a      	ands	r2, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	68e3      	ldr	r3, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003382:	9201      	str	r2, [sp, #4]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003384:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	682b      	ldr	r3, [r5, #0]
 8003388:	07db      	lsls	r3, r3, #31
 800338a:	d464      	bmi.n	8003456 <HAL_RCC_OscConfig+0x106>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	079b      	lsls	r3, r3, #30
 8003390:	d500      	bpl.n	8003394 <HAL_RCC_OscConfig+0x44>
 8003392:	e0c0      	b.n	8003516 <HAL_RCC_OscConfig+0x1c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	06db      	lsls	r3, r3, #27
 8003398:	d543      	bpl.n	8003422 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d000      	beq.n	80033a2 <HAL_RCC_OscConfig+0x52>
 80033a0:	e12d      	b.n	80035fe <HAL_RCC_OscConfig+0x2ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	059b      	lsls	r3, r3, #22
 80033a6:	d502      	bpl.n	80033ae <HAL_RCC_OscConfig+0x5e>
 80033a8:	69eb      	ldr	r3, [r5, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0d5      	beq.n	800335a <HAL_RCC_OscConfig+0xa>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80033ae:	6a2b      	ldr	r3, [r5, #32]
 80033b0:	2bff      	cmp	r3, #255	; 0xff
 80033b2:	d904      	bls.n	80033be <HAL_RCC_OscConfig+0x6e>
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	48b5      	ldr	r0, [pc, #724]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 80033b8:	0089      	lsls	r1, r1, #2
 80033ba:	f001 fe32 	bl	8005022 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80033be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80033c0:	4ab4      	ldr	r2, [pc, #720]	; (8003694 <HAL_RCC_OscConfig+0x344>)
 80033c2:	49b5      	ldr	r1, [pc, #724]	; (8003698 <HAL_RCC_OscConfig+0x348>)
 80033c4:	401a      	ands	r2, r3
 80033c6:	420b      	tst	r3, r1
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x92>
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0209      	lsls	r1, r1, #8
 80033ce:	428a      	cmp	r2, r1
 80033d0:	d007      	beq.n	80033e2 <HAL_RCC_OscConfig+0x92>
 80033d2:	22c0      	movs	r2, #192	; 0xc0
 80033d4:	0212      	lsls	r2, r2, #8
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_OscConfig+0x92>
 80033da:	49b0      	ldr	r1, [pc, #704]	; (800369c <HAL_RCC_OscConfig+0x34c>)
 80033dc:	48ab      	ldr	r0, [pc, #684]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 80033de:	f001 fe20 	bl	8005022 <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e2:	6862      	ldr	r2, [r4, #4]
 80033e4:	49ae      	ldr	r1, [pc, #696]	; (80036a0 <HAL_RCC_OscConfig+0x350>)
 80033e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80033e8:	400a      	ands	r2, r1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ee:	6861      	ldr	r1, [r4, #4]
 80033f0:	6a2a      	ldr	r2, [r5, #32]
 80033f2:	0209      	lsls	r1, r1, #8
 80033f4:	0a09      	lsrs	r1, r1, #8
 80033f6:	0612      	lsls	r2, r2, #24
 80033f8:	430a      	orrs	r2, r1
 80033fa:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0b5b      	lsrs	r3, r3, #13
 8003400:	3301      	adds	r3, #1
 8003402:	0212      	lsls	r2, r2, #8
 8003404:	409a      	lsls	r2, r3
 8003406:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003408:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800340a:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800340c:	060a      	lsls	r2, r1, #24
 800340e:	49a5      	ldr	r1, [pc, #660]	; (80036a4 <HAL_RCC_OscConfig+0x354>)
 8003410:	0f12      	lsrs	r2, r2, #28
 8003412:	5c8a      	ldrb	r2, [r1, r2]
 8003414:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003416:	4aa4      	ldr	r2, [pc, #656]	; (80036a8 <HAL_RCC_OscConfig+0x358>)
 8003418:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800341a:	f7fe fe51 	bl	80020c0 <HAL_InitTick>
        if(status != HAL_OK)
 800341e:	2800      	cmp	r0, #0
 8003420:	d19c      	bne.n	800335c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	071b      	lsls	r3, r3, #28
 8003426:	d500      	bpl.n	800342a <HAL_RCC_OscConfig+0xda>
 8003428:	e15b      	b.n	80036e2 <HAL_RCC_OscConfig+0x392>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	075b      	lsls	r3, r3, #29
 800342e:	d500      	bpl.n	8003432 <HAL_RCC_OscConfig+0xe2>
 8003430:	e184      	b.n	800373c <HAL_RCC_OscConfig+0x3ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003432:	682b      	ldr	r3, [r5, #0]
 8003434:	069b      	lsls	r3, r3, #26
 8003436:	d500      	bpl.n	800343a <HAL_RCC_OscConfig+0xea>
 8003438:	e1fd      	b.n	8003836 <HAL_RCC_OscConfig+0x4e6>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800343a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800343c:	2b02      	cmp	r3, #2
 800343e:	d904      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
 8003440:	21ba      	movs	r1, #186	; 0xba
 8003442:	4892      	ldr	r0, [pc, #584]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 8003444:	0089      	lsls	r1, r1, #2
 8003446:	f001 fdec 	bl	8005022 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d000      	beq.n	8003452 <HAL_RCC_OscConfig+0x102>
 8003450:	e22b      	b.n	80038aa <HAL_RCC_OscConfig+0x55a>
  return HAL_OK;
 8003452:	2000      	movs	r0, #0
 8003454:	e782      	b.n	800335c <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003456:	686b      	ldr	r3, [r5, #4]
 8003458:	4e94      	ldr	r6, [pc, #592]	; (80036ac <HAL_RCC_OscConfig+0x35c>)
 800345a:	4233      	tst	r3, r6
 800345c:	d008      	beq.n	8003470 <HAL_RCC_OscConfig+0x120>
 800345e:	22a0      	movs	r2, #160	; 0xa0
 8003460:	02d2      	lsls	r2, r2, #11
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_RCC_OscConfig+0x120>
 8003466:	216a      	movs	r1, #106	; 0x6a
 8003468:	4888      	ldr	r0, [pc, #544]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 800346a:	31ff      	adds	r1, #255	; 0xff
 800346c:	f001 fdd9 	bl	8005022 <assert_failed>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	9b01      	ldr	r3, [sp, #4]
 8003472:	2b08      	cmp	r3, #8
 8003474:	d003      	beq.n	800347e <HAL_RCC_OscConfig+0x12e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d108      	bne.n	800348c <HAL_RCC_OscConfig+0x13c>
 800347a:	2f00      	cmp	r7, #0
 800347c:	d006      	beq.n	800348c <HAL_RCC_OscConfig+0x13c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	039b      	lsls	r3, r3, #14
 8003482:	d583      	bpl.n	800338c <HAL_RCC_OscConfig+0x3c>
 8003484:	686b      	ldr	r3, [r5, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d180      	bne.n	800338c <HAL_RCC_OscConfig+0x3c>
 800348a:	e766      	b.n	800335a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	686b      	ldr	r3, [r5, #4]
 8003490:	0249      	lsls	r1, r1, #9
 8003492:	428b      	cmp	r3, r1
 8003494:	d114      	bne.n	80034c0 <HAL_RCC_OscConfig+0x170>
 8003496:	6822      	ldr	r2, [r4, #0]
 8003498:	4313      	orrs	r3, r2
 800349a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800349c:	f7fe fe44 	bl	8002128 <HAL_GetTick>
 80034a0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	0292      	lsls	r2, r2, #10
 80034a8:	4213      	tst	r3, r2
 80034aa:	d000      	beq.n	80034ae <HAL_RCC_OscConfig+0x15e>
 80034ac:	e76e      	b.n	800338c <HAL_RCC_OscConfig+0x3c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ae:	f7fe fe3b 	bl	8002128 <HAL_GetTick>
 80034b2:	23fa      	movs	r3, #250	; 0xfa
 80034b4:	1b80      	subs	r0, r0, r6
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4298      	cmp	r0, r3
 80034ba:	d9f2      	bls.n	80034a2 <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80034bc:	2003      	movs	r0, #3
 80034be:	e74d      	b.n	800335c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c0:	22a0      	movs	r2, #160	; 0xa0
 80034c2:	02d2      	lsls	r2, r2, #11
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <HAL_RCC_OscConfig+0x18a>
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	02db      	lsls	r3, r3, #11
 80034ce:	4313      	orrs	r3, r2
 80034d0:	6023      	str	r3, [r4, #0]
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	6022      	str	r2, [r4, #0]
 80034d8:	e7e0      	b.n	800349c <HAL_RCC_OscConfig+0x14c>
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	4016      	ands	r6, r2
 80034de:	6026      	str	r6, [r4, #0]
 80034e0:	6822      	ldr	r2, [r4, #0]
 80034e2:	400a      	ands	r2, r1
 80034e4:	9205      	str	r2, [sp, #20]
 80034e6:	9a05      	ldr	r2, [sp, #20]
 80034e8:	4971      	ldr	r1, [pc, #452]	; (80036b0 <HAL_RCC_OscConfig+0x360>)
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	400a      	ands	r2, r1
 80034ee:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1d3      	bne.n	800349c <HAL_RCC_OscConfig+0x14c>
        tickstart = HAL_GetTick();
 80034f4:	f7fe fe18 	bl	8002128 <HAL_GetTick>
 80034f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	0292      	lsls	r2, r2, #10
 8003500:	4213      	tst	r3, r2
 8003502:	d100      	bne.n	8003506 <HAL_RCC_OscConfig+0x1b6>
 8003504:	e742      	b.n	800338c <HAL_RCC_OscConfig+0x3c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003506:	f7fe fe0f 	bl	8002128 <HAL_GetTick>
 800350a:	23fa      	movs	r3, #250	; 0xfa
 800350c:	1b80      	subs	r0, r0, r6
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4298      	cmp	r0, r3
 8003512:	d9f2      	bls.n	80034fa <HAL_RCC_OscConfig+0x1aa>
 8003514:	e7d2      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003516:	2320      	movs	r3, #32
 8003518:	68ea      	ldr	r2, [r5, #12]
 800351a:	439a      	bics	r2, r3
 800351c:	2a01      	cmp	r2, #1
 800351e:	d906      	bls.n	800352e <HAL_RCC_OscConfig+0x1de>
 8003520:	2a09      	cmp	r2, #9
 8003522:	d004      	beq.n	800352e <HAL_RCC_OscConfig+0x1de>
 8003524:	21ce      	movs	r1, #206	; 0xce
 8003526:	4859      	ldr	r0, [pc, #356]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 8003528:	0049      	lsls	r1, r1, #1
 800352a:	f001 fd7a 	bl	8005022 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800352e:	692b      	ldr	r3, [r5, #16]
 8003530:	2b1f      	cmp	r3, #31
 8003532:	d904      	bls.n	800353e <HAL_RCC_OscConfig+0x1ee>
 8003534:	219e      	movs	r1, #158	; 0x9e
 8003536:	4855      	ldr	r0, [pc, #340]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 8003538:	31ff      	adds	r1, #255	; 0xff
 800353a:	f001 fd72 	bl	8005022 <assert_failed>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800353e:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003540:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003542:	4213      	tst	r3, r2
 8003544:	d003      	beq.n	800354e <HAL_RCC_OscConfig+0x1fe>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003546:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003548:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800354a:	4311      	orrs	r1, r2
 800354c:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800354e:	9a01      	ldr	r2, [sp, #4]
 8003550:	2a04      	cmp	r2, #4
 8003552:	d003      	beq.n	800355c <HAL_RCC_OscConfig+0x20c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003554:	2a0c      	cmp	r2, #12
 8003556:	d124      	bne.n	80035a2 <HAL_RCC_OscConfig+0x252>
 8003558:	2f00      	cmp	r7, #0
 800355a:	d122      	bne.n	80035a2 <HAL_RCC_OscConfig+0x252>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	0752      	lsls	r2, r2, #29
 8003560:	d502      	bpl.n	8003568 <HAL_RCC_OscConfig+0x218>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d100      	bne.n	8003568 <HAL_RCC_OscConfig+0x218>
 8003566:	e6f8      	b.n	800335a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	6861      	ldr	r1, [r4, #4]
 800356a:	692a      	ldr	r2, [r5, #16]
 800356c:	4851      	ldr	r0, [pc, #324]	; (80036b4 <HAL_RCC_OscConfig+0x364>)
 800356e:	0212      	lsls	r2, r2, #8
 8003570:	4001      	ands	r1, r0
 8003572:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003574:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003578:	6822      	ldr	r2, [r4, #0]
 800357a:	438a      	bics	r2, r1
 800357c:	4313      	orrs	r3, r2
 800357e:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003580:	f7ff feaa 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003584:	68e3      	ldr	r3, [r4, #12]
 8003586:	4a47      	ldr	r2, [pc, #284]	; (80036a4 <HAL_RCC_OscConfig+0x354>)
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	0f1b      	lsrs	r3, r3, #28
 800358c:	5cd3      	ldrb	r3, [r2, r3]
 800358e:	40d8      	lsrs	r0, r3
 8003590:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <HAL_RCC_OscConfig+0x358>)
 8003592:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fe fd93 	bl	80020c0 <HAL_InitTick>
      if(status != HAL_OK)
 800359a:	2800      	cmp	r0, #0
 800359c:	d100      	bne.n	80035a0 <HAL_RCC_OscConfig+0x250>
 800359e:	e6f9      	b.n	8003394 <HAL_RCC_OscConfig+0x44>
 80035a0:	e6dc      	b.n	800335c <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d019      	beq.n	80035da <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80035a6:	2109      	movs	r1, #9
 80035a8:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035aa:	2704      	movs	r7, #4
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80035ac:	438a      	bics	r2, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035b2:	f7fe fdb9 	bl	8002128 <HAL_GetTick>
 80035b6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	423b      	tst	r3, r7
 80035bc:	d007      	beq.n	80035ce <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	6862      	ldr	r2, [r4, #4]
 80035c0:	692b      	ldr	r3, [r5, #16]
 80035c2:	493c      	ldr	r1, [pc, #240]	; (80036b4 <HAL_RCC_OscConfig+0x364>)
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	400a      	ands	r2, r1
 80035c8:	4313      	orrs	r3, r2
 80035ca:	6063      	str	r3, [r4, #4]
 80035cc:	e6e2      	b.n	8003394 <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ce:	f7fe fdab 	bl	8002128 <HAL_GetTick>
 80035d2:	1b80      	subs	r0, r0, r6
 80035d4:	2802      	cmp	r0, #2
 80035d6:	d9ef      	bls.n	80035b8 <HAL_RCC_OscConfig+0x268>
 80035d8:	e770      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI_DISABLE();
 80035da:	2201      	movs	r2, #1
 80035dc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035de:	2704      	movs	r7, #4
        __HAL_RCC_HSI_DISABLE();
 80035e0:	4393      	bics	r3, r2
 80035e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035e4:	f7fe fda0 	bl	8002128 <HAL_GetTick>
 80035e8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	423b      	tst	r3, r7
 80035ee:	d100      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2a2>
 80035f0:	e6d0      	b.n	8003394 <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fe fd99 	bl	8002128 <HAL_GetTick>
 80035f6:	1b80      	subs	r0, r0, r6
 80035f8:	2802      	cmp	r0, #2
 80035fa:	d9f6      	bls.n	80035ea <HAL_RCC_OscConfig+0x29a>
 80035fc:	e75e      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80035fe:	69eb      	ldr	r3, [r5, #28]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d904      	bls.n	800360e <HAL_RCC_OscConfig+0x2be>
 8003604:	2186      	movs	r1, #134	; 0x86
 8003606:	4821      	ldr	r0, [pc, #132]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 8003608:	0089      	lsls	r1, r1, #2
 800360a:	f001 fd0a 	bl	8005022 <assert_failed>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800360e:	69eb      	ldr	r3, [r5, #28]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d053      	beq.n	80036bc <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4313      	orrs	r3, r2
 800361c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800361e:	f7fe fd83 	bl	8002128 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003622:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003624:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003626:	00bf      	lsls	r7, r7, #2
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	423b      	tst	r3, r7
 800362c:	d027      	beq.n	800367e <HAL_RCC_OscConfig+0x32e>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800362e:	6a2b      	ldr	r3, [r5, #32]
 8003630:	2bff      	cmp	r3, #255	; 0xff
 8003632:	d904      	bls.n	800363e <HAL_RCC_OscConfig+0x2ee>
 8003634:	218b      	movs	r1, #139	; 0x8b
 8003636:	4815      	ldr	r0, [pc, #84]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 8003638:	0089      	lsls	r1, r1, #2
 800363a:	f001 fcf2 	bl	8005022 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800363e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_RCC_OscConfig+0x344>)
 8003642:	4915      	ldr	r1, [pc, #84]	; (8003698 <HAL_RCC_OscConfig+0x348>)
 8003644:	401a      	ands	r2, r3
 8003646:	420b      	tst	r3, r1
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_OscConfig+0x312>
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	0209      	lsls	r1, r1, #8
 800364e:	428a      	cmp	r2, r1
 8003650:	d007      	beq.n	8003662 <HAL_RCC_OscConfig+0x312>
 8003652:	22c0      	movs	r2, #192	; 0xc0
 8003654:	0212      	lsls	r2, r2, #8
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_OscConfig+0x312>
 800365a:	4917      	ldr	r1, [pc, #92]	; (80036b8 <HAL_RCC_OscConfig+0x368>)
 800365c:	480b      	ldr	r0, [pc, #44]	; (800368c <HAL_RCC_OscConfig+0x33c>)
 800365e:	f001 fce0 	bl	8005022 <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003662:	6863      	ldr	r3, [r4, #4]
 8003664:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <HAL_RCC_OscConfig+0x350>)
 8003666:	4013      	ands	r3, r2
 8003668:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800366a:	4313      	orrs	r3, r2
 800366c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800366e:	6862      	ldr	r2, [r4, #4]
 8003670:	6a2b      	ldr	r3, [r5, #32]
 8003672:	0212      	lsls	r2, r2, #8
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	0a12      	lsrs	r2, r2, #8
 8003678:	4313      	orrs	r3, r2
 800367a:	6063      	str	r3, [r4, #4]
 800367c:	e6d1      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367e:	f7fe fd53 	bl	8002128 <HAL_GetTick>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	2802      	cmp	r0, #2
 8003686:	d9cf      	bls.n	8003628 <HAL_RCC_OscConfig+0x2d8>
 8003688:	e718      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	08005bd7 	.word	0x08005bd7
 8003690:	40021000 	.word	0x40021000
 8003694:	ffffdfff 	.word	0xffffdfff
 8003698:	ffff9fff 	.word	0xffff9fff
 800369c:	00000201 	.word	0x00000201
 80036a0:	ffff1fff 	.word	0xffff1fff
 80036a4:	08005d26 	.word	0x08005d26
 80036a8:	20000000 	.word	0x20000000
 80036ac:	fffeffff 	.word	0xfffeffff
 80036b0:	fffbffff 	.word	0xfffbffff
 80036b4:	ffffe0ff 	.word	0xffffe0ff
 80036b8:	0000022d 	.word	0x0000022d
        __HAL_RCC_MSI_DISABLE();
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	4ac0      	ldr	r2, [pc, #768]	; (80039c0 <HAL_RCC_OscConfig+0x670>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036c0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 80036c2:	4013      	ands	r3, r2
 80036c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80036c6:	f7fe fd2f 	bl	8002128 <HAL_GetTick>
 80036ca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036cc:	00bf      	lsls	r7, r7, #2
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	423b      	tst	r3, r7
 80036d2:	d100      	bne.n	80036d6 <HAL_RCC_OscConfig+0x386>
 80036d4:	e6a5      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d6:	f7fe fd27 	bl	8002128 <HAL_GetTick>
 80036da:	1b80      	subs	r0, r0, r6
 80036dc:	2802      	cmp	r0, #2
 80036de:	d9f6      	bls.n	80036ce <HAL_RCC_OscConfig+0x37e>
 80036e0:	e6ec      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80036e2:	696b      	ldr	r3, [r5, #20]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d903      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3a0>
 80036e8:	49b6      	ldr	r1, [pc, #728]	; (80039c4 <HAL_RCC_OscConfig+0x674>)
 80036ea:	48b7      	ldr	r0, [pc, #732]	; (80039c8 <HAL_RCC_OscConfig+0x678>)
 80036ec:	f001 fc99 	bl	8005022 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f0:	696a      	ldr	r2, [r5, #20]
 80036f2:	2301      	movs	r3, #1
 80036f4:	2a00      	cmp	r2, #0
 80036f6:	d010      	beq.n	800371a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_LSI_ENABLE();
 80036f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036fa:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80036fc:	4313      	orrs	r3, r2
 80036fe:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003700:	f7fe fd12 	bl	8002128 <HAL_GetTick>
 8003704:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003706:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003708:	423b      	tst	r3, r7
 800370a:	d000      	beq.n	800370e <HAL_RCC_OscConfig+0x3be>
 800370c:	e68d      	b.n	800342a <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370e:	f7fe fd0b 	bl	8002128 <HAL_GetTick>
 8003712:	1b80      	subs	r0, r0, r6
 8003714:	2802      	cmp	r0, #2
 8003716:	d9f6      	bls.n	8003706 <HAL_RCC_OscConfig+0x3b6>
 8003718:	e6d0      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_LSI_DISABLE();
 800371a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800371c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800371e:	439a      	bics	r2, r3
 8003720:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003722:	f7fe fd01 	bl	8002128 <HAL_GetTick>
 8003726:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003728:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800372a:	423b      	tst	r3, r7
 800372c:	d100      	bne.n	8003730 <HAL_RCC_OscConfig+0x3e0>
 800372e:	e67c      	b.n	800342a <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003730:	f7fe fcfa 	bl	8002128 <HAL_GetTick>
 8003734:	1b80      	subs	r0, r0, r6
 8003736:	2802      	cmp	r0, #2
 8003738:	d9f6      	bls.n	8003728 <HAL_RCC_OscConfig+0x3d8>
 800373a:	e6bf      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800373c:	68ab      	ldr	r3, [r5, #8]
 800373e:	4aa0      	ldr	r2, [pc, #640]	; (80039c0 <HAL_RCC_OscConfig+0x670>)
 8003740:	4213      	tst	r3, r2
 8003742:	d007      	beq.n	8003754 <HAL_RCC_OscConfig+0x404>
 8003744:	22a0      	movs	r2, #160	; 0xa0
 8003746:	00d2      	lsls	r2, r2, #3
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <HAL_RCC_OscConfig+0x404>
 800374c:	499f      	ldr	r1, [pc, #636]	; (80039cc <HAL_RCC_OscConfig+0x67c>)
 800374e:	489e      	ldr	r0, [pc, #632]	; (80039c8 <HAL_RCC_OscConfig+0x678>)
 8003750:	f001 fc67 	bl	8005022 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003754:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003758:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800375a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800375c:	9102      	str	r1, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	421a      	tst	r2, r3
 8003760:	d104      	bne.n	800376c <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003764:	4313      	orrs	r3, r2
 8003766:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003768:	2301      	movs	r3, #1
 800376a:	9302      	str	r3, [sp, #8]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	2780      	movs	r7, #128	; 0x80
 800376e:	4e98      	ldr	r6, [pc, #608]	; (80039d0 <HAL_RCC_OscConfig+0x680>)
 8003770:	007f      	lsls	r7, r7, #1
 8003772:	6833      	ldr	r3, [r6, #0]
 8003774:	423b      	tst	r3, r7
 8003776:	d008      	beq.n	800378a <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	68ab      	ldr	r3, [r5, #8]
 800377c:	0052      	lsls	r2, r2, #1
 800377e:	4293      	cmp	r3, r2
 8003780:	d113      	bne.n	80037aa <HAL_RCC_OscConfig+0x45a>
 8003782:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003784:	4313      	orrs	r3, r2
 8003786:	6523      	str	r3, [r4, #80]	; 0x50
 8003788:	e034      	b.n	80037f4 <HAL_RCC_OscConfig+0x4a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378a:	6833      	ldr	r3, [r6, #0]
 800378c:	433b      	orrs	r3, r7
 800378e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003790:	f7fe fcca 	bl	8002128 <HAL_GetTick>
 8003794:	9003      	str	r0, [sp, #12]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	6833      	ldr	r3, [r6, #0]
 8003798:	423b      	tst	r3, r7
 800379a:	d1ed      	bne.n	8003778 <HAL_RCC_OscConfig+0x428>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fe fcc4 	bl	8002128 <HAL_GetTick>
 80037a0:	9b03      	ldr	r3, [sp, #12]
 80037a2:	1ac0      	subs	r0, r0, r3
 80037a4:	2864      	cmp	r0, #100	; 0x64
 80037a6:	d9f6      	bls.n	8003796 <HAL_RCC_OscConfig+0x446>
 80037a8:	e688      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <HAL_RCC_OscConfig+0x48c>
 80037ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037b0:	4a83      	ldr	r2, [pc, #524]	; (80039c0 <HAL_RCC_OscConfig+0x670>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037b2:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b4:	4013      	ands	r3, r2
 80037b6:	6523      	str	r3, [r4, #80]	; 0x50
 80037b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037ba:	4a86      	ldr	r2, [pc, #536]	; (80039d4 <HAL_RCC_OscConfig+0x684>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037bc:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037be:	4013      	ands	r3, r2
 80037c0:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80037c2:	f7fe fcb1 	bl	8002128 <HAL_GetTick>
 80037c6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037ca:	423b      	tst	r3, r7
 80037cc:	d02a      	beq.n	8003824 <HAL_RCC_OscConfig+0x4d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fe fcab 	bl	8002128 <HAL_GetTick>
 80037d2:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCC_OscConfig+0x688>)
 80037d4:	1b80      	subs	r0, r0, r6
 80037d6:	4298      	cmp	r0, r3
 80037d8:	d9f6      	bls.n	80037c8 <HAL_RCC_OscConfig+0x478>
 80037da:	e66f      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	21a0      	movs	r1, #160	; 0xa0
 80037de:	00c9      	lsls	r1, r1, #3
 80037e0:	428b      	cmp	r3, r1
 80037e2:	d10d      	bne.n	8003800 <HAL_RCC_OscConfig+0x4b0>
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	430b      	orrs	r3, r1
 80037ec:	6523      	str	r3, [r4, #80]	; 0x50
 80037ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037f0:	431a      	orrs	r2, r3
 80037f2:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80037f4:	f7fe fc98 	bl	8002128 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037f8:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 80037fa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037fc:	00bf      	lsls	r7, r7, #2
 80037fe:	e00e      	b.n	800381e <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003802:	4a6f      	ldr	r2, [pc, #444]	; (80039c0 <HAL_RCC_OscConfig+0x670>)
 8003804:	4013      	ands	r3, r2
 8003806:	6523      	str	r3, [r4, #80]	; 0x50
 8003808:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800380a:	4a72      	ldr	r2, [pc, #456]	; (80039d4 <HAL_RCC_OscConfig+0x684>)
 800380c:	4013      	ands	r3, r2
 800380e:	e7ba      	b.n	8003786 <HAL_RCC_OscConfig+0x436>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7fe fc8a 	bl	8002128 <HAL_GetTick>
 8003814:	4b70      	ldr	r3, [pc, #448]	; (80039d8 <HAL_RCC_OscConfig+0x688>)
 8003816:	1b80      	subs	r0, r0, r6
 8003818:	4298      	cmp	r0, r3
 800381a:	d900      	bls.n	800381e <HAL_RCC_OscConfig+0x4ce>
 800381c:	e64e      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800381e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003820:	423b      	tst	r3, r7
 8003822:	d0f5      	beq.n	8003810 <HAL_RCC_OscConfig+0x4c0>
    if(pwrclkchanged == SET)
 8003824:	9b02      	ldr	r3, [sp, #8]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d000      	beq.n	800382c <HAL_RCC_OscConfig+0x4dc>
 800382a:	e602      	b.n	8003432 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800382c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800382e:	4a6b      	ldr	r2, [pc, #428]	; (80039dc <HAL_RCC_OscConfig+0x68c>)
 8003830:	4013      	ands	r3, r2
 8003832:	63a3      	str	r3, [r4, #56]	; 0x38
 8003834:	e5fd      	b.n	8003432 <HAL_RCC_OscConfig+0xe2>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003836:	69ab      	ldr	r3, [r5, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d903      	bls.n	8003844 <HAL_RCC_OscConfig+0x4f4>
 800383c:	4968      	ldr	r1, [pc, #416]	; (80039e0 <HAL_RCC_OscConfig+0x690>)
 800383e:	4862      	ldr	r0, [pc, #392]	; (80039c8 <HAL_RCC_OscConfig+0x678>)
 8003840:	f001 fbef 	bl	8005022 <assert_failed>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003844:	69a9      	ldr	r1, [r5, #24]
 8003846:	2301      	movs	r3, #1
 8003848:	4a66      	ldr	r2, [pc, #408]	; (80039e4 <HAL_RCC_OscConfig+0x694>)
 800384a:	2900      	cmp	r1, #0
 800384c:	d018      	beq.n	8003880 <HAL_RCC_OscConfig+0x530>
        __HAL_RCC_HSI48_ENABLE();
 800384e:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003850:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 8003852:	4319      	orrs	r1, r3
 8003854:	60a1      	str	r1, [r4, #8]
 8003856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003858:	430b      	orrs	r3, r1
 800385a:	6363      	str	r3, [r4, #52]	; 0x34
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	6a11      	ldr	r1, [r2, #32]
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	430b      	orrs	r3, r1
 8003864:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003866:	f7fe fc5f 	bl	8002128 <HAL_GetTick>
 800386a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800386c:	68a3      	ldr	r3, [r4, #8]
 800386e:	423b      	tst	r3, r7
 8003870:	d000      	beq.n	8003874 <HAL_RCC_OscConfig+0x524>
 8003872:	e5e2      	b.n	800343a <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003874:	f7fe fc58 	bl	8002128 <HAL_GetTick>
 8003878:	1b80      	subs	r0, r0, r6
 800387a:	2802      	cmp	r0, #2
 800387c:	d9f6      	bls.n	800386c <HAL_RCC_OscConfig+0x51c>
 800387e:	e61d      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI48_DISABLE();
 8003880:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003882:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_DISABLE();
 8003884:	4399      	bics	r1, r3
 8003886:	60a1      	str	r1, [r4, #8]
 8003888:	6a13      	ldr	r3, [r2, #32]
 800388a:	4957      	ldr	r1, [pc, #348]	; (80039e8 <HAL_RCC_OscConfig+0x698>)
 800388c:	400b      	ands	r3, r1
 800388e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003890:	f7fe fc4a 	bl	8002128 <HAL_GetTick>
 8003894:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003896:	68a3      	ldr	r3, [r4, #8]
 8003898:	423b      	tst	r3, r7
 800389a:	d100      	bne.n	800389e <HAL_RCC_OscConfig+0x54e>
 800389c:	e5cd      	b.n	800343a <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800389e:	f7fe fc43 	bl	8002128 <HAL_GetTick>
 80038a2:	1b80      	subs	r0, r0, r6
 80038a4:	2802      	cmp	r0, #2
 80038a6:	d9f6      	bls.n	8003896 <HAL_RCC_OscConfig+0x546>
 80038a8:	e608      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038aa:	9a01      	ldr	r2, [sp, #4]
 80038ac:	2a0c      	cmp	r2, #12
 80038ae:	d06a      	beq.n	8003986 <HAL_RCC_OscConfig+0x636>
 80038b0:	4e4e      	ldr	r6, [pc, #312]	; (80039ec <HAL_RCC_OscConfig+0x69c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d155      	bne.n	8003962 <HAL_RCC_OscConfig+0x612>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80038b6:	4b4e      	ldr	r3, [pc, #312]	; (80039f0 <HAL_RCC_OscConfig+0x6a0>)
 80038b8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80038ba:	421a      	tst	r2, r3
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_OscConfig+0x576>
 80038be:	494d      	ldr	r1, [pc, #308]	; (80039f4 <HAL_RCC_OscConfig+0x6a4>)
 80038c0:	4841      	ldr	r0, [pc, #260]	; (80039c8 <HAL_RCC_OscConfig+0x678>)
 80038c2:	f001 fbae 	bl	8005022 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80038c6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80038c8:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_RCC_OscConfig+0x6a8>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <HAL_RCC_OscConfig+0x596>
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	0349      	lsls	r1, r1, #13
 80038d2:	428b      	cmp	r3, r1
 80038d4:	d007      	beq.n	80038e6 <HAL_RCC_OscConfig+0x596>
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	039b      	lsls	r3, r3, #14
 80038da:	429a      	cmp	r2, r3
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_OscConfig+0x596>
 80038de:	4947      	ldr	r1, [pc, #284]	; (80039fc <HAL_RCC_OscConfig+0x6ac>)
 80038e0:	4839      	ldr	r0, [pc, #228]	; (80039c8 <HAL_RCC_OscConfig+0x678>)
 80038e2:	f001 fb9e 	bl	8005022 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80038ea:	4b45      	ldr	r3, [pc, #276]	; (8003a00 <HAL_RCC_OscConfig+0x6b0>)
 80038ec:	03c9      	lsls	r1, r1, #15
 80038ee:	4013      	ands	r3, r2
 80038f0:	428b      	cmp	r3, r1
 80038f2:	d007      	beq.n	8003904 <HAL_RCC_OscConfig+0x5b4>
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d003      	beq.n	8003904 <HAL_RCC_OscConfig+0x5b4>
 80038fc:	4941      	ldr	r1, [pc, #260]	; (8003a04 <HAL_RCC_OscConfig+0x6b4>)
 80038fe:	4832      	ldr	r0, [pc, #200]	; (80039c8 <HAL_RCC_OscConfig+0x678>)
 8003900:	f001 fb8f 	bl	8005022 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	401e      	ands	r6, r3
 8003908:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 800390a:	f7fe fc0d 	bl	8002128 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800390e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003910:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003912:	04b6      	lsls	r6, r6, #18
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	4233      	tst	r3, r6
 8003918:	d11d      	bne.n	8003956 <HAL_RCC_OscConfig+0x606>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800391a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800391c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800391e:	68e2      	ldr	r2, [r4, #12]
 8003920:	430b      	orrs	r3, r1
 8003922:	4939      	ldr	r1, [pc, #228]	; (8003a08 <HAL_RCC_OscConfig+0x6b8>)
 8003924:	400a      	ands	r2, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800392a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800392c:	4313      	orrs	r3, r2
 800392e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	045b      	lsls	r3, r3, #17
 8003936:	4313      	orrs	r3, r2
 8003938:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800393a:	f7fe fbf5 	bl	8002128 <HAL_GetTick>
 800393e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003940:	04ad      	lsls	r5, r5, #18
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	422b      	tst	r3, r5
 8003946:	d000      	beq.n	800394a <HAL_RCC_OscConfig+0x5fa>
 8003948:	e583      	b.n	8003452 <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fe fbed 	bl	8002128 <HAL_GetTick>
 800394e:	1b80      	subs	r0, r0, r6
 8003950:	2802      	cmp	r0, #2
 8003952:	d9f6      	bls.n	8003942 <HAL_RCC_OscConfig+0x5f2>
 8003954:	e5b2      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7fe fbe7 	bl	8002128 <HAL_GetTick>
 800395a:	1bc0      	subs	r0, r0, r7
 800395c:	2802      	cmp	r0, #2
 800395e:	d9d9      	bls.n	8003914 <HAL_RCC_OscConfig+0x5c4>
 8003960:	e5ac      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 8003962:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003964:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003966:	401e      	ands	r6, r3
 8003968:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 800396a:	f7fe fbdd 	bl	8002128 <HAL_GetTick>
 800396e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003970:	04ad      	lsls	r5, r5, #18
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	422b      	tst	r3, r5
 8003976:	d100      	bne.n	800397a <HAL_RCC_OscConfig+0x62a>
 8003978:	e56b      	b.n	8003452 <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe fbd5 	bl	8002128 <HAL_GetTick>
 800397e:	1b80      	subs	r0, r0, r6
 8003980:	2802      	cmp	r0, #2
 8003982:	d9f6      	bls.n	8003972 <HAL_RCC_OscConfig+0x622>
 8003984:	e59a      	b.n	80034bc <HAL_RCC_OscConfig+0x16c>
        return HAL_ERROR;
 8003986:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	2b01      	cmp	r3, #1
 800398a:	d100      	bne.n	800398e <HAL_RCC_OscConfig+0x63e>
 800398c:	e4e6      	b.n	800335c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003990:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003994:	0252      	lsls	r2, r2, #9
 8003996:	401a      	ands	r2, r3
        return HAL_ERROR;
 8003998:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	428a      	cmp	r2, r1
 800399c:	d000      	beq.n	80039a0 <HAL_RCC_OscConfig+0x650>
 800399e:	e4dd      	b.n	800335c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039a0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039a4:	0392      	lsls	r2, r2, #14
 80039a6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a8:	428a      	cmp	r2, r1
 80039aa:	d000      	beq.n	80039ae <HAL_RCC_OscConfig+0x65e>
 80039ac:	e4d6      	b.n	800335c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80039ae:	20c0      	movs	r0, #192	; 0xc0
 80039b0:	0400      	lsls	r0, r0, #16
 80039b2:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039b4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80039b6:	1a18      	subs	r0, r3, r0
 80039b8:	1e43      	subs	r3, r0, #1
 80039ba:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80039bc:	b2c0      	uxtb	r0, r0
 80039be:	e4cd      	b.n	800335c <HAL_RCC_OscConfig+0xc>
 80039c0:	fffffeff 	.word	0xfffffeff
 80039c4:	0000024b 	.word	0x0000024b
 80039c8:	08005bd7 	.word	0x08005bd7
 80039cc:	00000277 	.word	0x00000277
 80039d0:	40007000 	.word	0x40007000
 80039d4:	fffffbff 	.word	0xfffffbff
 80039d8:	00001388 	.word	0x00001388
 80039dc:	efffffff 	.word	0xefffffff
 80039e0:	000002be 	.word	0x000002be
 80039e4:	40010000 	.word	0x40010000
 80039e8:	ffffdfff 	.word	0xffffdfff
 80039ec:	feffffff 	.word	0xfeffffff
 80039f0:	fffeffff 	.word	0xfffeffff
 80039f4:	000002f1 	.word	0x000002f1
 80039f8:	fff3ffff 	.word	0xfff3ffff
 80039fc:	000002f2 	.word	0x000002f2
 8003a00:	ff7fffff 	.word	0xff7fffff
 8003a04:	000002f3 	.word	0x000002f3
 8003a08:	ff02ffff 	.word	0xff02ffff

08003a0c <HAL_RCC_ClockConfig>:
{
 8003a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a0e:	0004      	movs	r4, r0
 8003a10:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8003a12:	2800      	cmp	r0, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8003a16:	2001      	movs	r0, #1
}
 8003a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003a1a:	6803      	ldr	r3, [r0, #0]
 8003a1c:	071b      	lsls	r3, r3, #28
 8003a1e:	d103      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x1c>
 8003a20:	497c      	ldr	r1, [pc, #496]	; (8003c14 <HAL_RCC_ClockConfig+0x208>)
 8003a22:	487d      	ldr	r0, [pc, #500]	; (8003c18 <HAL_RCC_ClockConfig+0x20c>)
 8003a24:	f001 fafd 	bl	8005022 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003a28:	2f01      	cmp	r7, #1
 8003a2a:	d903      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x28>
 8003a2c:	497b      	ldr	r1, [pc, #492]	; (8003c1c <HAL_RCC_ClockConfig+0x210>)
 8003a2e:	487a      	ldr	r0, [pc, #488]	; (8003c18 <HAL_RCC_ClockConfig+0x20c>)
 8003a30:	f001 faf7 	bl	8005022 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	2201      	movs	r2, #1
 8003a36:	4d7a      	ldr	r5, [pc, #488]	; (8003c20 <HAL_RCC_ClockConfig+0x214>)
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	429f      	cmp	r7, r3
 8003a3e:	d83a      	bhi.n	8003ab6 <HAL_RCC_ClockConfig+0xaa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	079b      	lsls	r3, r3, #30
 8003a44:	d440      	bmi.n	8003ac8 <HAL_RCC_ClockConfig+0xbc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	07db      	lsls	r3, r3, #31
 8003a4a:	d45f      	bmi.n	8003b0c <HAL_RCC_ClockConfig+0x100>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	682a      	ldr	r2, [r5, #0]
 8003a50:	401a      	ands	r2, r3
 8003a52:	4297      	cmp	r7, r2
 8003a54:	d200      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x4c>
 8003a56:	e0bb      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1c4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	4d72      	ldr	r5, [pc, #456]	; (8003c24 <HAL_RCC_ClockConfig+0x218>)
 8003a5c:	075b      	lsls	r3, r3, #29
 8003a5e:	d500      	bpl.n	8003a62 <HAL_RCC_ClockConfig+0x56>
 8003a60:	e0be      	b.n	8003be0 <HAL_RCC_ClockConfig+0x1d4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	071b      	lsls	r3, r3, #28
 8003a66:	d518      	bpl.n	8003a9a <HAL_RCC_ClockConfig+0x8e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	4a6f      	ldr	r2, [pc, #444]	; (8003c28 <HAL_RCC_ClockConfig+0x21c>)
 8003a6c:	4213      	tst	r3, r2
 8003a6e:	d00d      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x80>
 8003a70:	21a0      	movs	r1, #160	; 0xa0
 8003a72:	4a6e      	ldr	r2, [pc, #440]	; (8003c2c <HAL_RCC_ClockConfig+0x220>)
 8003a74:	00c9      	lsls	r1, r1, #3
 8003a76:	401a      	ands	r2, r3
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x80>
 8003a7c:	22c0      	movs	r2, #192	; 0xc0
 8003a7e:	00d2      	lsls	r2, r2, #3
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x80>
 8003a84:	496a      	ldr	r1, [pc, #424]	; (8003c30 <HAL_RCC_ClockConfig+0x224>)
 8003a86:	4864      	ldr	r0, [pc, #400]	; (8003c18 <HAL_RCC_ClockConfig+0x20c>)
 8003a88:	f001 facb 	bl	8005022 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8c:	68ea      	ldr	r2, [r5, #12]
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	4968      	ldr	r1, [pc, #416]	; (8003c34 <HAL_RCC_ClockConfig+0x228>)
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	400a      	ands	r2, r1
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9a:	f7ff fc1d 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003a9e:	68eb      	ldr	r3, [r5, #12]
 8003aa0:	4a65      	ldr	r2, [pc, #404]	; (8003c38 <HAL_RCC_ClockConfig+0x22c>)
 8003aa2:	061b      	lsls	r3, r3, #24
 8003aa4:	0f1b      	lsrs	r3, r3, #28
 8003aa6:	5cd3      	ldrb	r3, [r2, r3]
 8003aa8:	40d8      	lsrs	r0, r3
 8003aaa:	4b64      	ldr	r3, [pc, #400]	; (8003c3c <HAL_RCC_ClockConfig+0x230>)
 8003aac:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7fe fb06 	bl	80020c0 <HAL_InitTick>
 8003ab4:	e7b0      	b.n	8003a18 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	4393      	bics	r3, r2
 8003aba:	433b      	orrs	r3, r7
 8003abc:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	682b      	ldr	r3, [r5, #0]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	429f      	cmp	r7, r3
 8003ac4:	d1a7      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xa>
 8003ac6:	e7bb      	b.n	8003a40 <HAL_RCC_ClockConfig+0x34>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ac8:	68a3      	ldr	r3, [r4, #8]
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	0019      	movs	r1, r3
 8003ace:	4391      	bics	r1, r2
 8003ad0:	d014      	beq.n	8003afc <HAL_RCC_ClockConfig+0xf0>
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	4391      	bics	r1, r2
 8003ad8:	2990      	cmp	r1, #144	; 0x90
 8003ada:	d00f      	beq.n	8003afc <HAL_RCC_ClockConfig+0xf0>
 8003adc:	2240      	movs	r2, #64	; 0x40
 8003ade:	0019      	movs	r1, r3
 8003ae0:	4391      	bics	r1, r2
 8003ae2:	29a0      	cmp	r1, #160	; 0xa0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCC_ClockConfig+0xf0>
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	0019      	movs	r1, r3
 8003aea:	4391      	bics	r1, r2
 8003aec:	29c0      	cmp	r1, #192	; 0xc0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0xf0>
 8003af0:	2bf0      	cmp	r3, #240	; 0xf0
 8003af2:	d003      	beq.n	8003afc <HAL_RCC_ClockConfig+0xf0>
 8003af4:	4952      	ldr	r1, [pc, #328]	; (8003c40 <HAL_RCC_ClockConfig+0x234>)
 8003af6:	4848      	ldr	r0, [pc, #288]	; (8003c18 <HAL_RCC_ClockConfig+0x20c>)
 8003af8:	f001 fa93 	bl	8005022 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afc:	21f0      	movs	r1, #240	; 0xf0
 8003afe:	4a49      	ldr	r2, [pc, #292]	; (8003c24 <HAL_RCC_ClockConfig+0x218>)
 8003b00:	68d3      	ldr	r3, [r2, #12]
 8003b02:	438b      	bics	r3, r1
 8003b04:	68a1      	ldr	r1, [r4, #8]
 8003b06:	430b      	orrs	r3, r1
 8003b08:	60d3      	str	r3, [r2, #12]
 8003b0a:	e79c      	b.n	8003a46 <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d903      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
 8003b12:	494c      	ldr	r1, [pc, #304]	; (8003c44 <HAL_RCC_ClockConfig+0x238>)
 8003b14:	4840      	ldr	r0, [pc, #256]	; (8003c18 <HAL_RCC_ClockConfig+0x20c>)
 8003b16:	f001 fa84 	bl	8005022 <assert_failed>
 8003b1a:	4e42      	ldr	r6, [pc, #264]	; (8003c24 <HAL_RCC_ClockConfig+0x218>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b1e:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b20:	2a02      	cmp	r2, #2
 8003b22:	d11c      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x152>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b24:	039b      	lsls	r3, r3, #14
 8003b26:	d400      	bmi.n	8003b2a <HAL_RCC_ClockConfig+0x11e>
 8003b28:	e775      	b.n	8003a16 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	68f3      	ldr	r3, [r6, #12]
 8003b2e:	438b      	bics	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8003b34:	f7fe faf8 	bl	8002128 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b38:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003b3a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11b      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x16c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b40:	220c      	movs	r2, #12
 8003b42:	68f3      	ldr	r3, [r6, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d100      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x140>
 8003b4a:	e77f      	b.n	8003a4c <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe faec 	bl	8002128 <HAL_GetTick>
 8003b50:	9b01      	ldr	r3, [sp, #4]
 8003b52:	1ac0      	subs	r0, r0, r3
 8003b54:	4b3c      	ldr	r3, [pc, #240]	; (8003c48 <HAL_RCC_ClockConfig+0x23c>)
 8003b56:	4298      	cmp	r0, r3
 8003b58:	d9f2      	bls.n	8003b40 <HAL_RCC_ClockConfig+0x134>
          return HAL_TIMEOUT;
 8003b5a:	2003      	movs	r0, #3
 8003b5c:	e75c      	b.n	8003a18 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5e:	2a03      	cmp	r2, #3
 8003b60:	d102      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b62:	019b      	lsls	r3, r3, #6
 8003b64:	d4e1      	bmi.n	8003b2a <HAL_RCC_ClockConfig+0x11e>
 8003b66:	e756      	b.n	8003a16 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b68:	2a01      	cmp	r2, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6c:	075b      	lsls	r3, r3, #29
 8003b6e:	d4dc      	bmi.n	8003b2a <HAL_RCC_ClockConfig+0x11e>
 8003b70:	e751      	b.n	8003a16 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b72:	059b      	lsls	r3, r3, #22
 8003b74:	d4d9      	bmi.n	8003b2a <HAL_RCC_ClockConfig+0x11e>
 8003b76:	e74e      	b.n	8003a16 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d10d      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x18c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b7c:	220c      	movs	r2, #12
 8003b7e:	68f3      	ldr	r3, [r6, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d100      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x17c>
 8003b86:	e761      	b.n	8003a4c <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7fe face 	bl	8002128 <HAL_GetTick>
 8003b8c:	9b01      	ldr	r3, [sp, #4]
 8003b8e:	1ac0      	subs	r0, r0, r3
 8003b90:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <HAL_RCC_ClockConfig+0x23c>)
 8003b92:	4298      	cmp	r0, r3
 8003b94:	d9f2      	bls.n	8003b7c <HAL_RCC_ClockConfig+0x170>
 8003b96:	e7e0      	b.n	8003b5a <HAL_RCC_ClockConfig+0x14e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d013      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x1b8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b9c:	220c      	movs	r2, #12
 8003b9e:	68f3      	ldr	r3, [r6, #12]
 8003ba0:	4213      	tst	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x19a>
 8003ba4:	e752      	b.n	8003a4c <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba6:	f7fe fabf 	bl	8002128 <HAL_GetTick>
 8003baa:	9b01      	ldr	r3, [sp, #4]
 8003bac:	1ac0      	subs	r0, r0, r3
 8003bae:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <HAL_RCC_ClockConfig+0x23c>)
 8003bb0:	4298      	cmp	r0, r3
 8003bb2:	d9f3      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x190>
 8003bb4:	e7d1      	b.n	8003b5a <HAL_RCC_ClockConfig+0x14e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb6:	f7fe fab7 	bl	8002128 <HAL_GetTick>
 8003bba:	9b01      	ldr	r3, [sp, #4]
 8003bbc:	1ac0      	subs	r0, r0, r3
 8003bbe:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <HAL_RCC_ClockConfig+0x23c>)
 8003bc0:	4298      	cmp	r0, r3
 8003bc2:	d8ca      	bhi.n	8003b5a <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc4:	220c      	movs	r2, #12
 8003bc6:	68f3      	ldr	r3, [r6, #12]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d1f3      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x1aa>
 8003bce:	e73d      	b.n	8003a4c <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd0:	682a      	ldr	r2, [r5, #0]
 8003bd2:	439a      	bics	r2, r3
 8003bd4:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	682a      	ldr	r2, [r5, #0]
 8003bd8:	421a      	tst	r2, r3
 8003bda:	d000      	beq.n	8003bde <HAL_RCC_ClockConfig+0x1d2>
 8003bdc:	e71b      	b.n	8003a16 <HAL_RCC_ClockConfig+0xa>
 8003bde:	e73b      	b.n	8003a58 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003be0:	68e3      	ldr	r3, [r4, #12]
 8003be2:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <HAL_RCC_ClockConfig+0x21c>)
 8003be4:	4213      	tst	r3, r2
 8003be6:	d00d      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x1f8>
 8003be8:	21a0      	movs	r1, #160	; 0xa0
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_RCC_ClockConfig+0x220>)
 8003bec:	00c9      	lsls	r1, r1, #3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	428a      	cmp	r2, r1
 8003bf2:	d007      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x1f8>
 8003bf4:	22c0      	movs	r2, #192	; 0xc0
 8003bf6:	00d2      	lsls	r2, r2, #3
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x1f8>
 8003bfc:	4913      	ldr	r1, [pc, #76]	; (8003c4c <HAL_RCC_ClockConfig+0x240>)
 8003bfe:	4806      	ldr	r0, [pc, #24]	; (8003c18 <HAL_RCC_ClockConfig+0x20c>)
 8003c00:	f001 fa0f 	bl	8005022 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c04:	68eb      	ldr	r3, [r5, #12]
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <HAL_RCC_ClockConfig+0x244>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	68e2      	ldr	r2, [r4, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60eb      	str	r3, [r5, #12]
 8003c10:	e727      	b.n	8003a62 <HAL_RCC_ClockConfig+0x56>
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	00000366 	.word	0x00000366
 8003c18:	08005bd7 	.word	0x08005bd7
 8003c1c:	00000367 	.word	0x00000367
 8003c20:	40022000 	.word	0x40022000
 8003c24:	40021000 	.word	0x40021000
 8003c28:	fffffbff 	.word	0xfffffbff
 8003c2c:	fffffdff 	.word	0xfffffdff
 8003c30:	000003f1 	.word	0x000003f1
 8003c34:	ffffc7ff 	.word	0xffffc7ff
 8003c38:	08005d26 	.word	0x08005d26
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	0000037e 	.word	0x0000037e
 8003c44:	00000385 	.word	0x00000385
 8003c48:	00001388 	.word	0x00001388
 8003c4c:	000003ea 	.word	0x000003ea
 8003c50:	fffff8ff 	.word	0xfffff8ff

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003c56:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	055b      	lsls	r3, r3, #21
 8003c5c:	0f5b      	lsrs	r3, r3, #29
 8003c5e:	5cd3      	ldrb	r3, [r2, r3]
 8003c60:	4a03      	ldr	r2, [pc, #12]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c62:	6810      	ldr	r0, [r2, #0]
 8003c64:	40d8      	lsrs	r0, r3
}
 8003c66:	4770      	bx	lr
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08005d36 	.word	0x08005d36
 8003c70:	20000000 	.word	0x20000000

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	049b      	lsls	r3, r3, #18
 8003c7c:	0f5b      	lsrs	r3, r3, #29
 8003c7e:	5cd3      	ldrb	r3, [r2, r3]
 8003c80:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c82:	6810      	ldr	r0, [r2, #0]
 8003c84:	40d8      	lsrs	r0, r3
}
 8003c86:	4770      	bx	lr
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	08005d36 	.word	0x08005d36
 8003c90:	20000000 	.word	0x20000000

08003c94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp_reg;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003c96:	4b93      	ldr	r3, [pc, #588]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003c98:	6802      	ldr	r2, [r0, #0]
{
 8003c9a:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d903      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8003ca0:	2167      	movs	r1, #103	; 0x67
 8003ca2:	4891      	ldr	r0, [pc, #580]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ca4:	f001 f9bd 	bl	8005022 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	069b      	lsls	r3, r3, #26
 8003cac:	d54d      	bpl.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003cae:	6863      	ldr	r3, [r4, #4]
 8003cb0:	4a8e      	ldr	r2, [pc, #568]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cb2:	4213      	tst	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8003cb6:	2198      	movs	r1, #152	; 0x98
 8003cb8:	4a8d      	ldr	r2, [pc, #564]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cba:	0349      	lsls	r1, r1, #13
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	428a      	cmp	r2, r1
 8003cc0:	d007      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8003cc2:	228c      	movs	r2, #140	; 0x8c
 8003cc4:	0392      	lsls	r2, r2, #14
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8003cca:	2173      	movs	r1, #115	; 0x73
 8003ccc:	4886      	ldr	r0, [pc, #536]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cce:	f001 f9a8 	bl	8005022 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003cd4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd6:	4d87      	ldr	r5, [pc, #540]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd8:	055b      	lsls	r3, r3, #21
 8003cda:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8003cdc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cde:	421a      	tst	r2, r3
 8003ce0:	d104      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x58>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cec:	2780      	movs	r7, #128	; 0x80
 8003cee:	4e82      	ldr	r6, [pc, #520]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cf0:	007f      	lsls	r7, r7, #1
 8003cf2:	6833      	ldr	r3, [r6, #0]
 8003cf4:	423b      	tst	r3, r7
 8003cf6:	d100      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x66>
 8003cf8:	e0af      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003cfa:	22c0      	movs	r2, #192	; 0xc0
 8003cfc:	21c0      	movs	r1, #192	; 0xc0
 8003cfe:	6828      	ldr	r0, [r5, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003d00:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003d02:	0392      	lsls	r2, r2, #14
 8003d04:	4010      	ands	r0, r2
 8003d06:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003d08:	401a      	ands	r2, r3
 8003d0a:	4290      	cmp	r0, r2
 8003d0c:	d000      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d0e:	e0b6      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003d10:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003d12:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003d14:	d000      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003d16:	e0bd      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x200>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d18:	6861      	ldr	r1, [r4, #4]
 8003d1a:	23c0      	movs	r3, #192	; 0xc0
 8003d1c:	000a      	movs	r2, r1
 8003d1e:	029b      	lsls	r3, r3, #10
 8003d20:	401a      	ands	r2, r3
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d26:	682b      	ldr	r3, [r5, #0]
 8003d28:	4874      	ldr	r0, [pc, #464]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d2a:	4003      	ands	r3, r0
 8003d2c:	20c0      	movs	r0, #192	; 0xc0
 8003d2e:	0380      	lsls	r0, r0, #14
 8003d30:	4001      	ands	r1, r0
 8003d32:	430b      	orrs	r3, r1
 8003d34:	602b      	str	r3, [r5, #0]
 8003d36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003d38:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d3a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3c:	652a      	str	r2, [r5, #80]	; 0x50
    if(pwrclkchanged == SET)
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d103      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003d44:	4a6e      	ldr	r2, [pc, #440]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	63ab      	str	r3, [r5, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	07db      	lsls	r3, r3, #31
 8003d4e:	d50d      	bpl.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003d50:	68a3      	ldr	r3, [r4, #8]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d903      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xca>
 8003d56:	21de      	movs	r1, #222	; 0xde
 8003d58:	4863      	ldr	r0, [pc, #396]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d5a:	f001 f962 	bl	8005022 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d5e:	2103      	movs	r1, #3
 8003d60:	4a64      	ldr	r2, [pc, #400]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d62:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d64:	438b      	bics	r3, r1
 8003d66:	68a1      	ldr	r1, [r4, #8]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	079b      	lsls	r3, r3, #30
 8003d70:	d50e      	bpl.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003d72:	230c      	movs	r3, #12
 8003d74:	68e2      	ldr	r2, [r4, #12]
 8003d76:	439a      	bics	r2, r3
 8003d78:	d003      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003d7a:	21e9      	movs	r1, #233	; 0xe9
 8003d7c:	485a      	ldr	r0, [pc, #360]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d7e:	f001 f950 	bl	8005022 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d82:	210c      	movs	r1, #12
 8003d84:	4a5b      	ldr	r2, [pc, #364]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d86:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d88:	438b      	bics	r3, r1
 8003d8a:	68e1      	ldr	r1, [r4, #12]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	075b      	lsls	r3, r3, #29
 8003d94:	d50d      	bpl.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003d96:	4d5b      	ldr	r5, [pc, #364]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	422b      	tst	r3, r5
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003d9e:	21f3      	movs	r1, #243	; 0xf3
 8003da0:	4851      	ldr	r0, [pc, #324]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003da2:	f001 f93e 	bl	8005022 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da6:	4a53      	ldr	r2, [pc, #332]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da8:	6921      	ldr	r1, [r4, #16]
 8003daa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003dac:	402b      	ands	r3, r5
 8003dae:	430b      	orrs	r3, r1
 8003db0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	071b      	lsls	r3, r3, #28
 8003db6:	d512      	bpl.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003db8:	6963      	ldr	r3, [r4, #20]
 8003dba:	4a53      	ldr	r2, [pc, #332]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003dbc:	4213      	tst	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003dc0:	2280      	movs	r2, #128	; 0x80
 8003dc2:	0192      	lsls	r2, r2, #6
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003dc8:	21fd      	movs	r1, #253	; 0xfd
 8003dca:	4847      	ldr	r0, [pc, #284]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dcc:	f001 f929 	bl	8005022 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd0:	4a48      	ldr	r2, [pc, #288]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd2:	494e      	ldr	r1, [pc, #312]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003dd4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003dd6:	400b      	ands	r3, r1
 8003dd8:	6961      	ldr	r1, [r4, #20]
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	05db      	lsls	r3, r3, #23
 8003de2:	d513      	bpl.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003de4:	69a3      	ldr	r3, [r4, #24]
 8003de6:	4a4a      	ldr	r2, [pc, #296]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003de8:	4213      	tst	r3, r2
 8003dea:	d008      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	0292      	lsls	r2, r2, #10
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003df4:	2184      	movs	r1, #132	; 0x84
 8003df6:	483c      	ldr	r0, [pc, #240]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003df8:	0049      	lsls	r1, r1, #1
 8003dfa:	f001 f912 	bl	8005022 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dfe:	4a3d      	ldr	r2, [pc, #244]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e00:	493a      	ldr	r1, [pc, #232]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e02:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003e04:	400b      	ands	r3, r1
 8003e06:	69a1      	ldr	r1, [r4, #24]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	065b      	lsls	r3, r3, #25
 8003e10:	d50e      	bpl.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003e12:	4d40      	ldr	r5, [pc, #256]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8003e14:	6a23      	ldr	r3, [r4, #32]
 8003e16:	422b      	tst	r3, r5
 8003e18:	d004      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003e1a:	2114      	movs	r1, #20
 8003e1c:	4832      	ldr	r0, [pc, #200]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e1e:	31ff      	adds	r1, #255	; 0xff
 8003e20:	f001 f8ff 	bl	8005022 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e24:	4a33      	ldr	r2, [pc, #204]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e26:	6a21      	ldr	r1, [r4, #32]
 8003e28:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003e2a:	402b      	ands	r3, r5
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e30:	6823      	ldr	r3, [r4, #0]
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003e32:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	d521      	bpl.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e38:	4d37      	ldr	r5, [pc, #220]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8003e3a:	69e3      	ldr	r3, [r4, #28]
 8003e3c:	422b      	tst	r3, r5
 8003e3e:	d004      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003e40:	211c      	movs	r1, #28
 8003e42:	4829      	ldr	r0, [pc, #164]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e44:	31ff      	adds	r1, #255	; 0xff
 8003e46:	f001 f8ec 	bl	8005022 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e4a:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4c:	69e1      	ldr	r1, [r4, #28]
 8003e4e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  return HAL_OK;
 8003e50:	2000      	movs	r0, #0
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e52:	402b      	ands	r3, r5
 8003e54:	430b      	orrs	r3, r1
 8003e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e58:	e010      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	6833      	ldr	r3, [r6, #0]
 8003e5c:	433b      	orrs	r3, r7
 8003e5e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003e60:	f7fe f962 	bl	8002128 <HAL_GetTick>
 8003e64:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	6833      	ldr	r3, [r6, #0]
 8003e68:	423b      	tst	r3, r7
 8003e6a:	d000      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8003e6c:	e745      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x66>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fe f95b 	bl	8002128 <HAL_GetTick>
 8003e72:	9b01      	ldr	r3, [sp, #4]
 8003e74:	1ac0      	subs	r0, r0, r3
 8003e76:	2864      	cmp	r0, #100	; 0x64
 8003e78:	d9f5      	bls.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          return HAL_TIMEOUT;
 8003e7a:	2003      	movs	r0, #3
}
 8003e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003e7e:	001a      	movs	r2, r3
 8003e80:	400a      	ands	r2, r1
 8003e82:	428a      	cmp	r2, r1
 8003e84:	d000      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8003e86:	e743      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e88:	682a      	ldr	r2, [r5, #0]
          return HAL_ERROR;
 8003e8a:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e8c:	0392      	lsls	r2, r2, #14
 8003e8e:	d400      	bmi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003e90:	e73e      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e92:	e7f3      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003e94:	400b      	ands	r3, r1
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d100      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003e9a:	e73d      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x84>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	069b      	lsls	r3, r3, #26
 8003ea0:	d400      	bmi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003ea2:	e739      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea4:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003ea6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea8:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8003eaa:	031b      	lsls	r3, r3, #12
 8003eac:	4303      	orrs	r3, r0
 8003eae:	652b      	str	r3, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003eb2:	490e      	ldr	r1, [pc, #56]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x258>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb4:	4819      	ldr	r0, [pc, #100]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x288>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003eb6:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb8:	4003      	ands	r3, r0
 8003eba:	652b      	str	r3, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003ebc:	6529      	str	r1, [r5, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003ebe:	05d3      	lsls	r3, r2, #23
 8003ec0:	d400      	bmi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003ec2:	e729      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x84>
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f930 	bl	8002128 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec8:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003eca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ecc:	00bf      	lsls	r7, r7, #2
 8003ece:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003ed0:	423b      	tst	r3, r7
 8003ed2:	d000      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003ed4:	e720      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x84>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fe f927 	bl	8002128 <HAL_GetTick>
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003edc:	1b80      	subs	r0, r0, r6
 8003ede:	4298      	cmp	r0, r3
 8003ee0:	d9f5      	bls.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8003ee2:	e7ca      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8003ee4:	000001ff 	.word	0x000001ff
 8003ee8:	08005c0f 	.word	0x08005c0f
 8003eec:	fffcffff 	.word	0xfffcffff
 8003ef0:	ffdfffff 	.word	0xffdfffff
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	ffcfffff 	.word	0xffcfffff
 8003f00:	efffffff 	.word	0xefffffff
 8003f04:	fffff3ff 	.word	0xfffff3ff
 8003f08:	ffffefff 	.word	0xffffefff
 8003f0c:	ffffcfff 	.word	0xffffcfff
 8003f10:	fffeffff 	.word	0xfffeffff
 8003f14:	fbffffff 	.word	0xfbffffff
 8003f18:	fff3ffff 	.word	0xfff3ffff
 8003f1c:	fff7ffff 	.word	0xfff7ffff
 8003f20:	00001388 	.word	0x00001388

08003f24 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f24:	6803      	ldr	r3, [r0, #0]
 8003f26:	4907      	ldr	r1, [pc, #28]	; (8003f44 <UART_EndRxTransfer+0x20>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	3123      	adds	r1, #35	; 0x23
 8003f32:	31ff      	adds	r1, #255	; 0xff
 8003f34:	438a      	bics	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f38:	2320      	movs	r3, #32
 8003f3a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6603      	str	r3, [r0, #96]	; 0x60
}
 8003f40:	4770      	bx	lr
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	fffffedf 	.word	0xfffffedf

08003f48 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f48:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8003f4a:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f4c:	2b21      	cmp	r3, #33	; 0x21
 8003f4e:	d10d      	bne.n	8003f6c <UART_TxISR_16BIT+0x24>
  {
    if (huart->TxXferCount == 0U)
 8003f50:	0001      	movs	r1, r0
 8003f52:	3152      	adds	r1, #82	; 0x52
 8003f54:	880a      	ldrh	r2, [r1, #0]
 8003f56:	6803      	ldr	r3, [r0, #0]
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	d108      	bne.n	8003f6e <UART_TxISR_16BIT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f5c:	2180      	movs	r1, #128	; 0x80
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	438a      	bics	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f64:	2240      	movs	r2, #64	; 0x40
 8003f66:	6819      	ldr	r1, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003f6c:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f6e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8003f70:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 8003f72:	3402      	adds	r4, #2
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8003f74:	05d2      	lsls	r2, r2, #23
 8003f76:	0dd2      	lsrs	r2, r2, #23
 8003f78:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003f7a:	64c4      	str	r4, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8003f7c:	880b      	ldrh	r3, [r1, #0]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	800b      	strh	r3, [r1, #0]
}
 8003f84:	e7f2      	b.n	8003f6c <UART_TxISR_16BIT+0x24>

08003f86 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f86:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8003f88:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f8a:	2b21      	cmp	r3, #33	; 0x21
 8003f8c:	d10d      	bne.n	8003faa <UART_TxISR_8BIT+0x24>
    if (huart->TxXferCount == 0U)
 8003f8e:	0001      	movs	r1, r0
 8003f90:	3152      	adds	r1, #82	; 0x52
 8003f92:	880a      	ldrh	r2, [r1, #0]
 8003f94:	6803      	ldr	r3, [r0, #0]
 8003f96:	2a00      	cmp	r2, #0
 8003f98:	d108      	bne.n	8003fac <UART_TxISR_8BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
}
 8003faa:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003fac:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003fae:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8003fb0:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003fb2:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003fb4:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8003fb6:	880b      	ldrh	r3, [r1, #0]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	800b      	strh	r3, [r1, #0]
}
 8003fbe:	e7f4      	b.n	8003faa <UART_TxISR_8BIT+0x24>

08003fc0 <HAL_UART_Transmit_IT>:
{
 8003fc0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc2:	6f44      	ldr	r4, [r0, #116]	; 0x74
{
 8003fc4:	0003      	movs	r3, r0
    return HAL_BUSY;
 8003fc6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc8:	2c20      	cmp	r4, #32
 8003fca:	d130      	bne.n	800402e <HAL_UART_Transmit_IT+0x6e>
      return HAL_ERROR;
 8003fcc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003fce:	2900      	cmp	r1, #0
 8003fd0:	d02d      	beq.n	800402e <HAL_UART_Transmit_IT+0x6e>
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	d02b      	beq.n	800402e <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd6:	2480      	movs	r4, #128	; 0x80
 8003fd8:	689d      	ldr	r5, [r3, #8]
 8003fda:	0164      	lsls	r4, r4, #5
 8003fdc:	42a5      	cmp	r5, r4
 8003fde:	d104      	bne.n	8003fea <HAL_UART_Transmit_IT+0x2a>
 8003fe0:	691c      	ldr	r4, [r3, #16]
 8003fe2:	2c00      	cmp	r4, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8003fe6:	4201      	tst	r1, r0
 8003fe8:	d121      	bne.n	800402e <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 8003fea:	001c      	movs	r4, r3
 8003fec:	3470      	adds	r4, #112	; 0x70
 8003fee:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8003ff0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003ff2:	2e01      	cmp	r6, #1
 8003ff4:	d01b      	beq.n	800402e <HAL_UART_Transmit_IT+0x6e>
 8003ff6:	3801      	subs	r0, #1
 8003ff8:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8003ffa:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	3150      	adds	r1, #80	; 0x50
 8004000:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8004002:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8004004:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->TxISR       = NULL;
 8004008:	665a      	str	r2, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400a:	3221      	adds	r2, #33	; 0x21
 800400c:	675a      	str	r2, [r3, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400e:	2280      	movs	r2, #128	; 0x80
 8004010:	0152      	lsls	r2, r2, #5
 8004012:	4295      	cmp	r5, r2
 8004014:	d10c      	bne.n	8004030 <HAL_UART_Transmit_IT+0x70>
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	2a00      	cmp	r2, #0
 800401a:	d109      	bne.n	8004030 <HAL_UART_Transmit_IT+0x70>
      huart->TxISR = UART_TxISR_16BIT;
 800401c:	4a05      	ldr	r2, [pc, #20]	; (8004034 <HAL_UART_Transmit_IT+0x74>)
      huart->TxISR = UART_TxISR_8BIT;
 800401e:	665a      	str	r2, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 8004024:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004026:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8004028:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800402a:	430b      	orrs	r3, r1
 800402c:	6013      	str	r3, [r2, #0]
}
 800402e:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 8004030:	4a01      	ldr	r2, [pc, #4]	; (8004038 <HAL_UART_Transmit_IT+0x78>)
 8004032:	e7f4      	b.n	800401e <HAL_UART_Transmit_IT+0x5e>
 8004034:	08003f49 	.word	0x08003f49
 8004038:	08003f87 	.word	0x08003f87

0800403c <HAL_UART_Receive_IT>:
{
 800403c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800403e:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8004040:	0003      	movs	r3, r0
    return HAL_BUSY;
 8004042:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004044:	2c20      	cmp	r4, #32
 8004046:	d141      	bne.n	80040cc <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8004048:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800404a:	2900      	cmp	r1, #0
 800404c:	d03e      	beq.n	80040cc <HAL_UART_Receive_IT+0x90>
 800404e:	2a00      	cmp	r2, #0
 8004050:	d03c      	beq.n	80040cc <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004052:	2580      	movs	r5, #128	; 0x80
 8004054:	689c      	ldr	r4, [r3, #8]
 8004056:	016d      	lsls	r5, r5, #5
 8004058:	42ac      	cmp	r4, r5
 800405a:	d104      	bne.n	8004066 <HAL_UART_Receive_IT+0x2a>
 800405c:	691d      	ldr	r5, [r3, #16]
 800405e:	2d00      	cmp	r5, #0
 8004060:	d101      	bne.n	8004066 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8004062:	4201      	tst	r1, r0
 8004064:	d132      	bne.n	80040cc <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8004066:	001d      	movs	r5, r3
 8004068:	3570      	adds	r5, #112	; 0x70
 800406a:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 800406c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800406e:	2e01      	cmp	r6, #1
 8004070:	d02c      	beq.n	80040cc <HAL_UART_Receive_IT+0x90>
 8004072:	3801      	subs	r0, #1
 8004074:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8004076:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004078:	0019      	movs	r1, r3
 800407a:	3158      	adds	r1, #88	; 0x58
 800407c:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 800407e:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8004080:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8004082:	2100      	movs	r1, #0
 8004084:	001a      	movs	r2, r3
 8004086:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8004088:	0140      	lsls	r0, r0, #5
 800408a:	325c      	adds	r2, #92	; 0x5c
 800408c:	4284      	cmp	r4, r0
 800408e:	d120      	bne.n	80040d2 <HAL_UART_Receive_IT+0x96>
 8004090:	6919      	ldr	r1, [r3, #16]
 8004092:	2900      	cmp	r1, #0
 8004094:	d11b      	bne.n	80040ce <HAL_UART_Receive_IT+0x92>
 8004096:	4918      	ldr	r1, [pc, #96]	; (80040f8 <HAL_UART_Receive_IT+0xbc>)
 8004098:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409c:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040a0:	3222      	adds	r2, #34	; 0x22
 80040a2:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	6890      	ldr	r0, [r2, #8]
 80040a8:	4301      	orrs	r1, r0
 80040aa:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	0149      	lsls	r1, r1, #5
 80040b0:	428c      	cmp	r4, r1
 80040b2:	d11e      	bne.n	80040f2 <HAL_UART_Receive_IT+0xb6>
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	2900      	cmp	r1, #0
 80040b8:	d11b      	bne.n	80040f2 <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 80040ba:	4910      	ldr	r1, [pc, #64]	; (80040fc <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 80040bc:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040be:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 80040c0:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040c2:	6811      	ldr	r1, [r2, #0]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 80040c8:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 80040ce:	21ff      	movs	r1, #255	; 0xff
 80040d0:	e7e2      	b.n	8004098 <HAL_UART_Receive_IT+0x5c>
 80040d2:	2c00      	cmp	r4, #0
 80040d4:	d104      	bne.n	80040e0 <HAL_UART_Receive_IT+0xa4>
 80040d6:	6919      	ldr	r1, [r3, #16]
 80040d8:	2900      	cmp	r1, #0
 80040da:	d0f8      	beq.n	80040ce <HAL_UART_Receive_IT+0x92>
 80040dc:	217f      	movs	r1, #127	; 0x7f
 80040de:	e7db      	b.n	8004098 <HAL_UART_Receive_IT+0x5c>
 80040e0:	2080      	movs	r0, #128	; 0x80
 80040e2:	0540      	lsls	r0, r0, #21
 80040e4:	4284      	cmp	r4, r0
 80040e6:	d1d7      	bne.n	8004098 <HAL_UART_Receive_IT+0x5c>
 80040e8:	6919      	ldr	r1, [r3, #16]
 80040ea:	2900      	cmp	r1, #0
 80040ec:	d0f6      	beq.n	80040dc <HAL_UART_Receive_IT+0xa0>
 80040ee:	213f      	movs	r1, #63	; 0x3f
 80040f0:	e7d2      	b.n	8004098 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 80040f2:	4903      	ldr	r1, [pc, #12]	; (8004100 <HAL_UART_Receive_IT+0xc4>)
 80040f4:	e7e2      	b.n	80040bc <HAL_UART_Receive_IT+0x80>
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	000001ff 	.word	0x000001ff
 80040fc:	08004165 	.word	0x08004165
 8004100:	08004105 	.word	0x08004105

08004104 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004104:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8004106:	b510      	push	{r4, lr}
 8004108:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410a:	2a22      	cmp	r2, #34	; 0x22
 800410c:	d123      	bne.n	8004156 <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 800410e:	0002      	movs	r2, r0
 8004110:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004114:	8812      	ldrh	r2, [r2, #0]
 8004116:	4013      	ands	r3, r2
 8004118:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800411a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800411c:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800411e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004120:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8004122:	3301      	adds	r3, #1
 8004124:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004126:	8813      	ldrh	r3, [r2, #0]
 8004128:	3b01      	subs	r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800412e:	8813      	ldrh	r3, [r2, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10e      	bne.n	8004154 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	6802      	ldr	r2, [r0, #0]
 8004138:	4c09      	ldr	r4, [pc, #36]	; (8004160 <UART_RxISR_8BIT+0x5c>)
 800413a:	6811      	ldr	r1, [r2, #0]
 800413c:	4021      	ands	r1, r4
 800413e:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004140:	6891      	ldr	r1, [r2, #8]
 8004142:	3423      	adds	r4, #35	; 0x23
 8004144:	34ff      	adds	r4, #255	; 0xff
 8004146:	43a1      	bics	r1, r4
 8004148:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800414a:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800414c:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800414e:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004150:	f000 fd9c 	bl	8004c8c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004154:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004156:	2208      	movs	r2, #8
 8004158:	6999      	ldr	r1, [r3, #24]
 800415a:	430a      	orrs	r2, r1
 800415c:	619a      	str	r2, [r3, #24]
}
 800415e:	e7f9      	b.n	8004154 <UART_RxISR_8BIT+0x50>
 8004160:	fffffedf 	.word	0xfffffedf

08004164 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004164:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8004166:	b510      	push	{r4, lr}
 8004168:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800416a:	2a22      	cmp	r2, #34	; 0x22
 800416c:	d121      	bne.n	80041b2 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 800416e:	0004      	movs	r4, r0
 8004170:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004172:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8004174:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004176:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8004178:	4021      	ands	r1, r4
 800417a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800417c:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800417e:	3202      	adds	r2, #2
 8004180:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004182:	315a      	adds	r1, #90	; 0x5a
 8004184:	880a      	ldrh	r2, [r1, #0]
 8004186:	3a01      	subs	r2, #1
 8004188:	b292      	uxth	r2, r2
 800418a:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 800418c:	880a      	ldrh	r2, [r1, #0]
 800418e:	b292      	uxth	r2, r2
 8004190:	2a00      	cmp	r2, #0
 8004192:	d10d      	bne.n	80041b0 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	4c09      	ldr	r4, [pc, #36]	; (80041bc <UART_RxISR_16BIT+0x58>)
 8004198:	4021      	ands	r1, r4
 800419a:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419c:	6899      	ldr	r1, [r3, #8]
 800419e:	3423      	adds	r4, #35	; 0x23
 80041a0:	34ff      	adds	r4, #255	; 0xff
 80041a2:	43a1      	bics	r1, r4
 80041a4:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041a6:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041a8:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80041aa:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041ac:	f000 fd6e 	bl	8004c8c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041b0:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041b2:	2208      	movs	r2, #8
 80041b4:	6999      	ldr	r1, [r3, #24]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	619a      	str	r2, [r3, #24]
}
 80041ba:	e7f9      	b.n	80041b0 <UART_RxISR_16BIT+0x4c>
 80041bc:	fffffedf 	.word	0xfffffedf

080041c0 <HAL_UART_ErrorCallback>:
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_UART_IRQHandler>:
{
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041c6:	6803      	ldr	r3, [r0, #0]
{
 80041c8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041ca:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041cc:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041ce:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80041d0:	0711      	lsls	r1, r2, #28
 80041d2:	d10a      	bne.n	80041ea <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041d4:	2120      	movs	r1, #32
 80041d6:	420a      	tst	r2, r1
 80041d8:	d100      	bne.n	80041dc <HAL_UART_IRQHandler+0x18>
 80041da:	e06a      	b.n	80042b2 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041dc:	4208      	tst	r0, r1
 80041de:	d068      	beq.n	80042b2 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 80041e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 80041e2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d15a      	bne.n	800429e <HAL_UART_IRQHandler+0xda>
 80041e8:	e05a      	b.n	80042a0 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041ea:	2101      	movs	r1, #1
 80041ec:	0035      	movs	r5, r6
 80041ee:	400d      	ands	r5, r1
 80041f0:	d103      	bne.n	80041fa <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80041f2:	2790      	movs	r7, #144	; 0x90
 80041f4:	007f      	lsls	r7, r7, #1
 80041f6:	4238      	tst	r0, r7
 80041f8:	d05b      	beq.n	80042b2 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041fa:	420a      	tst	r2, r1
 80041fc:	d005      	beq.n	800420a <HAL_UART_IRQHandler+0x46>
 80041fe:	05c6      	lsls	r6, r0, #23
 8004200:	d503      	bpl.n	800420a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004202:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004204:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8004206:	4331      	orrs	r1, r6
 8004208:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800420a:	2102      	movs	r1, #2
 800420c:	420a      	tst	r2, r1
 800420e:	d006      	beq.n	800421e <HAL_UART_IRQHandler+0x5a>
 8004210:	2d00      	cmp	r5, #0
 8004212:	d004      	beq.n	800421e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004214:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004216:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8004218:	1849      	adds	r1, r1, r1
 800421a:	4331      	orrs	r1, r6
 800421c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421e:	2104      	movs	r1, #4
 8004220:	420a      	tst	r2, r1
 8004222:	d006      	beq.n	8004232 <HAL_UART_IRQHandler+0x6e>
 8004224:	2d00      	cmp	r5, #0
 8004226:	d004      	beq.n	8004232 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004228:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800422a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800422c:	3902      	subs	r1, #2
 800422e:	4331      	orrs	r1, r6
 8004230:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004232:	0711      	lsls	r1, r2, #28
 8004234:	d508      	bpl.n	8004248 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004236:	0681      	lsls	r1, r0, #26
 8004238:	d401      	bmi.n	800423e <HAL_UART_IRQHandler+0x7a>
 800423a:	2d00      	cmp	r5, #0
 800423c:	d004      	beq.n	8004248 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800423e:	2108      	movs	r1, #8
 8004240:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004242:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004244:	4319      	orrs	r1, r3
 8004246:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004248:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d028      	beq.n	80042a0 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800424e:	2320      	movs	r3, #32
 8004250:	421a      	tst	r2, r3
 8004252:	d006      	beq.n	8004262 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004254:	4218      	tst	r0, r3
 8004256:	d004      	beq.n	8004262 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8004258:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 800425e:	0020      	movs	r0, r4
 8004260:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004262:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004264:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004266:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8004268:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800426a:	065b      	lsls	r3, r3, #25
 800426c:	d402      	bmi.n	8004274 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800426e:	2308      	movs	r3, #8
 8004270:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004272:	d01a      	beq.n	80042aa <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8004274:	f7ff fe56 	bl	8003f24 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	2140      	movs	r1, #64	; 0x40
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	420a      	tst	r2, r1
 8004280:	d00f      	beq.n	80042a2 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004284:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004286:	438a      	bics	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800428a:	2800      	cmp	r0, #0
 800428c:	d009      	beq.n	80042a2 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800428e:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <HAL_UART_IRQHandler+0x134>)
 8004290:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004292:	f7fe fd01 	bl	8002c98 <HAL_DMA_Abort_IT>
 8004296:	2800      	cmp	r0, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800429a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800429c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800429e:	4798      	blx	r3
}
 80042a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80042a2:	0020      	movs	r0, r4
 80042a4:	f7ff ff8c 	bl	80041c0 <HAL_UART_ErrorCallback>
 80042a8:	e7fa      	b.n	80042a0 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 80042aa:	f7ff ff89 	bl	80041c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ae:	67e5      	str	r5, [r4, #124]	; 0x7c
 80042b0:	e7f6      	b.n	80042a0 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	0349      	lsls	r1, r1, #13
 80042b6:	420a      	tst	r2, r1
 80042b8:	d006      	beq.n	80042c8 <HAL_UART_IRQHandler+0x104>
 80042ba:	0275      	lsls	r5, r6, #9
 80042bc:	d504      	bpl.n	80042c8 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042be:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80042c0:	0020      	movs	r0, r4
 80042c2:	f000 fc5d 	bl	8004b80 <HAL_UARTEx_WakeupCallback>
    return;
 80042c6:	e7eb      	b.n	80042a0 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	420a      	tst	r2, r1
 80042cc:	d003      	beq.n	80042d6 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042ce:	4208      	tst	r0, r1
 80042d0:	d001      	beq.n	80042d6 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 80042d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042d4:	e785      	b.n	80041e2 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042d6:	2140      	movs	r1, #64	; 0x40
 80042d8:	420a      	tst	r2, r1
 80042da:	d0e1      	beq.n	80042a0 <HAL_UART_IRQHandler+0xdc>
 80042dc:	4208      	tst	r0, r1
 80042de:	d0df      	beq.n	80042a0 <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042e0:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80042e2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042e4:	438a      	bics	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80042e8:	2320      	movs	r3, #32
 80042ea:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80042f0:	f000 fcc6 	bl	8004c80 <HAL_UART_TxCpltCallback>
 80042f4:	e7d4      	b.n	80042a0 <HAL_UART_IRQHandler+0xdc>
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	080042fd 	.word	0x080042fd

080042fc <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	0002      	movs	r2, r0
{
 8004302:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8004304:	325a      	adds	r2, #90	; 0x5a
 8004306:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8004308:	3a08      	subs	r2, #8
 800430a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800430c:	f7ff ff58 	bl	80041c0 <HAL_UART_ErrorCallback>
}
 8004310:	bd10      	pop	{r4, pc}
	...

08004314 <UART_SetConfig>:
{
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004316:	6842      	ldr	r2, [r0, #4]
 8004318:	4baf      	ldr	r3, [pc, #700]	; (80045d8 <UART_SetConfig+0x2c4>)
{
 800431a:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800431c:	429a      	cmp	r2, r3
 800431e:	d903      	bls.n	8004328 <UART_SetConfig+0x14>
 8004320:	49ae      	ldr	r1, [pc, #696]	; (80045dc <UART_SetConfig+0x2c8>)
 8004322:	48af      	ldr	r0, [pc, #700]	; (80045e0 <UART_SetConfig+0x2cc>)
 8004324:	f000 fe7d 	bl	8005022 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004328:	2280      	movs	r2, #128	; 0x80
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	0552      	lsls	r2, r2, #21
 800432e:	4293      	cmp	r3, r2
 8004330:	d006      	beq.n	8004340 <UART_SetConfig+0x2c>
 8004332:	4aac      	ldr	r2, [pc, #688]	; (80045e4 <UART_SetConfig+0x2d0>)
 8004334:	4213      	tst	r3, r2
 8004336:	d003      	beq.n	8004340 <UART_SetConfig+0x2c>
 8004338:	49ab      	ldr	r1, [pc, #684]	; (80045e8 <UART_SetConfig+0x2d4>)
 800433a:	48a9      	ldr	r0, [pc, #676]	; (80045e0 <UART_SetConfig+0x2cc>)
 800433c:	f000 fe71 	bl	8005022 <assert_failed>
 8004340:	4daa      	ldr	r5, [pc, #680]	; (80045ec <UART_SetConfig+0x2d8>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	68e3      	ldr	r3, [r4, #12]
 8004346:	4eaa      	ldr	r6, [pc, #680]	; (80045f0 <UART_SetConfig+0x2dc>)
 8004348:	42aa      	cmp	r2, r5
 800434a:	d160      	bne.n	800440e <UART_SetConfig+0xfa>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800434c:	4aa9      	ldr	r2, [pc, #676]	; (80045f4 <UART_SetConfig+0x2e0>)
 800434e:	4213      	tst	r3, r2
 8004350:	d003      	beq.n	800435a <UART_SetConfig+0x46>
 8004352:	49a9      	ldr	r1, [pc, #676]	; (80045f8 <UART_SetConfig+0x2e4>)
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8004354:	48a2      	ldr	r0, [pc, #648]	; (80045e0 <UART_SetConfig+0x2cc>)
 8004356:	f000 fe64 	bl	8005022 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	4aa7      	ldr	r2, [pc, #668]	; (80045fc <UART_SetConfig+0x2e8>)
 800435e:	4213      	tst	r3, r2
 8004360:	d007      	beq.n	8004372 <UART_SetConfig+0x5e>
 8004362:	22c0      	movs	r2, #192	; 0xc0
 8004364:	00d2      	lsls	r2, r2, #3
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <UART_SetConfig+0x5e>
 800436a:	49a5      	ldr	r1, [pc, #660]	; (8004600 <UART_SetConfig+0x2ec>)
 800436c:	489c      	ldr	r0, [pc, #624]	; (80045e0 <UART_SetConfig+0x2cc>)
 800436e:	f000 fe58 	bl	8005022 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004372:	6963      	ldr	r3, [r4, #20]
 8004374:	220c      	movs	r2, #12
 8004376:	0019      	movs	r1, r3
 8004378:	4391      	bics	r1, r2
 800437a:	d101      	bne.n	8004380 <UART_SetConfig+0x6c>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d103      	bne.n	8004388 <UART_SetConfig+0x74>
 8004380:	49a0      	ldr	r1, [pc, #640]	; (8004604 <UART_SetConfig+0x2f0>)
 8004382:	4897      	ldr	r0, [pc, #604]	; (80045e0 <UART_SetConfig+0x2cc>)
 8004384:	f000 fe4d 	bl	8005022 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004388:	4b9f      	ldr	r3, [pc, #636]	; (8004608 <UART_SetConfig+0x2f4>)
 800438a:	69a2      	ldr	r2, [r4, #24]
 800438c:	421a      	tst	r2, r3
 800438e:	d003      	beq.n	8004398 <UART_SetConfig+0x84>
 8004390:	499e      	ldr	r1, [pc, #632]	; (800460c <UART_SetConfig+0x2f8>)
 8004392:	4893      	ldr	r0, [pc, #588]	; (80045e0 <UART_SetConfig+0x2cc>)
 8004394:	f000 fe45 	bl	8005022 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004398:	4b9d      	ldr	r3, [pc, #628]	; (8004610 <UART_SetConfig+0x2fc>)
 800439a:	69e2      	ldr	r2, [r4, #28]
 800439c:	421a      	tst	r2, r3
 800439e:	d003      	beq.n	80043a8 <UART_SetConfig+0x94>
 80043a0:	499c      	ldr	r1, [pc, #624]	; (8004614 <UART_SetConfig+0x300>)
 80043a2:	488f      	ldr	r0, [pc, #572]	; (80045e0 <UART_SetConfig+0x2cc>)
 80043a4:	f000 fe3d 	bl	8005022 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a8:	6927      	ldr	r7, [r4, #16]
 80043aa:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ac:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ae:	433a      	orrs	r2, r7
 80043b0:	6967      	ldr	r7, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b2:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043b4:	69e1      	ldr	r1, [r4, #28]
 80043b6:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b8:	4f97      	ldr	r7, [pc, #604]	; (8004618 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043bc:	4038      	ands	r0, r7
 80043be:	4302      	orrs	r2, r0
 80043c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c2:	685a      	ldr	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043c4:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c6:	4016      	ands	r6, r2
 80043c8:	68e2      	ldr	r2, [r4, #12]
 80043ca:	4316      	orrs	r6, r2
 80043cc:	605e      	str	r6, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043ce:	42ab      	cmp	r3, r5
 80043d0:	d001      	beq.n	80043d6 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
 80043d2:	6a22      	ldr	r2, [r4, #32]
 80043d4:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4e90      	ldr	r6, [pc, #576]	; (800461c <UART_SetConfig+0x308>)
 80043da:	4032      	ands	r2, r6
 80043dc:	4302      	orrs	r2, r0
 80043de:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e0:	4a8f      	ldr	r2, [pc, #572]	; (8004620 <UART_SetConfig+0x30c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d120      	bne.n	8004428 <UART_SetConfig+0x114>
 80043e6:	2203      	movs	r2, #3
 80043e8:	4b8e      	ldr	r3, [pc, #568]	; (8004624 <UART_SetConfig+0x310>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	4013      	ands	r3, r2
 80043ee:	4a8e      	ldr	r2, [pc, #568]	; (8004628 <UART_SetConfig+0x314>)
 80043f0:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	4299      	cmp	r1, r3
 80043f8:	d100      	bne.n	80043fc <UART_SetConfig+0xe8>
 80043fa:	e0de      	b.n	80045ba <UART_SetConfig+0x2a6>
    switch (clocksource)
 80043fc:	2808      	cmp	r0, #8
 80043fe:	d833      	bhi.n	8004468 <UART_SetConfig+0x154>
 8004400:	f7fb fe8a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004404:	32a5a29b 	.word	0x32a5a29b
 8004408:	323232c0 	.word	0x323232c0
 800440c:	c3          	.byte	0xc3
 800440d:	00          	.byte	0x00
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800440e:	4233      	tst	r3, r6
 8004410:	d004      	beq.n	800441c <UART_SetConfig+0x108>
 8004412:	21ad      	movs	r1, #173	; 0xad
 8004414:	4872      	ldr	r0, [pc, #456]	; (80045e0 <UART_SetConfig+0x2cc>)
 8004416:	0109      	lsls	r1, r1, #4
 8004418:	f000 fe03 	bl	8005022 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800441c:	4b83      	ldr	r3, [pc, #524]	; (800462c <UART_SetConfig+0x318>)
 800441e:	6a22      	ldr	r2, [r4, #32]
 8004420:	421a      	tst	r2, r3
 8004422:	d09a      	beq.n	800435a <UART_SetConfig+0x46>
 8004424:	4982      	ldr	r1, [pc, #520]	; (8004630 <UART_SetConfig+0x31c>)
 8004426:	e795      	b.n	8004354 <UART_SetConfig+0x40>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004428:	4a82      	ldr	r2, [pc, #520]	; (8004634 <UART_SetConfig+0x320>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d105      	bne.n	800443a <UART_SetConfig+0x126>
 800442e:	220c      	movs	r2, #12
 8004430:	4b7c      	ldr	r3, [pc, #496]	; (8004624 <UART_SetConfig+0x310>)
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	4013      	ands	r3, r2
 8004436:	4a80      	ldr	r2, [pc, #512]	; (8004638 <UART_SetConfig+0x324>)
 8004438:	e7da      	b.n	80043f0 <UART_SetConfig+0xdc>
 800443a:	4a80      	ldr	r2, [pc, #512]	; (800463c <UART_SetConfig+0x328>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d100      	bne.n	8004442 <UART_SetConfig+0x12e>
 8004440:	e0af      	b.n	80045a2 <UART_SetConfig+0x28e>
 8004442:	4a7f      	ldr	r2, [pc, #508]	; (8004640 <UART_SetConfig+0x32c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d100      	bne.n	800444a <UART_SetConfig+0x136>
 8004448:	e0ab      	b.n	80045a2 <UART_SetConfig+0x28e>
 800444a:	42ab      	cmp	r3, r5
 800444c:	d000      	beq.n	8004450 <UART_SetConfig+0x13c>
 800444e:	e0a1      	b.n	8004594 <UART_SetConfig+0x280>
 8004450:	21c0      	movs	r1, #192	; 0xc0
 8004452:	2080      	movs	r0, #128	; 0x80
 8004454:	4a73      	ldr	r2, [pc, #460]	; (8004624 <UART_SetConfig+0x310>)
 8004456:	0109      	lsls	r1, r1, #4
 8004458:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800445a:	00c0      	lsls	r0, r0, #3
 800445c:	400b      	ands	r3, r1
 800445e:	4283      	cmp	r3, r0
 8004460:	d038      	beq.n	80044d4 <UART_SetConfig+0x1c0>
 8004462:	d803      	bhi.n	800446c <UART_SetConfig+0x158>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8004468:	2501      	movs	r5, #1
 800446a:	e00d      	b.n	8004488 <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800446c:	2080      	movs	r0, #128	; 0x80
 800446e:	0100      	lsls	r0, r0, #4
 8004470:	4283      	cmp	r3, r0
 8004472:	d00e      	beq.n	8004492 <UART_SetConfig+0x17e>
 8004474:	428b      	cmp	r3, r1
 8004476:	d1f7      	bne.n	8004468 <UART_SetConfig+0x154>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004478:	2080      	movs	r0, #128	; 0x80
 800447a:	0200      	lsls	r0, r0, #8
 800447c:	e00d      	b.n	800449a <UART_SetConfig+0x186>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800447e:	f7ff fbe9 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8004482:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8004484:	42a8      	cmp	r0, r5
 8004486:	d108      	bne.n	800449a <UART_SetConfig+0x186>
  huart->RxISR = NULL;
 8004488:	2300      	movs	r3, #0
}
 800448a:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 800448c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800448e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8004490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	06db      	lsls	r3, r3, #27
 8004496:	d520      	bpl.n	80044da <UART_SetConfig+0x1c6>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004498:	484f      	ldr	r0, [pc, #316]	; (80045d8 <UART_SetConfig+0x2c4>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800449a:	2203      	movs	r2, #3
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	435a      	muls	r2, r3
 80044a0:	4282      	cmp	r2, r0
 80044a2:	d8e1      	bhi.n	8004468 <UART_SetConfig+0x154>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044a4:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044a6:	4282      	cmp	r2, r0
 80044a8:	d3de      	bcc.n	8004468 <UART_SetConfig+0x154>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80044aa:	2700      	movs	r7, #0
 80044ac:	0e02      	lsrs	r2, r0, #24
 80044ae:	0201      	lsls	r1, r0, #8
 80044b0:	085e      	lsrs	r6, r3, #1
 80044b2:	1989      	adds	r1, r1, r6
 80044b4:	417a      	adcs	r2, r7
 80044b6:	0008      	movs	r0, r1
 80044b8:	0011      	movs	r1, r2
 80044ba:	001a      	movs	r2, r3
 80044bc:	003b      	movs	r3, r7
 80044be:	f7fb fecb 	bl	8000258 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044c2:	4b60      	ldr	r3, [pc, #384]	; (8004644 <UART_SetConfig+0x330>)
 80044c4:	18c2      	adds	r2, r0, r3
 80044c6:	4b60      	ldr	r3, [pc, #384]	; (8004648 <UART_SetConfig+0x334>)
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d8cd      	bhi.n	8004468 <UART_SetConfig+0x154>
          huart->Instance->BRR = usartdiv;
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	003d      	movs	r5, r7
 80044d0:	60d8      	str	r0, [r3, #12]
 80044d2:	e7d9      	b.n	8004488 <UART_SetConfig+0x174>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80044d4:	f7fe ff00 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
        break;
 80044d8:	e7d3      	b.n	8004482 <UART_SetConfig+0x16e>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80044da:	485c      	ldr	r0, [pc, #368]	; (800464c <UART_SetConfig+0x338>)
 80044dc:	e7dd      	b.n	800449a <UART_SetConfig+0x186>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80044de:	f7ff fbc9 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 80044e2:	e064      	b.n	80045ae <UART_SetConfig+0x29a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e4:	2510      	movs	r5, #16
 80044e6:	4b4f      	ldr	r3, [pc, #316]	; (8004624 <UART_SetConfig+0x310>)
 80044e8:	6861      	ldr	r1, [r4, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80044ec:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ee:	4015      	ands	r5, r2
 80044f0:	d006      	beq.n	8004500 <UART_SetConfig+0x1ec>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80044f2:	4b57      	ldr	r3, [pc, #348]	; (8004650 <UART_SetConfig+0x33c>)
 80044f4:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044f6:	f7fb fe23 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80044fa:	2500      	movs	r5, #0
 80044fc:	b283      	uxth	r3, r0
        break;
 80044fe:	e004      	b.n	800450a <UART_SetConfig+0x1f6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004500:	4b54      	ldr	r3, [pc, #336]	; (8004654 <UART_SetConfig+0x340>)
 8004502:	18c0      	adds	r0, r0, r3
 8004504:	f7fb fe1c 	bl	8000140 <__udivsi3>
 8004508:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450a:	0019      	movs	r1, r3
 800450c:	4852      	ldr	r0, [pc, #328]	; (8004658 <UART_SetConfig+0x344>)
 800450e:	3910      	subs	r1, #16
 8004510:	4281      	cmp	r1, r0
 8004512:	d8a9      	bhi.n	8004468 <UART_SetConfig+0x154>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004514:	210f      	movs	r1, #15
 8004516:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004518:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800451a:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800451c:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800451e:	6821      	ldr	r1, [r4, #0]
 8004520:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8004522:	60cb      	str	r3, [r1, #12]
 8004524:	e7b0      	b.n	8004488 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004526:	f7fe fed7 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 800452a:	e040      	b.n	80045ae <UART_SetConfig+0x29a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	0858      	lsrs	r0, r3, #1
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	025b      	lsls	r3, r3, #9
 8004534:	e03e      	b.n	80045b4 <UART_SetConfig+0x2a0>
  uint32_t usartdiv                   = 0x00000000U;
 8004536:	2300      	movs	r3, #0
 8004538:	e7e7      	b.n	800450a <UART_SetConfig+0x1f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800453a:	f7ff fb8b 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800453e:	6863      	ldr	r3, [r4, #4]
 8004540:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004542:	18c0      	adds	r0, r0, r3
 8004544:	6861      	ldr	r1, [r4, #4]
 8004546:	e00b      	b.n	8004560 <UART_SetConfig+0x24c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004548:	f7ff fb94 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 800454c:	e7f7      	b.n	800453e <UART_SetConfig+0x22a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800454e:	2510      	movs	r5, #16
 8004550:	4b34      	ldr	r3, [pc, #208]	; (8004624 <UART_SetConfig+0x310>)
 8004552:	6861      	ldr	r1, [r4, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004556:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004558:	4015      	ands	r5, r2
 800455a:	d006      	beq.n	800456a <UART_SetConfig+0x256>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <UART_SetConfig+0x2c4>)
 800455e:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004560:	f7fb fdee 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8004564:	2500      	movs	r5, #0
 8004566:	b283      	uxth	r3, r0
        break;
 8004568:	e004      	b.n	8004574 <UART_SetConfig+0x260>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800456a:	4b38      	ldr	r3, [pc, #224]	; (800464c <UART_SetConfig+0x338>)
 800456c:	18c0      	adds	r0, r0, r3
 800456e:	f7fb fde7 	bl	8000140 <__udivsi3>
 8004572:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004574:	0019      	movs	r1, r3
 8004576:	4838      	ldr	r0, [pc, #224]	; (8004658 <UART_SetConfig+0x344>)
 8004578:	3910      	subs	r1, #16
 800457a:	4281      	cmp	r1, r0
 800457c:	d900      	bls.n	8004580 <UART_SetConfig+0x26c>
 800457e:	e773      	b.n	8004468 <UART_SetConfig+0x154>
      huart->Instance->BRR = usartdiv;
 8004580:	6821      	ldr	r1, [r4, #0]
 8004582:	e7ce      	b.n	8004522 <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004584:	f7fe fea8 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8004588:	e7d9      	b.n	800453e <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800458a:	6863      	ldr	r3, [r4, #4]
 800458c:	0858      	lsrs	r0, r3, #1
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	e7d6      	b.n	8004542 <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004594:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 8004596:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	4299      	cmp	r1, r3
 800459c:	d0cb      	beq.n	8004536 <UART_SetConfig+0x222>
  uint32_t usartdiv                   = 0x00000000U;
 800459e:	2300      	movs	r3, #0
 80045a0:	e7e8      	b.n	8004574 <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	4299      	cmp	r1, r3
 80045a8:	d1c7      	bne.n	800453a <UART_SetConfig+0x226>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045aa:	f7ff fb53 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045ae:	6863      	ldr	r3, [r4, #4]
 80045b0:	0040      	lsls	r0, r0, #1
 80045b2:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80045b4:	18c0      	adds	r0, r0, r3
 80045b6:	6861      	ldr	r1, [r4, #4]
 80045b8:	e79d      	b.n	80044f6 <UART_SetConfig+0x1e2>
    switch (clocksource)
 80045ba:	2808      	cmp	r0, #8
 80045bc:	d900      	bls.n	80045c0 <UART_SetConfig+0x2ac>
 80045be:	e753      	b.n	8004468 <UART_SetConfig+0x154>
 80045c0:	f7fb fdb4 	bl	800012c <__gnu_thumb1_case_shi>
 80045c4:	ff8dfff3 	.word	0xff8dfff3
 80045c8:	ff52ff90 	.word	0xff52ff90
 80045cc:	ff52ffb1 	.word	0xff52ffb1
 80045d0:	ff52ff52 	.word	0xff52ff52
 80045d4:	ffb4      	.short	0xffb4
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	003d0900 	.word	0x003d0900
 80045dc:	00000ac8 	.word	0x00000ac8
 80045e0:	08005c5b 	.word	0x08005c5b
 80045e4:	ffffefff 	.word	0xffffefff
 80045e8:	00000ac9 	.word	0x00000ac9
 80045ec:	40004800 	.word	0x40004800
 80045f0:	ffffcfff 	.word	0xffffcfff
 80045f4:	ffffdfff 	.word	0xffffdfff
 80045f8:	00000acc 	.word	0x00000acc
 80045fc:	fffffbff 	.word	0xfffffbff
 8004600:	00000ad4 	.word	0x00000ad4
 8004604:	00000ad5 	.word	0x00000ad5
 8004608:	fffffcff 	.word	0xfffffcff
 800460c:	00000ad6 	.word	0x00000ad6
 8004610:	ffff7fff 	.word	0xffff7fff
 8004614:	00000ad7 	.word	0x00000ad7
 8004618:	efff69f3 	.word	0xefff69f3
 800461c:	fffff4ff 	.word	0xfffff4ff
 8004620:	40013800 	.word	0x40013800
 8004624:	40021000 	.word	0x40021000
 8004628:	08005c4a 	.word	0x08005c4a
 800462c:	fffff7ff 	.word	0xfffff7ff
 8004630:	00000ad1 	.word	0x00000ad1
 8004634:	40004400 	.word	0x40004400
 8004638:	08005c4e 	.word	0x08005c4e
 800463c:	40004c00 	.word	0x40004c00
 8004640:	40005000 	.word	0x40005000
 8004644:	fffffd00 	.word	0xfffffd00
 8004648:	000ffcff 	.word	0x000ffcff
 800464c:	00f42400 	.word	0x00f42400
 8004650:	007a1200 	.word	0x007a1200
 8004654:	01e84800 	.word	0x01e84800
 8004658:	0000ffef 	.word	0x0000ffef

0800465c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800465c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800465e:	b570      	push	{r4, r5, r6, lr}
 8004660:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8004662:	2bff      	cmp	r3, #255	; 0xff
 8004664:	d903      	bls.n	800466e <UART_AdvFeatureConfig+0x12>
 8004666:	4955      	ldr	r1, [pc, #340]	; (80047bc <UART_AdvFeatureConfig+0x160>)
 8004668:	4855      	ldr	r0, [pc, #340]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 800466a:	f000 fcda 	bl	8005022 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004670:	07db      	lsls	r3, r3, #31
 8004672:	d50d      	bpl.n	8004690 <UART_AdvFeatureConfig+0x34>
 8004674:	4d53      	ldr	r5, [pc, #332]	; (80047c4 <UART_AdvFeatureConfig+0x168>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8004676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004678:	422b      	tst	r3, r5
 800467a:	d003      	beq.n	8004684 <UART_AdvFeatureConfig+0x28>
 800467c:	4952      	ldr	r1, [pc, #328]	; (80047c8 <UART_AdvFeatureConfig+0x16c>)
 800467e:	4850      	ldr	r0, [pc, #320]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 8004680:	f000 fccf 	bl	8005022 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004688:	6853      	ldr	r3, [r2, #4]
 800468a:	402b      	ands	r3, r5
 800468c:	430b      	orrs	r3, r1
 800468e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004692:	079b      	lsls	r3, r3, #30
 8004694:	d50d      	bpl.n	80046b2 <UART_AdvFeatureConfig+0x56>
 8004696:	4d4d      	ldr	r5, [pc, #308]	; (80047cc <UART_AdvFeatureConfig+0x170>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8004698:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800469a:	422b      	tst	r3, r5
 800469c:	d003      	beq.n	80046a6 <UART_AdvFeatureConfig+0x4a>
 800469e:	494c      	ldr	r1, [pc, #304]	; (80047d0 <UART_AdvFeatureConfig+0x174>)
 80046a0:	4847      	ldr	r0, [pc, #284]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 80046a2:	f000 fcbe 	bl	8005022 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046aa:	6853      	ldr	r3, [r2, #4]
 80046ac:	402b      	ands	r3, r5
 80046ae:	430b      	orrs	r3, r1
 80046b0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b4:	075b      	lsls	r3, r3, #29
 80046b6:	d50d      	bpl.n	80046d4 <UART_AdvFeatureConfig+0x78>
 80046b8:	4d46      	ldr	r5, [pc, #280]	; (80047d4 <UART_AdvFeatureConfig+0x178>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80046ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046bc:	422b      	tst	r3, r5
 80046be:	d003      	beq.n	80046c8 <UART_AdvFeatureConfig+0x6c>
 80046c0:	4945      	ldr	r1, [pc, #276]	; (80047d8 <UART_AdvFeatureConfig+0x17c>)
 80046c2:	483f      	ldr	r0, [pc, #252]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 80046c4:	f000 fcad 	bl	8005022 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80046cc:	6853      	ldr	r3, [r2, #4]
 80046ce:	402b      	ands	r3, r5
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046d6:	071b      	lsls	r3, r3, #28
 80046d8:	d50d      	bpl.n	80046f6 <UART_AdvFeatureConfig+0x9a>
 80046da:	4d40      	ldr	r5, [pc, #256]	; (80047dc <UART_AdvFeatureConfig+0x180>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80046dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046de:	422b      	tst	r3, r5
 80046e0:	d003      	beq.n	80046ea <UART_AdvFeatureConfig+0x8e>
 80046e2:	493f      	ldr	r1, [pc, #252]	; (80047e0 <UART_AdvFeatureConfig+0x184>)
 80046e4:	4836      	ldr	r0, [pc, #216]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 80046e6:	f000 fc9c 	bl	8005022 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ee:	6853      	ldr	r3, [r2, #4]
 80046f0:	402b      	ands	r3, r5
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046f8:	06db      	lsls	r3, r3, #27
 80046fa:	d50d      	bpl.n	8004718 <UART_AdvFeatureConfig+0xbc>
 80046fc:	4d39      	ldr	r5, [pc, #228]	; (80047e4 <UART_AdvFeatureConfig+0x188>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80046fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004700:	422b      	tst	r3, r5
 8004702:	d003      	beq.n	800470c <UART_AdvFeatureConfig+0xb0>
 8004704:	4938      	ldr	r1, [pc, #224]	; (80047e8 <UART_AdvFeatureConfig+0x18c>)
 8004706:	482e      	ldr	r0, [pc, #184]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 8004708:	f000 fc8b 	bl	8005022 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004710:	6893      	ldr	r3, [r2, #8]
 8004712:	402b      	ands	r3, r5
 8004714:	430b      	orrs	r3, r1
 8004716:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	d50d      	bpl.n	800473a <UART_AdvFeatureConfig+0xde>
 800471e:	4d33      	ldr	r5, [pc, #204]	; (80047ec <UART_AdvFeatureConfig+0x190>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8004720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004722:	422b      	tst	r3, r5
 8004724:	d003      	beq.n	800472e <UART_AdvFeatureConfig+0xd2>
 8004726:	4932      	ldr	r1, [pc, #200]	; (80047f0 <UART_AdvFeatureConfig+0x194>)
 8004728:	4825      	ldr	r0, [pc, #148]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 800472a:	f000 fc7a 	bl	8005022 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004732:	6893      	ldr	r3, [r2, #8]
 8004734:	402b      	ands	r3, r5
 8004736:	430b      	orrs	r3, r1
 8004738:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800473a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800473c:	065b      	lsls	r3, r3, #25
 800473e:	d52a      	bpl.n	8004796 <UART_AdvFeatureConfig+0x13a>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <UART_AdvFeatureConfig+0x198>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d006      	beq.n	8004756 <UART_AdvFeatureConfig+0xfa>
 8004748:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <UART_AdvFeatureConfig+0x19c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <UART_AdvFeatureConfig+0xfa>
 800474e:	492b      	ldr	r1, [pc, #172]	; (80047fc <UART_AdvFeatureConfig+0x1a0>)
 8004750:	481b      	ldr	r0, [pc, #108]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 8004752:	f000 fc66 	bl	8005022 <assert_failed>
 8004756:	4d2a      	ldr	r5, [pc, #168]	; (8004800 <UART_AdvFeatureConfig+0x1a4>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8004758:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800475a:	422b      	tst	r3, r5
 800475c:	d003      	beq.n	8004766 <UART_AdvFeatureConfig+0x10a>
 800475e:	4929      	ldr	r1, [pc, #164]	; (8004804 <UART_AdvFeatureConfig+0x1a8>)
 8004760:	4817      	ldr	r0, [pc, #92]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 8004762:	f000 fc5e 	bl	8005022 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800476a:	684b      	ldr	r3, [r1, #4]
 800476c:	402b      	ands	r3, r5
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	035b      	lsls	r3, r3, #13
 8004776:	429a      	cmp	r2, r3
 8004778:	d10d      	bne.n	8004796 <UART_AdvFeatureConfig+0x13a>
 800477a:	4d23      	ldr	r5, [pc, #140]	; (8004808 <UART_AdvFeatureConfig+0x1ac>)
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800477c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800477e:	422b      	tst	r3, r5
 8004780:	d003      	beq.n	800478a <UART_AdvFeatureConfig+0x12e>
 8004782:	4922      	ldr	r1, [pc, #136]	; (800480c <UART_AdvFeatureConfig+0x1b0>)
 8004784:	480e      	ldr	r0, [pc, #56]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 8004786:	f000 fc4c 	bl	8005022 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800478e:	6853      	ldr	r3, [r2, #4]
 8004790:	402b      	ands	r3, r5
 8004792:	430b      	orrs	r3, r1
 8004794:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	d50d      	bpl.n	80047b8 <UART_AdvFeatureConfig+0x15c>
 800479c:	4d1c      	ldr	r5, [pc, #112]	; (8004810 <UART_AdvFeatureConfig+0x1b4>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800479e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80047a0:	422b      	tst	r3, r5
 80047a2:	d003      	beq.n	80047ac <UART_AdvFeatureConfig+0x150>
 80047a4:	491b      	ldr	r1, [pc, #108]	; (8004814 <UART_AdvFeatureConfig+0x1b8>)
 80047a6:	4806      	ldr	r0, [pc, #24]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 80047a8:	f000 fc3b 	bl	8005022 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80047b0:	6853      	ldr	r3, [r2, #4]
 80047b2:	402b      	ands	r3, r5
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6053      	str	r3, [r2, #4]
}
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	00000b9a 	.word	0x00000b9a
 80047c0:	08005c5b 	.word	0x08005c5b
 80047c4:	fffdffff 	.word	0xfffdffff
 80047c8:	00000b9f 	.word	0x00000b9f
 80047cc:	fffeffff 	.word	0xfffeffff
 80047d0:	00000ba6 	.word	0x00000ba6
 80047d4:	fffbffff 	.word	0xfffbffff
 80047d8:	00000bad 	.word	0x00000bad
 80047dc:	ffff7fff 	.word	0xffff7fff
 80047e0:	00000bb4 	.word	0x00000bb4
 80047e4:	ffffefff 	.word	0xffffefff
 80047e8:	00000bbb 	.word	0x00000bbb
 80047ec:	ffffdfff 	.word	0xffffdfff
 80047f0:	00000bc2 	.word	0x00000bc2
 80047f4:	40013800 	.word	0x40013800
 80047f8:	40004400 	.word	0x40004400
 80047fc:	00000bc9 	.word	0x00000bc9
 8004800:	ffefffff 	.word	0xffefffff
 8004804:	00000bca 	.word	0x00000bca
 8004808:	ff9fffff 	.word	0xff9fffff
 800480c:	00000bcf 	.word	0x00000bcf
 8004810:	fff7ffff 	.word	0xfff7ffff
 8004814:	00000bd7 	.word	0x00000bd7

08004818 <UART_WaitOnFlagUntilTimeout>:
{
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	0004      	movs	r4, r0
 800481c:	000e      	movs	r6, r1
 800481e:	0015      	movs	r5, r2
 8004820:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	69d3      	ldr	r3, [r2, #28]
 8004826:	4033      	ands	r3, r6
 8004828:	1b9b      	subs	r3, r3, r6
 800482a:	4259      	negs	r1, r3
 800482c:	414b      	adcs	r3, r1
 800482e:	42ab      	cmp	r3, r5
 8004830:	d001      	beq.n	8004836 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004832:	2000      	movs	r0, #0
 8004834:	e01b      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8004836:	9b06      	ldr	r3, [sp, #24]
 8004838:	3301      	adds	r3, #1
 800483a:	d0f3      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7fd fc74 	bl	8002128 <HAL_GetTick>
 8004840:	9b06      	ldr	r3, [sp, #24]
 8004842:	1bc0      	subs	r0, r0, r7
 8004844:	4283      	cmp	r3, r0
 8004846:	d301      	bcc.n	800484c <UART_WaitOnFlagUntilTimeout+0x34>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ea      	bne.n	8004822 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	4908      	ldr	r1, [pc, #32]	; (8004870 <UART_WaitOnFlagUntilTimeout+0x58>)
 8004850:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8004852:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004854:	400a      	ands	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	31a3      	adds	r1, #163	; 0xa3
 800485c:	31ff      	adds	r1, #255	; 0xff
 800485e:	438a      	bics	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004862:	2320      	movs	r3, #32
 8004864:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004866:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004868:	2300      	movs	r3, #0
 800486a:	3470      	adds	r4, #112	; 0x70
 800486c:	7023      	strb	r3, [r4, #0]
}
 800486e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004870:	fffffe5f 	.word	0xfffffe5f

08004874 <HAL_UART_Transmit>:
{
 8004874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004876:	b087      	sub	sp, #28
 8004878:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800487a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800487c:	0004      	movs	r4, r0
 800487e:	000d      	movs	r5, r1
 8004880:	0017      	movs	r7, r2
    return HAL_BUSY;
 8004882:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004884:	2b20      	cmp	r3, #32
 8004886:	d149      	bne.n	800491c <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8004888:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800488a:	2900      	cmp	r1, #0
 800488c:	d046      	beq.n	800491c <HAL_UART_Transmit+0xa8>
 800488e:	2a00      	cmp	r2, #0
 8004890:	d044      	beq.n	800491c <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	68a2      	ldr	r2, [r4, #8]
 8004896:	015b      	lsls	r3, r3, #5
 8004898:	429a      	cmp	r2, r3
 800489a:	d104      	bne.n	80048a6 <HAL_UART_Transmit+0x32>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 80048a2:	4201      	tst	r1, r0
 80048a4:	d13a      	bne.n	800491c <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80048a6:	0023      	movs	r3, r4
 80048a8:	3370      	adds	r3, #112	; 0x70
 80048aa:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80048ac:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80048ae:	2a01      	cmp	r2, #1
 80048b0:	d034      	beq.n	800491c <HAL_UART_Transmit+0xa8>
 80048b2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80048b6:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048bc:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80048be:	f7fd fc33 	bl	8002128 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80048c2:	0023      	movs	r3, r4
 80048c4:	3350      	adds	r3, #80	; 0x50
 80048c6:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80048c8:	3302      	adds	r3, #2
 80048ca:	9303      	str	r3, [sp, #12]
 80048cc:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80048d2:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d4:	015b      	lsls	r3, r3, #5
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d104      	bne.n	80048e4 <HAL_UART_Transmit+0x70>
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	42b3      	cmp	r3, r6
 80048de:	d101      	bne.n	80048e4 <HAL_UART_Transmit+0x70>
 80048e0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80048e2:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80048e4:	0023      	movs	r3, r4
 80048e6:	3352      	adds	r3, #82	; 0x52
 80048e8:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ea:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80048ec:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	d10a      	bne.n	800490c <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048f6:	2140      	movs	r1, #64	; 0x40
 80048f8:	0020      	movs	r0, r4
 80048fa:	f7ff ff8d 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 80048fe:	2800      	cmp	r0, #0
 8004900:	d10b      	bne.n	800491a <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8004902:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004904:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8004906:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8004908:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800490a:	e007      	b.n	800491c <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	0020      	movs	r0, r4
 8004912:	f7ff ff81 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 8004916:	2800      	cmp	r0, #0
 8004918:	d002      	beq.n	8004920 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800491a:	2003      	movs	r0, #3
}
 800491c:	b007      	add	sp, #28
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004920:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004922:	2d00      	cmp	r5, #0
 8004924:	d10b      	bne.n	800493e <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004926:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8004928:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800492a:	05db      	lsls	r3, r3, #23
 800492c:	0ddb      	lsrs	r3, r3, #23
 800492e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004930:	9b03      	ldr	r3, [sp, #12]
 8004932:	9a03      	ldr	r2, [sp, #12]
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	b29b      	uxth	r3, r3
 800493a:	8013      	strh	r3, [r2, #0]
 800493c:	e7d2      	b.n	80048e4 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800493e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004940:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004942:	6293      	str	r3, [r2, #40]	; 0x28
 8004944:	e7f4      	b.n	8004930 <HAL_UART_Transmit+0xbc>
	...

08004948 <HAL_UART_Receive>:
{
 8004948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494a:	b087      	sub	sp, #28
 800494c:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 800494e:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8004950:	0004      	movs	r4, r0
 8004952:	000d      	movs	r5, r1
 8004954:	0016      	movs	r6, r2
    return HAL_BUSY;
 8004956:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004958:	2b20      	cmp	r3, #32
 800495a:	d143      	bne.n	80049e4 <HAL_UART_Receive+0x9c>
      return  HAL_ERROR;
 800495c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800495e:	2900      	cmp	r1, #0
 8004960:	d040      	beq.n	80049e4 <HAL_UART_Receive+0x9c>
 8004962:	2a00      	cmp	r2, #0
 8004964:	d03e      	beq.n	80049e4 <HAL_UART_Receive+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	68a2      	ldr	r2, [r4, #8]
 800496a:	015b      	lsls	r3, r3, #5
 800496c:	429a      	cmp	r2, r3
 800496e:	d104      	bne.n	800497a <HAL_UART_Receive+0x32>
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8004976:	4201      	tst	r1, r0
 8004978:	d134      	bne.n	80049e4 <HAL_UART_Receive+0x9c>
    __HAL_LOCK(huart);
 800497a:	0023      	movs	r3, r4
 800497c:	3370      	adds	r3, #112	; 0x70
 800497e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8004980:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004982:	2a01      	cmp	r2, #1
 8004984:	d02e      	beq.n	80049e4 <HAL_UART_Receive+0x9c>
 8004986:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004988:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800498a:	701a      	strb	r2, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800498c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498e:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004990:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004992:	f7fd fbc9 	bl	8002128 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8004996:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8004998:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 800499a:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 800499c:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 800499e:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80049a0:	3302      	adds	r3, #2
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80049a6:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 80049a8:	0149      	lsls	r1, r1, #5
 80049aa:	3302      	adds	r3, #2
 80049ac:	428a      	cmp	r2, r1
 80049ae:	d11d      	bne.n	80049ec <HAL_UART_Receive+0xa4>
 80049b0:	6921      	ldr	r1, [r4, #16]
 80049b2:	42b9      	cmp	r1, r7
 80049b4:	d118      	bne.n	80049e8 <HAL_UART_Receive+0xa0>
 80049b6:	4925      	ldr	r1, [pc, #148]	; (8004a4c <HAL_UART_Receive+0x104>)
 80049b8:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 80049ba:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80049be:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c0:	015b      	lsls	r3, r3, #5
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d104      	bne.n	80049d0 <HAL_UART_Receive+0x88>
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	42b3      	cmp	r3, r6
 80049ca:	d101      	bne.n	80049d0 <HAL_UART_Receive+0x88>
 80049cc:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80049ce:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 80049d0:	0023      	movs	r3, r4
 80049d2:	335a      	adds	r3, #90	; 0x5a
 80049d4:	8818      	ldrh	r0, [r3, #0]
 80049d6:	b280      	uxth	r0, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d119      	bne.n	8004a10 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 80049dc:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80049de:	3470      	adds	r4, #112	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 80049e0:	60a3      	str	r3, [r4, #8]
    __HAL_UNLOCK(huart);
 80049e2:	7020      	strb	r0, [r4, #0]
}
 80049e4:	b007      	add	sp, #28
 80049e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80049e8:	21ff      	movs	r1, #255	; 0xff
 80049ea:	e7e5      	b.n	80049b8 <HAL_UART_Receive+0x70>
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	d104      	bne.n	80049fa <HAL_UART_Receive+0xb2>
 80049f0:	6921      	ldr	r1, [r4, #16]
 80049f2:	2900      	cmp	r1, #0
 80049f4:	d0f8      	beq.n	80049e8 <HAL_UART_Receive+0xa0>
 80049f6:	217f      	movs	r1, #127	; 0x7f
 80049f8:	e7de      	b.n	80049b8 <HAL_UART_Receive+0x70>
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	0549      	lsls	r1, r1, #21
 80049fe:	428a      	cmp	r2, r1
 8004a00:	d104      	bne.n	8004a0c <HAL_UART_Receive+0xc4>
 8004a02:	6921      	ldr	r1, [r4, #16]
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d0f6      	beq.n	80049f6 <HAL_UART_Receive+0xae>
 8004a08:	213f      	movs	r1, #63	; 0x3f
 8004a0a:	e7d5      	b.n	80049b8 <HAL_UART_Receive+0x70>
 8004a0c:	801f      	strh	r7, [r3, #0]
 8004a0e:	e7d4      	b.n	80049ba <HAL_UART_Receive+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a10:	9b05      	ldr	r3, [sp, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2120      	movs	r1, #32
 8004a18:	9b04      	ldr	r3, [sp, #16]
 8004a1a:	0020      	movs	r0, r4
 8004a1c:	f7ff fefc 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d110      	bne.n	8004a46 <HAL_UART_Receive+0xfe>
 8004a24:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	d108      	bne.n	8004a40 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a2e:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8004a30:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	9a03      	ldr	r2, [sp, #12]
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]
 8004a3e:	e7c7      	b.n	80049d0 <HAL_UART_Receive+0x88>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a40:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8004a42:	3501      	adds	r5, #1
 8004a44:	e7f5      	b.n	8004a32 <HAL_UART_Receive+0xea>
        return HAL_TIMEOUT;
 8004a46:	2003      	movs	r0, #3
 8004a48:	e7cc      	b.n	80049e4 <HAL_UART_Receive+0x9c>
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	000001ff 	.word	0x000001ff

08004a50 <UART_CheckIdleState>:
{
 8004a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a52:	2600      	movs	r6, #0
{
 8004a54:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a56:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004a58:	f7fd fb66 	bl	8002128 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a5c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004a5e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	071b      	lsls	r3, r3, #28
 8004a64:	d415      	bmi.n	8004a92 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	075b      	lsls	r3, r3, #29
 8004a6c:	d50a      	bpl.n	8004a84 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <UART_CheckIdleState+0x5c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	03c9      	lsls	r1, r1, #15
 8004a78:	002b      	movs	r3, r5
 8004a7a:	0020      	movs	r0, r4
 8004a7c:	f7ff fecc 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d111      	bne.n	8004aa8 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004a84:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004a86:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004a8c:	3470      	adds	r4, #112	; 0x70
 8004a8e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004a90:	e00b      	b.n	8004aaa <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <UART_CheckIdleState+0x5c>)
 8004a96:	0032      	movs	r2, r6
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	0389      	lsls	r1, r1, #14
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	0020      	movs	r0, r4
 8004aa0:	f7ff feba 	bl	8004818 <UART_WaitOnFlagUntilTimeout>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d0de      	beq.n	8004a66 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004aa8:	2003      	movs	r0, #3
}
 8004aaa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004aac:	01ffffff 	.word	0x01ffffff

08004ab0 <HAL_UART_Init>:
{
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004ab6:	2001      	movs	r0, #1
}
 8004ab8:	bd10      	pop	{r4, pc}
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004aba:	6981      	ldr	r1, [r0, #24]
 8004abc:	6803      	ldr	r3, [r0, #0]
 8004abe:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <HAL_UART_Init+0xb4>)
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d03e      	beq.n	8004b42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d010      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_UART_Init+0xb8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00d      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004ace:	4a27      	ldr	r2, [pc, #156]	; (8004b6c <HAL_UART_Init+0xbc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00a      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <HAL_UART_Init+0xc0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004ada:	4a26      	ldr	r2, [pc, #152]	; (8004b74 <HAL_UART_Init+0xc4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004ae0:	2130      	movs	r1, #48	; 0x30
 8004ae2:	31ff      	adds	r1, #255	; 0xff
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8004ae4:	4824      	ldr	r0, [pc, #144]	; (8004b78 <HAL_UART_Init+0xc8>)
 8004ae6:	f000 fa9c 	bl	8005022 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <HAL_UART_Init+0x4c>
    huart->Lock = HAL_UNLOCKED;
 8004af0:	0022      	movs	r2, r4
 8004af2:	3270      	adds	r2, #112	; 0x70
 8004af4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004af6:	0020      	movs	r0, r4
 8004af8:	f000 fccc 	bl	8005494 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004afc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004afe:	2101      	movs	r1, #1
 8004b00:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b02:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004b04:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b06:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004b08:	438b      	bics	r3, r1
 8004b0a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b0c:	f7ff fc02 	bl	8004314 <UART_SetConfig>
 8004b10:	2801      	cmp	r0, #1
 8004b12:	d0d0      	beq.n	8004ab6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Init+0x70>
    UART_AdvFeatureConfig(huart);
 8004b1a:	0020      	movs	r0, r4
 8004b1c:	f7ff fd9e 	bl	800465c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	4916      	ldr	r1, [pc, #88]	; (8004b7c <HAL_UART_Init+0xcc>)
 8004b24:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004b26:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b28:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b2a:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	438a      	bics	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004b34:	2201      	movs	r2, #1
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004b3c:	f7ff ff88 	bl	8004a50 <UART_CheckIdleState>
 8004b40:	e7ba      	b.n	8004ab8 <HAL_UART_Init+0x8>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d0d1      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <HAL_UART_Init+0xb8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d0ce      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004b4c:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <HAL_UART_Init+0xbc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d0cb      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004b52:	4a07      	ldr	r2, [pc, #28]	; (8004b70 <HAL_UART_Init+0xc0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d0c8      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004b58:	4a06      	ldr	r2, [pc, #24]	; (8004b74 <HAL_UART_Init+0xc4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d0c5      	beq.n	8004aea <HAL_UART_Init+0x3a>
 8004b5e:	219a      	movs	r1, #154	; 0x9a
 8004b60:	0049      	lsls	r1, r1, #1
 8004b62:	e7bf      	b.n	8004ae4 <HAL_UART_Init+0x34>
 8004b64:	40013800 	.word	0x40013800
 8004b68:	40004400 	.word	0x40004400
 8004b6c:	40004c00 	.word	0x40004c00
 8004b70:	40005000 	.word	0x40005000
 8004b74:	40004800 	.word	0x40004800
 8004b78:	08005c5b 	.word	0x08005c5b
 8004b7c:	ffffb7ff 	.word	0xffffb7ff

08004b80 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b80:	4770      	bx	lr
	...

08004b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b84:	b530      	push	{r4, r5, lr}
 8004b86:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b88:	2238      	movs	r2, #56	; 0x38
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	a80e      	add	r0, sp, #56	; 0x38
 8004b8e:	f000 fe0c 	bl	80057aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b92:	2214      	movs	r2, #20
 8004b94:	2100      	movs	r1, #0
 8004b96:	4668      	mov	r0, sp
 8004b98:	f000 fe07 	bl	80057aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b9c:	2224      	movs	r2, #36	; 0x24
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	a805      	add	r0, sp, #20
 8004ba2:	f000 fe02 	bl	80057aa <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ba6:	4914      	ldr	r1, [pc, #80]	; (8004bf8 <SystemClock_Config+0x74>)
 8004ba8:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <SystemClock_Config+0x78>)
 8004baa:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004bac:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bae:	401a      	ands	r2, r3
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004bb8:	2310      	movs	r3, #16
 8004bba:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004bbc:	3b0f      	subs	r3, #15
 8004bbe:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004bc0:	23a0      	movs	r3, #160	; 0xa0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bc2:	250f      	movs	r5, #15
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004bc4:	021b      	lsls	r3, r3, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bc6:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004bc8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004bca:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004bcc:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bce:	f7fe fbbf 	bl	8003350 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004bd2:	0021      	movs	r1, r4
 8004bd4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bd6:	9500      	str	r5, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004bd8:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bda:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bdc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004bde:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004be0:	f7fe ff14 	bl	8003a0c <HAL_RCC_ClockConfig>
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004be4:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004be6:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004be8:	9407      	str	r4, [sp, #28]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004bea:	9408      	str	r4, [sp, #32]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004bec:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004bee:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bf0:	f7ff f850 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004bf4:	b01d      	add	sp, #116	; 0x74
 8004bf6:	bd30      	pop	{r4, r5, pc}
 8004bf8:	40007000 	.word	0x40007000
 8004bfc:	ffffe7ff 	.word	0xffffe7ff

08004c00 <blink>:

}

/* USER CODE BEGIN 4 */

void blink(uint8_t times) {
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int var = 0; var < times; ++var) {
		LED_ON
 8004c02:	2580      	movs	r5, #128	; 0x80
 8004c04:	26a0      	movs	r6, #160	; 0xa0
void blink(uint8_t times) {
 8004c06:	0007      	movs	r7, r0
	for (int var = 0; var < times; ++var) {
 8004c08:	2400      	movs	r4, #0
		LED_ON
 8004c0a:	006d      	lsls	r5, r5, #1
 8004c0c:	05f6      	lsls	r6, r6, #23
	for (int var = 0; var < times; ++var) {
 8004c0e:	42bc      	cmp	r4, r7
 8004c10:	db00      	blt.n	8004c14 <blink+0x14>
		HAL_Delay(25);
		LED_OFF
		HAL_Delay(25);
	}

}
 8004c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LED_ON
 8004c14:	2200      	movs	r2, #0
 8004c16:	0029      	movs	r1, r5
 8004c18:	0030      	movs	r0, r6
 8004c1a:	f7fe f9e3 	bl	8002fe4 <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8004c1e:	2019      	movs	r0, #25
 8004c20:	f7fd fa88 	bl	8002134 <HAL_Delay>
		LED_OFF
 8004c24:	2201      	movs	r2, #1
 8004c26:	0029      	movs	r1, r5
 8004c28:	0030      	movs	r0, r6
 8004c2a:	f7fe f9db 	bl	8002fe4 <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8004c2e:	2019      	movs	r0, #25
 8004c30:	f7fd fa80 	bl	8002134 <HAL_Delay>
	for (int var = 0; var < times; ++var) {
 8004c34:	3401      	adds	r4, #1
 8004c36:	e7ea      	b.n	8004c0e <blink+0xe>

08004c38 <fn_fprint>:

void fn_fprint(char *data) {
 8004c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	0005      	movs	r5, r0
	int tamanho = strlen(data);
 8004c3e:	f7fb fa63 	bl	8000108 <strlen>
	char new_command[tamanho];
 8004c42:	466a      	mov	r2, sp
 8004c44:	1dc3      	adds	r3, r0, #7
 8004c46:	08db      	lsrs	r3, r3, #3
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	469d      	mov	sp, r3
	strcpy(new_command, data);
 8004c4e:	0029      	movs	r1, r5
	int tamanho = strlen(data);
 8004c50:	0004      	movs	r4, r0
	strcpy(new_command, data);
 8004c52:	4668      	mov	r0, sp
 8004c54:	f000 fdb1 	bl	80057ba <strcpy>
 8004c58:	466e      	mov	r6, sp
	char new_com[1]; // (uint8_t*)new_command;
	for (int var = 0; var < tamanho; ++var) {
 8004c5a:	466d      	mov	r5, sp
 8004c5c:	1bab      	subs	r3, r5, r6
 8004c5e:	429c      	cmp	r4, r3
 8004c60:	dc01      	bgt.n	8004c66 <fn_fprint+0x2e>
		new_com[0] = new_command[var];
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
	}
}
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		new_com[0] = new_command[var];
 8004c66:	782b      	ldrb	r3, [r5, #0]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8004c68:	2201      	movs	r2, #1
		new_com[0] = new_command[var];
 8004c6a:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8004c6c:	1d39      	adds	r1, r7, #4
 8004c6e:	230a      	movs	r3, #10
 8004c70:	4802      	ldr	r0, [pc, #8]	; (8004c7c <fn_fprint+0x44>)
 8004c72:	f7ff fdff 	bl	8004874 <HAL_UART_Transmit>
 8004c76:	3501      	adds	r5, #1
 8004c78:	e7f0      	b.n	8004c5c <fn_fprint+0x24>
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	200003a8 	.word	0x200003a8

08004c80 <HAL_UART_TxCpltCallback>:
 8004c80:	2201      	movs	r2, #1
 8004c82:	4b01      	ldr	r3, [pc, #4]	; (8004c88 <HAL_UART_TxCpltCallback+0x8>)
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	4770      	bx	lr
 8004c88:	2000022c 	.word	0x2000022c

08004c8c <HAL_UART_RxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	UartReady = SET;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	UartReady = SET;
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4b01      	ldr	r3, [pc, #4]	; (8004c94 <HAL_UART_RxCpltCallback+0x8>)
 8004c90:	701a      	strb	r2, [r3, #0]
}
 8004c92:	4770      	bx	lr
 8004c94:	2000022c 	.word	0x2000022c

08004c98 <get_temp>:

float get_temp (uint32_t variable)   // function to read temp from the value
{
 8004c98:	b510      	push	{r4, lr}
	return (((V25 - VSENSE*variable) / Avg_Slope) + 25);
 8004c9a:	f7fd f925 	bl	8001ee8 <__aeabi_ui2d>
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <get_temp+0x30>)
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <get_temp+0x34>)
 8004ca2:	f7fc fb8b 	bl	80013bc <__aeabi_dmul>
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	000b      	movs	r3, r1
 8004caa:	4809      	ldr	r0, [pc, #36]	; (8004cd0 <get_temp+0x38>)
 8004cac:	4909      	ldr	r1, [pc, #36]	; (8004cd4 <get_temp+0x3c>)
 8004cae:	f7fc fe05 	bl	80018bc <__aeabi_dsub>
 8004cb2:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <get_temp+0x40>)
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <get_temp+0x44>)
 8004cb6:	f7fc f84d 	bl	8000d54 <__aeabi_ddiv>
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <get_temp+0x48>)
 8004cbe:	f7fb fd39 	bl	8000734 <__aeabi_dadd>
 8004cc2:	f7fd f949 	bl	8001f58 <__aeabi_d2f>
}
 8004cc6:	bd10      	pop	{r4, pc}
 8004cc8:	66666666 	.word	0x66666666
 8004ccc:	3f4a6666 	.word	0x3f4a6666
 8004cd0:	ae147ae1 	.word	0xae147ae1
 8004cd4:	3ff6e147 	.word	0x3ff6e147
 8004cd8:	75f6fd22 	.word	0x75f6fd22
 8004cdc:	3f719ce0 	.word	0x3f719ce0
 8004ce0:	40390000 	.word	0x40390000

08004ce4 <fn_get_stm32_temperature>:

void fn_get_stm32_temperature(){
	 st_stm_adc_variables.temperature = get_temp(value[2])/10;
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <fn_get_stm32_temperature+0x18>)
void fn_get_stm32_temperature(){
 8004ce6:	b510      	push	{r4, lr}
	 st_stm_adc_variables.temperature = get_temp(value[2])/10;
 8004ce8:	6898      	ldr	r0, [r3, #8]
 8004cea:	f7ff ffd5 	bl	8004c98 <get_temp>
 8004cee:	4904      	ldr	r1, [pc, #16]	; (8004d00 <fn_get_stm32_temperature+0x1c>)
 8004cf0:	f7fb fb92 	bl	8000418 <__aeabi_fdiv>
 8004cf4:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <fn_get_stm32_temperature+0x20>)
 8004cf6:	6018      	str	r0, [r3, #0]
}
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	20000350 	.word	0x20000350
 8004d00:	41200000 	.word	0x41200000
 8004d04:	20000224 	.word	0x20000224

08004d08 <fn_get_stm32_volts>:

void fn_get_stm32_volts()
{
	st_stm_adc_variables.battery = value[0];
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <fn_get_stm32_volts+0x18>)
{
 8004d0a:	b510      	push	{r4, lr}
	st_stm_adc_variables.battery = value[0];
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	f7fb fccb 	bl	80006a8 <__aeabi_ui2f>
	st_stm_adc_variables.battery/=1000;
 8004d12:	4904      	ldr	r1, [pc, #16]	; (8004d24 <fn_get_stm32_volts+0x1c>)
 8004d14:	f7fb fb80 	bl	8000418 <__aeabi_fdiv>
 8004d18:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <fn_get_stm32_volts+0x20>)
 8004d1a:	6058      	str	r0, [r3, #4]
}
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	20000350 	.word	0x20000350
 8004d24:	447a0000 	.word	0x447a0000
 8004d28:	20000224 	.word	0x20000224

08004d2c <main>:
{
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8004d30:	f7fd f9de 	bl	80020f0 <HAL_Init>
  SystemClock_Config();
 8004d34:	f7ff ff26 	bl	8004b84 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d38:	2214      	movs	r2, #20
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	a805      	add	r0, sp, #20
 8004d3e:	f000 fd34 	bl	80057aa <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d42:	2204      	movs	r2, #4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d44:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d46:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d48:	4d9b      	ldr	r5, [pc, #620]	; (8004fb8 <main+0x28c>)
  HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin|WISOL_RST_Pin, GPIO_PIN_SET);
 8004d4a:	27c0      	movs	r7, #192	; 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin|WISOL_RST_Pin, GPIO_PIN_SET);
 8004d4e:	023f      	lsls	r7, r7, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d50:	4313      	orrs	r3, r2
 8004d52:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin|GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8004d56:	4899      	ldr	r0, [pc, #612]	; (8004fbc <main+0x290>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d58:	4013      	ands	r3, r2
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d5e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d60:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d62:	430a      	orrs	r2, r1
 8004d64:	62ea      	str	r2, [r5, #44]	; 0x2c
 8004d66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d68:	400b      	ands	r3, r1
 8004d6a:	9302      	str	r3, [sp, #8]
 8004d6c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d70:	397e      	subs	r1, #126	; 0x7e
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d72:	4333      	orrs	r3, r6
 8004d74:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004d76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004d78:	4033      	ands	r3, r6
 8004d7a:	9303      	str	r3, [sp, #12]
 8004d7c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d7e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004d80:	430a      	orrs	r2, r1
 8004d82:	62ea      	str	r2, [r5, #44]	; 0x2c
 8004d84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin|GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8004d86:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d88:	400b      	ands	r3, r1
 8004d8a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin|GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8004d8c:	3122      	adds	r1, #34	; 0x22
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d8e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin|GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8004d90:	f7fe f928 	bl	8002fe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, WISOL_WKP_Pin|WISOL_RST_Pin, GPIO_PIN_SET);
 8004d94:	0032      	movs	r2, r6
 8004d96:	0039      	movs	r1, r7
 8004d98:	4888      	ldr	r0, [pc, #544]	; (8004fbc <main+0x290>)
 8004d9a:	f7fe f923 	bl	8002fe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_LED_Pin|EN_US_Pin|EN_GPRS_Pin|EN_GPS_Pin 
 8004d9e:	219f      	movs	r1, #159	; 0x9f
 8004da0:	20a0      	movs	r0, #160	; 0xa0
 8004da2:	2200      	movs	r2, #0
 8004da4:	0209      	lsls	r1, r1, #8
 8004da6:	05c0      	lsls	r0, r0, #23
 8004da8:	f7fe f91c 	bl	8002fe4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8004dac:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8004dae:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8004db0:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8004db2:	4883      	ldr	r0, [pc, #524]	; (8004fc0 <main+0x294>)
  GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8004db4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004db6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8004dba:	f7fd ffdd 	bl	8002d78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004dbe:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dc0:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc2:	a905      	add	r1, sp, #20
 8004dc4:	487e      	ldr	r0, [pc, #504]	; (8004fc0 <main+0x294>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dc6:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dca:	f7fd ffd5 	bl	8002d78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004dce:	a905      	add	r1, sp, #20
 8004dd0:	487c      	ldr	r0, [pc, #496]	; (8004fc4 <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004dd2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dd4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004dd8:	f7fd ffce 	bl	8002d78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ddc:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = HC_SR04_TRG_Pin|HC_SR04_PULSE_Pin;
 8004dde:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de0:	a905      	add	r1, sp, #20
 8004de2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = HC_SR04_TRG_Pin|HC_SR04_PULSE_Pin;
 8004de4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004de6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dea:	f7fd ffc5 	bl	8002d78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_INT1_XL_Pin|EXT_INT_MAG_Pin|GPS_EXTI_Pin|GPS_TIMEPULSE_Pin;
 8004dee:	4b76      	ldr	r3, [pc, #472]	; (8004fc8 <main+0x29c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = EXT_INT1_XL_Pin|EXT_INT_MAG_Pin|GPS_EXTI_Pin|GPS_TIMEPULSE_Pin;
 8004df2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004df4:	4b75      	ldr	r3, [pc, #468]	; (8004fcc <main+0x2a0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df6:	4871      	ldr	r0, [pc, #452]	; (8004fbc <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004df8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dfc:	f7fd ffbc 	bl	8002d78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPRS_RST_Pin;
 8004e00:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8004e02:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPRS_RST_Pin;
 8004e04:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8004e06:	486d      	ldr	r0, [pc, #436]	; (8004fbc <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004e08:	330d      	adds	r3, #13
 8004e0a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8004e10:	f7fd ffb2 	bl	8002d78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WISOL_WKP_Pin|WISOL_RST_Pin|GPRS_PWR_ON_Pin;
 8004e14:	4b6e      	ldr	r3, [pc, #440]	; (8004fd0 <main+0x2a4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e16:	a905      	add	r1, sp, #20
 8004e18:	4868      	ldr	r0, [pc, #416]	; (8004fbc <main+0x290>)
  GPIO_InitStruct.Pin = WISOL_WKP_Pin|WISOL_RST_Pin|GPRS_PWR_ON_Pin;
 8004e1a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e1c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e20:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e22:	f7fd ffa9 	bl	8002d78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_LED_Pin|EN_US_Pin|EN_GPRS_Pin|EN_GPS_Pin 
 8004e26:	239f      	movs	r3, #159	; 0x9f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e28:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_LED_Pin|EN_US_Pin|EN_GPRS_Pin|EN_GPS_Pin 
 8004e2a:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2c:	a905      	add	r1, sp, #20
 8004e2e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_LED_Pin|EN_US_Pin|EN_GPRS_Pin|EN_GPS_Pin 
 8004e30:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e32:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e36:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e38:	f7fd ff9e 	bl	8002d78 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e3e:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e40:	4333      	orrs	r3, r6
 8004e42:	632b      	str	r3, [r5, #48]	; 0x30
 8004e44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e46:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e48:	4033      	ands	r3, r6
 8004e4a:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e4c:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e4e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e50:	f7fd fda8 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e54:	2009      	movs	r0, #9
 8004e56:	f7fd fddf 	bl	8002a18 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	0021      	movs	r1, r4
 8004e5e:	a805      	add	r0, sp, #20
 8004e60:	f000 fca3 	bl	80057aa <memset>
  hadc.Instance = ADC1;
 8004e64:	4d5b      	ldr	r5, [pc, #364]	; (8004fd4 <main+0x2a8>)
 8004e66:	4b5c      	ldr	r3, [pc, #368]	; (8004fd8 <main+0x2ac>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004e68:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8004e6a:	602b      	str	r3, [r5, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004e6c:	23c0      	movs	r3, #192	; 0xc0
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	606b      	str	r3, [r5, #4]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004e72:	19ab      	adds	r3, r5, r6
 8004e74:	77dc      	strb	r4, [r3, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004e76:	1cab      	adds	r3, r5, #2
 8004e78:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e7a:	23c2      	movs	r3, #194	; 0xc2
 8004e7c:	33ff      	adds	r3, #255	; 0xff
 8004e7e:	626b      	str	r3, [r5, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004e80:	002b      	movs	r3, r5
 8004e82:	332c      	adds	r3, #44	; 0x2c
 8004e84:	701c      	strb	r4, [r3, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e86:	2304      	movs	r3, #4
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004e88:	612e      	str	r6, [r5, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e8a:	616b      	str	r3, [r5, #20]
  hadc.Init.OversamplingMode = DISABLE;
 8004e8c:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004e8e:	60ac      	str	r4, [r5, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004e90:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e92:	60ec      	str	r4, [r5, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e94:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004e96:	632c      	str	r4, [r5, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004e98:	61ac      	str	r4, [r5, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004e9a:	636c      	str	r4, [r5, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004e9c:	61ec      	str	r4, [r5, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004e9e:	f7fd f9a7 	bl	80021f0 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8004ea2:	4b4e      	ldr	r3, [pc, #312]	; (8004fdc <main+0x2b0>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ea4:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_4;
 8004ea6:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004ea8:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004eaa:	0028      	movs	r0, r5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004eac:	015b      	lsls	r3, r3, #5
 8004eae:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004eb0:	f7fd fcac 	bl	800280c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 8004eb4:	4b4a      	ldr	r3, [pc, #296]	; (8004fe0 <main+0x2b4>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004eb6:	a905      	add	r1, sp, #20
 8004eb8:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8004eba:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ebc:	f7fd fca6 	bl	800280c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004ec0:	4b48      	ldr	r3, [pc, #288]	; (8004fe4 <main+0x2b8>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ec2:	a905      	add	r1, sp, #20
 8004ec4:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004ec6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ec8:	f7fd fca0 	bl	800280c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start_DMA(&hadc, value, 3);
 8004ecc:	003a      	movs	r2, r7
 8004ece:	4946      	ldr	r1, [pc, #280]	; (8004fe8 <main+0x2bc>)
 8004ed0:	0028      	movs	r0, r5
 8004ed2:	f7fd fb5d 	bl	8002590 <HAL_ADC_Start_DMA>
  hi2c1.Instance = I2C1;
 8004ed6:	4d45      	ldr	r5, [pc, #276]	; (8004fec <main+0x2c0>)
 8004ed8:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <main+0x2c4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004eda:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8004edc:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00000708;
 8004ede:	23e1      	movs	r3, #225	; 0xe1
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ee4:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8004ee6:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ee8:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004eea:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004eec:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004eee:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ef0:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.BaudRate = 9600;
 8004ef2:	2696      	movs	r6, #150	; 0x96
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ef4:	f7fe f8b8 	bl	8003068 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ef8:	0021      	movs	r1, r4
 8004efa:	0028      	movs	r0, r5
 8004efc:	f7fe f964 	bl	80031c8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004f00:	0028      	movs	r0, r5
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004f02:	250c      	movs	r5, #12
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004f04:	0021      	movs	r1, r4
 8004f06:	f7fe f9a5 	bl	8003254 <HAL_I2CEx_ConfigDigitalFilter>
  hlpuart1.Instance = LPUART1;
 8004f0a:	483a      	ldr	r0, [pc, #232]	; (8004ff4 <main+0x2c8>)
 8004f0c:	4b3a      	ldr	r3, [pc, #232]	; (8004ff8 <main+0x2cc>)
  hlpuart1.Init.BaudRate = 9600;
 8004f0e:	01b6      	lsls	r6, r6, #6
  hlpuart1.Instance = LPUART1;
 8004f10:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 8004f12:	6046      	str	r6, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f14:	6084      	str	r4, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004f16:	60c4      	str	r4, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004f18:	6104      	str	r4, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004f1a:	6145      	str	r5, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f1c:	6184      	str	r4, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f1e:	6204      	str	r4, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f20:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004f22:	f7ff fdc5 	bl	8004ab0 <HAL_UART_Init>
  huart1.Instance = USART1;
 8004f26:	4835      	ldr	r0, [pc, #212]	; (8004ffc <main+0x2d0>)
 8004f28:	4b35      	ldr	r3, [pc, #212]	; (8005000 <main+0x2d4>)
  huart1.Init.BaudRate = 9600;
 8004f2a:	6046      	str	r6, [r0, #4]
  huart1.Instance = USART1;
 8004f2c:	6003      	str	r3, [r0, #0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f2e:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f30:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f32:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f34:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f36:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f38:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f3a:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f3c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f3e:	f7ff fdb7 	bl	8004ab0 <HAL_UART_Init>
  huart2.Instance = USART2;
 8004f42:	4830      	ldr	r0, [pc, #192]	; (8005004 <main+0x2d8>)
 8004f44:	4b30      	ldr	r3, [pc, #192]	; (8005008 <main+0x2dc>)
  huart2.Init.BaudRate = 9600;
 8004f46:	6046      	str	r6, [r0, #4]
  huart2.Instance = USART2;
 8004f48:	6003      	str	r3, [r0, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f4a:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f4c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f4e:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f50:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f52:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f54:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f56:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f58:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f5a:	f7ff fda9 	bl	8004ab0 <HAL_UART_Init>
  huart4.Instance = USART4;
 8004f5e:	482b      	ldr	r0, [pc, #172]	; (800500c <main+0x2e0>)
 8004f60:	4b2b      	ldr	r3, [pc, #172]	; (8005010 <main+0x2e4>)
  huart4.Init.BaudRate = 9600;
 8004f62:	6046      	str	r6, [r0, #4]
  huart4.Instance = USART4;
 8004f64:	6003      	str	r3, [r0, #0]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004f66:	6084      	str	r4, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004f68:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004f6a:	6104      	str	r4, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004f6c:	6145      	str	r5, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f6e:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f70:	61c4      	str	r4, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f72:	6204      	str	r4, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f74:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004f76:	f7ff fd9b 	bl	8004ab0 <HAL_UART_Init>
  huart5.Instance = USART5;
 8004f7a:	4826      	ldr	r0, [pc, #152]	; (8005014 <main+0x2e8>)
 8004f7c:	4b26      	ldr	r3, [pc, #152]	; (8005018 <main+0x2ec>)
  huart5.Init.BaudRate = 9600;
 8004f7e:	6046      	str	r6, [r0, #4]
  huart5.Instance = USART5;
 8004f80:	6003      	str	r3, [r0, #0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004f82:	6084      	str	r4, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004f84:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004f86:	6104      	str	r4, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004f88:	6145      	str	r5, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f8a:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f8c:	61c4      	str	r4, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f8e:	6204      	str	r4, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f90:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004f92:	f7ff fd8d 	bl	8004ab0 <HAL_UART_Init>
	blink(5);
 8004f96:	2005      	movs	r0, #5
 8004f98:	f7ff fe32 	bl	8004c00 <blink>
	fn_fprint("START PROGRAM\r\n");
 8004f9c:	481f      	ldr	r0, [pc, #124]	; (800501c <main+0x2f0>)
 8004f9e:	f7ff fe4b 	bl	8004c38 <fn_fprint>
	fn_get_stm32_temperature();
 8004fa2:	f7ff fe9f 	bl	8004ce4 <fn_get_stm32_temperature>
	fn_get_stm32_volts();
 8004fa6:	f7ff feaf 	bl	8004d08 <fn_get_stm32_volts>
	fn_info_sigfox();
 8004faa:	f000 f95f 	bl	800526c <fn_info_sigfox>
		blink(50);
 8004fae:	2032      	movs	r0, #50	; 0x32
 8004fb0:	f7ff fe26 	bl	8004c00 <blink>
 8004fb4:	e7fb      	b.n	8004fae <main+0x282>
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	50000400 	.word	0x50000400
 8004fc0:	50000800 	.word	0x50000800
 8004fc4:	50001c00 	.word	0x50001c00
 8004fc8:	00003003 	.word	0x00003003
 8004fcc:	10110000 	.word	0x10110000
 8004fd0:	0000c020 	.word	0x0000c020
 8004fd4:	20000570 	.word	0x20000570
 8004fd8:	40012400 	.word	0x40012400
 8004fdc:	10000010 	.word	0x10000010
 8004fe0:	14000020 	.word	0x14000020
 8004fe4:	48040000 	.word	0x48040000
 8004fe8:	20000350 	.word	0x20000350
 8004fec:	2000035c 	.word	0x2000035c
 8004ff0:	40005400 	.word	0x40005400
 8004ff4:	200003a8 	.word	0x200003a8
 8004ff8:	40004800 	.word	0x40004800
 8004ffc:	200002b4 	.word	0x200002b4
 8005000:	40013800 	.word	0x40013800
 8005004:	200004a8 	.word	0x200004a8
 8005008:	40004400 	.word	0x40004400
 800500c:	20000428 	.word	0x20000428
 8005010:	40004c00 	.word	0x40004c00
 8005014:	20000230 	.word	0x20000230
 8005018:	40005000 	.word	0x40005000
 800501c:	08005c94 	.word	0x08005c94

08005020 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005020:	4770      	bx	lr

08005022 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005022:	4770      	bx	lr

08005024 <fn_init_sigfox>:
/*
 fn_init_sigfox
 funcao de configuracoes para a rede sigfox na regiao 2 e 4 alem da possibilidade de utilizar na dongle com downlink
 parta tal deve-se definir a DONGLE_KEY
 */
void fn_init_sigfox() {
 8005024:	b513      	push	{r0, r1, r4, lr}
	char ok[4];
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$P=0\r\n", 8, 100);
 8005026:	4c26      	ldr	r4, [pc, #152]	; (80050c0 <fn_init_sigfox+0x9c>)
 8005028:	2364      	movs	r3, #100	; 0x64
 800502a:	2208      	movs	r2, #8
 800502c:	4925      	ldr	r1, [pc, #148]	; (80050c4 <fn_init_sigfox+0xa0>)
 800502e:	0020      	movs	r0, r4
 8005030:	f7ff fc20 	bl	8004874 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8005034:	a901      	add	r1, sp, #4
 8005036:	2364      	movs	r3, #100	; 0x64
 8005038:	2204      	movs	r2, #4
 800503a:	0020      	movs	r0, r4
 800503c:	f7ff fc84 	bl	8004948 <HAL_UART_Receive>
	HAL_Delay(10);
 8005040:	200a      	movs	r0, #10
 8005042:	f7fd f877 	bl	8002134 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$DR=905200000\r\n", 17, 100);
 8005046:	2364      	movs	r3, #100	; 0x64
 8005048:	2211      	movs	r2, #17
 800504a:	491f      	ldr	r1, [pc, #124]	; (80050c8 <fn_init_sigfox+0xa4>)
 800504c:	0020      	movs	r0, r4
 800504e:	f7ff fc11 	bl	8004874 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8005052:	a901      	add	r1, sp, #4
 8005054:	2364      	movs	r3, #100	; 0x64
 8005056:	2204      	movs	r2, #4
 8005058:	0020      	movs	r0, r4
 800505a:	f7ff fc75 	bl	8004948 <HAL_UART_Receive>
	HAL_Delay(10);
 800505e:	200a      	movs	r0, #10
 8005060:	f7fd f868 	bl	8002134 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$IF=902200000\r\n", 17, 100);
 8005064:	2364      	movs	r3, #100	; 0x64
 8005066:	2211      	movs	r2, #17
 8005068:	4918      	ldr	r1, [pc, #96]	; (80050cc <fn_init_sigfox+0xa8>)
 800506a:	0020      	movs	r0, r4
 800506c:	f7ff fc02 	bl	8004874 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8005070:	a901      	add	r1, sp, #4
 8005072:	2364      	movs	r3, #100	; 0x64
 8005074:	2204      	movs	r2, #4
 8005076:	0020      	movs	r0, r4
 8005078:	f7ff fc66 	bl	8004948 <HAL_UART_Receive>
	HAL_Delay(10);
 800507c:	200a      	movs	r0, #10
 800507e:	f7fd f859 	bl	8002134 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$WR\r\n", 7, 100);
 8005082:	2364      	movs	r3, #100	; 0x64
 8005084:	2207      	movs	r2, #7
 8005086:	4912      	ldr	r1, [pc, #72]	; (80050d0 <fn_init_sigfox+0xac>)
 8005088:	0020      	movs	r0, r4
 800508a:	f7ff fbf3 	bl	8004874 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 800508e:	a901      	add	r1, sp, #4
 8005090:	2364      	movs	r3, #100	; 0x64
 8005092:	2204      	movs	r2, #4
 8005094:	0020      	movs	r0, r4
 8005096:	f7ff fc57 	bl	8004948 <HAL_UART_Receive>
	HAL_Delay(10);
 800509a:	200a      	movs	r0, #10
 800509c:	f7fd f84a 	bl	8002134 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$RC\r\n", 7, 100);
 80050a0:	2364      	movs	r3, #100	; 0x64
 80050a2:	2207      	movs	r2, #7
 80050a4:	490b      	ldr	r1, [pc, #44]	; (80050d4 <fn_init_sigfox+0xb0>)
 80050a6:	0020      	movs	r0, r4
 80050a8:	f7ff fbe4 	bl	8004874 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 80050ac:	2364      	movs	r3, #100	; 0x64
 80050ae:	2204      	movs	r2, #4
 80050b0:	a901      	add	r1, sp, #4
 80050b2:	0020      	movs	r0, r4
 80050b4:	f7ff fc48 	bl	8004948 <HAL_UART_Receive>
	HAL_Delay(10);
 80050b8:	200a      	movs	r0, #10
 80050ba:	f7fd f83b 	bl	8002134 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)"ATS410=1\r\n",11);//ATS410=1 private key ; ATS410=0 public key
	//HAL_UART_Receive_IT(&huart1,(uint8_t*)ok,4,10);
	HAL_Delay(500);
#endif

}
 80050be:	bd13      	pop	{r0, r1, r4, pc}
 80050c0:	200002b4 	.word	0x200002b4
 80050c4:	08005ce9 	.word	0x08005ce9
 80050c8:	08005cf2 	.word	0x08005cf2
 80050cc:	08005d04 	.word	0x08005d04
 80050d0:	08005d16 	.word	0x08005d16
 80050d4:	08005d1e 	.word	0x08005d1e

080050d8 <fn_get_id_sigfox>:

//pegar id
void fn_get_id_sigfox() {
 80050d8:	b530      	push	{r4, r5, lr}
 80050da:	b085      	sub	sp, #20

	char command[9] = "AT$I=10\r\n";
 80050dc:	2209      	movs	r2, #9
 80050de:	4910      	ldr	r1, [pc, #64]	; (8005120 <fn_get_id_sigfox+0x48>)
 80050e0:	a801      	add	r0, sp, #4
 80050e2:	f000 fb59 	bl	8005798 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 9);
 80050e6:	4d0f      	ldr	r5, [pc, #60]	; (8005124 <fn_get_id_sigfox+0x4c>)
 80050e8:	2209      	movs	r2, #9
 80050ea:	a901      	add	r1, sp, #4
 80050ec:	0028      	movs	r0, r5
 80050ee:	f7fe ff67 	bl	8003fc0 <HAL_UART_Transmit_IT>
	while (UartReady != SET) {
 80050f2:	4c0d      	ldr	r4, [pc, #52]	; (8005128 <fn_get_id_sigfox+0x50>)
 80050f4:	7823      	ldrb	r3, [r4, #0]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d1fc      	bne.n	80050f4 <fn_get_id_sigfox+0x1c>
	}
	//Reset transmission flag
	UartReady = RESET;
 80050fa:	2300      	movs	r3, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.id, 10);
 80050fc:	220a      	movs	r2, #10
 80050fe:	490b      	ldr	r1, [pc, #44]	; (800512c <fn_get_id_sigfox+0x54>)
 8005100:	0028      	movs	r0, r5
	UartReady = RESET;
 8005102:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.id, 10);
 8005104:	f7fe ff9a 	bl	800403c <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 8005108:	7823      	ldrb	r3, [r4, #0]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d103      	bne.n	8005116 <fn_get_id_sigfox+0x3e>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	7023      	strb	r3, [r4, #0]

}
 8005112:	b005      	add	sp, #20
 8005114:	bd30      	pop	{r4, r5, pc}
		blink(2);
 8005116:	2002      	movs	r0, #2
 8005118:	f7ff fd72 	bl	8004c00 <blink>
 800511c:	e7f4      	b.n	8005108 <fn_get_id_sigfox+0x30>
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	0800595c 	.word	0x0800595c
 8005124:	200002b4 	.word	0x200002b4
 8005128:	2000022c 	.word	0x2000022c
 800512c:	200001f4 	.word	0x200001f4

08005130 <fn_get_pac_sigfox>:

//pegar pac
void fn_get_pac_sigfox() {
 8005130:	b530      	push	{r4, r5, lr}

	char command[9] = "AT$I=11\r\n";
 8005132:	4911      	ldr	r1, [pc, #68]	; (8005178 <fn_get_pac_sigfox+0x48>)
void fn_get_pac_sigfox() {
 8005134:	b085      	sub	sp, #20
	char command[9] = "AT$I=11\r\n";
 8005136:	2209      	movs	r2, #9
 8005138:	310a      	adds	r1, #10
 800513a:	a801      	add	r0, sp, #4
 800513c:	f000 fb2c 	bl	8005798 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 9);
 8005140:	4d0e      	ldr	r5, [pc, #56]	; (800517c <fn_get_pac_sigfox+0x4c>)
 8005142:	2209      	movs	r2, #9
 8005144:	a901      	add	r1, sp, #4
 8005146:	0028      	movs	r0, r5
 8005148:	f7fe ff3a 	bl	8003fc0 <HAL_UART_Transmit_IT>
	while (UartReady != SET) {
 800514c:	4c0c      	ldr	r4, [pc, #48]	; (8005180 <fn_get_pac_sigfox+0x50>)
 800514e:	7823      	ldrb	r3, [r4, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d1fc      	bne.n	800514e <fn_get_pac_sigfox+0x1e>
	}
	//Reset transmission flag
	UartReady = RESET;
 8005154:	2300      	movs	r3, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.pac, 18);
 8005156:	2212      	movs	r2, #18
 8005158:	490a      	ldr	r1, [pc, #40]	; (8005184 <fn_get_pac_sigfox+0x54>)
 800515a:	0028      	movs	r0, r5
	UartReady = RESET;
 800515c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.pac, 18);
 800515e:	f7fe ff6d 	bl	800403c <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 8005162:	7823      	ldrb	r3, [r4, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d103      	bne.n	8005170 <fn_get_pac_sigfox+0x40>
		blink(2);
	}
	//Reset transmission flag8
	UartReady = RESET;
 8005168:	2300      	movs	r3, #0
 800516a:	7023      	strb	r3, [r4, #0]
}
 800516c:	b005      	add	sp, #20
 800516e:	bd30      	pop	{r4, r5, pc}
		blink(2);
 8005170:	2002      	movs	r0, #2
 8005172:	f7ff fd45 	bl	8004c00 <blink>
 8005176:	e7f4      	b.n	8005162 <fn_get_pac_sigfox+0x32>
 8005178:	0800595c 	.word	0x0800595c
 800517c:	200002b4 	.word	0x200002b4
 8005180:	2000022c 	.word	0x2000022c
 8005184:	200001fe 	.word	0x200001fe

08005188 <fn_at_sigfox>:

//dumy command
void fn_at_sigfox() {
 8005188:	b513      	push	{r0, r1, r4, lr}

	char command[4] = "AT\r\n";
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <fn_at_sigfox+0x24>)
	//int at = 0;
	HAL_UART_Transmit(&huart1, (uint8_t*) command, 4, 100);
 800518c:	4c08      	ldr	r4, [pc, #32]	; (80051b0 <fn_at_sigfox+0x28>)
	char command[4] = "AT\r\n";
 800518e:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) command, 4, 100);
 8005190:	a901      	add	r1, sp, #4
 8005192:	2364      	movs	r3, #100	; 0x64
 8005194:	2204      	movs	r2, #4
 8005196:	0020      	movs	r0, r4
 8005198:	f7ff fb6c 	bl	8004874 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) st_sigfox_parameters.at, 4, 100);
 800519c:	2364      	movs	r3, #100	; 0x64
 800519e:	2204      	movs	r2, #4
 80051a0:	4904      	ldr	r1, [pc, #16]	; (80051b4 <fn_at_sigfox+0x2c>)
 80051a2:	0020      	movs	r0, r4
 80051a4:	f7ff fbd0 	bl	8004948 <HAL_UART_Receive>
	/*		if (st_sigfox_parameters.at[0] == 79
	 && st_sigfox_parameters.at[1] == 85) {
	 at = 1;
	 }
	 return at;*/
}
 80051a8:	bd13      	pop	{r0, r1, r4, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	0a0d5441 	.word	0x0a0d5441
 80051b0:	200002b4 	.word	0x200002b4
 80051b4:	2000021d 	.word	0x2000021d

080051b8 <fn_get_volt_sigfox>:

//pegar a tensao no modulo sigfox
void fn_get_volt_sigfox() {
 80051b8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	char command[7] = "AT$V?\r\n";
 80051ba:	4911      	ldr	r1, [pc, #68]	; (8005200 <fn_get_volt_sigfox+0x48>)
 80051bc:	2207      	movs	r2, #7
 80051be:	3114      	adds	r1, #20
 80051c0:	4668      	mov	r0, sp
 80051c2:	f000 fae9 	bl	8005798 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 7);
 80051c6:	4d0f      	ldr	r5, [pc, #60]	; (8005204 <fn_get_volt_sigfox+0x4c>)
 80051c8:	2207      	movs	r2, #7
 80051ca:	4669      	mov	r1, sp
 80051cc:	0028      	movs	r0, r5
 80051ce:	f7fe fef7 	bl	8003fc0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.volts, 6);
 80051d2:	4c0d      	ldr	r4, [pc, #52]	; (8005208 <fn_get_volt_sigfox+0x50>)
 80051d4:	2206      	movs	r2, #6
 80051d6:	0021      	movs	r1, r4
 80051d8:	0028      	movs	r0, r5
 80051da:	f7fe ff2f 	bl	800403c <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 80051de:	4b0b      	ldr	r3, [pc, #44]	; (800520c <fn_get_volt_sigfox+0x54>)
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	2a01      	cmp	r2, #1
 80051e4:	d107      	bne.n	80051f6 <fn_get_volt_sigfox+0x3e>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 80051e6:	2200      	movs	r2, #0

	int_volt_sigfox = atoi(st_sigfox_parameters.volts);
 80051e8:	0020      	movs	r0, r4
	UartReady = RESET;
 80051ea:	701a      	strb	r2, [r3, #0]
	int_volt_sigfox = atoi(st_sigfox_parameters.volts);
 80051ec:	f000 faa9 	bl	8005742 <atoi>
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <fn_get_volt_sigfox+0x58>)
 80051f2:	6018      	str	r0, [r3, #0]
}
 80051f4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		blink(2);
 80051f6:	2002      	movs	r0, #2
 80051f8:	f7ff fd02 	bl	8004c00 <blink>
 80051fc:	e7ef      	b.n	80051de <fn_get_volt_sigfox+0x26>
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	0800595c 	.word	0x0800595c
 8005204:	200002b4 	.word	0x200002b4
 8005208:	20000217 	.word	0x20000217
 800520c:	2000022c 	.word	0x2000022c
 8005210:	20000334 	.word	0x20000334

08005214 <fn_get_temperature_sigfox>:

//pegar a temperatura no mudulo sigfox
void fn_get_temperature_sigfox() {
 8005214:	b537      	push	{r0, r1, r2, r4, r5, lr}

	char command[8] = "AT$T?\r\n";
 8005216:	2208      	movs	r2, #8
 8005218:	490f      	ldr	r1, [pc, #60]	; (8005258 <fn_get_temperature_sigfox+0x44>)
 800521a:	4668      	mov	r0, sp
 800521c:	f000 fabc 	bl	8005798 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 8);
 8005220:	4d0e      	ldr	r5, [pc, #56]	; (800525c <fn_get_temperature_sigfox+0x48>)
 8005222:	2208      	movs	r2, #8
 8005224:	4669      	mov	r1, sp
 8005226:	0028      	movs	r0, r5
 8005228:	f7fe feca 	bl	8003fc0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.temperature,
 800522c:	4c0c      	ldr	r4, [pc, #48]	; (8005260 <fn_get_temperature_sigfox+0x4c>)
 800522e:	2207      	movs	r2, #7
 8005230:	0021      	movs	r1, r4
 8005232:	0028      	movs	r0, r5
 8005234:	f7fe ff02 	bl	800403c <HAL_UART_Receive_IT>
			7);
	while (UartReady != SET) {
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <fn_get_temperature_sigfox+0x50>)
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	2a01      	cmp	r2, #1
 800523e:	d107      	bne.n	8005250 <fn_get_temperature_sigfox+0x3c>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 8005240:	2200      	movs	r2, #0

	int_temp_sigfox = atoi(st_sigfox_parameters.temperature);
 8005242:	0020      	movs	r0, r4
	UartReady = RESET;
 8005244:	701a      	strb	r2, [r3, #0]
	int_temp_sigfox = atoi(st_sigfox_parameters.temperature);
 8005246:	f000 fa7c 	bl	8005742 <atoi>
 800524a:	4b07      	ldr	r3, [pc, #28]	; (8005268 <fn_get_temperature_sigfox+0x54>)
 800524c:	6018      	str	r0, [r3, #0]

}
 800524e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		blink(2);
 8005250:	2002      	movs	r0, #2
 8005252:	f7ff fcd5 	bl	8004c00 <blink>
 8005256:	e7ef      	b.n	8005238 <fn_get_temperature_sigfox+0x24>
 8005258:	08005ca4 	.word	0x08005ca4
 800525c:	200002b4 	.word	0x200002b4
 8005260:	20000210 	.word	0x20000210
 8005264:	2000022c 	.word	0x2000022c
 8005268:	200002b0 	.word	0x200002b0

0800526c <fn_info_sigfox>:

	HAL_Delay(1000);
	SIGFOX_OFF
}

void fn_info_sigfox() {
 800526c:	b570      	push	{r4, r5, r6, lr}
	SIGFOX_ON
 800526e:	2580      	movs	r5, #128	; 0x80
 8005270:	24a0      	movs	r4, #160	; 0xa0
 8005272:	022d      	lsls	r5, r5, #8
 8005274:	05e4      	lsls	r4, r4, #23
 8005276:	0029      	movs	r1, r5
 8005278:	0020      	movs	r0, r4
 800527a:	2201      	movs	r2, #1
 800527c:	f7fd feb2 	bl	8002fe4 <HAL_GPIO_WritePin>
	SIGFOX_RESET_ON
 8005280:	0029      	movs	r1, r5
 8005282:	2200      	movs	r2, #0
 8005284:	0020      	movs	r0, r4
 8005286:	f7fd fead 	bl	8002fe4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800528a:	200a      	movs	r0, #10
 800528c:	f7fc ff52 	bl	8002134 <HAL_Delay>
	SIGFOX_RESET_OFF
 8005290:	0029      	movs	r1, r5
 8005292:	2201      	movs	r2, #1
 8005294:	0020      	movs	r0, r4
 8005296:	f7fd fea5 	bl	8002fe4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800529a:	20fa      	movs	r0, #250	; 0xfa
 800529c:	0080      	lsls	r0, r0, #2
 800529e:	f7fc ff49 	bl	8002134 <HAL_Delay>
	fn_at_sigfox();
 80052a2:	f7ff ff71 	bl	8005188 <fn_at_sigfox>
	HAL_Delay(100);
 80052a6:	2064      	movs	r0, #100	; 0x64
 80052a8:	f7fc ff44 	bl	8002134 <HAL_Delay>
	fn_init_sigfox();
 80052ac:	f7ff feba 	bl	8005024 <fn_init_sigfox>
	HAL_Delay(100);
 80052b0:	2064      	movs	r0, #100	; 0x64
 80052b2:	f7fc ff3f 	bl	8002134 <HAL_Delay>
	fn_get_id_sigfox();
 80052b6:	f7ff ff0f 	bl	80050d8 <fn_get_id_sigfox>
	fn_fprint("SIGFOX ID: ");
 80052ba:	4825      	ldr	r0, [pc, #148]	; (8005350 <fn_info_sigfox+0xe4>)
 80052bc:	f7ff fcbc 	bl	8004c38 <fn_fprint>
	fn_fprint(st_sigfox_parameters.id);
 80052c0:	4824      	ldr	r0, [pc, #144]	; (8005354 <fn_info_sigfox+0xe8>)
 80052c2:	f7ff fcb9 	bl	8004c38 <fn_fprint>
	fn_fprint("\r\n");
 80052c6:	4e24      	ldr	r6, [pc, #144]	; (8005358 <fn_info_sigfox+0xec>)
 80052c8:	0030      	movs	r0, r6
 80052ca:	f7ff fcb5 	bl	8004c38 <fn_fprint>
	HAL_Delay(100);
 80052ce:	2064      	movs	r0, #100	; 0x64
 80052d0:	f7fc ff30 	bl	8002134 <HAL_Delay>
	fn_get_pac_sigfox();
 80052d4:	f7ff ff2c 	bl	8005130 <fn_get_pac_sigfox>
	fn_fprint("SIGFOX PAC: ");
 80052d8:	4820      	ldr	r0, [pc, #128]	; (800535c <fn_info_sigfox+0xf0>)
 80052da:	f7ff fcad 	bl	8004c38 <fn_fprint>
	fn_fprint(st_sigfox_parameters.pac);
 80052de:	4820      	ldr	r0, [pc, #128]	; (8005360 <fn_info_sigfox+0xf4>)
 80052e0:	f7ff fcaa 	bl	8004c38 <fn_fprint>
	fn_fprint("\r\n");
 80052e4:	0030      	movs	r0, r6
 80052e6:	f7ff fca7 	bl	8004c38 <fn_fprint>
	HAL_Delay(100);
 80052ea:	2064      	movs	r0, #100	; 0x64
 80052ec:	f7fc ff22 	bl	8002134 <HAL_Delay>
	fn_get_temperature_sigfox();
 80052f0:	f7ff ff90 	bl	8005214 <fn_get_temperature_sigfox>
	fn_fprint("SIGFOX TEMPERATURE: ");
 80052f4:	481b      	ldr	r0, [pc, #108]	; (8005364 <fn_info_sigfox+0xf8>)
 80052f6:	f7ff fc9f 	bl	8004c38 <fn_fprint>
	fn_fprint(st_sigfox_parameters.temperature);
 80052fa:	481b      	ldr	r0, [pc, #108]	; (8005368 <fn_info_sigfox+0xfc>)
 80052fc:	f7ff fc9c 	bl	8004c38 <fn_fprint>
	fn_fprint("\r\n");
 8005300:	0030      	movs	r0, r6
 8005302:	f7ff fc99 	bl	8004c38 <fn_fprint>
	SIGFOX_RESET_ON
 8005306:	0029      	movs	r1, r5
 8005308:	2200      	movs	r2, #0
 800530a:	0020      	movs	r0, r4
 800530c:	f7fd fe6a 	bl	8002fe4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8005310:	200a      	movs	r0, #10
 8005312:	f7fc ff0f 	bl	8002134 <HAL_Delay>
	SIGFOX_RESET_OFF
 8005316:	0029      	movs	r1, r5
 8005318:	2201      	movs	r2, #1
 800531a:	0020      	movs	r0, r4
 800531c:	f7fd fe62 	bl	8002fe4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005320:	2064      	movs	r0, #100	; 0x64
 8005322:	f7fc ff07 	bl	8002134 <HAL_Delay>
	fn_get_volt_sigfox();
 8005326:	f7ff ff47 	bl	80051b8 <fn_get_volt_sigfox>
	fn_fprint("SIGFOX VOLTS: ");
 800532a:	4810      	ldr	r0, [pc, #64]	; (800536c <fn_info_sigfox+0x100>)
 800532c:	f7ff fc84 	bl	8004c38 <fn_fprint>
	fn_fprint(st_sigfox_parameters.volts);
 8005330:	480f      	ldr	r0, [pc, #60]	; (8005370 <fn_info_sigfox+0x104>)
 8005332:	f7ff fc81 	bl	8004c38 <fn_fprint>
	fn_fprint("\r\n");
 8005336:	0030      	movs	r0, r6
 8005338:	f7ff fc7e 	bl	8004c38 <fn_fprint>
	HAL_Delay(100);
 800533c:	2064      	movs	r0, #100	; 0x64
 800533e:	f7fc fef9 	bl	8002134 <HAL_Delay>
	SIGFOX_OFF
 8005342:	0029      	movs	r1, r5
 8005344:	2200      	movs	r2, #0
 8005346:	0020      	movs	r0, r4
 8005348:	f7fd fe4c 	bl	8002fe4 <HAL_GPIO_WritePin>
}
 800534c:	bd70      	pop	{r4, r5, r6, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	08005cac 	.word	0x08005cac
 8005354:	200001f4 	.word	0x200001f4
 8005358:	08005d13 	.word	0x08005d13
 800535c:	08005cb8 	.word	0x08005cb8
 8005360:	200001fe 	.word	0x200001fe
 8005364:	08005cc5 	.word	0x08005cc5
 8005368:	20000210 	.word	0x20000210
 800536c:	08005cda 	.word	0x08005cda
 8005370:	20000217 	.word	0x20000217

08005374 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005374:	2201      	movs	r2, #1
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_MspInit+0x18>)
 8005378:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800537a:	430a      	orrs	r2, r1
 800537c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005382:	0552      	lsls	r2, r2, #21
 8005384:	430a      	orrs	r2, r1
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005388:	4770      	bx	lr
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	40021000 	.word	0x40021000

08005390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005390:	b530      	push	{r4, r5, lr}
 8005392:	0005      	movs	r5, r0
 8005394:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005396:	2214      	movs	r2, #20
 8005398:	2100      	movs	r1, #0
 800539a:	a801      	add	r0, sp, #4
 800539c:	f000 fa05 	bl	80057aa <memset>
  if(hadc->Instance==ADC1)
 80053a0:	4b1f      	ldr	r3, [pc, #124]	; (8005420 <HAL_ADC_MspInit+0x90>)
 80053a2:	682a      	ldr	r2, [r5, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d138      	bne.n	800541a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <HAL_ADC_MspInit+0x94>)
 80053ac:	0092      	lsls	r2, r2, #2
 80053ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80053b2:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b4:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 80053b6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ba:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053bc:	430a      	orrs	r2, r1
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	400b      	ands	r3, r1
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 80053c8:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ca:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 80053cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053ce:	3b2d      	subs	r3, #45	; 0x2d
 80053d0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d2:	f7fd fcd1 	bl	8002d78 <HAL_GPIO_Init>
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Request = DMA_REQUEST_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80053d6:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80053d8:	4c13      	ldr	r4, [pc, #76]	; (8005428 <HAL_ADC_MspInit+0x98>)
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <HAL_ADC_MspInit+0x9c>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80053dc:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053de:	1892      	adds	r2, r2, r2
 80053e0:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053e2:	2280      	movs	r2, #128	; 0x80
 80053e4:	0112      	lsls	r2, r2, #4
    hdma_adc.Instance = DMA1_Channel1;
 80053e6:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053e8:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80053ea:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80053ec:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80053ee:	0020      	movs	r0, r4
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80053f0:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053f2:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80053f4:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80053f6:	61e2      	str	r2, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80053f8:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80053fa:	f7fd fb39 	bl	8002a70 <HAL_DMA_Init>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d001      	beq.n	8005406 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8005402:	f7ff fe0d 	bl	8005020 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005406:	2200      	movs	r2, #0
 8005408:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800540a:	64ec      	str	r4, [r5, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800540c:	0011      	movs	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800540e:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005410:	f7fd fac8 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005414:	200c      	movs	r0, #12
 8005416:	f7fd faff 	bl	8002a18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800541a:	b007      	add	sp, #28
 800541c:	bd30      	pop	{r4, r5, pc}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	40012400 	.word	0x40012400
 8005424:	40021000 	.word	0x40021000
 8005428:	20000528 	.word	0x20000528
 800542c:	40020008 	.word	0x40020008

08005430 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005430:	b510      	push	{r4, lr}
 8005432:	0004      	movs	r4, r0
 8005434:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005436:	2214      	movs	r2, #20
 8005438:	2100      	movs	r1, #0
 800543a:	a801      	add	r0, sp, #4
 800543c:	f000 f9b5 	bl	80057aa <memset>
  if(hi2c->Instance==I2C1)
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_I2C_MspInit+0x58>)
 8005442:	6822      	ldr	r2, [r4, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d11c      	bne.n	8005482 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005448:	2102      	movs	r1, #2
 800544a:	4c10      	ldr	r4, [pc, #64]	; (800548c <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800544c:	4810      	ldr	r0, [pc, #64]	; (8005490 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800544e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005450:	430a      	orrs	r2, r1
 8005452:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005454:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005456:	400b      	ands	r3, r1
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800545c:	23c0      	movs	r3, #192	; 0xc0
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005462:	2312      	movs	r3, #18
 8005464:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005466:	3b11      	subs	r3, #17
 8005468:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800546a:	185b      	adds	r3, r3, r1
 800546c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800546e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005470:	3301      	adds	r3, #1
 8005472:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005474:	f7fd fc80 	bl	8002d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800547c:	039b      	lsls	r3, r3, #14
 800547e:	4313      	orrs	r3, r2
 8005480:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005482:	b006      	add	sp, #24
 8005484:	bd10      	pop	{r4, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	40005400 	.word	0x40005400
 800548c:	40021000 	.word	0x40021000
 8005490:	50000400 	.word	0x50000400

08005494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005494:	b510      	push	{r4, lr}
 8005496:	0004      	movs	r4, r0
 8005498:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549a:	2214      	movs	r2, #20
 800549c:	2100      	movs	r1, #0
 800549e:	a805      	add	r0, sp, #20
 80054a0:	f000 f983 	bl	80057aa <memset>
  if(huart->Instance==LPUART1)
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	4a56      	ldr	r2, [pc, #344]	; (8005600 <HAL_UART_MspInit+0x16c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d123      	bne.n	80054f4 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80054ac:	2280      	movs	r2, #128	; 0x80
 80054ae:	4b55      	ldr	r3, [pc, #340]	; (8005604 <HAL_UART_MspInit+0x170>)
 80054b0:	02d2      	lsls	r2, r2, #11
 80054b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b4:	4854      	ldr	r0, [pc, #336]	; (8005608 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80054b6:	430a      	orrs	r2, r1
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ba:	2202      	movs	r2, #2
 80054bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054be:	4311      	orrs	r1, r2
 80054c0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c4:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054c6:	4013      	ands	r3, r2
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
 80054cc:	23c0      	movs	r3, #192	; 0xc0
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d2:	2303      	movs	r3, #3
 80054d4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 80054d6:	3301      	adds	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 80054da:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054dc:	f7fd fc4c 	bl	8002d78 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 80054e0:	2200      	movs	r2, #0
 80054e2:	201d      	movs	r0, #29
 80054e4:	0011      	movs	r1, r2
 80054e6:	f7fd fa5d 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 80054ea:	201d      	movs	r0, #29
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART5 interrupt Init */
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80054ec:	f7fd fa94 	bl	8002a18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80054f0:	b00a      	add	sp, #40	; 0x28
 80054f2:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 80054f4:	4a45      	ldr	r2, [pc, #276]	; (800560c <HAL_UART_MspInit+0x178>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d11d      	bne.n	8005536 <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80054fa:	2280      	movs	r2, #128	; 0x80
 80054fc:	4b41      	ldr	r3, [pc, #260]	; (8005604 <HAL_UART_MspInit+0x170>)
 80054fe:	01d2      	lsls	r2, r2, #7
 8005500:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005502:	4841      	ldr	r0, [pc, #260]	; (8005608 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005504:	430a      	orrs	r2, r1
 8005506:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005508:	2202      	movs	r2, #2
 800550a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800550c:	4311      	orrs	r1, r2
 800550e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005512:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005514:	4013      	ands	r3, r2
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SFOX_RX_Pin|SFOX_TX_Pin;
 800551a:	23c0      	movs	r3, #192	; 0xc0
 800551c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800551e:	3bbd      	subs	r3, #189	; 0xbd
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005520:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005522:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005524:	f7fd fc28 	bl	8002d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005528:	2200      	movs	r2, #0
 800552a:	201b      	movs	r0, #27
 800552c:	0011      	movs	r1, r2
 800552e:	f7fd fa39 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005532:	201b      	movs	r0, #27
 8005534:	e7da      	b.n	80054ec <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART2)
 8005536:	4a36      	ldr	r2, [pc, #216]	; (8005610 <HAL_UART_MspInit+0x17c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d121      	bne.n	8005580 <HAL_UART_MspInit+0xec>
    __HAL_RCC_USART2_CLK_ENABLE();
 800553c:	2280      	movs	r2, #128	; 0x80
 800553e:	4b31      	ldr	r3, [pc, #196]	; (8005604 <HAL_UART_MspInit+0x170>)
 8005540:	0292      	lsls	r2, r2, #10
 8005542:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005544:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8005546:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005548:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005550:	430a      	orrs	r2, r1
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	400b      	ands	r3, r1
 8005558:	9302      	str	r3, [sp, #8]
 800555a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = US_RX_Pin|US_TX_Pin;
 800555c:	230c      	movs	r3, #12
 800555e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005560:	3b0a      	subs	r3, #10
 8005562:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005564:	185b      	adds	r3, r3, r1
 8005566:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8005568:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800556a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800556c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800556e:	f7fd fc03 	bl	8002d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005572:	2200      	movs	r2, #0
 8005574:	201c      	movs	r0, #28
 8005576:	0011      	movs	r1, r2
 8005578:	f7fd fa14 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800557c:	201c      	movs	r0, #28
 800557e:	e7b5      	b.n	80054ec <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART4)
 8005580:	4a24      	ldr	r2, [pc, #144]	; (8005614 <HAL_UART_MspInit+0x180>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d120      	bne.n	80055c8 <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART4_CLK_ENABLE();
 8005586:	2280      	movs	r2, #128	; 0x80
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <HAL_UART_MspInit+0x170>)
 800558a:	0312      	lsls	r2, r2, #12
 800558c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART4_CLK_ENABLE();
 8005590:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005592:	2101      	movs	r1, #1
    __HAL_RCC_USART4_CLK_ENABLE();
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005598:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800559a:	430a      	orrs	r2, r1
 800559c:	62da      	str	r2, [r3, #44]	; 0x2c
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a0:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a2:	400b      	ands	r3, r1
 80055a4:	9303      	str	r3, [sp, #12]
 80055a6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 80055a8:	2303      	movs	r3, #3
 80055aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80055ae:	18db      	adds	r3, r3, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80055b2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b4:	a905      	add	r1, sp, #20
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055b6:	f7fd fbdf 	bl	8002d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80055ba:	2200      	movs	r2, #0
 80055bc:	200e      	movs	r0, #14
 80055be:	0011      	movs	r1, r2
 80055c0:	f7fd f9f0 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80055c4:	200e      	movs	r0, #14
 80055c6:	e791      	b.n	80054ec <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART5)
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <HAL_UART_MspInit+0x184>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d000      	beq.n	80055d0 <HAL_UART_MspInit+0x13c>
 80055ce:	e78f      	b.n	80054f0 <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART5_CLK_ENABLE();
 80055d0:	2280      	movs	r2, #128	; 0x80
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <HAL_UART_MspInit+0x170>)
 80055d4:	0352      	lsls	r2, r2, #13
 80055d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d8:	480b      	ldr	r0, [pc, #44]	; (8005608 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART5_CLK_ENABLE();
 80055da:	430a      	orrs	r2, r1
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055de:	2202      	movs	r2, #2
 80055e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055e2:	4311      	orrs	r1, r2
 80055e4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ea:	4013      	ands	r3, r2
 80055ec:	9304      	str	r3, [sp, #16]
 80055ee:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPRS_RX_Pin|GPRS_TX_Pin;
 80055f0:	2318      	movs	r3, #24
 80055f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f4:	3b15      	subs	r3, #21
 80055f6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80055f8:	3303      	adds	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055fa:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80055fc:	9309      	str	r3, [sp, #36]	; 0x24
 80055fe:	e7da      	b.n	80055b6 <HAL_UART_MspInit+0x122>
 8005600:	40004800 	.word	0x40004800
 8005604:	40021000 	.word	0x40021000
 8005608:	50000400 	.word	0x50000400
 800560c:	40013800 	.word	0x40013800
 8005610:	40004400 	.word	0x40004400
 8005614:	40004c00 	.word	0x40004c00
 8005618:	40005000 	.word	0x40005000

0800561c <NMI_Handler>:
 800561c:	4770      	bx	lr

0800561e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800561e:	e7fe      	b.n	800561e <HardFault_Handler>

08005620 <SVC_Handler>:
 8005620:	4770      	bx	lr

08005622 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005622:	4770      	bx	lr

08005624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005624:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005626:	f7fc fd77 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800562a:	bd10      	pop	{r4, pc}

0800562c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800562c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800562e:	4802      	ldr	r0, [pc, #8]	; (8005638 <DMA1_Channel1_IRQHandler+0xc>)
 8005630:	f7fd fb57 	bl	8002ce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005634:	bd10      	pop	{r4, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	20000528 	.word	0x20000528

0800563c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800563c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800563e:	4802      	ldr	r0, [pc, #8]	; (8005648 <ADC1_COMP_IRQHandler+0xc>)
 8005640:	f7fd f84e 	bl	80026e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8005644:	bd10      	pop	{r4, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	20000570 	.word	0x20000570

0800564c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800564c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800564e:	4803      	ldr	r0, [pc, #12]	; (800565c <USART4_5_IRQHandler+0x10>)
 8005650:	f7fe fdb8 	bl	80041c4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <USART4_5_IRQHandler+0x14>)
 8005656:	f7fe fdb5 	bl	80041c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800565a:	bd10      	pop	{r4, pc}
 800565c:	20000428 	.word	0x20000428
 8005660:	20000230 	.word	0x20000230

08005664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005664:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005666:	4802      	ldr	r0, [pc, #8]	; (8005670 <USART1_IRQHandler+0xc>)
 8005668:	f7fe fdac 	bl	80041c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800566c:	bd10      	pop	{r4, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	200002b4 	.word	0x200002b4

08005674 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005674:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005676:	4802      	ldr	r0, [pc, #8]	; (8005680 <USART2_IRQHandler+0xc>)
 8005678:	f7fe fda4 	bl	80041c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800567c:	bd10      	pop	{r4, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	200004a8 	.word	0x200004a8

08005684 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8005684:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005686:	4802      	ldr	r0, [pc, #8]	; (8005690 <RNG_LPUART1_IRQHandler+0xc>)
 8005688:	f7fe fd9c 	bl	80041c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 800568c:	bd10      	pop	{r4, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	200003a8 	.word	0x200003a8

08005694 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <SystemInit+0x44>)
 8005698:	0052      	lsls	r2, r2, #1
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	490e      	ldr	r1, [pc, #56]	; (80056dc <SystemInit+0x48>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	490d      	ldr	r1, [pc, #52]	; (80056e0 <SystemInit+0x4c>)
 80056ac:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80056ae:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80056b0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	438a      	bics	r2, r1
 80056b6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	490a      	ldr	r1, [pc, #40]	; (80056e4 <SystemInit+0x50>)
 80056bc:	400a      	ands	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	4909      	ldr	r1, [pc, #36]	; (80056e8 <SystemInit+0x54>)
 80056c4:	400a      	ands	r2, r1
 80056c6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80056c8:	2200      	movs	r2, #0
 80056ca:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056cc:	2280      	movs	r2, #128	; 0x80
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <SystemInit+0x58>)
 80056d0:	0512      	lsls	r2, r2, #20
 80056d2:	609a      	str	r2, [r3, #8]
#endif
}
 80056d4:	4770      	bx	lr
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	40021000 	.word	0x40021000
 80056dc:	88ff400c 	.word	0x88ff400c
 80056e0:	fef6fff6 	.word	0xfef6fff6
 80056e4:	fffbffff 	.word	0xfffbffff
 80056e8:	ff02ffff 	.word	0xff02ffff
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80056f0:	480d      	ldr	r0, [pc, #52]	; (8005728 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80056f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80056f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056f6:	e003      	b.n	8005700 <LoopCopyDataInit>

080056f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80056fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056fe:	3104      	adds	r1, #4

08005700 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005700:	480b      	ldr	r0, [pc, #44]	; (8005730 <LoopForever+0xa>)
  ldr  r3, =_edata
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005708:	d3f6      	bcc.n	80056f8 <CopyDataInit>
  ldr  r2, =_sbss
 800570a:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <LoopForever+0x12>)
  b  LoopFillZerobss
 800570c:	e002      	b.n	8005714 <LoopFillZerobss>

0800570e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800570e:	2300      	movs	r3, #0
  str  r3, [r2]
 8005710:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005712:	3204      	adds	r2, #4

08005714 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <LoopForever+0x16>)
  cmp  r2, r3
 8005716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005718:	d3f9      	bcc.n	800570e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800571a:	f7ff ffbb 	bl	8005694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800571e:	f000 f817 	bl	8005750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005722:	f7ff fb03 	bl	8004d2c <main>

08005726 <LoopForever>:

LoopForever:
    b LoopForever
 8005726:	e7fe      	b.n	8005726 <LoopForever>
   ldr   r0, =_estack
 8005728:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800572c:	08005e64 	.word	0x08005e64
  ldr  r0, =_sdata
 8005730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005734:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8005738:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 800573c:	200005cc 	.word	0x200005cc

08005740 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005740:	e7fe      	b.n	8005740 <DMA1_Channel2_3_IRQHandler>

08005742 <atoi>:
 8005742:	b510      	push	{r4, lr}
 8005744:	220a      	movs	r2, #10
 8005746:	2100      	movs	r1, #0
 8005748:	f000 f8c6 	bl	80058d8 <strtol>
 800574c:	bd10      	pop	{r4, pc}
	...

08005750 <__libc_init_array>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	2600      	movs	r6, #0
 8005754:	4d0c      	ldr	r5, [pc, #48]	; (8005788 <__libc_init_array+0x38>)
 8005756:	4c0d      	ldr	r4, [pc, #52]	; (800578c <__libc_init_array+0x3c>)
 8005758:	1b64      	subs	r4, r4, r5
 800575a:	10a4      	asrs	r4, r4, #2
 800575c:	42a6      	cmp	r6, r4
 800575e:	d109      	bne.n	8005774 <__libc_init_array+0x24>
 8005760:	2600      	movs	r6, #0
 8005762:	f000 f8ef 	bl	8005944 <_init>
 8005766:	4d0a      	ldr	r5, [pc, #40]	; (8005790 <__libc_init_array+0x40>)
 8005768:	4c0a      	ldr	r4, [pc, #40]	; (8005794 <__libc_init_array+0x44>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	42a6      	cmp	r6, r4
 8005770:	d105      	bne.n	800577e <__libc_init_array+0x2e>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	00b3      	lsls	r3, r6, #2
 8005776:	58eb      	ldr	r3, [r5, r3]
 8005778:	4798      	blx	r3
 800577a:	3601      	adds	r6, #1
 800577c:	e7ee      	b.n	800575c <__libc_init_array+0xc>
 800577e:	00b3      	lsls	r3, r6, #2
 8005780:	58eb      	ldr	r3, [r5, r3]
 8005782:	4798      	blx	r3
 8005784:	3601      	adds	r6, #1
 8005786:	e7f2      	b.n	800576e <__libc_init_array+0x1e>
 8005788:	08005e5c 	.word	0x08005e5c
 800578c:	08005e5c 	.word	0x08005e5c
 8005790:	08005e5c 	.word	0x08005e5c
 8005794:	08005e60 	.word	0x08005e60

08005798 <memcpy>:
 8005798:	2300      	movs	r3, #0
 800579a:	b510      	push	{r4, lr}
 800579c:	429a      	cmp	r2, r3
 800579e:	d100      	bne.n	80057a2 <memcpy+0xa>
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	5ccc      	ldrb	r4, [r1, r3]
 80057a4:	54c4      	strb	r4, [r0, r3]
 80057a6:	3301      	adds	r3, #1
 80057a8:	e7f8      	b.n	800579c <memcpy+0x4>

080057aa <memset>:
 80057aa:	0003      	movs	r3, r0
 80057ac:	1882      	adds	r2, r0, r2
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d100      	bne.n	80057b4 <memset+0xa>
 80057b2:	4770      	bx	lr
 80057b4:	7019      	strb	r1, [r3, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	e7f9      	b.n	80057ae <memset+0x4>

080057ba <strcpy>:
 80057ba:	1c03      	adds	r3, r0, #0
 80057bc:	780a      	ldrb	r2, [r1, #0]
 80057be:	3101      	adds	r1, #1
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	2a00      	cmp	r2, #0
 80057c6:	d1f9      	bne.n	80057bc <strcpy+0x2>
 80057c8:	4770      	bx	lr
	...

080057cc <_strtol_l.isra.0>:
 80057cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ce:	001f      	movs	r7, r3
 80057d0:	000e      	movs	r6, r1
 80057d2:	b087      	sub	sp, #28
 80057d4:	9005      	str	r0, [sp, #20]
 80057d6:	9103      	str	r1, [sp, #12]
 80057d8:	9202      	str	r2, [sp, #8]
 80057da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057dc:	7834      	ldrb	r4, [r6, #0]
 80057de:	f000 f88f 	bl	8005900 <__locale_ctype_ptr_l>
 80057e2:	2208      	movs	r2, #8
 80057e4:	1900      	adds	r0, r0, r4
 80057e6:	7843      	ldrb	r3, [r0, #1]
 80057e8:	1c75      	adds	r5, r6, #1
 80057ea:	4013      	ands	r3, r2
 80057ec:	d10c      	bne.n	8005808 <_strtol_l.isra.0+0x3c>
 80057ee:	2c2d      	cmp	r4, #45	; 0x2d
 80057f0:	d10c      	bne.n	800580c <_strtol_l.isra.0+0x40>
 80057f2:	3301      	adds	r3, #1
 80057f4:	782c      	ldrb	r4, [r5, #0]
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	1cb5      	adds	r5, r6, #2
 80057fa:	2f00      	cmp	r7, #0
 80057fc:	d00c      	beq.n	8005818 <_strtol_l.isra.0+0x4c>
 80057fe:	2f10      	cmp	r7, #16
 8005800:	d114      	bne.n	800582c <_strtol_l.isra.0+0x60>
 8005802:	2c30      	cmp	r4, #48	; 0x30
 8005804:	d00a      	beq.n	800581c <_strtol_l.isra.0+0x50>
 8005806:	e011      	b.n	800582c <_strtol_l.isra.0+0x60>
 8005808:	002e      	movs	r6, r5
 800580a:	e7e6      	b.n	80057da <_strtol_l.isra.0+0xe>
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	2c2b      	cmp	r4, #43	; 0x2b
 8005810:	d1f3      	bne.n	80057fa <_strtol_l.isra.0+0x2e>
 8005812:	782c      	ldrb	r4, [r5, #0]
 8005814:	1cb5      	adds	r5, r6, #2
 8005816:	e7f0      	b.n	80057fa <_strtol_l.isra.0+0x2e>
 8005818:	2c30      	cmp	r4, #48	; 0x30
 800581a:	d12f      	bne.n	800587c <_strtol_l.isra.0+0xb0>
 800581c:	2220      	movs	r2, #32
 800581e:	782b      	ldrb	r3, [r5, #0]
 8005820:	4393      	bics	r3, r2
 8005822:	2b58      	cmp	r3, #88	; 0x58
 8005824:	d151      	bne.n	80058ca <_strtol_l.isra.0+0xfe>
 8005826:	2710      	movs	r7, #16
 8005828:	786c      	ldrb	r4, [r5, #1]
 800582a:	3502      	adds	r5, #2
 800582c:	9b01      	ldr	r3, [sp, #4]
 800582e:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <_strtol_l.isra.0+0x108>)
 8005830:	0039      	movs	r1, r7
 8005832:	189e      	adds	r6, r3, r2
 8005834:	0030      	movs	r0, r6
 8005836:	f7fa fd09 	bl	800024c <__aeabi_uidivmod>
 800583a:	0030      	movs	r0, r6
 800583c:	9104      	str	r1, [sp, #16]
 800583e:	0039      	movs	r1, r7
 8005840:	f7fa fc7e 	bl	8000140 <__udivsi3>
 8005844:	2101      	movs	r1, #1
 8005846:	2300      	movs	r3, #0
 8005848:	4249      	negs	r1, r1
 800584a:	0002      	movs	r2, r0
 800584c:	468c      	mov	ip, r1
 800584e:	0018      	movs	r0, r3
 8005850:	0021      	movs	r1, r4
 8005852:	3930      	subs	r1, #48	; 0x30
 8005854:	2909      	cmp	r1, #9
 8005856:	d813      	bhi.n	8005880 <_strtol_l.isra.0+0xb4>
 8005858:	000c      	movs	r4, r1
 800585a:	42a7      	cmp	r7, r4
 800585c:	dd1c      	ble.n	8005898 <_strtol_l.isra.0+0xcc>
 800585e:	1c59      	adds	r1, r3, #1
 8005860:	d009      	beq.n	8005876 <_strtol_l.isra.0+0xaa>
 8005862:	4663      	mov	r3, ip
 8005864:	4282      	cmp	r2, r0
 8005866:	d306      	bcc.n	8005876 <_strtol_l.isra.0+0xaa>
 8005868:	d102      	bne.n	8005870 <_strtol_l.isra.0+0xa4>
 800586a:	9904      	ldr	r1, [sp, #16]
 800586c:	42a1      	cmp	r1, r4
 800586e:	db02      	blt.n	8005876 <_strtol_l.isra.0+0xaa>
 8005870:	2301      	movs	r3, #1
 8005872:	4378      	muls	r0, r7
 8005874:	1820      	adds	r0, r4, r0
 8005876:	782c      	ldrb	r4, [r5, #0]
 8005878:	3501      	adds	r5, #1
 800587a:	e7e9      	b.n	8005850 <_strtol_l.isra.0+0x84>
 800587c:	270a      	movs	r7, #10
 800587e:	e7d5      	b.n	800582c <_strtol_l.isra.0+0x60>
 8005880:	0021      	movs	r1, r4
 8005882:	3941      	subs	r1, #65	; 0x41
 8005884:	2919      	cmp	r1, #25
 8005886:	d801      	bhi.n	800588c <_strtol_l.isra.0+0xc0>
 8005888:	3c37      	subs	r4, #55	; 0x37
 800588a:	e7e6      	b.n	800585a <_strtol_l.isra.0+0x8e>
 800588c:	0021      	movs	r1, r4
 800588e:	3961      	subs	r1, #97	; 0x61
 8005890:	2919      	cmp	r1, #25
 8005892:	d801      	bhi.n	8005898 <_strtol_l.isra.0+0xcc>
 8005894:	3c57      	subs	r4, #87	; 0x57
 8005896:	e7e0      	b.n	800585a <_strtol_l.isra.0+0x8e>
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	d108      	bne.n	80058ae <_strtol_l.isra.0+0xe2>
 800589c:	9a05      	ldr	r2, [sp, #20]
 800589e:	3323      	adds	r3, #35	; 0x23
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	9b02      	ldr	r3, [sp, #8]
 80058a4:	0030      	movs	r0, r6
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <_strtol_l.isra.0+0xf6>
 80058aa:	b007      	add	sp, #28
 80058ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ae:	9a01      	ldr	r2, [sp, #4]
 80058b0:	2a00      	cmp	r2, #0
 80058b2:	d000      	beq.n	80058b6 <_strtol_l.isra.0+0xea>
 80058b4:	4240      	negs	r0, r0
 80058b6:	9a02      	ldr	r2, [sp, #8]
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d0f6      	beq.n	80058aa <_strtol_l.isra.0+0xde>
 80058bc:	9a03      	ldr	r2, [sp, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d000      	beq.n	80058c4 <_strtol_l.isra.0+0xf8>
 80058c2:	1e6a      	subs	r2, r5, #1
 80058c4:	9b02      	ldr	r3, [sp, #8]
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e7ef      	b.n	80058aa <_strtol_l.isra.0+0xde>
 80058ca:	2430      	movs	r4, #48	; 0x30
 80058cc:	2f00      	cmp	r7, #0
 80058ce:	d1ad      	bne.n	800582c <_strtol_l.isra.0+0x60>
 80058d0:	3708      	adds	r7, #8
 80058d2:	e7ab      	b.n	800582c <_strtol_l.isra.0+0x60>
 80058d4:	7fffffff 	.word	0x7fffffff

080058d8 <strtol>:
 80058d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058da:	0013      	movs	r3, r2
 80058dc:	4a06      	ldr	r2, [pc, #24]	; (80058f8 <strtol+0x20>)
 80058de:	0005      	movs	r5, r0
 80058e0:	6810      	ldr	r0, [r2, #0]
 80058e2:	6a04      	ldr	r4, [r0, #32]
 80058e4:	2c00      	cmp	r4, #0
 80058e6:	d100      	bne.n	80058ea <strtol+0x12>
 80058e8:	4c04      	ldr	r4, [pc, #16]	; (80058fc <strtol+0x24>)
 80058ea:	000a      	movs	r2, r1
 80058ec:	9400      	str	r4, [sp, #0]
 80058ee:	0029      	movs	r1, r5
 80058f0:	f7ff ff6c 	bl	80057cc <_strtol_l.isra.0>
 80058f4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	20000004 	.word	0x20000004
 80058fc:	20000068 	.word	0x20000068

08005900 <__locale_ctype_ptr_l>:
 8005900:	30ec      	adds	r0, #236	; 0xec
 8005902:	6800      	ldr	r0, [r0, #0]
 8005904:	4770      	bx	lr

08005906 <__ascii_mbtowc>:
 8005906:	b082      	sub	sp, #8
 8005908:	2900      	cmp	r1, #0
 800590a:	d100      	bne.n	800590e <__ascii_mbtowc+0x8>
 800590c:	a901      	add	r1, sp, #4
 800590e:	1e10      	subs	r0, r2, #0
 8005910:	d006      	beq.n	8005920 <__ascii_mbtowc+0x1a>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d006      	beq.n	8005924 <__ascii_mbtowc+0x1e>
 8005916:	7813      	ldrb	r3, [r2, #0]
 8005918:	600b      	str	r3, [r1, #0]
 800591a:	7810      	ldrb	r0, [r2, #0]
 800591c:	1e43      	subs	r3, r0, #1
 800591e:	4198      	sbcs	r0, r3
 8005920:	b002      	add	sp, #8
 8005922:	4770      	bx	lr
 8005924:	2002      	movs	r0, #2
 8005926:	4240      	negs	r0, r0
 8005928:	e7fa      	b.n	8005920 <__ascii_mbtowc+0x1a>

0800592a <__ascii_wctomb>:
 800592a:	1e0b      	subs	r3, r1, #0
 800592c:	d004      	beq.n	8005938 <__ascii_wctomb+0xe>
 800592e:	2aff      	cmp	r2, #255	; 0xff
 8005930:	d904      	bls.n	800593c <__ascii_wctomb+0x12>
 8005932:	238a      	movs	r3, #138	; 0x8a
 8005934:	6003      	str	r3, [r0, #0]
 8005936:	3b8b      	subs	r3, #139	; 0x8b
 8005938:	0018      	movs	r0, r3
 800593a:	4770      	bx	lr
 800593c:	700a      	strb	r2, [r1, #0]
 800593e:	2301      	movs	r3, #1
 8005940:	e7fa      	b.n	8005938 <__ascii_wctomb+0xe>
	...

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
