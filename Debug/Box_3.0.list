
Box_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800a188  0800a188  0001a188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a870  0800a870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  0800a880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008c8  200001dc  0800aa5c  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000aa4  0800aa5c  00020aa4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000258c4  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003cde  00000000  00000000  00045ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d222  00000000  00000000  000497a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001220  00000000  00000000  000569c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001628  00000000  00000000  00057be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a4f9  00000000  00000000  00059210  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006843  00000000  00000000  00063709  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00069f4c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004824  00000000  00000000  00069fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a16c 	.word	0x0800a16c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800a16c 	.word	0x0800a16c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff59 	bl	80022f4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 feb3 	bl	80021b8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff4b 	bl	80022f4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff41 	bl	80022f4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fed3 	bl	800222c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fec9 	bl	800222c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc89 	bl	8000dc8 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc1b 	bl	8000cfc <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc7b 	bl	8000dc8 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc71 	bl	8000dc8 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc27 	bl	8000d48 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc1d 	bl	8000d48 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f83c 	bl	80005c8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_f2uiz>:
 800055c:	219e      	movs	r1, #158	; 0x9e
 800055e:	b510      	push	{r4, lr}
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	1c04      	adds	r4, r0, #0
 8000564:	f7ff ffd0 	bl	8000508 <__aeabi_fcmpge>
 8000568:	2800      	cmp	r0, #0
 800056a:	d103      	bne.n	8000574 <__aeabi_f2uiz+0x18>
 800056c:	1c20      	adds	r0, r4, #0
 800056e:	f000 ff29 	bl	80013c4 <__aeabi_f2iz>
 8000572:	bd10      	pop	{r4, pc}
 8000574:	219e      	movs	r1, #158	; 0x9e
 8000576:	1c20      	adds	r0, r4, #0
 8000578:	05c9      	lsls	r1, r1, #23
 800057a:	f000 fd87 	bl	800108c <__aeabi_fsub>
 800057e:	f000 ff21 	bl	80013c4 <__aeabi_f2iz>
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	469c      	mov	ip, r3
 8000588:	4460      	add	r0, ip
 800058a:	e7f2      	b.n	8000572 <__aeabi_f2uiz+0x16>

0800058c <__aeabi_d2uiz>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2200      	movs	r2, #0
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <__aeabi_d2uiz+0x38>)
 8000592:	0004      	movs	r4, r0
 8000594:	000d      	movs	r5, r1
 8000596:	f7ff ff7d 	bl	8000494 <__aeabi_dcmpge>
 800059a:	2800      	cmp	r0, #0
 800059c:	d104      	bne.n	80005a8 <__aeabi_d2uiz+0x1c>
 800059e:	0020      	movs	r0, r4
 80005a0:	0029      	movs	r1, r5
 80005a2:	f002 fcbf 	bl	8002f24 <__aeabi_d2iz>
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <__aeabi_d2uiz+0x38>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	0020      	movs	r0, r4
 80005ae:	0029      	movs	r1, r5
 80005b0:	f002 f982 	bl	80028b8 <__aeabi_dsub>
 80005b4:	f002 fcb6 	bl	8002f24 <__aeabi_d2iz>
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	061b      	lsls	r3, r3, #24
 80005bc:	469c      	mov	ip, r3
 80005be:	4460      	add	r0, ip
 80005c0:	e7f1      	b.n	80005a6 <__aeabi_d2uiz+0x1a>
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	41e00000 	.word	0x41e00000

080005c8 <__udivmoddi4>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	4657      	mov	r7, sl
 80005cc:	464e      	mov	r6, r9
 80005ce:	4645      	mov	r5, r8
 80005d0:	46de      	mov	lr, fp
 80005d2:	b5e0      	push	{r5, r6, r7, lr}
 80005d4:	0004      	movs	r4, r0
 80005d6:	b083      	sub	sp, #12
 80005d8:	000d      	movs	r5, r1
 80005da:	4692      	mov	sl, r2
 80005dc:	4699      	mov	r9, r3
 80005de:	428b      	cmp	r3, r1
 80005e0:	d82f      	bhi.n	8000642 <__udivmoddi4+0x7a>
 80005e2:	d02c      	beq.n	800063e <__udivmoddi4+0x76>
 80005e4:	4649      	mov	r1, r9
 80005e6:	4650      	mov	r0, sl
 80005e8:	f002 fdf2 	bl	80031d0 <__clzdi2>
 80005ec:	0029      	movs	r1, r5
 80005ee:	0006      	movs	r6, r0
 80005f0:	0020      	movs	r0, r4
 80005f2:	f002 fded 	bl	80031d0 <__clzdi2>
 80005f6:	1a33      	subs	r3, r6, r0
 80005f8:	4698      	mov	r8, r3
 80005fa:	3b20      	subs	r3, #32
 80005fc:	469b      	mov	fp, r3
 80005fe:	d500      	bpl.n	8000602 <__udivmoddi4+0x3a>
 8000600:	e074      	b.n	80006ec <__udivmoddi4+0x124>
 8000602:	4653      	mov	r3, sl
 8000604:	465a      	mov	r2, fp
 8000606:	4093      	lsls	r3, r2
 8000608:	001f      	movs	r7, r3
 800060a:	4653      	mov	r3, sl
 800060c:	4642      	mov	r2, r8
 800060e:	4093      	lsls	r3, r2
 8000610:	001e      	movs	r6, r3
 8000612:	42af      	cmp	r7, r5
 8000614:	d829      	bhi.n	800066a <__udivmoddi4+0xa2>
 8000616:	d026      	beq.n	8000666 <__udivmoddi4+0x9e>
 8000618:	465b      	mov	r3, fp
 800061a:	1ba4      	subs	r4, r4, r6
 800061c:	41bd      	sbcs	r5, r7
 800061e:	2b00      	cmp	r3, #0
 8000620:	da00      	bge.n	8000624 <__udivmoddi4+0x5c>
 8000622:	e079      	b.n	8000718 <__udivmoddi4+0x150>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2301      	movs	r3, #1
 800062e:	465a      	mov	r2, fp
 8000630:	4093      	lsls	r3, r2
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2301      	movs	r3, #1
 8000636:	4642      	mov	r2, r8
 8000638:	4093      	lsls	r3, r2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	e019      	b.n	8000672 <__udivmoddi4+0xaa>
 800063e:	4282      	cmp	r2, r0
 8000640:	d9d0      	bls.n	80005e4 <__udivmoddi4+0x1c>
 8000642:	2200      	movs	r2, #0
 8000644:	2300      	movs	r3, #0
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <__udivmoddi4+0x8c>
 8000650:	601c      	str	r4, [r3, #0]
 8000652:	605d      	str	r5, [r3, #4]
 8000654:	9800      	ldr	r0, [sp, #0]
 8000656:	9901      	ldr	r1, [sp, #4]
 8000658:	b003      	add	sp, #12
 800065a:	bc3c      	pop	{r2, r3, r4, r5}
 800065c:	4690      	mov	r8, r2
 800065e:	4699      	mov	r9, r3
 8000660:	46a2      	mov	sl, r4
 8000662:	46ab      	mov	fp, r5
 8000664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000666:	42a3      	cmp	r3, r4
 8000668:	d9d6      	bls.n	8000618 <__udivmoddi4+0x50>
 800066a:	2200      	movs	r2, #0
 800066c:	2300      	movs	r3, #0
 800066e:	9200      	str	r2, [sp, #0]
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	4643      	mov	r3, r8
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0e8      	beq.n	800064a <__udivmoddi4+0x82>
 8000678:	07fb      	lsls	r3, r7, #31
 800067a:	0872      	lsrs	r2, r6, #1
 800067c:	431a      	orrs	r2, r3
 800067e:	4646      	mov	r6, r8
 8000680:	087b      	lsrs	r3, r7, #1
 8000682:	e00e      	b.n	80006a2 <__udivmoddi4+0xda>
 8000684:	42ab      	cmp	r3, r5
 8000686:	d101      	bne.n	800068c <__udivmoddi4+0xc4>
 8000688:	42a2      	cmp	r2, r4
 800068a:	d80c      	bhi.n	80006a6 <__udivmoddi4+0xde>
 800068c:	1aa4      	subs	r4, r4, r2
 800068e:	419d      	sbcs	r5, r3
 8000690:	2001      	movs	r0, #1
 8000692:	1924      	adds	r4, r4, r4
 8000694:	416d      	adcs	r5, r5
 8000696:	2100      	movs	r1, #0
 8000698:	3e01      	subs	r6, #1
 800069a:	1824      	adds	r4, r4, r0
 800069c:	414d      	adcs	r5, r1
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d006      	beq.n	80006b0 <__udivmoddi4+0xe8>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d9ee      	bls.n	8000684 <__udivmoddi4+0xbc>
 80006a6:	3e01      	subs	r6, #1
 80006a8:	1924      	adds	r4, r4, r4
 80006aa:	416d      	adcs	r5, r5
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d1f8      	bne.n	80006a2 <__udivmoddi4+0xda>
 80006b0:	465b      	mov	r3, fp
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	1900      	adds	r0, r0, r4
 80006b8:	4169      	adcs	r1, r5
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db22      	blt.n	8000704 <__udivmoddi4+0x13c>
 80006be:	002b      	movs	r3, r5
 80006c0:	465a      	mov	r2, fp
 80006c2:	40d3      	lsrs	r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	4644      	mov	r4, r8
 80006c8:	40e2      	lsrs	r2, r4
 80006ca:	001c      	movs	r4, r3
 80006cc:	465b      	mov	r3, fp
 80006ce:	0015      	movs	r5, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db2c      	blt.n	800072e <__udivmoddi4+0x166>
 80006d4:	0026      	movs	r6, r4
 80006d6:	409e      	lsls	r6, r3
 80006d8:	0033      	movs	r3, r6
 80006da:	0026      	movs	r6, r4
 80006dc:	4647      	mov	r7, r8
 80006de:	40be      	lsls	r6, r7
 80006e0:	0032      	movs	r2, r6
 80006e2:	1a80      	subs	r0, r0, r2
 80006e4:	4199      	sbcs	r1, r3
 80006e6:	9000      	str	r0, [sp, #0]
 80006e8:	9101      	str	r1, [sp, #4]
 80006ea:	e7ae      	b.n	800064a <__udivmoddi4+0x82>
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	4652      	mov	r2, sl
 80006f4:	40da      	lsrs	r2, r3
 80006f6:	4641      	mov	r1, r8
 80006f8:	0013      	movs	r3, r2
 80006fa:	464a      	mov	r2, r9
 80006fc:	408a      	lsls	r2, r1
 80006fe:	0017      	movs	r7, r2
 8000700:	431f      	orrs	r7, r3
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x42>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	002a      	movs	r2, r5
 800070c:	4646      	mov	r6, r8
 800070e:	409a      	lsls	r2, r3
 8000710:	0023      	movs	r3, r4
 8000712:	40f3      	lsrs	r3, r6
 8000714:	4313      	orrs	r3, r2
 8000716:	e7d5      	b.n	80006c4 <__udivmoddi4+0xfc>
 8000718:	4642      	mov	r2, r8
 800071a:	2320      	movs	r3, #32
 800071c:	2100      	movs	r1, #0
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	2200      	movs	r2, #0
 8000722:	9100      	str	r1, [sp, #0]
 8000724:	9201      	str	r2, [sp, #4]
 8000726:	2201      	movs	r2, #1
 8000728:	40da      	lsrs	r2, r3
 800072a:	9201      	str	r2, [sp, #4]
 800072c:	e782      	b.n	8000634 <__udivmoddi4+0x6c>
 800072e:	4642      	mov	r2, r8
 8000730:	2320      	movs	r3, #32
 8000732:	0026      	movs	r6, r4
 8000734:	1a9b      	subs	r3, r3, r2
 8000736:	40de      	lsrs	r6, r3
 8000738:	002f      	movs	r7, r5
 800073a:	46b4      	mov	ip, r6
 800073c:	4097      	lsls	r7, r2
 800073e:	4666      	mov	r6, ip
 8000740:	003b      	movs	r3, r7
 8000742:	4333      	orrs	r3, r6
 8000744:	e7c9      	b.n	80006da <__udivmoddi4+0x112>
 8000746:	46c0      	nop			; (mov r8, r8)

08000748 <__aeabi_fadd>:
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	46c6      	mov	lr, r8
 800074c:	024e      	lsls	r6, r1, #9
 800074e:	0247      	lsls	r7, r0, #9
 8000750:	0a76      	lsrs	r6, r6, #9
 8000752:	0a7b      	lsrs	r3, r7, #9
 8000754:	0044      	lsls	r4, r0, #1
 8000756:	0fc5      	lsrs	r5, r0, #31
 8000758:	00f7      	lsls	r7, r6, #3
 800075a:	0048      	lsls	r0, r1, #1
 800075c:	4698      	mov	r8, r3
 800075e:	b500      	push	{lr}
 8000760:	0e24      	lsrs	r4, r4, #24
 8000762:	002a      	movs	r2, r5
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	0e00      	lsrs	r0, r0, #24
 8000768:	0fc9      	lsrs	r1, r1, #31
 800076a:	46bc      	mov	ip, r7
 800076c:	428d      	cmp	r5, r1
 800076e:	d067      	beq.n	8000840 <__aeabi_fadd+0xf8>
 8000770:	1a22      	subs	r2, r4, r0
 8000772:	2a00      	cmp	r2, #0
 8000774:	dc00      	bgt.n	8000778 <__aeabi_fadd+0x30>
 8000776:	e0a5      	b.n	80008c4 <__aeabi_fadd+0x17c>
 8000778:	2800      	cmp	r0, #0
 800077a:	d13a      	bne.n	80007f2 <__aeabi_fadd+0xaa>
 800077c:	2f00      	cmp	r7, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x3a>
 8000780:	e093      	b.n	80008aa <__aeabi_fadd+0x162>
 8000782:	1e51      	subs	r1, r2, #1
 8000784:	2900      	cmp	r1, #0
 8000786:	d000      	beq.n	800078a <__aeabi_fadd+0x42>
 8000788:	e0bc      	b.n	8000904 <__aeabi_fadd+0x1bc>
 800078a:	2401      	movs	r4, #1
 800078c:	1bdb      	subs	r3, r3, r7
 800078e:	015a      	lsls	r2, r3, #5
 8000790:	d546      	bpl.n	8000820 <__aeabi_fadd+0xd8>
 8000792:	019b      	lsls	r3, r3, #6
 8000794:	099e      	lsrs	r6, r3, #6
 8000796:	0030      	movs	r0, r6
 8000798:	f002 fcfc 	bl	8003194 <__clzsi2>
 800079c:	3805      	subs	r0, #5
 800079e:	4086      	lsls	r6, r0
 80007a0:	4284      	cmp	r4, r0
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_fadd+0x5e>
 80007a4:	e09d      	b.n	80008e2 <__aeabi_fadd+0x19a>
 80007a6:	1b04      	subs	r4, r0, r4
 80007a8:	0032      	movs	r2, r6
 80007aa:	2020      	movs	r0, #32
 80007ac:	3401      	adds	r4, #1
 80007ae:	40e2      	lsrs	r2, r4
 80007b0:	1b04      	subs	r4, r0, r4
 80007b2:	40a6      	lsls	r6, r4
 80007b4:	0033      	movs	r3, r6
 80007b6:	1e5e      	subs	r6, r3, #1
 80007b8:	41b3      	sbcs	r3, r6
 80007ba:	2400      	movs	r4, #0
 80007bc:	4313      	orrs	r3, r2
 80007be:	075a      	lsls	r2, r3, #29
 80007c0:	d004      	beq.n	80007cc <__aeabi_fadd+0x84>
 80007c2:	220f      	movs	r2, #15
 80007c4:	401a      	ands	r2, r3
 80007c6:	2a04      	cmp	r2, #4
 80007c8:	d000      	beq.n	80007cc <__aeabi_fadd+0x84>
 80007ca:	3304      	adds	r3, #4
 80007cc:	015a      	lsls	r2, r3, #5
 80007ce:	d529      	bpl.n	8000824 <__aeabi_fadd+0xdc>
 80007d0:	3401      	adds	r4, #1
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x90>
 80007d6:	e081      	b.n	80008dc <__aeabi_fadd+0x194>
 80007d8:	002a      	movs	r2, r5
 80007da:	019b      	lsls	r3, r3, #6
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	b2e4      	uxtb	r4, r4
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	05e4      	lsls	r4, r4, #23
 80007e4:	0a58      	lsrs	r0, r3, #9
 80007e6:	07d2      	lsls	r2, r2, #31
 80007e8:	4320      	orrs	r0, r4
 80007ea:	4310      	orrs	r0, r2
 80007ec:	bc04      	pop	{r2}
 80007ee:	4690      	mov	r8, r2
 80007f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f2:	2cff      	cmp	r4, #255	; 0xff
 80007f4:	d0e3      	beq.n	80007be <__aeabi_fadd+0x76>
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	0038      	movs	r0, r7
 80007fa:	04c9      	lsls	r1, r1, #19
 80007fc:	4308      	orrs	r0, r1
 80007fe:	4684      	mov	ip, r0
 8000800:	2a1b      	cmp	r2, #27
 8000802:	dd00      	ble.n	8000806 <__aeabi_fadd+0xbe>
 8000804:	e082      	b.n	800090c <__aeabi_fadd+0x1c4>
 8000806:	2020      	movs	r0, #32
 8000808:	4661      	mov	r1, ip
 800080a:	40d1      	lsrs	r1, r2
 800080c:	1a82      	subs	r2, r0, r2
 800080e:	4660      	mov	r0, ip
 8000810:	4090      	lsls	r0, r2
 8000812:	0002      	movs	r2, r0
 8000814:	1e50      	subs	r0, r2, #1
 8000816:	4182      	sbcs	r2, r0
 8000818:	430a      	orrs	r2, r1
 800081a:	1a9b      	subs	r3, r3, r2
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	d4b8      	bmi.n	8000792 <__aeabi_fadd+0x4a>
 8000820:	075a      	lsls	r2, r3, #29
 8000822:	d1ce      	bne.n	80007c2 <__aeabi_fadd+0x7a>
 8000824:	08de      	lsrs	r6, r3, #3
 8000826:	002a      	movs	r2, r5
 8000828:	2cff      	cmp	r4, #255	; 0xff
 800082a:	d13a      	bne.n	80008a2 <__aeabi_fadd+0x15a>
 800082c:	2e00      	cmp	r6, #0
 800082e:	d100      	bne.n	8000832 <__aeabi_fadd+0xea>
 8000830:	e0ae      	b.n	8000990 <__aeabi_fadd+0x248>
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	03db      	lsls	r3, r3, #15
 8000836:	4333      	orrs	r3, r6
 8000838:	025b      	lsls	r3, r3, #9
 800083a:	0a5b      	lsrs	r3, r3, #9
 800083c:	24ff      	movs	r4, #255	; 0xff
 800083e:	e7cf      	b.n	80007e0 <__aeabi_fadd+0x98>
 8000840:	1a21      	subs	r1, r4, r0
 8000842:	2900      	cmp	r1, #0
 8000844:	dd52      	ble.n	80008ec <__aeabi_fadd+0x1a4>
 8000846:	2800      	cmp	r0, #0
 8000848:	d031      	beq.n	80008ae <__aeabi_fadd+0x166>
 800084a:	2cff      	cmp	r4, #255	; 0xff
 800084c:	d0b7      	beq.n	80007be <__aeabi_fadd+0x76>
 800084e:	2080      	movs	r0, #128	; 0x80
 8000850:	003e      	movs	r6, r7
 8000852:	04c0      	lsls	r0, r0, #19
 8000854:	4306      	orrs	r6, r0
 8000856:	46b4      	mov	ip, r6
 8000858:	291b      	cmp	r1, #27
 800085a:	dd00      	ble.n	800085e <__aeabi_fadd+0x116>
 800085c:	e0aa      	b.n	80009b4 <__aeabi_fadd+0x26c>
 800085e:	2620      	movs	r6, #32
 8000860:	4660      	mov	r0, ip
 8000862:	40c8      	lsrs	r0, r1
 8000864:	1a71      	subs	r1, r6, r1
 8000866:	4666      	mov	r6, ip
 8000868:	408e      	lsls	r6, r1
 800086a:	0031      	movs	r1, r6
 800086c:	1e4e      	subs	r6, r1, #1
 800086e:	41b1      	sbcs	r1, r6
 8000870:	4301      	orrs	r1, r0
 8000872:	185b      	adds	r3, r3, r1
 8000874:	0159      	lsls	r1, r3, #5
 8000876:	d5d3      	bpl.n	8000820 <__aeabi_fadd+0xd8>
 8000878:	3401      	adds	r4, #1
 800087a:	2cff      	cmp	r4, #255	; 0xff
 800087c:	d100      	bne.n	8000880 <__aeabi_fadd+0x138>
 800087e:	e087      	b.n	8000990 <__aeabi_fadd+0x248>
 8000880:	2201      	movs	r2, #1
 8000882:	4978      	ldr	r1, [pc, #480]	; (8000a64 <__aeabi_fadd+0x31c>)
 8000884:	401a      	ands	r2, r3
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	400b      	ands	r3, r1
 800088a:	4313      	orrs	r3, r2
 800088c:	e797      	b.n	80007be <__aeabi_fadd+0x76>
 800088e:	2c00      	cmp	r4, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x14c>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_fadd+0x29c>
 8000894:	2b00      	cmp	r3, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x152>
 8000898:	e0b6      	b.n	8000a08 <__aeabi_fadd+0x2c0>
 800089a:	1e3b      	subs	r3, r7, #0
 800089c:	d162      	bne.n	8000964 <__aeabi_fadd+0x21c>
 800089e:	2600      	movs	r6, #0
 80008a0:	2200      	movs	r2, #0
 80008a2:	0273      	lsls	r3, r6, #9
 80008a4:	0a5b      	lsrs	r3, r3, #9
 80008a6:	b2e4      	uxtb	r4, r4
 80008a8:	e79a      	b.n	80007e0 <__aeabi_fadd+0x98>
 80008aa:	0014      	movs	r4, r2
 80008ac:	e787      	b.n	80007be <__aeabi_fadd+0x76>
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d04d      	beq.n	800094e <__aeabi_fadd+0x206>
 80008b2:	1e48      	subs	r0, r1, #1
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d157      	bne.n	8000968 <__aeabi_fadd+0x220>
 80008b8:	4463      	add	r3, ip
 80008ba:	2401      	movs	r4, #1
 80008bc:	015a      	lsls	r2, r3, #5
 80008be:	d5af      	bpl.n	8000820 <__aeabi_fadd+0xd8>
 80008c0:	2402      	movs	r4, #2
 80008c2:	e7dd      	b.n	8000880 <__aeabi_fadd+0x138>
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	d124      	bne.n	8000912 <__aeabi_fadd+0x1ca>
 80008c8:	1c62      	adds	r2, r4, #1
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	2a01      	cmp	r2, #1
 80008ce:	ddde      	ble.n	800088e <__aeabi_fadd+0x146>
 80008d0:	1bde      	subs	r6, r3, r7
 80008d2:	0172      	lsls	r2, r6, #5
 80008d4:	d535      	bpl.n	8000942 <__aeabi_fadd+0x1fa>
 80008d6:	1afe      	subs	r6, r7, r3
 80008d8:	000d      	movs	r5, r1
 80008da:	e75c      	b.n	8000796 <__aeabi_fadd+0x4e>
 80008dc:	002a      	movs	r2, r5
 80008de:	2300      	movs	r3, #0
 80008e0:	e77e      	b.n	80007e0 <__aeabi_fadd+0x98>
 80008e2:	0033      	movs	r3, r6
 80008e4:	4a60      	ldr	r2, [pc, #384]	; (8000a68 <__aeabi_fadd+0x320>)
 80008e6:	1a24      	subs	r4, r4, r0
 80008e8:	4013      	ands	r3, r2
 80008ea:	e768      	b.n	80007be <__aeabi_fadd+0x76>
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d163      	bne.n	80009b8 <__aeabi_fadd+0x270>
 80008f0:	1c61      	adds	r1, r4, #1
 80008f2:	b2c8      	uxtb	r0, r1
 80008f4:	2801      	cmp	r0, #1
 80008f6:	dd4e      	ble.n	8000996 <__aeabi_fadd+0x24e>
 80008f8:	29ff      	cmp	r1, #255	; 0xff
 80008fa:	d049      	beq.n	8000990 <__aeabi_fadd+0x248>
 80008fc:	4463      	add	r3, ip
 80008fe:	085b      	lsrs	r3, r3, #1
 8000900:	000c      	movs	r4, r1
 8000902:	e75c      	b.n	80007be <__aeabi_fadd+0x76>
 8000904:	2aff      	cmp	r2, #255	; 0xff
 8000906:	d041      	beq.n	800098c <__aeabi_fadd+0x244>
 8000908:	000a      	movs	r2, r1
 800090a:	e779      	b.n	8000800 <__aeabi_fadd+0xb8>
 800090c:	2201      	movs	r2, #1
 800090e:	1a9b      	subs	r3, r3, r2
 8000910:	e784      	b.n	800081c <__aeabi_fadd+0xd4>
 8000912:	2c00      	cmp	r4, #0
 8000914:	d01d      	beq.n	8000952 <__aeabi_fadd+0x20a>
 8000916:	28ff      	cmp	r0, #255	; 0xff
 8000918:	d022      	beq.n	8000960 <__aeabi_fadd+0x218>
 800091a:	2480      	movs	r4, #128	; 0x80
 800091c:	04e4      	lsls	r4, r4, #19
 800091e:	4252      	negs	r2, r2
 8000920:	4323      	orrs	r3, r4
 8000922:	2a1b      	cmp	r2, #27
 8000924:	dd00      	ble.n	8000928 <__aeabi_fadd+0x1e0>
 8000926:	e08a      	b.n	8000a3e <__aeabi_fadd+0x2f6>
 8000928:	001c      	movs	r4, r3
 800092a:	2520      	movs	r5, #32
 800092c:	40d4      	lsrs	r4, r2
 800092e:	1aaa      	subs	r2, r5, r2
 8000930:	4093      	lsls	r3, r2
 8000932:	1e5a      	subs	r2, r3, #1
 8000934:	4193      	sbcs	r3, r2
 8000936:	4323      	orrs	r3, r4
 8000938:	4662      	mov	r2, ip
 800093a:	0004      	movs	r4, r0
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	000d      	movs	r5, r1
 8000940:	e725      	b.n	800078e <__aeabi_fadd+0x46>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x200>
 8000946:	e726      	b.n	8000796 <__aeabi_fadd+0x4e>
 8000948:	2200      	movs	r2, #0
 800094a:	2400      	movs	r4, #0
 800094c:	e7a9      	b.n	80008a2 <__aeabi_fadd+0x15a>
 800094e:	000c      	movs	r4, r1
 8000950:	e735      	b.n	80007be <__aeabi_fadd+0x76>
 8000952:	2b00      	cmp	r3, #0
 8000954:	d04d      	beq.n	80009f2 <__aeabi_fadd+0x2aa>
 8000956:	43d2      	mvns	r2, r2
 8000958:	2a00      	cmp	r2, #0
 800095a:	d0ed      	beq.n	8000938 <__aeabi_fadd+0x1f0>
 800095c:	28ff      	cmp	r0, #255	; 0xff
 800095e:	d1e0      	bne.n	8000922 <__aeabi_fadd+0x1da>
 8000960:	4663      	mov	r3, ip
 8000962:	24ff      	movs	r4, #255	; 0xff
 8000964:	000d      	movs	r5, r1
 8000966:	e72a      	b.n	80007be <__aeabi_fadd+0x76>
 8000968:	29ff      	cmp	r1, #255	; 0xff
 800096a:	d00f      	beq.n	800098c <__aeabi_fadd+0x244>
 800096c:	0001      	movs	r1, r0
 800096e:	e773      	b.n	8000858 <__aeabi_fadd+0x110>
 8000970:	2b00      	cmp	r3, #0
 8000972:	d061      	beq.n	8000a38 <__aeabi_fadd+0x2f0>
 8000974:	24ff      	movs	r4, #255	; 0xff
 8000976:	2f00      	cmp	r7, #0
 8000978:	d100      	bne.n	800097c <__aeabi_fadd+0x234>
 800097a:	e720      	b.n	80007be <__aeabi_fadd+0x76>
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	4641      	mov	r1, r8
 8000980:	03d2      	lsls	r2, r2, #15
 8000982:	4211      	tst	r1, r2
 8000984:	d002      	beq.n	800098c <__aeabi_fadd+0x244>
 8000986:	4216      	tst	r6, r2
 8000988:	d100      	bne.n	800098c <__aeabi_fadd+0x244>
 800098a:	003b      	movs	r3, r7
 800098c:	24ff      	movs	r4, #255	; 0xff
 800098e:	e716      	b.n	80007be <__aeabi_fadd+0x76>
 8000990:	24ff      	movs	r4, #255	; 0xff
 8000992:	2300      	movs	r3, #0
 8000994:	e724      	b.n	80007e0 <__aeabi_fadd+0x98>
 8000996:	2c00      	cmp	r4, #0
 8000998:	d1ea      	bne.n	8000970 <__aeabi_fadd+0x228>
 800099a:	2b00      	cmp	r3, #0
 800099c:	d058      	beq.n	8000a50 <__aeabi_fadd+0x308>
 800099e:	2f00      	cmp	r7, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0x25c>
 80009a2:	e70c      	b.n	80007be <__aeabi_fadd+0x76>
 80009a4:	4463      	add	r3, ip
 80009a6:	015a      	lsls	r2, r3, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fadd+0x264>
 80009aa:	e739      	b.n	8000820 <__aeabi_fadd+0xd8>
 80009ac:	4a2e      	ldr	r2, [pc, #184]	; (8000a68 <__aeabi_fadd+0x320>)
 80009ae:	000c      	movs	r4, r1
 80009b0:	4013      	ands	r3, r2
 80009b2:	e704      	b.n	80007be <__aeabi_fadd+0x76>
 80009b4:	2101      	movs	r1, #1
 80009b6:	e75c      	b.n	8000872 <__aeabi_fadd+0x12a>
 80009b8:	2c00      	cmp	r4, #0
 80009ba:	d11e      	bne.n	80009fa <__aeabi_fadd+0x2b2>
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d040      	beq.n	8000a42 <__aeabi_fadd+0x2fa>
 80009c0:	43c9      	mvns	r1, r1
 80009c2:	2900      	cmp	r1, #0
 80009c4:	d00b      	beq.n	80009de <__aeabi_fadd+0x296>
 80009c6:	28ff      	cmp	r0, #255	; 0xff
 80009c8:	d036      	beq.n	8000a38 <__aeabi_fadd+0x2f0>
 80009ca:	291b      	cmp	r1, #27
 80009cc:	dc47      	bgt.n	8000a5e <__aeabi_fadd+0x316>
 80009ce:	001c      	movs	r4, r3
 80009d0:	2620      	movs	r6, #32
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	1a71      	subs	r1, r6, r1
 80009d6:	408b      	lsls	r3, r1
 80009d8:	1e59      	subs	r1, r3, #1
 80009da:	418b      	sbcs	r3, r1
 80009dc:	4323      	orrs	r3, r4
 80009de:	4463      	add	r3, ip
 80009e0:	0004      	movs	r4, r0
 80009e2:	e747      	b.n	8000874 <__aeabi_fadd+0x12c>
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d118      	bne.n	8000a1a <__aeabi_fadd+0x2d2>
 80009e8:	1e3b      	subs	r3, r7, #0
 80009ea:	d02d      	beq.n	8000a48 <__aeabi_fadd+0x300>
 80009ec:	000d      	movs	r5, r1
 80009ee:	24ff      	movs	r4, #255	; 0xff
 80009f0:	e6e5      	b.n	80007be <__aeabi_fadd+0x76>
 80009f2:	003b      	movs	r3, r7
 80009f4:	0004      	movs	r4, r0
 80009f6:	000d      	movs	r5, r1
 80009f8:	e6e1      	b.n	80007be <__aeabi_fadd+0x76>
 80009fa:	28ff      	cmp	r0, #255	; 0xff
 80009fc:	d01c      	beq.n	8000a38 <__aeabi_fadd+0x2f0>
 80009fe:	2480      	movs	r4, #128	; 0x80
 8000a00:	04e4      	lsls	r4, r4, #19
 8000a02:	4249      	negs	r1, r1
 8000a04:	4323      	orrs	r3, r4
 8000a06:	e7e0      	b.n	80009ca <__aeabi_fadd+0x282>
 8000a08:	2f00      	cmp	r7, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_fadd+0x2c6>
 8000a0c:	e6d7      	b.n	80007be <__aeabi_fadd+0x76>
 8000a0e:	1bde      	subs	r6, r3, r7
 8000a10:	0172      	lsls	r2, r6, #5
 8000a12:	d51f      	bpl.n	8000a54 <__aeabi_fadd+0x30c>
 8000a14:	1afb      	subs	r3, r7, r3
 8000a16:	000d      	movs	r5, r1
 8000a18:	e6d1      	b.n	80007be <__aeabi_fadd+0x76>
 8000a1a:	24ff      	movs	r4, #255	; 0xff
 8000a1c:	2f00      	cmp	r7, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_fadd+0x2da>
 8000a20:	e6cd      	b.n	80007be <__aeabi_fadd+0x76>
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	4640      	mov	r0, r8
 8000a26:	03d2      	lsls	r2, r2, #15
 8000a28:	4210      	tst	r0, r2
 8000a2a:	d0af      	beq.n	800098c <__aeabi_fadd+0x244>
 8000a2c:	4216      	tst	r6, r2
 8000a2e:	d1ad      	bne.n	800098c <__aeabi_fadd+0x244>
 8000a30:	003b      	movs	r3, r7
 8000a32:	000d      	movs	r5, r1
 8000a34:	24ff      	movs	r4, #255	; 0xff
 8000a36:	e6c2      	b.n	80007be <__aeabi_fadd+0x76>
 8000a38:	4663      	mov	r3, ip
 8000a3a:	24ff      	movs	r4, #255	; 0xff
 8000a3c:	e6bf      	b.n	80007be <__aeabi_fadd+0x76>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e77a      	b.n	8000938 <__aeabi_fadd+0x1f0>
 8000a42:	003b      	movs	r3, r7
 8000a44:	0004      	movs	r4, r0
 8000a46:	e6ba      	b.n	80007be <__aeabi_fadd+0x76>
 8000a48:	2680      	movs	r6, #128	; 0x80
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	03f6      	lsls	r6, r6, #15
 8000a4e:	e6f0      	b.n	8000832 <__aeabi_fadd+0xea>
 8000a50:	003b      	movs	r3, r7
 8000a52:	e6b4      	b.n	80007be <__aeabi_fadd+0x76>
 8000a54:	1e33      	subs	r3, r6, #0
 8000a56:	d000      	beq.n	8000a5a <__aeabi_fadd+0x312>
 8000a58:	e6e2      	b.n	8000820 <__aeabi_fadd+0xd8>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	e721      	b.n	80008a2 <__aeabi_fadd+0x15a>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e7bd      	b.n	80009de <__aeabi_fadd+0x296>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	7dffffff 	.word	0x7dffffff
 8000a68:	fbffffff 	.word	0xfbffffff

08000a6c <__aeabi_fdiv>:
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6e:	4657      	mov	r7, sl
 8000a70:	464e      	mov	r6, r9
 8000a72:	46de      	mov	lr, fp
 8000a74:	4645      	mov	r5, r8
 8000a76:	b5e0      	push	{r5, r6, r7, lr}
 8000a78:	0244      	lsls	r4, r0, #9
 8000a7a:	0043      	lsls	r3, r0, #1
 8000a7c:	0fc6      	lsrs	r6, r0, #31
 8000a7e:	b083      	sub	sp, #12
 8000a80:	1c0f      	adds	r7, r1, #0
 8000a82:	0a64      	lsrs	r4, r4, #9
 8000a84:	0e1b      	lsrs	r3, r3, #24
 8000a86:	46b2      	mov	sl, r6
 8000a88:	d053      	beq.n	8000b32 <__aeabi_fdiv+0xc6>
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d027      	beq.n	8000ade <__aeabi_fdiv+0x72>
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	00e4      	lsls	r4, r4, #3
 8000a92:	04d2      	lsls	r2, r2, #19
 8000a94:	4314      	orrs	r4, r2
 8000a96:	227f      	movs	r2, #127	; 0x7f
 8000a98:	4252      	negs	r2, r2
 8000a9a:	4690      	mov	r8, r2
 8000a9c:	4498      	add	r8, r3
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	469b      	mov	fp, r3
 8000aa4:	027d      	lsls	r5, r7, #9
 8000aa6:	0078      	lsls	r0, r7, #1
 8000aa8:	0ffb      	lsrs	r3, r7, #31
 8000aaa:	0a6d      	lsrs	r5, r5, #9
 8000aac:	0e00      	lsrs	r0, r0, #24
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	d024      	beq.n	8000afc <__aeabi_fdiv+0x90>
 8000ab2:	28ff      	cmp	r0, #255	; 0xff
 8000ab4:	d046      	beq.n	8000b44 <__aeabi_fdiv+0xd8>
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	2100      	movs	r1, #0
 8000aba:	00ed      	lsls	r5, r5, #3
 8000abc:	04db      	lsls	r3, r3, #19
 8000abe:	431d      	orrs	r5, r3
 8000ac0:	387f      	subs	r0, #127	; 0x7f
 8000ac2:	4647      	mov	r7, r8
 8000ac4:	1a38      	subs	r0, r7, r0
 8000ac6:	464f      	mov	r7, r9
 8000ac8:	430f      	orrs	r7, r1
 8000aca:	00bf      	lsls	r7, r7, #2
 8000acc:	46b9      	mov	r9, r7
 8000ace:	0033      	movs	r3, r6
 8000ad0:	9a00      	ldr	r2, [sp, #0]
 8000ad2:	4f87      	ldr	r7, [pc, #540]	; (8000cf0 <__aeabi_fdiv+0x284>)
 8000ad4:	4053      	eors	r3, r2
 8000ad6:	464a      	mov	r2, r9
 8000ad8:	58ba      	ldr	r2, [r7, r2]
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	4697      	mov	pc, r2
 8000ade:	2c00      	cmp	r4, #0
 8000ae0:	d14e      	bne.n	8000b80 <__aeabi_fdiv+0x114>
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	4699      	mov	r9, r3
 8000ae6:	33f7      	adds	r3, #247	; 0xf7
 8000ae8:	4698      	mov	r8, r3
 8000aea:	3bfd      	subs	r3, #253	; 0xfd
 8000aec:	469b      	mov	fp, r3
 8000aee:	027d      	lsls	r5, r7, #9
 8000af0:	0078      	lsls	r0, r7, #1
 8000af2:	0ffb      	lsrs	r3, r7, #31
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	0e00      	lsrs	r0, r0, #24
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	d1da      	bne.n	8000ab2 <__aeabi_fdiv+0x46>
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d126      	bne.n	8000b4e <__aeabi_fdiv+0xe2>
 8000b00:	2000      	movs	r0, #0
 8000b02:	2101      	movs	r1, #1
 8000b04:	0033      	movs	r3, r6
 8000b06:	9a00      	ldr	r2, [sp, #0]
 8000b08:	4f7a      	ldr	r7, [pc, #488]	; (8000cf4 <__aeabi_fdiv+0x288>)
 8000b0a:	4053      	eors	r3, r2
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	1a10      	subs	r0, r2, r0
 8000b10:	464a      	mov	r2, r9
 8000b12:	430a      	orrs	r2, r1
 8000b14:	0092      	lsls	r2, r2, #2
 8000b16:	58ba      	ldr	r2, [r7, r2]
 8000b18:	001d      	movs	r5, r3
 8000b1a:	4697      	mov	pc, r2
 8000b1c:	9b00      	ldr	r3, [sp, #0]
 8000b1e:	002c      	movs	r4, r5
 8000b20:	469a      	mov	sl, r3
 8000b22:	468b      	mov	fp, r1
 8000b24:	465b      	mov	r3, fp
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d131      	bne.n	8000b8e <__aeabi_fdiv+0x122>
 8000b2a:	4653      	mov	r3, sl
 8000b2c:	21ff      	movs	r1, #255	; 0xff
 8000b2e:	2400      	movs	r4, #0
 8000b30:	e038      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d117      	bne.n	8000b66 <__aeabi_fdiv+0xfa>
 8000b36:	2304      	movs	r3, #4
 8000b38:	4699      	mov	r9, r3
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	4698      	mov	r8, r3
 8000b3e:	3301      	adds	r3, #1
 8000b40:	469b      	mov	fp, r3
 8000b42:	e7af      	b.n	8000aa4 <__aeabi_fdiv+0x38>
 8000b44:	20ff      	movs	r0, #255	; 0xff
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d10b      	bne.n	8000b62 <__aeabi_fdiv+0xf6>
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	e7da      	b.n	8000b04 <__aeabi_fdiv+0x98>
 8000b4e:	0028      	movs	r0, r5
 8000b50:	f002 fb20 	bl	8003194 <__clzsi2>
 8000b54:	1f43      	subs	r3, r0, #5
 8000b56:	409d      	lsls	r5, r3
 8000b58:	2376      	movs	r3, #118	; 0x76
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	1a18      	subs	r0, r3, r0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	e7af      	b.n	8000ac2 <__aeabi_fdiv+0x56>
 8000b62:	2103      	movs	r1, #3
 8000b64:	e7ad      	b.n	8000ac2 <__aeabi_fdiv+0x56>
 8000b66:	0020      	movs	r0, r4
 8000b68:	f002 fb14 	bl	8003194 <__clzsi2>
 8000b6c:	1f43      	subs	r3, r0, #5
 8000b6e:	409c      	lsls	r4, r3
 8000b70:	2376      	movs	r3, #118	; 0x76
 8000b72:	425b      	negs	r3, r3
 8000b74:	1a1b      	subs	r3, r3, r0
 8000b76:	4698      	mov	r8, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	469b      	mov	fp, r3
 8000b7e:	e791      	b.n	8000aa4 <__aeabi_fdiv+0x38>
 8000b80:	230c      	movs	r3, #12
 8000b82:	4699      	mov	r9, r3
 8000b84:	33f3      	adds	r3, #243	; 0xf3
 8000b86:	4698      	mov	r8, r3
 8000b88:	3bfc      	subs	r3, #252	; 0xfc
 8000b8a:	469b      	mov	fp, r3
 8000b8c:	e78a      	b.n	8000aa4 <__aeabi_fdiv+0x38>
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fdiv+0x128>
 8000b92:	e0a5      	b.n	8000ce0 <__aeabi_fdiv+0x274>
 8000b94:	4655      	mov	r5, sl
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fdiv+0x130>
 8000b9a:	e081      	b.n	8000ca0 <__aeabi_fdiv+0x234>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	402b      	ands	r3, r5
 8000ba4:	0264      	lsls	r4, r4, #9
 8000ba6:	05c9      	lsls	r1, r1, #23
 8000ba8:	0a60      	lsrs	r0, r4, #9
 8000baa:	07db      	lsls	r3, r3, #31
 8000bac:	4308      	orrs	r0, r1
 8000bae:	4318      	orrs	r0, r3
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bc3c      	pop	{r2, r3, r4, r5}
 8000bb4:	4690      	mov	r8, r2
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	46a2      	mov	sl, r4
 8000bba:	46ab      	mov	fp, r5
 8000bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bbe:	2480      	movs	r4, #128	; 0x80
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	03e4      	lsls	r4, r4, #15
 8000bc4:	21ff      	movs	r1, #255	; 0xff
 8000bc6:	e7ed      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000bc8:	21ff      	movs	r1, #255	; 0xff
 8000bca:	2400      	movs	r4, #0
 8000bcc:	e7ea      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	291b      	cmp	r1, #27
 8000bd4:	dd66      	ble.n	8000ca4 <__aeabi_fdiv+0x238>
 8000bd6:	9a01      	ldr	r2, [sp, #4]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2400      	movs	r4, #0
 8000bde:	e7e1      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	03db      	lsls	r3, r3, #15
 8000be4:	421c      	tst	r4, r3
 8000be6:	d038      	beq.n	8000c5a <__aeabi_fdiv+0x1ee>
 8000be8:	421d      	tst	r5, r3
 8000bea:	d051      	beq.n	8000c90 <__aeabi_fdiv+0x224>
 8000bec:	431c      	orrs	r4, r3
 8000bee:	0264      	lsls	r4, r4, #9
 8000bf0:	0a64      	lsrs	r4, r4, #9
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	21ff      	movs	r1, #255	; 0xff
 8000bf6:	e7d5      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000bf8:	0163      	lsls	r3, r4, #5
 8000bfa:	016c      	lsls	r4, r5, #5
 8000bfc:	42a3      	cmp	r3, r4
 8000bfe:	d23b      	bcs.n	8000c78 <__aeabi_fdiv+0x20c>
 8000c00:	261b      	movs	r6, #27
 8000c02:	2100      	movs	r1, #0
 8000c04:	3801      	subs	r0, #1
 8000c06:	2501      	movs	r5, #1
 8000c08:	001f      	movs	r7, r3
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2f00      	cmp	r7, #0
 8000c10:	db01      	blt.n	8000c16 <__aeabi_fdiv+0x1aa>
 8000c12:	429c      	cmp	r4, r3
 8000c14:	d801      	bhi.n	8000c1a <__aeabi_fdiv+0x1ae>
 8000c16:	1b1b      	subs	r3, r3, r4
 8000c18:	4329      	orrs	r1, r5
 8000c1a:	3e01      	subs	r6, #1
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d1f3      	bne.n	8000c08 <__aeabi_fdiv+0x19c>
 8000c20:	001c      	movs	r4, r3
 8000c22:	1e63      	subs	r3, r4, #1
 8000c24:	419c      	sbcs	r4, r3
 8000c26:	430c      	orrs	r4, r1
 8000c28:	0001      	movs	r1, r0
 8000c2a:	317f      	adds	r1, #127	; 0x7f
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	ddce      	ble.n	8000bce <__aeabi_fdiv+0x162>
 8000c30:	0763      	lsls	r3, r4, #29
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fdiv+0x1d2>
 8000c34:	230f      	movs	r3, #15
 8000c36:	4023      	ands	r3, r4
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fdiv+0x1d2>
 8000c3c:	3404      	adds	r4, #4
 8000c3e:	0123      	lsls	r3, r4, #4
 8000c40:	d503      	bpl.n	8000c4a <__aeabi_fdiv+0x1de>
 8000c42:	0001      	movs	r1, r0
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <__aeabi_fdiv+0x28c>)
 8000c46:	3180      	adds	r1, #128	; 0x80
 8000c48:	401c      	ands	r4, r3
 8000c4a:	29fe      	cmp	r1, #254	; 0xfe
 8000c4c:	dd0d      	ble.n	8000c6a <__aeabi_fdiv+0x1fe>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	9a01      	ldr	r2, [sp, #4]
 8000c52:	21ff      	movs	r1, #255	; 0xff
 8000c54:	4013      	ands	r3, r2
 8000c56:	2400      	movs	r4, #0
 8000c58:	e7a4      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	03db      	lsls	r3, r3, #15
 8000c5e:	431c      	orrs	r4, r3
 8000c60:	0264      	lsls	r4, r4, #9
 8000c62:	0a64      	lsrs	r4, r4, #9
 8000c64:	0033      	movs	r3, r6
 8000c66:	21ff      	movs	r1, #255	; 0xff
 8000c68:	e79c      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	9a01      	ldr	r2, [sp, #4]
 8000c6e:	01a4      	lsls	r4, r4, #6
 8000c70:	0a64      	lsrs	r4, r4, #9
 8000c72:	b2c9      	uxtb	r1, r1
 8000c74:	4013      	ands	r3, r2
 8000c76:	e795      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000c78:	1b1b      	subs	r3, r3, r4
 8000c7a:	261a      	movs	r6, #26
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	e7c2      	b.n	8000c06 <__aeabi_fdiv+0x19a>
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	468b      	mov	fp, r1
 8000c84:	469a      	mov	sl, r3
 8000c86:	2400      	movs	r4, #0
 8000c88:	e74c      	b.n	8000b24 <__aeabi_fdiv+0xb8>
 8000c8a:	0263      	lsls	r3, r4, #9
 8000c8c:	d5e5      	bpl.n	8000c5a <__aeabi_fdiv+0x1ee>
 8000c8e:	2500      	movs	r5, #0
 8000c90:	2480      	movs	r4, #128	; 0x80
 8000c92:	03e4      	lsls	r4, r4, #15
 8000c94:	432c      	orrs	r4, r5
 8000c96:	0264      	lsls	r4, r4, #9
 8000c98:	0a64      	lsrs	r4, r4, #9
 8000c9a:	9b00      	ldr	r3, [sp, #0]
 8000c9c:	21ff      	movs	r1, #255	; 0xff
 8000c9e:	e781      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000ca0:	9501      	str	r5, [sp, #4]
 8000ca2:	e7c1      	b.n	8000c28 <__aeabi_fdiv+0x1bc>
 8000ca4:	0023      	movs	r3, r4
 8000ca6:	2020      	movs	r0, #32
 8000ca8:	40cb      	lsrs	r3, r1
 8000caa:	1a41      	subs	r1, r0, r1
 8000cac:	408c      	lsls	r4, r1
 8000cae:	1e61      	subs	r1, r4, #1
 8000cb0:	418c      	sbcs	r4, r1
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	0763      	lsls	r3, r4, #29
 8000cb6:	d004      	beq.n	8000cc2 <__aeabi_fdiv+0x256>
 8000cb8:	230f      	movs	r3, #15
 8000cba:	4023      	ands	r3, r4
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_fdiv+0x256>
 8000cc0:	3404      	adds	r4, #4
 8000cc2:	0163      	lsls	r3, r4, #5
 8000cc4:	d505      	bpl.n	8000cd2 <__aeabi_fdiv+0x266>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	9a01      	ldr	r2, [sp, #4]
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2400      	movs	r4, #0
 8000cd0:	e768      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9a01      	ldr	r2, [sp, #4]
 8000cd6:	01a4      	lsls	r4, r4, #6
 8000cd8:	0a64      	lsrs	r4, r4, #9
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e761      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	03db      	lsls	r3, r3, #15
 8000ce4:	431c      	orrs	r4, r3
 8000ce6:	0264      	lsls	r4, r4, #9
 8000ce8:	0a64      	lsrs	r4, r4, #9
 8000cea:	4653      	mov	r3, sl
 8000cec:	21ff      	movs	r1, #255	; 0xff
 8000cee:	e759      	b.n	8000ba4 <__aeabi_fdiv+0x138>
 8000cf0:	0800a1ac 	.word	0x0800a1ac
 8000cf4:	0800a1ec 	.word	0x0800a1ec
 8000cf8:	f7ffffff 	.word	0xf7ffffff

08000cfc <__eqsf2>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	0042      	lsls	r2, r0, #1
 8000d00:	0245      	lsls	r5, r0, #9
 8000d02:	024e      	lsls	r6, r1, #9
 8000d04:	004c      	lsls	r4, r1, #1
 8000d06:	0fc3      	lsrs	r3, r0, #31
 8000d08:	0a6d      	lsrs	r5, r5, #9
 8000d0a:	0e12      	lsrs	r2, r2, #24
 8000d0c:	0a76      	lsrs	r6, r6, #9
 8000d0e:	0e24      	lsrs	r4, r4, #24
 8000d10:	0fc9      	lsrs	r1, r1, #31
 8000d12:	2001      	movs	r0, #1
 8000d14:	2aff      	cmp	r2, #255	; 0xff
 8000d16:	d006      	beq.n	8000d26 <__eqsf2+0x2a>
 8000d18:	2cff      	cmp	r4, #255	; 0xff
 8000d1a:	d003      	beq.n	8000d24 <__eqsf2+0x28>
 8000d1c:	42a2      	cmp	r2, r4
 8000d1e:	d101      	bne.n	8000d24 <__eqsf2+0x28>
 8000d20:	42b5      	cmp	r5, r6
 8000d22:	d006      	beq.n	8000d32 <__eqsf2+0x36>
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d1fc      	bne.n	8000d24 <__eqsf2+0x28>
 8000d2a:	2cff      	cmp	r4, #255	; 0xff
 8000d2c:	d1fa      	bne.n	8000d24 <__eqsf2+0x28>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d1f8      	bne.n	8000d24 <__eqsf2+0x28>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d006      	beq.n	8000d44 <__eqsf2+0x48>
 8000d36:	2001      	movs	r0, #1
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d1f3      	bne.n	8000d24 <__eqsf2+0x28>
 8000d3c:	0028      	movs	r0, r5
 8000d3e:	1e45      	subs	r5, r0, #1
 8000d40:	41a8      	sbcs	r0, r5
 8000d42:	e7ef      	b.n	8000d24 <__eqsf2+0x28>
 8000d44:	2000      	movs	r0, #0
 8000d46:	e7ed      	b.n	8000d24 <__eqsf2+0x28>

08000d48 <__gesf2>:
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	0042      	lsls	r2, r0, #1
 8000d4c:	0245      	lsls	r5, r0, #9
 8000d4e:	024c      	lsls	r4, r1, #9
 8000d50:	0fc3      	lsrs	r3, r0, #31
 8000d52:	0048      	lsls	r0, r1, #1
 8000d54:	0a6d      	lsrs	r5, r5, #9
 8000d56:	0e12      	lsrs	r2, r2, #24
 8000d58:	0a64      	lsrs	r4, r4, #9
 8000d5a:	0e00      	lsrs	r0, r0, #24
 8000d5c:	0fc9      	lsrs	r1, r1, #31
 8000d5e:	2aff      	cmp	r2, #255	; 0xff
 8000d60:	d01e      	beq.n	8000da0 <__gesf2+0x58>
 8000d62:	28ff      	cmp	r0, #255	; 0xff
 8000d64:	d021      	beq.n	8000daa <__gesf2+0x62>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d10a      	bne.n	8000d80 <__gesf2+0x38>
 8000d6a:	426e      	negs	r6, r5
 8000d6c:	416e      	adcs	r6, r5
 8000d6e:	b2f6      	uxtb	r6, r6
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d10f      	bne.n	8000d94 <__gesf2+0x4c>
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d10d      	bne.n	8000d94 <__gesf2+0x4c>
 8000d78:	2000      	movs	r0, #0
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d009      	beq.n	8000d92 <__gesf2+0x4a>
 8000d7e:	e005      	b.n	8000d8c <__gesf2+0x44>
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d101      	bne.n	8000d88 <__gesf2+0x40>
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d001      	beq.n	8000d8c <__gesf2+0x44>
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d011      	beq.n	8000db0 <__gesf2+0x68>
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4258      	negs	r0, r3
 8000d90:	4308      	orrs	r0, r1
 8000d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d0f7      	beq.n	8000d88 <__gesf2+0x40>
 8000d98:	2001      	movs	r0, #1
 8000d9a:	3901      	subs	r1, #1
 8000d9c:	4308      	orrs	r0, r1
 8000d9e:	e7f8      	b.n	8000d92 <__gesf2+0x4a>
 8000da0:	2d00      	cmp	r5, #0
 8000da2:	d0de      	beq.n	8000d62 <__gesf2+0x1a>
 8000da4:	2002      	movs	r0, #2
 8000da6:	4240      	negs	r0, r0
 8000da8:	e7f3      	b.n	8000d92 <__gesf2+0x4a>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d0db      	beq.n	8000d66 <__gesf2+0x1e>
 8000dae:	e7f9      	b.n	8000da4 <__gesf2+0x5c>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	dceb      	bgt.n	8000d8c <__gesf2+0x44>
 8000db4:	db04      	blt.n	8000dc0 <__gesf2+0x78>
 8000db6:	42a5      	cmp	r5, r4
 8000db8:	d8e8      	bhi.n	8000d8c <__gesf2+0x44>
 8000dba:	2000      	movs	r0, #0
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	d2e8      	bcs.n	8000d92 <__gesf2+0x4a>
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	1e58      	subs	r0, r3, #1
 8000dc4:	4308      	orrs	r0, r1
 8000dc6:	e7e4      	b.n	8000d92 <__gesf2+0x4a>

08000dc8 <__lesf2>:
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	0042      	lsls	r2, r0, #1
 8000dcc:	024d      	lsls	r5, r1, #9
 8000dce:	004c      	lsls	r4, r1, #1
 8000dd0:	0246      	lsls	r6, r0, #9
 8000dd2:	0a76      	lsrs	r6, r6, #9
 8000dd4:	0e12      	lsrs	r2, r2, #24
 8000dd6:	0fc3      	lsrs	r3, r0, #31
 8000dd8:	0a6d      	lsrs	r5, r5, #9
 8000dda:	0e24      	lsrs	r4, r4, #24
 8000ddc:	0fc9      	lsrs	r1, r1, #31
 8000dde:	2aff      	cmp	r2, #255	; 0xff
 8000de0:	d016      	beq.n	8000e10 <__lesf2+0x48>
 8000de2:	2cff      	cmp	r4, #255	; 0xff
 8000de4:	d018      	beq.n	8000e18 <__lesf2+0x50>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d10a      	bne.n	8000e00 <__lesf2+0x38>
 8000dea:	4270      	negs	r0, r6
 8000dec:	4170      	adcs	r0, r6
 8000dee:	b2c0      	uxtb	r0, r0
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d015      	beq.n	8000e20 <__lesf2+0x58>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d005      	beq.n	8000e04 <__lesf2+0x3c>
 8000df8:	2001      	movs	r0, #1
 8000dfa:	3901      	subs	r1, #1
 8000dfc:	4308      	orrs	r0, r1
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d013      	beq.n	8000e2c <__lesf2+0x64>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d014      	beq.n	8000e32 <__lesf2+0x6a>
 8000e08:	2001      	movs	r0, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	4318      	orrs	r0, r3
 8000e0e:	e7f6      	b.n	8000dfe <__lesf2+0x36>
 8000e10:	2002      	movs	r0, #2
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d1f3      	bne.n	8000dfe <__lesf2+0x36>
 8000e16:	e7e4      	b.n	8000de2 <__lesf2+0x1a>
 8000e18:	2002      	movs	r0, #2
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	d1ef      	bne.n	8000dfe <__lesf2+0x36>
 8000e1e:	e7e2      	b.n	8000de6 <__lesf2+0x1e>
 8000e20:	2d00      	cmp	r5, #0
 8000e22:	d1e7      	bne.n	8000df4 <__lesf2+0x2c>
 8000e24:	2000      	movs	r0, #0
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d0e9      	beq.n	8000dfe <__lesf2+0x36>
 8000e2a:	e7ed      	b.n	8000e08 <__lesf2+0x40>
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d1e9      	bne.n	8000e04 <__lesf2+0x3c>
 8000e30:	e7ea      	b.n	8000e08 <__lesf2+0x40>
 8000e32:	42a2      	cmp	r2, r4
 8000e34:	dc06      	bgt.n	8000e44 <__lesf2+0x7c>
 8000e36:	dbdf      	blt.n	8000df8 <__lesf2+0x30>
 8000e38:	42ae      	cmp	r6, r5
 8000e3a:	d803      	bhi.n	8000e44 <__lesf2+0x7c>
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	42ae      	cmp	r6, r5
 8000e40:	d3da      	bcc.n	8000df8 <__lesf2+0x30>
 8000e42:	e7dc      	b.n	8000dfe <__lesf2+0x36>
 8000e44:	2001      	movs	r0, #1
 8000e46:	4249      	negs	r1, r1
 8000e48:	4308      	orrs	r0, r1
 8000e4a:	e7d8      	b.n	8000dfe <__lesf2+0x36>

08000e4c <__aeabi_fmul>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	4657      	mov	r7, sl
 8000e50:	464e      	mov	r6, r9
 8000e52:	4645      	mov	r5, r8
 8000e54:	46de      	mov	lr, fp
 8000e56:	b5e0      	push	{r5, r6, r7, lr}
 8000e58:	0247      	lsls	r7, r0, #9
 8000e5a:	0046      	lsls	r6, r0, #1
 8000e5c:	4688      	mov	r8, r1
 8000e5e:	0a7f      	lsrs	r7, r7, #9
 8000e60:	0e36      	lsrs	r6, r6, #24
 8000e62:	0fc4      	lsrs	r4, r0, #31
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d047      	beq.n	8000ef8 <__aeabi_fmul+0xac>
 8000e68:	2eff      	cmp	r6, #255	; 0xff
 8000e6a:	d024      	beq.n	8000eb6 <__aeabi_fmul+0x6a>
 8000e6c:	00fb      	lsls	r3, r7, #3
 8000e6e:	2780      	movs	r7, #128	; 0x80
 8000e70:	04ff      	lsls	r7, r7, #19
 8000e72:	431f      	orrs	r7, r3
 8000e74:	2300      	movs	r3, #0
 8000e76:	4699      	mov	r9, r3
 8000e78:	469a      	mov	sl, r3
 8000e7a:	3e7f      	subs	r6, #127	; 0x7f
 8000e7c:	4643      	mov	r3, r8
 8000e7e:	025d      	lsls	r5, r3, #9
 8000e80:	0058      	lsls	r0, r3, #1
 8000e82:	0fdb      	lsrs	r3, r3, #31
 8000e84:	0a6d      	lsrs	r5, r5, #9
 8000e86:	0e00      	lsrs	r0, r0, #24
 8000e88:	4698      	mov	r8, r3
 8000e8a:	d043      	beq.n	8000f14 <__aeabi_fmul+0xc8>
 8000e8c:	28ff      	cmp	r0, #255	; 0xff
 8000e8e:	d03b      	beq.n	8000f08 <__aeabi_fmul+0xbc>
 8000e90:	00eb      	lsls	r3, r5, #3
 8000e92:	2580      	movs	r5, #128	; 0x80
 8000e94:	2200      	movs	r2, #0
 8000e96:	04ed      	lsls	r5, r5, #19
 8000e98:	431d      	orrs	r5, r3
 8000e9a:	387f      	subs	r0, #127	; 0x7f
 8000e9c:	1836      	adds	r6, r6, r0
 8000e9e:	1c73      	adds	r3, r6, #1
 8000ea0:	4641      	mov	r1, r8
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	464b      	mov	r3, r9
 8000ea6:	4061      	eors	r1, r4
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d864      	bhi.n	8000f78 <__aeabi_fmul+0x12c>
 8000eae:	4875      	ldr	r0, [pc, #468]	; (8001084 <__aeabi_fmul+0x238>)
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	58c3      	ldr	r3, [r0, r3]
 8000eb4:	469f      	mov	pc, r3
 8000eb6:	2f00      	cmp	r7, #0
 8000eb8:	d142      	bne.n	8000f40 <__aeabi_fmul+0xf4>
 8000eba:	2308      	movs	r3, #8
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	3b06      	subs	r3, #6
 8000ec0:	26ff      	movs	r6, #255	; 0xff
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	e7da      	b.n	8000e7c <__aeabi_fmul+0x30>
 8000ec6:	4641      	mov	r1, r8
 8000ec8:	2a02      	cmp	r2, #2
 8000eca:	d028      	beq.n	8000f1e <__aeabi_fmul+0xd2>
 8000ecc:	2a03      	cmp	r2, #3
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fmul+0x86>
 8000ed0:	e0ce      	b.n	8001070 <__aeabi_fmul+0x224>
 8000ed2:	2a01      	cmp	r2, #1
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fmul+0x8c>
 8000ed6:	e0ac      	b.n	8001032 <__aeabi_fmul+0x1e6>
 8000ed8:	4011      	ands	r1, r2
 8000eda:	2000      	movs	r0, #0
 8000edc:	2200      	movs	r2, #0
 8000ede:	b2cc      	uxtb	r4, r1
 8000ee0:	0240      	lsls	r0, r0, #9
 8000ee2:	05d2      	lsls	r2, r2, #23
 8000ee4:	0a40      	lsrs	r0, r0, #9
 8000ee6:	07e4      	lsls	r4, r4, #31
 8000ee8:	4310      	orrs	r0, r2
 8000eea:	4320      	orrs	r0, r4
 8000eec:	bc3c      	pop	{r2, r3, r4, r5}
 8000eee:	4690      	mov	r8, r2
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	46a2      	mov	sl, r4
 8000ef4:	46ab      	mov	fp, r5
 8000ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef8:	2f00      	cmp	r7, #0
 8000efa:	d115      	bne.n	8000f28 <__aeabi_fmul+0xdc>
 8000efc:	2304      	movs	r3, #4
 8000efe:	4699      	mov	r9, r3
 8000f00:	3b03      	subs	r3, #3
 8000f02:	2600      	movs	r6, #0
 8000f04:	469a      	mov	sl, r3
 8000f06:	e7b9      	b.n	8000e7c <__aeabi_fmul+0x30>
 8000f08:	20ff      	movs	r0, #255	; 0xff
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	2d00      	cmp	r5, #0
 8000f0e:	d0c5      	beq.n	8000e9c <__aeabi_fmul+0x50>
 8000f10:	2203      	movs	r2, #3
 8000f12:	e7c3      	b.n	8000e9c <__aeabi_fmul+0x50>
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d119      	bne.n	8000f4c <__aeabi_fmul+0x100>
 8000f18:	2000      	movs	r0, #0
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	e7be      	b.n	8000e9c <__aeabi_fmul+0x50>
 8000f1e:	2401      	movs	r4, #1
 8000f20:	22ff      	movs	r2, #255	; 0xff
 8000f22:	400c      	ands	r4, r1
 8000f24:	2000      	movs	r0, #0
 8000f26:	e7db      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8000f28:	0038      	movs	r0, r7
 8000f2a:	f002 f933 	bl	8003194 <__clzsi2>
 8000f2e:	2676      	movs	r6, #118	; 0x76
 8000f30:	1f43      	subs	r3, r0, #5
 8000f32:	409f      	lsls	r7, r3
 8000f34:	2300      	movs	r3, #0
 8000f36:	4276      	negs	r6, r6
 8000f38:	1a36      	subs	r6, r6, r0
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	469a      	mov	sl, r3
 8000f3e:	e79d      	b.n	8000e7c <__aeabi_fmul+0x30>
 8000f40:	230c      	movs	r3, #12
 8000f42:	4699      	mov	r9, r3
 8000f44:	3b09      	subs	r3, #9
 8000f46:	26ff      	movs	r6, #255	; 0xff
 8000f48:	469a      	mov	sl, r3
 8000f4a:	e797      	b.n	8000e7c <__aeabi_fmul+0x30>
 8000f4c:	0028      	movs	r0, r5
 8000f4e:	f002 f921 	bl	8003194 <__clzsi2>
 8000f52:	1f43      	subs	r3, r0, #5
 8000f54:	409d      	lsls	r5, r3
 8000f56:	2376      	movs	r3, #118	; 0x76
 8000f58:	425b      	negs	r3, r3
 8000f5a:	1a18      	subs	r0, r3, r0
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	e79d      	b.n	8000e9c <__aeabi_fmul+0x50>
 8000f60:	2080      	movs	r0, #128	; 0x80
 8000f62:	2400      	movs	r4, #0
 8000f64:	03c0      	lsls	r0, r0, #15
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	e7ba      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8000f6a:	003d      	movs	r5, r7
 8000f6c:	4652      	mov	r2, sl
 8000f6e:	e7ab      	b.n	8000ec8 <__aeabi_fmul+0x7c>
 8000f70:	003d      	movs	r5, r7
 8000f72:	0021      	movs	r1, r4
 8000f74:	4652      	mov	r2, sl
 8000f76:	e7a7      	b.n	8000ec8 <__aeabi_fmul+0x7c>
 8000f78:	0c3b      	lsrs	r3, r7, #16
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	042a      	lsls	r2, r5, #16
 8000f7e:	0c12      	lsrs	r2, r2, #16
 8000f80:	0c2b      	lsrs	r3, r5, #16
 8000f82:	0014      	movs	r4, r2
 8000f84:	4660      	mov	r0, ip
 8000f86:	4665      	mov	r5, ip
 8000f88:	043f      	lsls	r7, r7, #16
 8000f8a:	0c3f      	lsrs	r7, r7, #16
 8000f8c:	437c      	muls	r4, r7
 8000f8e:	4342      	muls	r2, r0
 8000f90:	435d      	muls	r5, r3
 8000f92:	437b      	muls	r3, r7
 8000f94:	0c27      	lsrs	r7, r4, #16
 8000f96:	189b      	adds	r3, r3, r2
 8000f98:	18ff      	adds	r7, r7, r3
 8000f9a:	42ba      	cmp	r2, r7
 8000f9c:	d903      	bls.n	8000fa6 <__aeabi_fmul+0x15a>
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	469c      	mov	ip, r3
 8000fa4:	4465      	add	r5, ip
 8000fa6:	0424      	lsls	r4, r4, #16
 8000fa8:	043a      	lsls	r2, r7, #16
 8000faa:	0c24      	lsrs	r4, r4, #16
 8000fac:	1912      	adds	r2, r2, r4
 8000fae:	0193      	lsls	r3, r2, #6
 8000fb0:	1e5c      	subs	r4, r3, #1
 8000fb2:	41a3      	sbcs	r3, r4
 8000fb4:	0c3f      	lsrs	r7, r7, #16
 8000fb6:	0e92      	lsrs	r2, r2, #26
 8000fb8:	197d      	adds	r5, r7, r5
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	01ad      	lsls	r5, r5, #6
 8000fbe:	4315      	orrs	r5, r2
 8000fc0:	012b      	lsls	r3, r5, #4
 8000fc2:	d504      	bpl.n	8000fce <__aeabi_fmul+0x182>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	465e      	mov	r6, fp
 8000fc8:	086a      	lsrs	r2, r5, #1
 8000fca:	401d      	ands	r5, r3
 8000fcc:	4315      	orrs	r5, r2
 8000fce:	0032      	movs	r2, r6
 8000fd0:	327f      	adds	r2, #127	; 0x7f
 8000fd2:	2a00      	cmp	r2, #0
 8000fd4:	dd25      	ble.n	8001022 <__aeabi_fmul+0x1d6>
 8000fd6:	076b      	lsls	r3, r5, #29
 8000fd8:	d004      	beq.n	8000fe4 <__aeabi_fmul+0x198>
 8000fda:	230f      	movs	r3, #15
 8000fdc:	402b      	ands	r3, r5
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d000      	beq.n	8000fe4 <__aeabi_fmul+0x198>
 8000fe2:	3504      	adds	r5, #4
 8000fe4:	012b      	lsls	r3, r5, #4
 8000fe6:	d503      	bpl.n	8000ff0 <__aeabi_fmul+0x1a4>
 8000fe8:	0032      	movs	r2, r6
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <__aeabi_fmul+0x23c>)
 8000fec:	3280      	adds	r2, #128	; 0x80
 8000fee:	401d      	ands	r5, r3
 8000ff0:	2afe      	cmp	r2, #254	; 0xfe
 8000ff2:	dc94      	bgt.n	8000f1e <__aeabi_fmul+0xd2>
 8000ff4:	2401      	movs	r4, #1
 8000ff6:	01a8      	lsls	r0, r5, #6
 8000ff8:	0a40      	lsrs	r0, r0, #9
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	400c      	ands	r4, r1
 8000ffe:	e76f      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8001000:	2080      	movs	r0, #128	; 0x80
 8001002:	03c0      	lsls	r0, r0, #15
 8001004:	4207      	tst	r7, r0
 8001006:	d007      	beq.n	8001018 <__aeabi_fmul+0x1cc>
 8001008:	4205      	tst	r5, r0
 800100a:	d105      	bne.n	8001018 <__aeabi_fmul+0x1cc>
 800100c:	4328      	orrs	r0, r5
 800100e:	0240      	lsls	r0, r0, #9
 8001010:	0a40      	lsrs	r0, r0, #9
 8001012:	4644      	mov	r4, r8
 8001014:	22ff      	movs	r2, #255	; 0xff
 8001016:	e763      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8001018:	4338      	orrs	r0, r7
 800101a:	0240      	lsls	r0, r0, #9
 800101c:	0a40      	lsrs	r0, r0, #9
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	e75e      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8001022:	2401      	movs	r4, #1
 8001024:	1aa3      	subs	r3, r4, r2
 8001026:	2b1b      	cmp	r3, #27
 8001028:	dd05      	ble.n	8001036 <__aeabi_fmul+0x1ea>
 800102a:	400c      	ands	r4, r1
 800102c:	2200      	movs	r2, #0
 800102e:	2000      	movs	r0, #0
 8001030:	e756      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8001032:	465e      	mov	r6, fp
 8001034:	e7cb      	b.n	8000fce <__aeabi_fmul+0x182>
 8001036:	002a      	movs	r2, r5
 8001038:	2020      	movs	r0, #32
 800103a:	40da      	lsrs	r2, r3
 800103c:	1ac3      	subs	r3, r0, r3
 800103e:	409d      	lsls	r5, r3
 8001040:	002b      	movs	r3, r5
 8001042:	1e5d      	subs	r5, r3, #1
 8001044:	41ab      	sbcs	r3, r5
 8001046:	4313      	orrs	r3, r2
 8001048:	075a      	lsls	r2, r3, #29
 800104a:	d004      	beq.n	8001056 <__aeabi_fmul+0x20a>
 800104c:	220f      	movs	r2, #15
 800104e:	401a      	ands	r2, r3
 8001050:	2a04      	cmp	r2, #4
 8001052:	d000      	beq.n	8001056 <__aeabi_fmul+0x20a>
 8001054:	3304      	adds	r3, #4
 8001056:	015a      	lsls	r2, r3, #5
 8001058:	d504      	bpl.n	8001064 <__aeabi_fmul+0x218>
 800105a:	2401      	movs	r4, #1
 800105c:	2201      	movs	r2, #1
 800105e:	400c      	ands	r4, r1
 8001060:	2000      	movs	r0, #0
 8001062:	e73d      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8001064:	2401      	movs	r4, #1
 8001066:	019b      	lsls	r3, r3, #6
 8001068:	0a58      	lsrs	r0, r3, #9
 800106a:	400c      	ands	r4, r1
 800106c:	2200      	movs	r2, #0
 800106e:	e737      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8001070:	2080      	movs	r0, #128	; 0x80
 8001072:	2401      	movs	r4, #1
 8001074:	03c0      	lsls	r0, r0, #15
 8001076:	4328      	orrs	r0, r5
 8001078:	0240      	lsls	r0, r0, #9
 800107a:	0a40      	lsrs	r0, r0, #9
 800107c:	400c      	ands	r4, r1
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	e72e      	b.n	8000ee0 <__aeabi_fmul+0x94>
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	0800a22c 	.word	0x0800a22c
 8001088:	f7ffffff 	.word	0xf7ffffff

0800108c <__aeabi_fsub>:
 800108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108e:	464f      	mov	r7, r9
 8001090:	46d6      	mov	lr, sl
 8001092:	4646      	mov	r6, r8
 8001094:	0044      	lsls	r4, r0, #1
 8001096:	b5c0      	push	{r6, r7, lr}
 8001098:	0fc2      	lsrs	r2, r0, #31
 800109a:	0247      	lsls	r7, r0, #9
 800109c:	0248      	lsls	r0, r1, #9
 800109e:	0a40      	lsrs	r0, r0, #9
 80010a0:	4684      	mov	ip, r0
 80010a2:	4666      	mov	r6, ip
 80010a4:	0a7b      	lsrs	r3, r7, #9
 80010a6:	0048      	lsls	r0, r1, #1
 80010a8:	0fc9      	lsrs	r1, r1, #31
 80010aa:	469a      	mov	sl, r3
 80010ac:	0e24      	lsrs	r4, r4, #24
 80010ae:	0015      	movs	r5, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	0e00      	lsrs	r0, r0, #24
 80010b4:	4689      	mov	r9, r1
 80010b6:	00f6      	lsls	r6, r6, #3
 80010b8:	28ff      	cmp	r0, #255	; 0xff
 80010ba:	d100      	bne.n	80010be <__aeabi_fsub+0x32>
 80010bc:	e08f      	b.n	80011de <__aeabi_fsub+0x152>
 80010be:	2101      	movs	r1, #1
 80010c0:	464f      	mov	r7, r9
 80010c2:	404f      	eors	r7, r1
 80010c4:	0039      	movs	r1, r7
 80010c6:	4291      	cmp	r1, r2
 80010c8:	d066      	beq.n	8001198 <__aeabi_fsub+0x10c>
 80010ca:	1a22      	subs	r2, r4, r0
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	dc00      	bgt.n	80010d2 <__aeabi_fsub+0x46>
 80010d0:	e09d      	b.n	800120e <__aeabi_fsub+0x182>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d13d      	bne.n	8001152 <__aeabi_fsub+0xc6>
 80010d6:	2e00      	cmp	r6, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_fsub+0x50>
 80010da:	e08b      	b.n	80011f4 <__aeabi_fsub+0x168>
 80010dc:	1e51      	subs	r1, r2, #1
 80010de:	2900      	cmp	r1, #0
 80010e0:	d000      	beq.n	80010e4 <__aeabi_fsub+0x58>
 80010e2:	e0b5      	b.n	8001250 <__aeabi_fsub+0x1c4>
 80010e4:	2401      	movs	r4, #1
 80010e6:	1b9b      	subs	r3, r3, r6
 80010e8:	015a      	lsls	r2, r3, #5
 80010ea:	d544      	bpl.n	8001176 <__aeabi_fsub+0xea>
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	099f      	lsrs	r7, r3, #6
 80010f0:	0038      	movs	r0, r7
 80010f2:	f002 f84f 	bl	8003194 <__clzsi2>
 80010f6:	3805      	subs	r0, #5
 80010f8:	4087      	lsls	r7, r0
 80010fa:	4284      	cmp	r4, r0
 80010fc:	dd00      	ble.n	8001100 <__aeabi_fsub+0x74>
 80010fe:	e096      	b.n	800122e <__aeabi_fsub+0x1a2>
 8001100:	1b04      	subs	r4, r0, r4
 8001102:	003a      	movs	r2, r7
 8001104:	2020      	movs	r0, #32
 8001106:	3401      	adds	r4, #1
 8001108:	40e2      	lsrs	r2, r4
 800110a:	1b04      	subs	r4, r0, r4
 800110c:	40a7      	lsls	r7, r4
 800110e:	003b      	movs	r3, r7
 8001110:	1e5f      	subs	r7, r3, #1
 8001112:	41bb      	sbcs	r3, r7
 8001114:	2400      	movs	r4, #0
 8001116:	4313      	orrs	r3, r2
 8001118:	075a      	lsls	r2, r3, #29
 800111a:	d004      	beq.n	8001126 <__aeabi_fsub+0x9a>
 800111c:	220f      	movs	r2, #15
 800111e:	401a      	ands	r2, r3
 8001120:	2a04      	cmp	r2, #4
 8001122:	d000      	beq.n	8001126 <__aeabi_fsub+0x9a>
 8001124:	3304      	adds	r3, #4
 8001126:	015a      	lsls	r2, r3, #5
 8001128:	d527      	bpl.n	800117a <__aeabi_fsub+0xee>
 800112a:	3401      	adds	r4, #1
 800112c:	2cff      	cmp	r4, #255	; 0xff
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0xa6>
 8001130:	e079      	b.n	8001226 <__aeabi_fsub+0x19a>
 8001132:	2201      	movs	r2, #1
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	0a5b      	lsrs	r3, r3, #9
 8001138:	b2e4      	uxtb	r4, r4
 800113a:	402a      	ands	r2, r5
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	05e4      	lsls	r4, r4, #23
 8001140:	0a58      	lsrs	r0, r3, #9
 8001142:	07d2      	lsls	r2, r2, #31
 8001144:	4320      	orrs	r0, r4
 8001146:	4310      	orrs	r0, r2
 8001148:	bc1c      	pop	{r2, r3, r4}
 800114a:	4690      	mov	r8, r2
 800114c:	4699      	mov	r9, r3
 800114e:	46a2      	mov	sl, r4
 8001150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001152:	2cff      	cmp	r4, #255	; 0xff
 8001154:	d0e0      	beq.n	8001118 <__aeabi_fsub+0x8c>
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	04c9      	lsls	r1, r1, #19
 800115a:	430e      	orrs	r6, r1
 800115c:	2a1b      	cmp	r2, #27
 800115e:	dc7b      	bgt.n	8001258 <__aeabi_fsub+0x1cc>
 8001160:	0031      	movs	r1, r6
 8001162:	2020      	movs	r0, #32
 8001164:	40d1      	lsrs	r1, r2
 8001166:	1a82      	subs	r2, r0, r2
 8001168:	4096      	lsls	r6, r2
 800116a:	1e72      	subs	r2, r6, #1
 800116c:	4196      	sbcs	r6, r2
 800116e:	430e      	orrs	r6, r1
 8001170:	1b9b      	subs	r3, r3, r6
 8001172:	015a      	lsls	r2, r3, #5
 8001174:	d4ba      	bmi.n	80010ec <__aeabi_fsub+0x60>
 8001176:	075a      	lsls	r2, r3, #29
 8001178:	d1d0      	bne.n	800111c <__aeabi_fsub+0x90>
 800117a:	2201      	movs	r2, #1
 800117c:	08df      	lsrs	r7, r3, #3
 800117e:	402a      	ands	r2, r5
 8001180:	2cff      	cmp	r4, #255	; 0xff
 8001182:	d133      	bne.n	80011ec <__aeabi_fsub+0x160>
 8001184:	2f00      	cmp	r7, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0xfe>
 8001188:	e0a8      	b.n	80012dc <__aeabi_fsub+0x250>
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	03db      	lsls	r3, r3, #15
 800118e:	433b      	orrs	r3, r7
 8001190:	025b      	lsls	r3, r3, #9
 8001192:	0a5b      	lsrs	r3, r3, #9
 8001194:	24ff      	movs	r4, #255	; 0xff
 8001196:	e7d1      	b.n	800113c <__aeabi_fsub+0xb0>
 8001198:	1a21      	subs	r1, r4, r0
 800119a:	2900      	cmp	r1, #0
 800119c:	dd4c      	ble.n	8001238 <__aeabi_fsub+0x1ac>
 800119e:	2800      	cmp	r0, #0
 80011a0:	d02a      	beq.n	80011f8 <__aeabi_fsub+0x16c>
 80011a2:	2cff      	cmp	r4, #255	; 0xff
 80011a4:	d0b8      	beq.n	8001118 <__aeabi_fsub+0x8c>
 80011a6:	2080      	movs	r0, #128	; 0x80
 80011a8:	04c0      	lsls	r0, r0, #19
 80011aa:	4306      	orrs	r6, r0
 80011ac:	291b      	cmp	r1, #27
 80011ae:	dd00      	ble.n	80011b2 <__aeabi_fsub+0x126>
 80011b0:	e0af      	b.n	8001312 <__aeabi_fsub+0x286>
 80011b2:	0030      	movs	r0, r6
 80011b4:	2720      	movs	r7, #32
 80011b6:	40c8      	lsrs	r0, r1
 80011b8:	1a79      	subs	r1, r7, r1
 80011ba:	408e      	lsls	r6, r1
 80011bc:	1e71      	subs	r1, r6, #1
 80011be:	418e      	sbcs	r6, r1
 80011c0:	4306      	orrs	r6, r0
 80011c2:	199b      	adds	r3, r3, r6
 80011c4:	0159      	lsls	r1, r3, #5
 80011c6:	d5d6      	bpl.n	8001176 <__aeabi_fsub+0xea>
 80011c8:	3401      	adds	r4, #1
 80011ca:	2cff      	cmp	r4, #255	; 0xff
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fsub+0x144>
 80011ce:	e085      	b.n	80012dc <__aeabi_fsub+0x250>
 80011d0:	2201      	movs	r2, #1
 80011d2:	497a      	ldr	r1, [pc, #488]	; (80013bc <__aeabi_fsub+0x330>)
 80011d4:	401a      	ands	r2, r3
 80011d6:	085b      	lsrs	r3, r3, #1
 80011d8:	400b      	ands	r3, r1
 80011da:	4313      	orrs	r3, r2
 80011dc:	e79c      	b.n	8001118 <__aeabi_fsub+0x8c>
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_fsub+0x158>
 80011e2:	e770      	b.n	80010c6 <__aeabi_fsub+0x3a>
 80011e4:	e76b      	b.n	80010be <__aeabi_fsub+0x32>
 80011e6:	1e3b      	subs	r3, r7, #0
 80011e8:	d1c5      	bne.n	8001176 <__aeabi_fsub+0xea>
 80011ea:	2200      	movs	r2, #0
 80011ec:	027b      	lsls	r3, r7, #9
 80011ee:	0a5b      	lsrs	r3, r3, #9
 80011f0:	b2e4      	uxtb	r4, r4
 80011f2:	e7a3      	b.n	800113c <__aeabi_fsub+0xb0>
 80011f4:	0014      	movs	r4, r2
 80011f6:	e78f      	b.n	8001118 <__aeabi_fsub+0x8c>
 80011f8:	2e00      	cmp	r6, #0
 80011fa:	d04d      	beq.n	8001298 <__aeabi_fsub+0x20c>
 80011fc:	1e48      	subs	r0, r1, #1
 80011fe:	2800      	cmp	r0, #0
 8001200:	d157      	bne.n	80012b2 <__aeabi_fsub+0x226>
 8001202:	199b      	adds	r3, r3, r6
 8001204:	2401      	movs	r4, #1
 8001206:	015a      	lsls	r2, r3, #5
 8001208:	d5b5      	bpl.n	8001176 <__aeabi_fsub+0xea>
 800120a:	2402      	movs	r4, #2
 800120c:	e7e0      	b.n	80011d0 <__aeabi_fsub+0x144>
 800120e:	2a00      	cmp	r2, #0
 8001210:	d125      	bne.n	800125e <__aeabi_fsub+0x1d2>
 8001212:	1c62      	adds	r2, r4, #1
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	2a01      	cmp	r2, #1
 8001218:	dd72      	ble.n	8001300 <__aeabi_fsub+0x274>
 800121a:	1b9f      	subs	r7, r3, r6
 800121c:	017a      	lsls	r2, r7, #5
 800121e:	d535      	bpl.n	800128c <__aeabi_fsub+0x200>
 8001220:	1af7      	subs	r7, r6, r3
 8001222:	000d      	movs	r5, r1
 8001224:	e764      	b.n	80010f0 <__aeabi_fsub+0x64>
 8001226:	2201      	movs	r2, #1
 8001228:	2300      	movs	r3, #0
 800122a:	402a      	ands	r2, r5
 800122c:	e786      	b.n	800113c <__aeabi_fsub+0xb0>
 800122e:	003b      	movs	r3, r7
 8001230:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <__aeabi_fsub+0x334>)
 8001232:	1a24      	subs	r4, r4, r0
 8001234:	4013      	ands	r3, r2
 8001236:	e76f      	b.n	8001118 <__aeabi_fsub+0x8c>
 8001238:	2900      	cmp	r1, #0
 800123a:	d16c      	bne.n	8001316 <__aeabi_fsub+0x28a>
 800123c:	1c61      	adds	r1, r4, #1
 800123e:	b2c8      	uxtb	r0, r1
 8001240:	2801      	cmp	r0, #1
 8001242:	dd4e      	ble.n	80012e2 <__aeabi_fsub+0x256>
 8001244:	29ff      	cmp	r1, #255	; 0xff
 8001246:	d049      	beq.n	80012dc <__aeabi_fsub+0x250>
 8001248:	199b      	adds	r3, r3, r6
 800124a:	085b      	lsrs	r3, r3, #1
 800124c:	000c      	movs	r4, r1
 800124e:	e763      	b.n	8001118 <__aeabi_fsub+0x8c>
 8001250:	2aff      	cmp	r2, #255	; 0xff
 8001252:	d041      	beq.n	80012d8 <__aeabi_fsub+0x24c>
 8001254:	000a      	movs	r2, r1
 8001256:	e781      	b.n	800115c <__aeabi_fsub+0xd0>
 8001258:	2601      	movs	r6, #1
 800125a:	1b9b      	subs	r3, r3, r6
 800125c:	e789      	b.n	8001172 <__aeabi_fsub+0xe6>
 800125e:	2c00      	cmp	r4, #0
 8001260:	d01c      	beq.n	800129c <__aeabi_fsub+0x210>
 8001262:	28ff      	cmp	r0, #255	; 0xff
 8001264:	d021      	beq.n	80012aa <__aeabi_fsub+0x21e>
 8001266:	2480      	movs	r4, #128	; 0x80
 8001268:	04e4      	lsls	r4, r4, #19
 800126a:	4252      	negs	r2, r2
 800126c:	4323      	orrs	r3, r4
 800126e:	2a1b      	cmp	r2, #27
 8001270:	dd00      	ble.n	8001274 <__aeabi_fsub+0x1e8>
 8001272:	e096      	b.n	80013a2 <__aeabi_fsub+0x316>
 8001274:	001c      	movs	r4, r3
 8001276:	2520      	movs	r5, #32
 8001278:	40d4      	lsrs	r4, r2
 800127a:	1aaa      	subs	r2, r5, r2
 800127c:	4093      	lsls	r3, r2
 800127e:	1e5a      	subs	r2, r3, #1
 8001280:	4193      	sbcs	r3, r2
 8001282:	4323      	orrs	r3, r4
 8001284:	1af3      	subs	r3, r6, r3
 8001286:	0004      	movs	r4, r0
 8001288:	000d      	movs	r5, r1
 800128a:	e72d      	b.n	80010e8 <__aeabi_fsub+0x5c>
 800128c:	2f00      	cmp	r7, #0
 800128e:	d000      	beq.n	8001292 <__aeabi_fsub+0x206>
 8001290:	e72e      	b.n	80010f0 <__aeabi_fsub+0x64>
 8001292:	2200      	movs	r2, #0
 8001294:	2400      	movs	r4, #0
 8001296:	e7a9      	b.n	80011ec <__aeabi_fsub+0x160>
 8001298:	000c      	movs	r4, r1
 800129a:	e73d      	b.n	8001118 <__aeabi_fsub+0x8c>
 800129c:	2b00      	cmp	r3, #0
 800129e:	d058      	beq.n	8001352 <__aeabi_fsub+0x2c6>
 80012a0:	43d2      	mvns	r2, r2
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d0ee      	beq.n	8001284 <__aeabi_fsub+0x1f8>
 80012a6:	28ff      	cmp	r0, #255	; 0xff
 80012a8:	d1e1      	bne.n	800126e <__aeabi_fsub+0x1e2>
 80012aa:	0033      	movs	r3, r6
 80012ac:	24ff      	movs	r4, #255	; 0xff
 80012ae:	000d      	movs	r5, r1
 80012b0:	e732      	b.n	8001118 <__aeabi_fsub+0x8c>
 80012b2:	29ff      	cmp	r1, #255	; 0xff
 80012b4:	d010      	beq.n	80012d8 <__aeabi_fsub+0x24c>
 80012b6:	0001      	movs	r1, r0
 80012b8:	e778      	b.n	80011ac <__aeabi_fsub+0x120>
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06e      	beq.n	800139c <__aeabi_fsub+0x310>
 80012be:	24ff      	movs	r4, #255	; 0xff
 80012c0:	2e00      	cmp	r6, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_fsub+0x23a>
 80012c4:	e728      	b.n	8001118 <__aeabi_fsub+0x8c>
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	4651      	mov	r1, sl
 80012ca:	03d2      	lsls	r2, r2, #15
 80012cc:	4211      	tst	r1, r2
 80012ce:	d003      	beq.n	80012d8 <__aeabi_fsub+0x24c>
 80012d0:	4661      	mov	r1, ip
 80012d2:	4211      	tst	r1, r2
 80012d4:	d100      	bne.n	80012d8 <__aeabi_fsub+0x24c>
 80012d6:	0033      	movs	r3, r6
 80012d8:	24ff      	movs	r4, #255	; 0xff
 80012da:	e71d      	b.n	8001118 <__aeabi_fsub+0x8c>
 80012dc:	24ff      	movs	r4, #255	; 0xff
 80012de:	2300      	movs	r3, #0
 80012e0:	e72c      	b.n	800113c <__aeabi_fsub+0xb0>
 80012e2:	2c00      	cmp	r4, #0
 80012e4:	d1e9      	bne.n	80012ba <__aeabi_fsub+0x22e>
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d063      	beq.n	80013b2 <__aeabi_fsub+0x326>
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d100      	bne.n	80012f0 <__aeabi_fsub+0x264>
 80012ee:	e713      	b.n	8001118 <__aeabi_fsub+0x8c>
 80012f0:	199b      	adds	r3, r3, r6
 80012f2:	015a      	lsls	r2, r3, #5
 80012f4:	d400      	bmi.n	80012f8 <__aeabi_fsub+0x26c>
 80012f6:	e73e      	b.n	8001176 <__aeabi_fsub+0xea>
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <__aeabi_fsub+0x334>)
 80012fa:	000c      	movs	r4, r1
 80012fc:	4013      	ands	r3, r2
 80012fe:	e70b      	b.n	8001118 <__aeabi_fsub+0x8c>
 8001300:	2c00      	cmp	r4, #0
 8001302:	d11e      	bne.n	8001342 <__aeabi_fsub+0x2b6>
 8001304:	2b00      	cmp	r3, #0
 8001306:	d12f      	bne.n	8001368 <__aeabi_fsub+0x2dc>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d04f      	beq.n	80013ac <__aeabi_fsub+0x320>
 800130c:	0033      	movs	r3, r6
 800130e:	000d      	movs	r5, r1
 8001310:	e702      	b.n	8001118 <__aeabi_fsub+0x8c>
 8001312:	2601      	movs	r6, #1
 8001314:	e755      	b.n	80011c2 <__aeabi_fsub+0x136>
 8001316:	2c00      	cmp	r4, #0
 8001318:	d11f      	bne.n	800135a <__aeabi_fsub+0x2ce>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d043      	beq.n	80013a6 <__aeabi_fsub+0x31a>
 800131e:	43c9      	mvns	r1, r1
 8001320:	2900      	cmp	r1, #0
 8001322:	d00b      	beq.n	800133c <__aeabi_fsub+0x2b0>
 8001324:	28ff      	cmp	r0, #255	; 0xff
 8001326:	d039      	beq.n	800139c <__aeabi_fsub+0x310>
 8001328:	291b      	cmp	r1, #27
 800132a:	dc44      	bgt.n	80013b6 <__aeabi_fsub+0x32a>
 800132c:	001c      	movs	r4, r3
 800132e:	2720      	movs	r7, #32
 8001330:	40cc      	lsrs	r4, r1
 8001332:	1a79      	subs	r1, r7, r1
 8001334:	408b      	lsls	r3, r1
 8001336:	1e59      	subs	r1, r3, #1
 8001338:	418b      	sbcs	r3, r1
 800133a:	4323      	orrs	r3, r4
 800133c:	199b      	adds	r3, r3, r6
 800133e:	0004      	movs	r4, r0
 8001340:	e740      	b.n	80011c4 <__aeabi_fsub+0x138>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d11a      	bne.n	800137c <__aeabi_fsub+0x2f0>
 8001346:	2e00      	cmp	r6, #0
 8001348:	d124      	bne.n	8001394 <__aeabi_fsub+0x308>
 800134a:	2780      	movs	r7, #128	; 0x80
 800134c:	2200      	movs	r2, #0
 800134e:	03ff      	lsls	r7, r7, #15
 8001350:	e71b      	b.n	800118a <__aeabi_fsub+0xfe>
 8001352:	0033      	movs	r3, r6
 8001354:	0004      	movs	r4, r0
 8001356:	000d      	movs	r5, r1
 8001358:	e6de      	b.n	8001118 <__aeabi_fsub+0x8c>
 800135a:	28ff      	cmp	r0, #255	; 0xff
 800135c:	d01e      	beq.n	800139c <__aeabi_fsub+0x310>
 800135e:	2480      	movs	r4, #128	; 0x80
 8001360:	04e4      	lsls	r4, r4, #19
 8001362:	4249      	negs	r1, r1
 8001364:	4323      	orrs	r3, r4
 8001366:	e7df      	b.n	8001328 <__aeabi_fsub+0x29c>
 8001368:	2e00      	cmp	r6, #0
 800136a:	d100      	bne.n	800136e <__aeabi_fsub+0x2e2>
 800136c:	e6d4      	b.n	8001118 <__aeabi_fsub+0x8c>
 800136e:	1b9f      	subs	r7, r3, r6
 8001370:	017a      	lsls	r2, r7, #5
 8001372:	d400      	bmi.n	8001376 <__aeabi_fsub+0x2ea>
 8001374:	e737      	b.n	80011e6 <__aeabi_fsub+0x15a>
 8001376:	1af3      	subs	r3, r6, r3
 8001378:	000d      	movs	r5, r1
 800137a:	e6cd      	b.n	8001118 <__aeabi_fsub+0x8c>
 800137c:	24ff      	movs	r4, #255	; 0xff
 800137e:	2e00      	cmp	r6, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_fsub+0x2f8>
 8001382:	e6c9      	b.n	8001118 <__aeabi_fsub+0x8c>
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	4650      	mov	r0, sl
 8001388:	03d2      	lsls	r2, r2, #15
 800138a:	4210      	tst	r0, r2
 800138c:	d0a4      	beq.n	80012d8 <__aeabi_fsub+0x24c>
 800138e:	4660      	mov	r0, ip
 8001390:	4210      	tst	r0, r2
 8001392:	d1a1      	bne.n	80012d8 <__aeabi_fsub+0x24c>
 8001394:	0033      	movs	r3, r6
 8001396:	000d      	movs	r5, r1
 8001398:	24ff      	movs	r4, #255	; 0xff
 800139a:	e6bd      	b.n	8001118 <__aeabi_fsub+0x8c>
 800139c:	0033      	movs	r3, r6
 800139e:	24ff      	movs	r4, #255	; 0xff
 80013a0:	e6ba      	b.n	8001118 <__aeabi_fsub+0x8c>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e76e      	b.n	8001284 <__aeabi_fsub+0x1f8>
 80013a6:	0033      	movs	r3, r6
 80013a8:	0004      	movs	r4, r0
 80013aa:	e6b5      	b.n	8001118 <__aeabi_fsub+0x8c>
 80013ac:	2700      	movs	r7, #0
 80013ae:	2200      	movs	r2, #0
 80013b0:	e71c      	b.n	80011ec <__aeabi_fsub+0x160>
 80013b2:	0033      	movs	r3, r6
 80013b4:	e6b0      	b.n	8001118 <__aeabi_fsub+0x8c>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e7c0      	b.n	800133c <__aeabi_fsub+0x2b0>
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	7dffffff 	.word	0x7dffffff
 80013c0:	fbffffff 	.word	0xfbffffff

080013c4 <__aeabi_f2iz>:
 80013c4:	0241      	lsls	r1, r0, #9
 80013c6:	0043      	lsls	r3, r0, #1
 80013c8:	0fc2      	lsrs	r2, r0, #31
 80013ca:	0a49      	lsrs	r1, r1, #9
 80013cc:	0e1b      	lsrs	r3, r3, #24
 80013ce:	2000      	movs	r0, #0
 80013d0:	2b7e      	cmp	r3, #126	; 0x7e
 80013d2:	dd0d      	ble.n	80013f0 <__aeabi_f2iz+0x2c>
 80013d4:	2b9d      	cmp	r3, #157	; 0x9d
 80013d6:	dc0c      	bgt.n	80013f2 <__aeabi_f2iz+0x2e>
 80013d8:	2080      	movs	r0, #128	; 0x80
 80013da:	0400      	lsls	r0, r0, #16
 80013dc:	4301      	orrs	r1, r0
 80013de:	2b95      	cmp	r3, #149	; 0x95
 80013e0:	dc0a      	bgt.n	80013f8 <__aeabi_f2iz+0x34>
 80013e2:	2096      	movs	r0, #150	; 0x96
 80013e4:	1ac3      	subs	r3, r0, r3
 80013e6:	40d9      	lsrs	r1, r3
 80013e8:	4248      	negs	r0, r1
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_f2iz+0x2c>
 80013ee:	0008      	movs	r0, r1
 80013f0:	4770      	bx	lr
 80013f2:	4b03      	ldr	r3, [pc, #12]	; (8001400 <__aeabi_f2iz+0x3c>)
 80013f4:	18d0      	adds	r0, r2, r3
 80013f6:	e7fb      	b.n	80013f0 <__aeabi_f2iz+0x2c>
 80013f8:	3b96      	subs	r3, #150	; 0x96
 80013fa:	4099      	lsls	r1, r3
 80013fc:	e7f4      	b.n	80013e8 <__aeabi_f2iz+0x24>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	7fffffff 	.word	0x7fffffff

08001404 <__aeabi_i2f>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	2800      	cmp	r0, #0
 8001408:	d030      	beq.n	800146c <__aeabi_i2f+0x68>
 800140a:	17c3      	asrs	r3, r0, #31
 800140c:	18c4      	adds	r4, r0, r3
 800140e:	405c      	eors	r4, r3
 8001410:	0fc5      	lsrs	r5, r0, #31
 8001412:	0020      	movs	r0, r4
 8001414:	f001 febe 	bl	8003194 <__clzsi2>
 8001418:	239e      	movs	r3, #158	; 0x9e
 800141a:	1a1b      	subs	r3, r3, r0
 800141c:	2b96      	cmp	r3, #150	; 0x96
 800141e:	dc0d      	bgt.n	800143c <__aeabi_i2f+0x38>
 8001420:	2296      	movs	r2, #150	; 0x96
 8001422:	1ad2      	subs	r2, r2, r3
 8001424:	4094      	lsls	r4, r2
 8001426:	002a      	movs	r2, r5
 8001428:	0264      	lsls	r4, r4, #9
 800142a:	0a64      	lsrs	r4, r4, #9
 800142c:	b2db      	uxtb	r3, r3
 800142e:	0264      	lsls	r4, r4, #9
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	0a60      	lsrs	r0, r4, #9
 8001434:	07d2      	lsls	r2, r2, #31
 8001436:	4318      	orrs	r0, r3
 8001438:	4310      	orrs	r0, r2
 800143a:	bd70      	pop	{r4, r5, r6, pc}
 800143c:	2b99      	cmp	r3, #153	; 0x99
 800143e:	dc19      	bgt.n	8001474 <__aeabi_i2f+0x70>
 8001440:	2299      	movs	r2, #153	; 0x99
 8001442:	1ad2      	subs	r2, r2, r3
 8001444:	2a00      	cmp	r2, #0
 8001446:	dd29      	ble.n	800149c <__aeabi_i2f+0x98>
 8001448:	4094      	lsls	r4, r2
 800144a:	0022      	movs	r2, r4
 800144c:	4c14      	ldr	r4, [pc, #80]	; (80014a0 <__aeabi_i2f+0x9c>)
 800144e:	4014      	ands	r4, r2
 8001450:	0751      	lsls	r1, r2, #29
 8001452:	d004      	beq.n	800145e <__aeabi_i2f+0x5a>
 8001454:	210f      	movs	r1, #15
 8001456:	400a      	ands	r2, r1
 8001458:	2a04      	cmp	r2, #4
 800145a:	d000      	beq.n	800145e <__aeabi_i2f+0x5a>
 800145c:	3404      	adds	r4, #4
 800145e:	0162      	lsls	r2, r4, #5
 8001460:	d413      	bmi.n	800148a <__aeabi_i2f+0x86>
 8001462:	01a4      	lsls	r4, r4, #6
 8001464:	0a64      	lsrs	r4, r4, #9
 8001466:	b2db      	uxtb	r3, r3
 8001468:	002a      	movs	r2, r5
 800146a:	e7e0      	b.n	800142e <__aeabi_i2f+0x2a>
 800146c:	2200      	movs	r2, #0
 800146e:	2300      	movs	r3, #0
 8001470:	2400      	movs	r4, #0
 8001472:	e7dc      	b.n	800142e <__aeabi_i2f+0x2a>
 8001474:	2205      	movs	r2, #5
 8001476:	0021      	movs	r1, r4
 8001478:	1a12      	subs	r2, r2, r0
 800147a:	40d1      	lsrs	r1, r2
 800147c:	22b9      	movs	r2, #185	; 0xb9
 800147e:	1ad2      	subs	r2, r2, r3
 8001480:	4094      	lsls	r4, r2
 8001482:	1e62      	subs	r2, r4, #1
 8001484:	4194      	sbcs	r4, r2
 8001486:	430c      	orrs	r4, r1
 8001488:	e7da      	b.n	8001440 <__aeabi_i2f+0x3c>
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <__aeabi_i2f+0x9c>)
 800148c:	002a      	movs	r2, r5
 800148e:	401c      	ands	r4, r3
 8001490:	239f      	movs	r3, #159	; 0x9f
 8001492:	01a4      	lsls	r4, r4, #6
 8001494:	1a1b      	subs	r3, r3, r0
 8001496:	0a64      	lsrs	r4, r4, #9
 8001498:	b2db      	uxtb	r3, r3
 800149a:	e7c8      	b.n	800142e <__aeabi_i2f+0x2a>
 800149c:	0022      	movs	r2, r4
 800149e:	e7d5      	b.n	800144c <__aeabi_i2f+0x48>
 80014a0:	fbffffff 	.word	0xfbffffff

080014a4 <__aeabi_ui2f>:
 80014a4:	b510      	push	{r4, lr}
 80014a6:	1e04      	subs	r4, r0, #0
 80014a8:	d027      	beq.n	80014fa <__aeabi_ui2f+0x56>
 80014aa:	f001 fe73 	bl	8003194 <__clzsi2>
 80014ae:	239e      	movs	r3, #158	; 0x9e
 80014b0:	1a1b      	subs	r3, r3, r0
 80014b2:	2b96      	cmp	r3, #150	; 0x96
 80014b4:	dc0a      	bgt.n	80014cc <__aeabi_ui2f+0x28>
 80014b6:	2296      	movs	r2, #150	; 0x96
 80014b8:	1ad2      	subs	r2, r2, r3
 80014ba:	4094      	lsls	r4, r2
 80014bc:	0264      	lsls	r4, r4, #9
 80014be:	0a64      	lsrs	r4, r4, #9
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	0264      	lsls	r4, r4, #9
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	0a60      	lsrs	r0, r4, #9
 80014c8:	4318      	orrs	r0, r3
 80014ca:	bd10      	pop	{r4, pc}
 80014cc:	2b99      	cmp	r3, #153	; 0x99
 80014ce:	dc17      	bgt.n	8001500 <__aeabi_ui2f+0x5c>
 80014d0:	2299      	movs	r2, #153	; 0x99
 80014d2:	1ad2      	subs	r2, r2, r3
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	dd27      	ble.n	8001528 <__aeabi_ui2f+0x84>
 80014d8:	4094      	lsls	r4, r2
 80014da:	0022      	movs	r2, r4
 80014dc:	4c13      	ldr	r4, [pc, #76]	; (800152c <__aeabi_ui2f+0x88>)
 80014de:	4014      	ands	r4, r2
 80014e0:	0751      	lsls	r1, r2, #29
 80014e2:	d004      	beq.n	80014ee <__aeabi_ui2f+0x4a>
 80014e4:	210f      	movs	r1, #15
 80014e6:	400a      	ands	r2, r1
 80014e8:	2a04      	cmp	r2, #4
 80014ea:	d000      	beq.n	80014ee <__aeabi_ui2f+0x4a>
 80014ec:	3404      	adds	r4, #4
 80014ee:	0162      	lsls	r2, r4, #5
 80014f0:	d412      	bmi.n	8001518 <__aeabi_ui2f+0x74>
 80014f2:	01a4      	lsls	r4, r4, #6
 80014f4:	0a64      	lsrs	r4, r4, #9
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	e7e3      	b.n	80014c2 <__aeabi_ui2f+0x1e>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2400      	movs	r4, #0
 80014fe:	e7e0      	b.n	80014c2 <__aeabi_ui2f+0x1e>
 8001500:	22b9      	movs	r2, #185	; 0xb9
 8001502:	0021      	movs	r1, r4
 8001504:	1ad2      	subs	r2, r2, r3
 8001506:	4091      	lsls	r1, r2
 8001508:	000a      	movs	r2, r1
 800150a:	1e51      	subs	r1, r2, #1
 800150c:	418a      	sbcs	r2, r1
 800150e:	2105      	movs	r1, #5
 8001510:	1a09      	subs	r1, r1, r0
 8001512:	40cc      	lsrs	r4, r1
 8001514:	4314      	orrs	r4, r2
 8001516:	e7db      	b.n	80014d0 <__aeabi_ui2f+0x2c>
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__aeabi_ui2f+0x88>)
 800151a:	401c      	ands	r4, r3
 800151c:	239f      	movs	r3, #159	; 0x9f
 800151e:	01a4      	lsls	r4, r4, #6
 8001520:	1a1b      	subs	r3, r3, r0
 8001522:	0a64      	lsrs	r4, r4, #9
 8001524:	b2db      	uxtb	r3, r3
 8001526:	e7cc      	b.n	80014c2 <__aeabi_ui2f+0x1e>
 8001528:	0022      	movs	r2, r4
 800152a:	e7d7      	b.n	80014dc <__aeabi_ui2f+0x38>
 800152c:	fbffffff 	.word	0xfbffffff

08001530 <__aeabi_dadd>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	030c      	lsls	r4, r1, #12
 800153c:	b5e0      	push	{r5, r6, r7, lr}
 800153e:	004e      	lsls	r6, r1, #1
 8001540:	0fc9      	lsrs	r1, r1, #31
 8001542:	4688      	mov	r8, r1
 8001544:	000d      	movs	r5, r1
 8001546:	0a61      	lsrs	r1, r4, #9
 8001548:	0f44      	lsrs	r4, r0, #29
 800154a:	430c      	orrs	r4, r1
 800154c:	00c7      	lsls	r7, r0, #3
 800154e:	0319      	lsls	r1, r3, #12
 8001550:	0058      	lsls	r0, r3, #1
 8001552:	0fdb      	lsrs	r3, r3, #31
 8001554:	469b      	mov	fp, r3
 8001556:	0a4b      	lsrs	r3, r1, #9
 8001558:	0f51      	lsrs	r1, r2, #29
 800155a:	430b      	orrs	r3, r1
 800155c:	0d76      	lsrs	r6, r6, #21
 800155e:	0d40      	lsrs	r0, r0, #21
 8001560:	0019      	movs	r1, r3
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	45d8      	cmp	r8, fp
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x3a>
 8001568:	e0ae      	b.n	80016c8 <__aeabi_dadd+0x198>
 800156a:	1a35      	subs	r5, r6, r0
 800156c:	2d00      	cmp	r5, #0
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dadd+0x42>
 8001570:	e0f6      	b.n	8001760 <__aeabi_dadd+0x230>
 8001572:	2800      	cmp	r0, #0
 8001574:	d10f      	bne.n	8001596 <__aeabi_dadd+0x66>
 8001576:	4313      	orrs	r3, r2
 8001578:	d100      	bne.n	800157c <__aeabi_dadd+0x4c>
 800157a:	e0db      	b.n	8001734 <__aeabi_dadd+0x204>
 800157c:	1e6b      	subs	r3, r5, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d000      	beq.n	8001584 <__aeabi_dadd+0x54>
 8001582:	e137      	b.n	80017f4 <__aeabi_dadd+0x2c4>
 8001584:	1aba      	subs	r2, r7, r2
 8001586:	4297      	cmp	r7, r2
 8001588:	41bf      	sbcs	r7, r7
 800158a:	1a64      	subs	r4, r4, r1
 800158c:	427f      	negs	r7, r7
 800158e:	1be4      	subs	r4, r4, r7
 8001590:	2601      	movs	r6, #1
 8001592:	0017      	movs	r7, r2
 8001594:	e024      	b.n	80015e0 <__aeabi_dadd+0xb0>
 8001596:	4bc6      	ldr	r3, [pc, #792]	; (80018b0 <__aeabi_dadd+0x380>)
 8001598:	429e      	cmp	r6, r3
 800159a:	d04d      	beq.n	8001638 <__aeabi_dadd+0x108>
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	4319      	orrs	r1, r3
 80015a2:	2d38      	cmp	r5, #56	; 0x38
 80015a4:	dd00      	ble.n	80015a8 <__aeabi_dadd+0x78>
 80015a6:	e107      	b.n	80017b8 <__aeabi_dadd+0x288>
 80015a8:	2d1f      	cmp	r5, #31
 80015aa:	dd00      	ble.n	80015ae <__aeabi_dadd+0x7e>
 80015ac:	e138      	b.n	8001820 <__aeabi_dadd+0x2f0>
 80015ae:	2020      	movs	r0, #32
 80015b0:	1b43      	subs	r3, r0, r5
 80015b2:	469a      	mov	sl, r3
 80015b4:	000b      	movs	r3, r1
 80015b6:	4650      	mov	r0, sl
 80015b8:	4083      	lsls	r3, r0
 80015ba:	4699      	mov	r9, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	4648      	mov	r0, r9
 80015c0:	40eb      	lsrs	r3, r5
 80015c2:	4318      	orrs	r0, r3
 80015c4:	0003      	movs	r3, r0
 80015c6:	4650      	mov	r0, sl
 80015c8:	4082      	lsls	r2, r0
 80015ca:	1e50      	subs	r0, r2, #1
 80015cc:	4182      	sbcs	r2, r0
 80015ce:	40e9      	lsrs	r1, r5
 80015d0:	431a      	orrs	r2, r3
 80015d2:	1aba      	subs	r2, r7, r2
 80015d4:	1a61      	subs	r1, r4, r1
 80015d6:	4297      	cmp	r7, r2
 80015d8:	41a4      	sbcs	r4, r4
 80015da:	0017      	movs	r7, r2
 80015dc:	4264      	negs	r4, r4
 80015de:	1b0c      	subs	r4, r1, r4
 80015e0:	0223      	lsls	r3, r4, #8
 80015e2:	d562      	bpl.n	80016aa <__aeabi_dadd+0x17a>
 80015e4:	0264      	lsls	r4, r4, #9
 80015e6:	0a65      	lsrs	r5, r4, #9
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0xbe>
 80015ec:	e0df      	b.n	80017ae <__aeabi_dadd+0x27e>
 80015ee:	0028      	movs	r0, r5
 80015f0:	f001 fdd0 	bl	8003194 <__clzsi2>
 80015f4:	0003      	movs	r3, r0
 80015f6:	3b08      	subs	r3, #8
 80015f8:	2b1f      	cmp	r3, #31
 80015fa:	dd00      	ble.n	80015fe <__aeabi_dadd+0xce>
 80015fc:	e0d2      	b.n	80017a4 <__aeabi_dadd+0x274>
 80015fe:	2220      	movs	r2, #32
 8001600:	003c      	movs	r4, r7
 8001602:	1ad2      	subs	r2, r2, r3
 8001604:	409d      	lsls	r5, r3
 8001606:	40d4      	lsrs	r4, r2
 8001608:	409f      	lsls	r7, r3
 800160a:	4325      	orrs	r5, r4
 800160c:	429e      	cmp	r6, r3
 800160e:	dd00      	ble.n	8001612 <__aeabi_dadd+0xe2>
 8001610:	e0c4      	b.n	800179c <__aeabi_dadd+0x26c>
 8001612:	1b9e      	subs	r6, r3, r6
 8001614:	1c73      	adds	r3, r6, #1
 8001616:	2b1f      	cmp	r3, #31
 8001618:	dd00      	ble.n	800161c <__aeabi_dadd+0xec>
 800161a:	e0f1      	b.n	8001800 <__aeabi_dadd+0x2d0>
 800161c:	2220      	movs	r2, #32
 800161e:	0038      	movs	r0, r7
 8001620:	0029      	movs	r1, r5
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	40d8      	lsrs	r0, r3
 8001626:	4091      	lsls	r1, r2
 8001628:	4097      	lsls	r7, r2
 800162a:	002c      	movs	r4, r5
 800162c:	4301      	orrs	r1, r0
 800162e:	1e78      	subs	r0, r7, #1
 8001630:	4187      	sbcs	r7, r0
 8001632:	40dc      	lsrs	r4, r3
 8001634:	2600      	movs	r6, #0
 8001636:	430f      	orrs	r7, r1
 8001638:	077b      	lsls	r3, r7, #29
 800163a:	d009      	beq.n	8001650 <__aeabi_dadd+0x120>
 800163c:	230f      	movs	r3, #15
 800163e:	403b      	ands	r3, r7
 8001640:	2b04      	cmp	r3, #4
 8001642:	d005      	beq.n	8001650 <__aeabi_dadd+0x120>
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	42bb      	cmp	r3, r7
 8001648:	41bf      	sbcs	r7, r7
 800164a:	427f      	negs	r7, r7
 800164c:	19e4      	adds	r4, r4, r7
 800164e:	001f      	movs	r7, r3
 8001650:	0223      	lsls	r3, r4, #8
 8001652:	d52c      	bpl.n	80016ae <__aeabi_dadd+0x17e>
 8001654:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <__aeabi_dadd+0x380>)
 8001656:	3601      	adds	r6, #1
 8001658:	429e      	cmp	r6, r3
 800165a:	d100      	bne.n	800165e <__aeabi_dadd+0x12e>
 800165c:	e09a      	b.n	8001794 <__aeabi_dadd+0x264>
 800165e:	4645      	mov	r5, r8
 8001660:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <__aeabi_dadd+0x384>)
 8001662:	08ff      	lsrs	r7, r7, #3
 8001664:	401c      	ands	r4, r3
 8001666:	0760      	lsls	r0, r4, #29
 8001668:	0576      	lsls	r6, r6, #21
 800166a:	0264      	lsls	r4, r4, #9
 800166c:	4307      	orrs	r7, r0
 800166e:	0b24      	lsrs	r4, r4, #12
 8001670:	0d76      	lsrs	r6, r6, #21
 8001672:	2100      	movs	r1, #0
 8001674:	0324      	lsls	r4, r4, #12
 8001676:	0b23      	lsrs	r3, r4, #12
 8001678:	0d0c      	lsrs	r4, r1, #20
 800167a:	4a8f      	ldr	r2, [pc, #572]	; (80018b8 <__aeabi_dadd+0x388>)
 800167c:	0524      	lsls	r4, r4, #20
 800167e:	431c      	orrs	r4, r3
 8001680:	4014      	ands	r4, r2
 8001682:	0533      	lsls	r3, r6, #20
 8001684:	4323      	orrs	r3, r4
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	07ed      	lsls	r5, r5, #31
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	432b      	orrs	r3, r5
 800168e:	0038      	movs	r0, r7
 8001690:	0019      	movs	r1, r3
 8001692:	bc3c      	pop	{r2, r3, r4, r5}
 8001694:	4690      	mov	r8, r2
 8001696:	4699      	mov	r9, r3
 8001698:	46a2      	mov	sl, r4
 800169a:	46ab      	mov	fp, r5
 800169c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800169e:	4664      	mov	r4, ip
 80016a0:	4304      	orrs	r4, r0
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0x176>
 80016a4:	e211      	b.n	8001aca <__aeabi_dadd+0x59a>
 80016a6:	0004      	movs	r4, r0
 80016a8:	4667      	mov	r7, ip
 80016aa:	077b      	lsls	r3, r7, #29
 80016ac:	d1c6      	bne.n	800163c <__aeabi_dadd+0x10c>
 80016ae:	4645      	mov	r5, r8
 80016b0:	0760      	lsls	r0, r4, #29
 80016b2:	08ff      	lsrs	r7, r7, #3
 80016b4:	4307      	orrs	r7, r0
 80016b6:	08e4      	lsrs	r4, r4, #3
 80016b8:	4b7d      	ldr	r3, [pc, #500]	; (80018b0 <__aeabi_dadd+0x380>)
 80016ba:	429e      	cmp	r6, r3
 80016bc:	d030      	beq.n	8001720 <__aeabi_dadd+0x1f0>
 80016be:	0324      	lsls	r4, r4, #12
 80016c0:	0576      	lsls	r6, r6, #21
 80016c2:	0b24      	lsrs	r4, r4, #12
 80016c4:	0d76      	lsrs	r6, r6, #21
 80016c6:	e7d4      	b.n	8001672 <__aeabi_dadd+0x142>
 80016c8:	1a33      	subs	r3, r6, r0
 80016ca:	469a      	mov	sl, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dd78      	ble.n	80017c2 <__aeabi_dadd+0x292>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d031      	beq.n	8001738 <__aeabi_dadd+0x208>
 80016d4:	4876      	ldr	r0, [pc, #472]	; (80018b0 <__aeabi_dadd+0x380>)
 80016d6:	4286      	cmp	r6, r0
 80016d8:	d0ae      	beq.n	8001638 <__aeabi_dadd+0x108>
 80016da:	2080      	movs	r0, #128	; 0x80
 80016dc:	0400      	lsls	r0, r0, #16
 80016de:	4301      	orrs	r1, r0
 80016e0:	4653      	mov	r3, sl
 80016e2:	2b38      	cmp	r3, #56	; 0x38
 80016e4:	dc00      	bgt.n	80016e8 <__aeabi_dadd+0x1b8>
 80016e6:	e0e9      	b.n	80018bc <__aeabi_dadd+0x38c>
 80016e8:	430a      	orrs	r2, r1
 80016ea:	1e51      	subs	r1, r2, #1
 80016ec:	418a      	sbcs	r2, r1
 80016ee:	2100      	movs	r1, #0
 80016f0:	19d2      	adds	r2, r2, r7
 80016f2:	42ba      	cmp	r2, r7
 80016f4:	41bf      	sbcs	r7, r7
 80016f6:	1909      	adds	r1, r1, r4
 80016f8:	427c      	negs	r4, r7
 80016fa:	0017      	movs	r7, r2
 80016fc:	190c      	adds	r4, r1, r4
 80016fe:	0223      	lsls	r3, r4, #8
 8001700:	d5d3      	bpl.n	80016aa <__aeabi_dadd+0x17a>
 8001702:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <__aeabi_dadd+0x380>)
 8001704:	3601      	adds	r6, #1
 8001706:	429e      	cmp	r6, r3
 8001708:	d100      	bne.n	800170c <__aeabi_dadd+0x1dc>
 800170a:	e13a      	b.n	8001982 <__aeabi_dadd+0x452>
 800170c:	2001      	movs	r0, #1
 800170e:	4b69      	ldr	r3, [pc, #420]	; (80018b4 <__aeabi_dadd+0x384>)
 8001710:	401c      	ands	r4, r3
 8001712:	087b      	lsrs	r3, r7, #1
 8001714:	4007      	ands	r7, r0
 8001716:	431f      	orrs	r7, r3
 8001718:	07e0      	lsls	r0, r4, #31
 800171a:	4307      	orrs	r7, r0
 800171c:	0864      	lsrs	r4, r4, #1
 800171e:	e78b      	b.n	8001638 <__aeabi_dadd+0x108>
 8001720:	0023      	movs	r3, r4
 8001722:	433b      	orrs	r3, r7
 8001724:	d100      	bne.n	8001728 <__aeabi_dadd+0x1f8>
 8001726:	e1cb      	b.n	8001ac0 <__aeabi_dadd+0x590>
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	0312      	lsls	r2, r2, #12
 800172c:	4314      	orrs	r4, r2
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	0b24      	lsrs	r4, r4, #12
 8001732:	e79e      	b.n	8001672 <__aeabi_dadd+0x142>
 8001734:	002e      	movs	r6, r5
 8001736:	e77f      	b.n	8001638 <__aeabi_dadd+0x108>
 8001738:	0008      	movs	r0, r1
 800173a:	4310      	orrs	r0, r2
 800173c:	d100      	bne.n	8001740 <__aeabi_dadd+0x210>
 800173e:	e0b4      	b.n	80018aa <__aeabi_dadd+0x37a>
 8001740:	1e58      	subs	r0, r3, #1
 8001742:	2800      	cmp	r0, #0
 8001744:	d000      	beq.n	8001748 <__aeabi_dadd+0x218>
 8001746:	e0de      	b.n	8001906 <__aeabi_dadd+0x3d6>
 8001748:	18ba      	adds	r2, r7, r2
 800174a:	42ba      	cmp	r2, r7
 800174c:	419b      	sbcs	r3, r3
 800174e:	1864      	adds	r4, r4, r1
 8001750:	425b      	negs	r3, r3
 8001752:	18e4      	adds	r4, r4, r3
 8001754:	0017      	movs	r7, r2
 8001756:	2601      	movs	r6, #1
 8001758:	0223      	lsls	r3, r4, #8
 800175a:	d5a6      	bpl.n	80016aa <__aeabi_dadd+0x17a>
 800175c:	2602      	movs	r6, #2
 800175e:	e7d5      	b.n	800170c <__aeabi_dadd+0x1dc>
 8001760:	2d00      	cmp	r5, #0
 8001762:	d16e      	bne.n	8001842 <__aeabi_dadd+0x312>
 8001764:	1c70      	adds	r0, r6, #1
 8001766:	0540      	lsls	r0, r0, #21
 8001768:	0d40      	lsrs	r0, r0, #21
 800176a:	2801      	cmp	r0, #1
 800176c:	dc00      	bgt.n	8001770 <__aeabi_dadd+0x240>
 800176e:	e0f9      	b.n	8001964 <__aeabi_dadd+0x434>
 8001770:	1ab8      	subs	r0, r7, r2
 8001772:	4684      	mov	ip, r0
 8001774:	4287      	cmp	r7, r0
 8001776:	4180      	sbcs	r0, r0
 8001778:	1ae5      	subs	r5, r4, r3
 800177a:	4240      	negs	r0, r0
 800177c:	1a2d      	subs	r5, r5, r0
 800177e:	0228      	lsls	r0, r5, #8
 8001780:	d400      	bmi.n	8001784 <__aeabi_dadd+0x254>
 8001782:	e089      	b.n	8001898 <__aeabi_dadd+0x368>
 8001784:	1bd7      	subs	r7, r2, r7
 8001786:	42ba      	cmp	r2, r7
 8001788:	4192      	sbcs	r2, r2
 800178a:	1b1c      	subs	r4, r3, r4
 800178c:	4252      	negs	r2, r2
 800178e:	1aa5      	subs	r5, r4, r2
 8001790:	46d8      	mov	r8, fp
 8001792:	e729      	b.n	80015e8 <__aeabi_dadd+0xb8>
 8001794:	4645      	mov	r5, r8
 8001796:	2400      	movs	r4, #0
 8001798:	2700      	movs	r7, #0
 800179a:	e76a      	b.n	8001672 <__aeabi_dadd+0x142>
 800179c:	4c45      	ldr	r4, [pc, #276]	; (80018b4 <__aeabi_dadd+0x384>)
 800179e:	1af6      	subs	r6, r6, r3
 80017a0:	402c      	ands	r4, r5
 80017a2:	e749      	b.n	8001638 <__aeabi_dadd+0x108>
 80017a4:	003d      	movs	r5, r7
 80017a6:	3828      	subs	r0, #40	; 0x28
 80017a8:	4085      	lsls	r5, r0
 80017aa:	2700      	movs	r7, #0
 80017ac:	e72e      	b.n	800160c <__aeabi_dadd+0xdc>
 80017ae:	0038      	movs	r0, r7
 80017b0:	f001 fcf0 	bl	8003194 <__clzsi2>
 80017b4:	3020      	adds	r0, #32
 80017b6:	e71d      	b.n	80015f4 <__aeabi_dadd+0xc4>
 80017b8:	430a      	orrs	r2, r1
 80017ba:	1e51      	subs	r1, r2, #1
 80017bc:	418a      	sbcs	r2, r1
 80017be:	2100      	movs	r1, #0
 80017c0:	e707      	b.n	80015d2 <__aeabi_dadd+0xa2>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d000      	beq.n	80017c8 <__aeabi_dadd+0x298>
 80017c6:	e0f3      	b.n	80019b0 <__aeabi_dadd+0x480>
 80017c8:	1c70      	adds	r0, r6, #1
 80017ca:	0543      	lsls	r3, r0, #21
 80017cc:	0d5b      	lsrs	r3, r3, #21
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	dc00      	bgt.n	80017d4 <__aeabi_dadd+0x2a4>
 80017d2:	e0ad      	b.n	8001930 <__aeabi_dadd+0x400>
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <__aeabi_dadd+0x380>)
 80017d6:	4298      	cmp	r0, r3
 80017d8:	d100      	bne.n	80017dc <__aeabi_dadd+0x2ac>
 80017da:	e0d1      	b.n	8001980 <__aeabi_dadd+0x450>
 80017dc:	18ba      	adds	r2, r7, r2
 80017de:	42ba      	cmp	r2, r7
 80017e0:	41bf      	sbcs	r7, r7
 80017e2:	1864      	adds	r4, r4, r1
 80017e4:	427f      	negs	r7, r7
 80017e6:	19e4      	adds	r4, r4, r7
 80017e8:	07e7      	lsls	r7, r4, #31
 80017ea:	0852      	lsrs	r2, r2, #1
 80017ec:	4317      	orrs	r7, r2
 80017ee:	0864      	lsrs	r4, r4, #1
 80017f0:	0006      	movs	r6, r0
 80017f2:	e721      	b.n	8001638 <__aeabi_dadd+0x108>
 80017f4:	482e      	ldr	r0, [pc, #184]	; (80018b0 <__aeabi_dadd+0x380>)
 80017f6:	4285      	cmp	r5, r0
 80017f8:	d100      	bne.n	80017fc <__aeabi_dadd+0x2cc>
 80017fa:	e093      	b.n	8001924 <__aeabi_dadd+0x3f4>
 80017fc:	001d      	movs	r5, r3
 80017fe:	e6d0      	b.n	80015a2 <__aeabi_dadd+0x72>
 8001800:	0029      	movs	r1, r5
 8001802:	3e1f      	subs	r6, #31
 8001804:	40f1      	lsrs	r1, r6
 8001806:	2b20      	cmp	r3, #32
 8001808:	d100      	bne.n	800180c <__aeabi_dadd+0x2dc>
 800180a:	e08d      	b.n	8001928 <__aeabi_dadd+0x3f8>
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	409d      	lsls	r5, r3
 8001812:	432f      	orrs	r7, r5
 8001814:	1e7d      	subs	r5, r7, #1
 8001816:	41af      	sbcs	r7, r5
 8001818:	2400      	movs	r4, #0
 800181a:	430f      	orrs	r7, r1
 800181c:	2600      	movs	r6, #0
 800181e:	e744      	b.n	80016aa <__aeabi_dadd+0x17a>
 8001820:	002b      	movs	r3, r5
 8001822:	0008      	movs	r0, r1
 8001824:	3b20      	subs	r3, #32
 8001826:	40d8      	lsrs	r0, r3
 8001828:	0003      	movs	r3, r0
 800182a:	2d20      	cmp	r5, #32
 800182c:	d100      	bne.n	8001830 <__aeabi_dadd+0x300>
 800182e:	e07d      	b.n	800192c <__aeabi_dadd+0x3fc>
 8001830:	2040      	movs	r0, #64	; 0x40
 8001832:	1b45      	subs	r5, r0, r5
 8001834:	40a9      	lsls	r1, r5
 8001836:	430a      	orrs	r2, r1
 8001838:	1e51      	subs	r1, r2, #1
 800183a:	418a      	sbcs	r2, r1
 800183c:	2100      	movs	r1, #0
 800183e:	431a      	orrs	r2, r3
 8001840:	e6c7      	b.n	80015d2 <__aeabi_dadd+0xa2>
 8001842:	2e00      	cmp	r6, #0
 8001844:	d050      	beq.n	80018e8 <__aeabi_dadd+0x3b8>
 8001846:	4e1a      	ldr	r6, [pc, #104]	; (80018b0 <__aeabi_dadd+0x380>)
 8001848:	42b0      	cmp	r0, r6
 800184a:	d057      	beq.n	80018fc <__aeabi_dadd+0x3cc>
 800184c:	2680      	movs	r6, #128	; 0x80
 800184e:	426b      	negs	r3, r5
 8001850:	4699      	mov	r9, r3
 8001852:	0436      	lsls	r6, r6, #16
 8001854:	4334      	orrs	r4, r6
 8001856:	464b      	mov	r3, r9
 8001858:	2b38      	cmp	r3, #56	; 0x38
 800185a:	dd00      	ble.n	800185e <__aeabi_dadd+0x32e>
 800185c:	e0d6      	b.n	8001a0c <__aeabi_dadd+0x4dc>
 800185e:	2b1f      	cmp	r3, #31
 8001860:	dd00      	ble.n	8001864 <__aeabi_dadd+0x334>
 8001862:	e135      	b.n	8001ad0 <__aeabi_dadd+0x5a0>
 8001864:	2620      	movs	r6, #32
 8001866:	1af5      	subs	r5, r6, r3
 8001868:	0026      	movs	r6, r4
 800186a:	40ae      	lsls	r6, r5
 800186c:	46b2      	mov	sl, r6
 800186e:	003e      	movs	r6, r7
 8001870:	40de      	lsrs	r6, r3
 8001872:	46ac      	mov	ip, r5
 8001874:	0035      	movs	r5, r6
 8001876:	4656      	mov	r6, sl
 8001878:	432e      	orrs	r6, r5
 800187a:	4665      	mov	r5, ip
 800187c:	40af      	lsls	r7, r5
 800187e:	1e7d      	subs	r5, r7, #1
 8001880:	41af      	sbcs	r7, r5
 8001882:	40dc      	lsrs	r4, r3
 8001884:	4337      	orrs	r7, r6
 8001886:	1bd7      	subs	r7, r2, r7
 8001888:	42ba      	cmp	r2, r7
 800188a:	4192      	sbcs	r2, r2
 800188c:	1b0c      	subs	r4, r1, r4
 800188e:	4252      	negs	r2, r2
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	0006      	movs	r6, r0
 8001894:	46d8      	mov	r8, fp
 8001896:	e6a3      	b.n	80015e0 <__aeabi_dadd+0xb0>
 8001898:	4664      	mov	r4, ip
 800189a:	4667      	mov	r7, ip
 800189c:	432c      	orrs	r4, r5
 800189e:	d000      	beq.n	80018a2 <__aeabi_dadd+0x372>
 80018a0:	e6a2      	b.n	80015e8 <__aeabi_dadd+0xb8>
 80018a2:	2500      	movs	r5, #0
 80018a4:	2600      	movs	r6, #0
 80018a6:	2700      	movs	r7, #0
 80018a8:	e706      	b.n	80016b8 <__aeabi_dadd+0x188>
 80018aa:	001e      	movs	r6, r3
 80018ac:	e6c4      	b.n	8001638 <__aeabi_dadd+0x108>
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	000007ff 	.word	0x000007ff
 80018b4:	ff7fffff 	.word	0xff7fffff
 80018b8:	800fffff 	.word	0x800fffff
 80018bc:	2b1f      	cmp	r3, #31
 80018be:	dc63      	bgt.n	8001988 <__aeabi_dadd+0x458>
 80018c0:	2020      	movs	r0, #32
 80018c2:	1ac3      	subs	r3, r0, r3
 80018c4:	0008      	movs	r0, r1
 80018c6:	4098      	lsls	r0, r3
 80018c8:	469c      	mov	ip, r3
 80018ca:	4683      	mov	fp, r0
 80018cc:	4653      	mov	r3, sl
 80018ce:	0010      	movs	r0, r2
 80018d0:	40d8      	lsrs	r0, r3
 80018d2:	0003      	movs	r3, r0
 80018d4:	4658      	mov	r0, fp
 80018d6:	4318      	orrs	r0, r3
 80018d8:	4663      	mov	r3, ip
 80018da:	409a      	lsls	r2, r3
 80018dc:	1e53      	subs	r3, r2, #1
 80018de:	419a      	sbcs	r2, r3
 80018e0:	4653      	mov	r3, sl
 80018e2:	4302      	orrs	r2, r0
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	e703      	b.n	80016f0 <__aeabi_dadd+0x1c0>
 80018e8:	0026      	movs	r6, r4
 80018ea:	433e      	orrs	r6, r7
 80018ec:	d006      	beq.n	80018fc <__aeabi_dadd+0x3cc>
 80018ee:	43eb      	mvns	r3, r5
 80018f0:	4699      	mov	r9, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0c7      	beq.n	8001886 <__aeabi_dadd+0x356>
 80018f6:	4e94      	ldr	r6, [pc, #592]	; (8001b48 <__aeabi_dadd+0x618>)
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	d1ac      	bne.n	8001856 <__aeabi_dadd+0x326>
 80018fc:	000c      	movs	r4, r1
 80018fe:	0017      	movs	r7, r2
 8001900:	0006      	movs	r6, r0
 8001902:	46d8      	mov	r8, fp
 8001904:	e698      	b.n	8001638 <__aeabi_dadd+0x108>
 8001906:	4b90      	ldr	r3, [pc, #576]	; (8001b48 <__aeabi_dadd+0x618>)
 8001908:	459a      	cmp	sl, r3
 800190a:	d00b      	beq.n	8001924 <__aeabi_dadd+0x3f4>
 800190c:	4682      	mov	sl, r0
 800190e:	e6e7      	b.n	80016e0 <__aeabi_dadd+0x1b0>
 8001910:	2800      	cmp	r0, #0
 8001912:	d000      	beq.n	8001916 <__aeabi_dadd+0x3e6>
 8001914:	e09e      	b.n	8001a54 <__aeabi_dadd+0x524>
 8001916:	0018      	movs	r0, r3
 8001918:	4310      	orrs	r0, r2
 800191a:	d100      	bne.n	800191e <__aeabi_dadd+0x3ee>
 800191c:	e0e9      	b.n	8001af2 <__aeabi_dadd+0x5c2>
 800191e:	001c      	movs	r4, r3
 8001920:	0017      	movs	r7, r2
 8001922:	46d8      	mov	r8, fp
 8001924:	4e88      	ldr	r6, [pc, #544]	; (8001b48 <__aeabi_dadd+0x618>)
 8001926:	e687      	b.n	8001638 <__aeabi_dadd+0x108>
 8001928:	2500      	movs	r5, #0
 800192a:	e772      	b.n	8001812 <__aeabi_dadd+0x2e2>
 800192c:	2100      	movs	r1, #0
 800192e:	e782      	b.n	8001836 <__aeabi_dadd+0x306>
 8001930:	0023      	movs	r3, r4
 8001932:	433b      	orrs	r3, r7
 8001934:	2e00      	cmp	r6, #0
 8001936:	d000      	beq.n	800193a <__aeabi_dadd+0x40a>
 8001938:	e0ab      	b.n	8001a92 <__aeabi_dadd+0x562>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d100      	bne.n	8001940 <__aeabi_dadd+0x410>
 800193e:	e0e7      	b.n	8001b10 <__aeabi_dadd+0x5e0>
 8001940:	000b      	movs	r3, r1
 8001942:	4313      	orrs	r3, r2
 8001944:	d100      	bne.n	8001948 <__aeabi_dadd+0x418>
 8001946:	e677      	b.n	8001638 <__aeabi_dadd+0x108>
 8001948:	18ba      	adds	r2, r7, r2
 800194a:	42ba      	cmp	r2, r7
 800194c:	41bf      	sbcs	r7, r7
 800194e:	1864      	adds	r4, r4, r1
 8001950:	427f      	negs	r7, r7
 8001952:	19e4      	adds	r4, r4, r7
 8001954:	0223      	lsls	r3, r4, #8
 8001956:	d400      	bmi.n	800195a <__aeabi_dadd+0x42a>
 8001958:	e0f2      	b.n	8001b40 <__aeabi_dadd+0x610>
 800195a:	4b7c      	ldr	r3, [pc, #496]	; (8001b4c <__aeabi_dadd+0x61c>)
 800195c:	0017      	movs	r7, r2
 800195e:	401c      	ands	r4, r3
 8001960:	0006      	movs	r6, r0
 8001962:	e669      	b.n	8001638 <__aeabi_dadd+0x108>
 8001964:	0020      	movs	r0, r4
 8001966:	4338      	orrs	r0, r7
 8001968:	2e00      	cmp	r6, #0
 800196a:	d1d1      	bne.n	8001910 <__aeabi_dadd+0x3e0>
 800196c:	2800      	cmp	r0, #0
 800196e:	d15b      	bne.n	8001a28 <__aeabi_dadd+0x4f8>
 8001970:	001c      	movs	r4, r3
 8001972:	4314      	orrs	r4, r2
 8001974:	d100      	bne.n	8001978 <__aeabi_dadd+0x448>
 8001976:	e0a8      	b.n	8001aca <__aeabi_dadd+0x59a>
 8001978:	001c      	movs	r4, r3
 800197a:	0017      	movs	r7, r2
 800197c:	46d8      	mov	r8, fp
 800197e:	e65b      	b.n	8001638 <__aeabi_dadd+0x108>
 8001980:	0006      	movs	r6, r0
 8001982:	2400      	movs	r4, #0
 8001984:	2700      	movs	r7, #0
 8001986:	e697      	b.n	80016b8 <__aeabi_dadd+0x188>
 8001988:	4650      	mov	r0, sl
 800198a:	000b      	movs	r3, r1
 800198c:	3820      	subs	r0, #32
 800198e:	40c3      	lsrs	r3, r0
 8001990:	4699      	mov	r9, r3
 8001992:	4653      	mov	r3, sl
 8001994:	2b20      	cmp	r3, #32
 8001996:	d100      	bne.n	800199a <__aeabi_dadd+0x46a>
 8001998:	e095      	b.n	8001ac6 <__aeabi_dadd+0x596>
 800199a:	2340      	movs	r3, #64	; 0x40
 800199c:	4650      	mov	r0, sl
 800199e:	1a1b      	subs	r3, r3, r0
 80019a0:	4099      	lsls	r1, r3
 80019a2:	430a      	orrs	r2, r1
 80019a4:	1e51      	subs	r1, r2, #1
 80019a6:	418a      	sbcs	r2, r1
 80019a8:	464b      	mov	r3, r9
 80019aa:	2100      	movs	r1, #0
 80019ac:	431a      	orrs	r2, r3
 80019ae:	e69f      	b.n	80016f0 <__aeabi_dadd+0x1c0>
 80019b0:	2e00      	cmp	r6, #0
 80019b2:	d130      	bne.n	8001a16 <__aeabi_dadd+0x4e6>
 80019b4:	0026      	movs	r6, r4
 80019b6:	433e      	orrs	r6, r7
 80019b8:	d067      	beq.n	8001a8a <__aeabi_dadd+0x55a>
 80019ba:	43db      	mvns	r3, r3
 80019bc:	469a      	mov	sl, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d01c      	beq.n	80019fc <__aeabi_dadd+0x4cc>
 80019c2:	4e61      	ldr	r6, [pc, #388]	; (8001b48 <__aeabi_dadd+0x618>)
 80019c4:	42b0      	cmp	r0, r6
 80019c6:	d060      	beq.n	8001a8a <__aeabi_dadd+0x55a>
 80019c8:	4653      	mov	r3, sl
 80019ca:	2b38      	cmp	r3, #56	; 0x38
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dadd+0x4a0>
 80019ce:	e096      	b.n	8001afe <__aeabi_dadd+0x5ce>
 80019d0:	2b1f      	cmp	r3, #31
 80019d2:	dd00      	ble.n	80019d6 <__aeabi_dadd+0x4a6>
 80019d4:	e09f      	b.n	8001b16 <__aeabi_dadd+0x5e6>
 80019d6:	2620      	movs	r6, #32
 80019d8:	1af3      	subs	r3, r6, r3
 80019da:	0026      	movs	r6, r4
 80019dc:	409e      	lsls	r6, r3
 80019de:	469c      	mov	ip, r3
 80019e0:	46b3      	mov	fp, r6
 80019e2:	4653      	mov	r3, sl
 80019e4:	003e      	movs	r6, r7
 80019e6:	40de      	lsrs	r6, r3
 80019e8:	0033      	movs	r3, r6
 80019ea:	465e      	mov	r6, fp
 80019ec:	431e      	orrs	r6, r3
 80019ee:	4663      	mov	r3, ip
 80019f0:	409f      	lsls	r7, r3
 80019f2:	1e7b      	subs	r3, r7, #1
 80019f4:	419f      	sbcs	r7, r3
 80019f6:	4653      	mov	r3, sl
 80019f8:	40dc      	lsrs	r4, r3
 80019fa:	4337      	orrs	r7, r6
 80019fc:	18bf      	adds	r7, r7, r2
 80019fe:	4297      	cmp	r7, r2
 8001a00:	4192      	sbcs	r2, r2
 8001a02:	1864      	adds	r4, r4, r1
 8001a04:	4252      	negs	r2, r2
 8001a06:	18a4      	adds	r4, r4, r2
 8001a08:	0006      	movs	r6, r0
 8001a0a:	e678      	b.n	80016fe <__aeabi_dadd+0x1ce>
 8001a0c:	4327      	orrs	r7, r4
 8001a0e:	1e7c      	subs	r4, r7, #1
 8001a10:	41a7      	sbcs	r7, r4
 8001a12:	2400      	movs	r4, #0
 8001a14:	e737      	b.n	8001886 <__aeabi_dadd+0x356>
 8001a16:	4e4c      	ldr	r6, [pc, #304]	; (8001b48 <__aeabi_dadd+0x618>)
 8001a18:	42b0      	cmp	r0, r6
 8001a1a:	d036      	beq.n	8001a8a <__aeabi_dadd+0x55a>
 8001a1c:	2680      	movs	r6, #128	; 0x80
 8001a1e:	425b      	negs	r3, r3
 8001a20:	0436      	lsls	r6, r6, #16
 8001a22:	469a      	mov	sl, r3
 8001a24:	4334      	orrs	r4, r6
 8001a26:	e7cf      	b.n	80019c8 <__aeabi_dadd+0x498>
 8001a28:	0018      	movs	r0, r3
 8001a2a:	4310      	orrs	r0, r2
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dadd+0x500>
 8001a2e:	e603      	b.n	8001638 <__aeabi_dadd+0x108>
 8001a30:	1ab8      	subs	r0, r7, r2
 8001a32:	4684      	mov	ip, r0
 8001a34:	4567      	cmp	r7, ip
 8001a36:	41ad      	sbcs	r5, r5
 8001a38:	1ae0      	subs	r0, r4, r3
 8001a3a:	426d      	negs	r5, r5
 8001a3c:	1b40      	subs	r0, r0, r5
 8001a3e:	0205      	lsls	r5, r0, #8
 8001a40:	d400      	bmi.n	8001a44 <__aeabi_dadd+0x514>
 8001a42:	e62c      	b.n	800169e <__aeabi_dadd+0x16e>
 8001a44:	1bd7      	subs	r7, r2, r7
 8001a46:	42ba      	cmp	r2, r7
 8001a48:	4192      	sbcs	r2, r2
 8001a4a:	1b1c      	subs	r4, r3, r4
 8001a4c:	4252      	negs	r2, r2
 8001a4e:	1aa4      	subs	r4, r4, r2
 8001a50:	46d8      	mov	r8, fp
 8001a52:	e5f1      	b.n	8001638 <__aeabi_dadd+0x108>
 8001a54:	0018      	movs	r0, r3
 8001a56:	4310      	orrs	r0, r2
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dadd+0x52c>
 8001a5a:	e763      	b.n	8001924 <__aeabi_dadd+0x3f4>
 8001a5c:	08f8      	lsrs	r0, r7, #3
 8001a5e:	0767      	lsls	r7, r4, #29
 8001a60:	4307      	orrs	r7, r0
 8001a62:	2080      	movs	r0, #128	; 0x80
 8001a64:	08e4      	lsrs	r4, r4, #3
 8001a66:	0300      	lsls	r0, r0, #12
 8001a68:	4204      	tst	r4, r0
 8001a6a:	d008      	beq.n	8001a7e <__aeabi_dadd+0x54e>
 8001a6c:	08dd      	lsrs	r5, r3, #3
 8001a6e:	4205      	tst	r5, r0
 8001a70:	d105      	bne.n	8001a7e <__aeabi_dadd+0x54e>
 8001a72:	08d2      	lsrs	r2, r2, #3
 8001a74:	0759      	lsls	r1, r3, #29
 8001a76:	4311      	orrs	r1, r2
 8001a78:	000f      	movs	r7, r1
 8001a7a:	002c      	movs	r4, r5
 8001a7c:	46d8      	mov	r8, fp
 8001a7e:	0f7b      	lsrs	r3, r7, #29
 8001a80:	00e4      	lsls	r4, r4, #3
 8001a82:	431c      	orrs	r4, r3
 8001a84:	00ff      	lsls	r7, r7, #3
 8001a86:	4e30      	ldr	r6, [pc, #192]	; (8001b48 <__aeabi_dadd+0x618>)
 8001a88:	e5d6      	b.n	8001638 <__aeabi_dadd+0x108>
 8001a8a:	000c      	movs	r4, r1
 8001a8c:	0017      	movs	r7, r2
 8001a8e:	0006      	movs	r6, r0
 8001a90:	e5d2      	b.n	8001638 <__aeabi_dadd+0x108>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d038      	beq.n	8001b08 <__aeabi_dadd+0x5d8>
 8001a96:	000b      	movs	r3, r1
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x56e>
 8001a9c:	e742      	b.n	8001924 <__aeabi_dadd+0x3f4>
 8001a9e:	08f8      	lsrs	r0, r7, #3
 8001aa0:	0767      	lsls	r7, r4, #29
 8001aa2:	4307      	orrs	r7, r0
 8001aa4:	2080      	movs	r0, #128	; 0x80
 8001aa6:	08e4      	lsrs	r4, r4, #3
 8001aa8:	0300      	lsls	r0, r0, #12
 8001aaa:	4204      	tst	r4, r0
 8001aac:	d0e7      	beq.n	8001a7e <__aeabi_dadd+0x54e>
 8001aae:	08cb      	lsrs	r3, r1, #3
 8001ab0:	4203      	tst	r3, r0
 8001ab2:	d1e4      	bne.n	8001a7e <__aeabi_dadd+0x54e>
 8001ab4:	08d2      	lsrs	r2, r2, #3
 8001ab6:	0749      	lsls	r1, r1, #29
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	000f      	movs	r7, r1
 8001abc:	001c      	movs	r4, r3
 8001abe:	e7de      	b.n	8001a7e <__aeabi_dadd+0x54e>
 8001ac0:	2700      	movs	r7, #0
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	e5d5      	b.n	8001672 <__aeabi_dadd+0x142>
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	e76b      	b.n	80019a2 <__aeabi_dadd+0x472>
 8001aca:	2500      	movs	r5, #0
 8001acc:	2700      	movs	r7, #0
 8001ace:	e5f3      	b.n	80016b8 <__aeabi_dadd+0x188>
 8001ad0:	464e      	mov	r6, r9
 8001ad2:	0025      	movs	r5, r4
 8001ad4:	3e20      	subs	r6, #32
 8001ad6:	40f5      	lsrs	r5, r6
 8001ad8:	464b      	mov	r3, r9
 8001ada:	002e      	movs	r6, r5
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d02d      	beq.n	8001b3c <__aeabi_dadd+0x60c>
 8001ae0:	2540      	movs	r5, #64	; 0x40
 8001ae2:	1aed      	subs	r5, r5, r3
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4327      	orrs	r7, r4
 8001ae8:	1e7c      	subs	r4, r7, #1
 8001aea:	41a7      	sbcs	r7, r4
 8001aec:	2400      	movs	r4, #0
 8001aee:	4337      	orrs	r7, r6
 8001af0:	e6c9      	b.n	8001886 <__aeabi_dadd+0x356>
 8001af2:	2480      	movs	r4, #128	; 0x80
 8001af4:	2500      	movs	r5, #0
 8001af6:	0324      	lsls	r4, r4, #12
 8001af8:	4e13      	ldr	r6, [pc, #76]	; (8001b48 <__aeabi_dadd+0x618>)
 8001afa:	2700      	movs	r7, #0
 8001afc:	e5dc      	b.n	80016b8 <__aeabi_dadd+0x188>
 8001afe:	4327      	orrs	r7, r4
 8001b00:	1e7c      	subs	r4, r7, #1
 8001b02:	41a7      	sbcs	r7, r4
 8001b04:	2400      	movs	r4, #0
 8001b06:	e779      	b.n	80019fc <__aeabi_dadd+0x4cc>
 8001b08:	000c      	movs	r4, r1
 8001b0a:	0017      	movs	r7, r2
 8001b0c:	4e0e      	ldr	r6, [pc, #56]	; (8001b48 <__aeabi_dadd+0x618>)
 8001b0e:	e593      	b.n	8001638 <__aeabi_dadd+0x108>
 8001b10:	000c      	movs	r4, r1
 8001b12:	0017      	movs	r7, r2
 8001b14:	e590      	b.n	8001638 <__aeabi_dadd+0x108>
 8001b16:	4656      	mov	r6, sl
 8001b18:	0023      	movs	r3, r4
 8001b1a:	3e20      	subs	r6, #32
 8001b1c:	40f3      	lsrs	r3, r6
 8001b1e:	4699      	mov	r9, r3
 8001b20:	4653      	mov	r3, sl
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d00e      	beq.n	8001b44 <__aeabi_dadd+0x614>
 8001b26:	2340      	movs	r3, #64	; 0x40
 8001b28:	4656      	mov	r6, sl
 8001b2a:	1b9b      	subs	r3, r3, r6
 8001b2c:	409c      	lsls	r4, r3
 8001b2e:	4327      	orrs	r7, r4
 8001b30:	1e7c      	subs	r4, r7, #1
 8001b32:	41a7      	sbcs	r7, r4
 8001b34:	464b      	mov	r3, r9
 8001b36:	2400      	movs	r4, #0
 8001b38:	431f      	orrs	r7, r3
 8001b3a:	e75f      	b.n	80019fc <__aeabi_dadd+0x4cc>
 8001b3c:	2400      	movs	r4, #0
 8001b3e:	e7d2      	b.n	8001ae6 <__aeabi_dadd+0x5b6>
 8001b40:	0017      	movs	r7, r2
 8001b42:	e5b2      	b.n	80016aa <__aeabi_dadd+0x17a>
 8001b44:	2400      	movs	r4, #0
 8001b46:	e7f2      	b.n	8001b2e <__aeabi_dadd+0x5fe>
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	ff7fffff 	.word	0xff7fffff

08001b50 <__aeabi_ddiv>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	4645      	mov	r5, r8
 8001b56:	46de      	mov	lr, fp
 8001b58:	464e      	mov	r6, r9
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	004c      	lsls	r4, r1, #1
 8001b5e:	030e      	lsls	r6, r1, #12
 8001b60:	b087      	sub	sp, #28
 8001b62:	4683      	mov	fp, r0
 8001b64:	4692      	mov	sl, r2
 8001b66:	001d      	movs	r5, r3
 8001b68:	4680      	mov	r8, r0
 8001b6a:	0b36      	lsrs	r6, r6, #12
 8001b6c:	0d64      	lsrs	r4, r4, #21
 8001b6e:	0fcf      	lsrs	r7, r1, #31
 8001b70:	2c00      	cmp	r4, #0
 8001b72:	d04f      	beq.n	8001c14 <__aeabi_ddiv+0xc4>
 8001b74:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <__aeabi_ddiv+0x1e4>)
 8001b76:	429c      	cmp	r4, r3
 8001b78:	d035      	beq.n	8001be6 <__aeabi_ddiv+0x96>
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	0f42      	lsrs	r2, r0, #29
 8001b7e:	041b      	lsls	r3, r3, #16
 8001b80:	00f6      	lsls	r6, r6, #3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	4333      	orrs	r3, r6
 8001b86:	4699      	mov	r9, r3
 8001b88:	00c3      	lsls	r3, r0, #3
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <__aeabi_ddiv+0x1e8>)
 8001b8e:	2600      	movs	r6, #0
 8001b90:	469c      	mov	ip, r3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4464      	add	r4, ip
 8001b96:	9303      	str	r3, [sp, #12]
 8001b98:	032b      	lsls	r3, r5, #12
 8001b9a:	0b1b      	lsrs	r3, r3, #12
 8001b9c:	469b      	mov	fp, r3
 8001b9e:	006b      	lsls	r3, r5, #1
 8001ba0:	0fed      	lsrs	r5, r5, #31
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	0d5b      	lsrs	r3, r3, #21
 8001ba6:	9501      	str	r5, [sp, #4]
 8001ba8:	d05e      	beq.n	8001c68 <__aeabi_ddiv+0x118>
 8001baa:	4a62      	ldr	r2, [pc, #392]	; (8001d34 <__aeabi_ddiv+0x1e4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d053      	beq.n	8001c58 <__aeabi_ddiv+0x108>
 8001bb0:	465a      	mov	r2, fp
 8001bb2:	00d1      	lsls	r1, r2, #3
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0f40      	lsrs	r0, r0, #29
 8001bb8:	0412      	lsls	r2, r2, #16
 8001bba:	4302      	orrs	r2, r0
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4693      	mov	fp, r2
 8001bc0:	4652      	mov	r2, sl
 8001bc2:	00d1      	lsls	r1, r2, #3
 8001bc4:	4a5c      	ldr	r2, [pc, #368]	; (8001d38 <__aeabi_ddiv+0x1e8>)
 8001bc6:	4694      	mov	ip, r2
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4463      	add	r3, ip
 8001bcc:	0038      	movs	r0, r7
 8001bce:	4068      	eors	r0, r5
 8001bd0:	4684      	mov	ip, r0
 8001bd2:	9002      	str	r0, [sp, #8]
 8001bd4:	1ae4      	subs	r4, r4, r3
 8001bd6:	4316      	orrs	r6, r2
 8001bd8:	2e0f      	cmp	r6, #15
 8001bda:	d900      	bls.n	8001bde <__aeabi_ddiv+0x8e>
 8001bdc:	e0b4      	b.n	8001d48 <__aeabi_ddiv+0x1f8>
 8001bde:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <__aeabi_ddiv+0x1ec>)
 8001be0:	00b6      	lsls	r6, r6, #2
 8001be2:	599b      	ldr	r3, [r3, r6]
 8001be4:	469f      	mov	pc, r3
 8001be6:	0003      	movs	r3, r0
 8001be8:	4333      	orrs	r3, r6
 8001bea:	4699      	mov	r9, r3
 8001bec:	d16c      	bne.n	8001cc8 <__aeabi_ddiv+0x178>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	4698      	mov	r8, r3
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	2608      	movs	r6, #8
 8001bf6:	9303      	str	r3, [sp, #12]
 8001bf8:	e7ce      	b.n	8001b98 <__aeabi_ddiv+0x48>
 8001bfa:	46cb      	mov	fp, r9
 8001bfc:	4641      	mov	r1, r8
 8001bfe:	9a03      	ldr	r2, [sp, #12]
 8001c00:	9701      	str	r7, [sp, #4]
 8001c02:	2a02      	cmp	r2, #2
 8001c04:	d165      	bne.n	8001cd2 <__aeabi_ddiv+0x182>
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	4c4a      	ldr	r4, [pc, #296]	; (8001d34 <__aeabi_ddiv+0x1e4>)
 8001c0a:	469c      	mov	ip, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4698      	mov	r8, r3
 8001c12:	e06b      	b.n	8001cec <__aeabi_ddiv+0x19c>
 8001c14:	0003      	movs	r3, r0
 8001c16:	4333      	orrs	r3, r6
 8001c18:	4699      	mov	r9, r3
 8001c1a:	d04e      	beq.n	8001cba <__aeabi_ddiv+0x16a>
 8001c1c:	2e00      	cmp	r6, #0
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_ddiv+0xd2>
 8001c20:	e1bc      	b.n	8001f9c <__aeabi_ddiv+0x44c>
 8001c22:	0030      	movs	r0, r6
 8001c24:	f001 fab6 	bl	8003194 <__clzsi2>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	3b0b      	subs	r3, #11
 8001c2c:	2b1c      	cmp	r3, #28
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_ddiv+0xe2>
 8001c30:	e1ac      	b.n	8001f8c <__aeabi_ddiv+0x43c>
 8001c32:	221d      	movs	r2, #29
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	465a      	mov	r2, fp
 8001c38:	0001      	movs	r1, r0
 8001c3a:	40da      	lsrs	r2, r3
 8001c3c:	3908      	subs	r1, #8
 8001c3e:	408e      	lsls	r6, r1
 8001c40:	0013      	movs	r3, r2
 8001c42:	4333      	orrs	r3, r6
 8001c44:	4699      	mov	r9, r3
 8001c46:	465b      	mov	r3, fp
 8001c48:	408b      	lsls	r3, r1
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4c3c      	ldr	r4, [pc, #240]	; (8001d40 <__aeabi_ddiv+0x1f0>)
 8001c50:	2600      	movs	r6, #0
 8001c52:	1a24      	subs	r4, r4, r0
 8001c54:	9303      	str	r3, [sp, #12]
 8001c56:	e79f      	b.n	8001b98 <__aeabi_ddiv+0x48>
 8001c58:	4651      	mov	r1, sl
 8001c5a:	465a      	mov	r2, fp
 8001c5c:	4311      	orrs	r1, r2
 8001c5e:	d129      	bne.n	8001cb4 <__aeabi_ddiv+0x164>
 8001c60:	2200      	movs	r2, #0
 8001c62:	4693      	mov	fp, r2
 8001c64:	3202      	adds	r2, #2
 8001c66:	e7b1      	b.n	8001bcc <__aeabi_ddiv+0x7c>
 8001c68:	4659      	mov	r1, fp
 8001c6a:	4301      	orrs	r1, r0
 8001c6c:	d01e      	beq.n	8001cac <__aeabi_ddiv+0x15c>
 8001c6e:	465b      	mov	r3, fp
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d100      	bne.n	8001c76 <__aeabi_ddiv+0x126>
 8001c74:	e19e      	b.n	8001fb4 <__aeabi_ddiv+0x464>
 8001c76:	4658      	mov	r0, fp
 8001c78:	f001 fa8c 	bl	8003194 <__clzsi2>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	3b0b      	subs	r3, #11
 8001c80:	2b1c      	cmp	r3, #28
 8001c82:	dd00      	ble.n	8001c86 <__aeabi_ddiv+0x136>
 8001c84:	e18f      	b.n	8001fa6 <__aeabi_ddiv+0x456>
 8001c86:	0002      	movs	r2, r0
 8001c88:	4659      	mov	r1, fp
 8001c8a:	3a08      	subs	r2, #8
 8001c8c:	4091      	lsls	r1, r2
 8001c8e:	468b      	mov	fp, r1
 8001c90:	211d      	movs	r1, #29
 8001c92:	1acb      	subs	r3, r1, r3
 8001c94:	4651      	mov	r1, sl
 8001c96:	40d9      	lsrs	r1, r3
 8001c98:	000b      	movs	r3, r1
 8001c9a:	4659      	mov	r1, fp
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	4651      	mov	r1, sl
 8001ca0:	469b      	mov	fp, r3
 8001ca2:	4091      	lsls	r1, r2
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <__aeabi_ddiv+0x1f0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	1a1b      	subs	r3, r3, r0
 8001caa:	e78f      	b.n	8001bcc <__aeabi_ddiv+0x7c>
 8001cac:	2300      	movs	r3, #0
 8001cae:	2201      	movs	r2, #1
 8001cb0:	469b      	mov	fp, r3
 8001cb2:	e78b      	b.n	8001bcc <__aeabi_ddiv+0x7c>
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	e788      	b.n	8001bcc <__aeabi_ddiv+0x7c>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	2604      	movs	r6, #4
 8001cc2:	2400      	movs	r4, #0
 8001cc4:	9303      	str	r3, [sp, #12]
 8001cc6:	e767      	b.n	8001b98 <__aeabi_ddiv+0x48>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	46b1      	mov	r9, r6
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	260c      	movs	r6, #12
 8001cd0:	e762      	b.n	8001b98 <__aeabi_ddiv+0x48>
 8001cd2:	2a03      	cmp	r2, #3
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x188>
 8001cd6:	e25c      	b.n	8002192 <__aeabi_ddiv+0x642>
 8001cd8:	9b01      	ldr	r3, [sp, #4]
 8001cda:	2a01      	cmp	r2, #1
 8001cdc:	d000      	beq.n	8001ce0 <__aeabi_ddiv+0x190>
 8001cde:	e1e4      	b.n	80020aa <__aeabi_ddiv+0x55a>
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	469c      	mov	ip, r3
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2400      	movs	r4, #0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4698      	mov	r8, r3
 8001cec:	2100      	movs	r1, #0
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	0b13      	lsrs	r3, r2, #12
 8001cf2:	0d0a      	lsrs	r2, r1, #20
 8001cf4:	0512      	lsls	r2, r2, #20
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	0523      	lsls	r3, r4, #20
 8001cfa:	4c12      	ldr	r4, [pc, #72]	; (8001d44 <__aeabi_ddiv+0x1f4>)
 8001cfc:	4640      	mov	r0, r8
 8001cfe:	4022      	ands	r2, r4
 8001d00:	4313      	orrs	r3, r2
 8001d02:	4662      	mov	r2, ip
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	07d2      	lsls	r2, r2, #31
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	b007      	add	sp, #28
 8001d10:	bc3c      	pop	{r2, r3, r4, r5}
 8001d12:	4690      	mov	r8, r2
 8001d14:	4699      	mov	r9, r3
 8001d16:	46a2      	mov	sl, r4
 8001d18:	46ab      	mov	fp, r5
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	469c      	mov	ip, r3
 8001d22:	0312      	lsls	r2, r2, #12
 8001d24:	4698      	mov	r8, r3
 8001d26:	4c03      	ldr	r4, [pc, #12]	; (8001d34 <__aeabi_ddiv+0x1e4>)
 8001d28:	e7e0      	b.n	8001cec <__aeabi_ddiv+0x19c>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4c01      	ldr	r4, [pc, #4]	; (8001d34 <__aeabi_ddiv+0x1e4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4698      	mov	r8, r3
 8001d32:	e7db      	b.n	8001cec <__aeabi_ddiv+0x19c>
 8001d34:	000007ff 	.word	0x000007ff
 8001d38:	fffffc01 	.word	0xfffffc01
 8001d3c:	0800a26c 	.word	0x0800a26c
 8001d40:	fffffc0d 	.word	0xfffffc0d
 8001d44:	800fffff 	.word	0x800fffff
 8001d48:	45d9      	cmp	r9, fp
 8001d4a:	d900      	bls.n	8001d4e <__aeabi_ddiv+0x1fe>
 8001d4c:	e139      	b.n	8001fc2 <__aeabi_ddiv+0x472>
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_ddiv+0x202>
 8001d50:	e134      	b.n	8001fbc <__aeabi_ddiv+0x46c>
 8001d52:	2300      	movs	r3, #0
 8001d54:	4646      	mov	r6, r8
 8001d56:	464d      	mov	r5, r9
 8001d58:	469a      	mov	sl, r3
 8001d5a:	3c01      	subs	r4, #1
 8001d5c:	465b      	mov	r3, fp
 8001d5e:	0e0a      	lsrs	r2, r1, #24
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	431a      	orrs	r2, r3
 8001d64:	020b      	lsls	r3, r1, #8
 8001d66:	0c17      	lsrs	r7, r2, #16
 8001d68:	9303      	str	r3, [sp, #12]
 8001d6a:	0413      	lsls	r3, r2, #16
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	0039      	movs	r1, r7
 8001d70:	0028      	movs	r0, r5
 8001d72:	4690      	mov	r8, r2
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	f7fe f9e3 	bl	8000140 <__udivsi3>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	9b01      	ldr	r3, [sp, #4]
 8001d7e:	4683      	mov	fp, r0
 8001d80:	435a      	muls	r2, r3
 8001d82:	0028      	movs	r0, r5
 8001d84:	0039      	movs	r1, r7
 8001d86:	4691      	mov	r9, r2
 8001d88:	f7fe fa60 	bl	800024c <__aeabi_uidivmod>
 8001d8c:	0c35      	lsrs	r5, r6, #16
 8001d8e:	0409      	lsls	r1, r1, #16
 8001d90:	430d      	orrs	r5, r1
 8001d92:	45a9      	cmp	r9, r5
 8001d94:	d90d      	bls.n	8001db2 <__aeabi_ddiv+0x262>
 8001d96:	465b      	mov	r3, fp
 8001d98:	4445      	add	r5, r8
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	45a8      	cmp	r8, r5
 8001d9e:	d900      	bls.n	8001da2 <__aeabi_ddiv+0x252>
 8001da0:	e13a      	b.n	8002018 <__aeabi_ddiv+0x4c8>
 8001da2:	45a9      	cmp	r9, r5
 8001da4:	d800      	bhi.n	8001da8 <__aeabi_ddiv+0x258>
 8001da6:	e137      	b.n	8002018 <__aeabi_ddiv+0x4c8>
 8001da8:	2302      	movs	r3, #2
 8001daa:	425b      	negs	r3, r3
 8001dac:	469c      	mov	ip, r3
 8001dae:	4445      	add	r5, r8
 8001db0:	44e3      	add	fp, ip
 8001db2:	464b      	mov	r3, r9
 8001db4:	1aeb      	subs	r3, r5, r3
 8001db6:	0039      	movs	r1, r7
 8001db8:	0018      	movs	r0, r3
 8001dba:	9304      	str	r3, [sp, #16]
 8001dbc:	f7fe f9c0 	bl	8000140 <__udivsi3>
 8001dc0:	9b01      	ldr	r3, [sp, #4]
 8001dc2:	0005      	movs	r5, r0
 8001dc4:	4343      	muls	r3, r0
 8001dc6:	0039      	movs	r1, r7
 8001dc8:	9804      	ldr	r0, [sp, #16]
 8001dca:	4699      	mov	r9, r3
 8001dcc:	f7fe fa3e 	bl	800024c <__aeabi_uidivmod>
 8001dd0:	0433      	lsls	r3, r6, #16
 8001dd2:	0409      	lsls	r1, r1, #16
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	4599      	cmp	r9, r3
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x2a0>
 8001ddc:	4443      	add	r3, r8
 8001dde:	1e6a      	subs	r2, r5, #1
 8001de0:	4598      	cmp	r8, r3
 8001de2:	d900      	bls.n	8001de6 <__aeabi_ddiv+0x296>
 8001de4:	e11a      	b.n	800201c <__aeabi_ddiv+0x4cc>
 8001de6:	4599      	cmp	r9, r3
 8001de8:	d800      	bhi.n	8001dec <__aeabi_ddiv+0x29c>
 8001dea:	e117      	b.n	800201c <__aeabi_ddiv+0x4cc>
 8001dec:	3d02      	subs	r5, #2
 8001dee:	4443      	add	r3, r8
 8001df0:	464a      	mov	r2, r9
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	465a      	mov	r2, fp
 8001df6:	0412      	lsls	r2, r2, #16
 8001df8:	432a      	orrs	r2, r5
 8001dfa:	9903      	ldr	r1, [sp, #12]
 8001dfc:	4693      	mov	fp, r2
 8001dfe:	0c10      	lsrs	r0, r2, #16
 8001e00:	0c0a      	lsrs	r2, r1, #16
 8001e02:	4691      	mov	r9, r2
 8001e04:	0409      	lsls	r1, r1, #16
 8001e06:	465a      	mov	r2, fp
 8001e08:	0c09      	lsrs	r1, r1, #16
 8001e0a:	464e      	mov	r6, r9
 8001e0c:	000d      	movs	r5, r1
 8001e0e:	0412      	lsls	r2, r2, #16
 8001e10:	0c12      	lsrs	r2, r2, #16
 8001e12:	4345      	muls	r5, r0
 8001e14:	9105      	str	r1, [sp, #20]
 8001e16:	4351      	muls	r1, r2
 8001e18:	4372      	muls	r2, r6
 8001e1a:	4370      	muls	r0, r6
 8001e1c:	1952      	adds	r2, r2, r5
 8001e1e:	0c0e      	lsrs	r6, r1, #16
 8001e20:	18b2      	adds	r2, r6, r2
 8001e22:	4295      	cmp	r5, r2
 8001e24:	d903      	bls.n	8001e2e <__aeabi_ddiv+0x2de>
 8001e26:	2580      	movs	r5, #128	; 0x80
 8001e28:	026d      	lsls	r5, r5, #9
 8001e2a:	46ac      	mov	ip, r5
 8001e2c:	4460      	add	r0, ip
 8001e2e:	0c15      	lsrs	r5, r2, #16
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0412      	lsls	r2, r2, #16
 8001e34:	0c09      	lsrs	r1, r1, #16
 8001e36:	1828      	adds	r0, r5, r0
 8001e38:	1852      	adds	r2, r2, r1
 8001e3a:	4283      	cmp	r3, r0
 8001e3c:	d200      	bcs.n	8001e40 <__aeabi_ddiv+0x2f0>
 8001e3e:	e0ce      	b.n	8001fde <__aeabi_ddiv+0x48e>
 8001e40:	d100      	bne.n	8001e44 <__aeabi_ddiv+0x2f4>
 8001e42:	e0c8      	b.n	8001fd6 <__aeabi_ddiv+0x486>
 8001e44:	1a1d      	subs	r5, r3, r0
 8001e46:	4653      	mov	r3, sl
 8001e48:	1a9e      	subs	r6, r3, r2
 8001e4a:	45b2      	cmp	sl, r6
 8001e4c:	4192      	sbcs	r2, r2
 8001e4e:	4252      	negs	r2, r2
 8001e50:	1aab      	subs	r3, r5, r2
 8001e52:	469a      	mov	sl, r3
 8001e54:	4598      	cmp	r8, r3
 8001e56:	d100      	bne.n	8001e5a <__aeabi_ddiv+0x30a>
 8001e58:	e117      	b.n	800208a <__aeabi_ddiv+0x53a>
 8001e5a:	0039      	movs	r1, r7
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7fe f96f 	bl	8000140 <__udivsi3>
 8001e62:	9b01      	ldr	r3, [sp, #4]
 8001e64:	0005      	movs	r5, r0
 8001e66:	4343      	muls	r3, r0
 8001e68:	0039      	movs	r1, r7
 8001e6a:	4650      	mov	r0, sl
 8001e6c:	9304      	str	r3, [sp, #16]
 8001e6e:	f7fe f9ed 	bl	800024c <__aeabi_uidivmod>
 8001e72:	9804      	ldr	r0, [sp, #16]
 8001e74:	040b      	lsls	r3, r1, #16
 8001e76:	0c31      	lsrs	r1, r6, #16
 8001e78:	4319      	orrs	r1, r3
 8001e7a:	4288      	cmp	r0, r1
 8001e7c:	d909      	bls.n	8001e92 <__aeabi_ddiv+0x342>
 8001e7e:	4441      	add	r1, r8
 8001e80:	1e6b      	subs	r3, r5, #1
 8001e82:	4588      	cmp	r8, r1
 8001e84:	d900      	bls.n	8001e88 <__aeabi_ddiv+0x338>
 8001e86:	e107      	b.n	8002098 <__aeabi_ddiv+0x548>
 8001e88:	4288      	cmp	r0, r1
 8001e8a:	d800      	bhi.n	8001e8e <__aeabi_ddiv+0x33e>
 8001e8c:	e104      	b.n	8002098 <__aeabi_ddiv+0x548>
 8001e8e:	3d02      	subs	r5, #2
 8001e90:	4441      	add	r1, r8
 8001e92:	9b04      	ldr	r3, [sp, #16]
 8001e94:	1acb      	subs	r3, r1, r3
 8001e96:	0018      	movs	r0, r3
 8001e98:	0039      	movs	r1, r7
 8001e9a:	9304      	str	r3, [sp, #16]
 8001e9c:	f7fe f950 	bl	8000140 <__udivsi3>
 8001ea0:	9b01      	ldr	r3, [sp, #4]
 8001ea2:	4682      	mov	sl, r0
 8001ea4:	4343      	muls	r3, r0
 8001ea6:	0039      	movs	r1, r7
 8001ea8:	9804      	ldr	r0, [sp, #16]
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	f7fe f9ce 	bl	800024c <__aeabi_uidivmod>
 8001eb0:	9801      	ldr	r0, [sp, #4]
 8001eb2:	040b      	lsls	r3, r1, #16
 8001eb4:	0431      	lsls	r1, r6, #16
 8001eb6:	0c09      	lsrs	r1, r1, #16
 8001eb8:	4319      	orrs	r1, r3
 8001eba:	4288      	cmp	r0, r1
 8001ebc:	d90d      	bls.n	8001eda <__aeabi_ddiv+0x38a>
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	4441      	add	r1, r8
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	4588      	cmp	r8, r1
 8001ec6:	d900      	bls.n	8001eca <__aeabi_ddiv+0x37a>
 8001ec8:	e0e8      	b.n	800209c <__aeabi_ddiv+0x54c>
 8001eca:	4288      	cmp	r0, r1
 8001ecc:	d800      	bhi.n	8001ed0 <__aeabi_ddiv+0x380>
 8001ece:	e0e5      	b.n	800209c <__aeabi_ddiv+0x54c>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	469c      	mov	ip, r3
 8001ed6:	4441      	add	r1, r8
 8001ed8:	44e2      	add	sl, ip
 8001eda:	9b01      	ldr	r3, [sp, #4]
 8001edc:	042d      	lsls	r5, r5, #16
 8001ede:	1ace      	subs	r6, r1, r3
 8001ee0:	4651      	mov	r1, sl
 8001ee2:	4329      	orrs	r1, r5
 8001ee4:	9d05      	ldr	r5, [sp, #20]
 8001ee6:	464f      	mov	r7, r9
 8001ee8:	002a      	movs	r2, r5
 8001eea:	040b      	lsls	r3, r1, #16
 8001eec:	0c08      	lsrs	r0, r1, #16
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	435a      	muls	r2, r3
 8001ef2:	4345      	muls	r5, r0
 8001ef4:	437b      	muls	r3, r7
 8001ef6:	4378      	muls	r0, r7
 8001ef8:	195b      	adds	r3, r3, r5
 8001efa:	0c17      	lsrs	r7, r2, #16
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	429d      	cmp	r5, r3
 8001f00:	d903      	bls.n	8001f0a <__aeabi_ddiv+0x3ba>
 8001f02:	2580      	movs	r5, #128	; 0x80
 8001f04:	026d      	lsls	r5, r5, #9
 8001f06:	46ac      	mov	ip, r5
 8001f08:	4460      	add	r0, ip
 8001f0a:	0c1d      	lsrs	r5, r3, #16
 8001f0c:	0412      	lsls	r2, r2, #16
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	0c12      	lsrs	r2, r2, #16
 8001f12:	1828      	adds	r0, r5, r0
 8001f14:	189b      	adds	r3, r3, r2
 8001f16:	4286      	cmp	r6, r0
 8001f18:	d200      	bcs.n	8001f1c <__aeabi_ddiv+0x3cc>
 8001f1a:	e093      	b.n	8002044 <__aeabi_ddiv+0x4f4>
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_ddiv+0x3d0>
 8001f1e:	e08e      	b.n	800203e <__aeabi_ddiv+0x4ee>
 8001f20:	2301      	movs	r3, #1
 8001f22:	4319      	orrs	r1, r3
 8001f24:	4ba0      	ldr	r3, [pc, #640]	; (80021a8 <__aeabi_ddiv+0x658>)
 8001f26:	18e3      	adds	r3, r4, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dc00      	bgt.n	8001f2e <__aeabi_ddiv+0x3de>
 8001f2c:	e099      	b.n	8002062 <__aeabi_ddiv+0x512>
 8001f2e:	074a      	lsls	r2, r1, #29
 8001f30:	d000      	beq.n	8001f34 <__aeabi_ddiv+0x3e4>
 8001f32:	e09e      	b.n	8002072 <__aeabi_ddiv+0x522>
 8001f34:	465a      	mov	r2, fp
 8001f36:	01d2      	lsls	r2, r2, #7
 8001f38:	d506      	bpl.n	8001f48 <__aeabi_ddiv+0x3f8>
 8001f3a:	465a      	mov	r2, fp
 8001f3c:	4b9b      	ldr	r3, [pc, #620]	; (80021ac <__aeabi_ddiv+0x65c>)
 8001f3e:	401a      	ands	r2, r3
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	4693      	mov	fp, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	18e3      	adds	r3, r4, r3
 8001f48:	4a99      	ldr	r2, [pc, #612]	; (80021b0 <__aeabi_ddiv+0x660>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	dd68      	ble.n	8002020 <__aeabi_ddiv+0x4d0>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	9a02      	ldr	r2, [sp, #8]
 8001f52:	4c98      	ldr	r4, [pc, #608]	; (80021b4 <__aeabi_ddiv+0x664>)
 8001f54:	401a      	ands	r2, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	4694      	mov	ip, r2
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	e6c5      	b.n	8001cec <__aeabi_ddiv+0x19c>
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	464b      	mov	r3, r9
 8001f64:	0312      	lsls	r2, r2, #12
 8001f66:	4213      	tst	r3, r2
 8001f68:	d00a      	beq.n	8001f80 <__aeabi_ddiv+0x430>
 8001f6a:	465b      	mov	r3, fp
 8001f6c:	4213      	tst	r3, r2
 8001f6e:	d106      	bne.n	8001f7e <__aeabi_ddiv+0x42e>
 8001f70:	431a      	orrs	r2, r3
 8001f72:	0312      	lsls	r2, r2, #12
 8001f74:	0b12      	lsrs	r2, r2, #12
 8001f76:	46ac      	mov	ip, r5
 8001f78:	4688      	mov	r8, r1
 8001f7a:	4c8e      	ldr	r4, [pc, #568]	; (80021b4 <__aeabi_ddiv+0x664>)
 8001f7c:	e6b6      	b.n	8001cec <__aeabi_ddiv+0x19c>
 8001f7e:	464b      	mov	r3, r9
 8001f80:	431a      	orrs	r2, r3
 8001f82:	0312      	lsls	r2, r2, #12
 8001f84:	0b12      	lsrs	r2, r2, #12
 8001f86:	46bc      	mov	ip, r7
 8001f88:	4c8a      	ldr	r4, [pc, #552]	; (80021b4 <__aeabi_ddiv+0x664>)
 8001f8a:	e6af      	b.n	8001cec <__aeabi_ddiv+0x19c>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	465a      	mov	r2, fp
 8001f90:	3b28      	subs	r3, #40	; 0x28
 8001f92:	409a      	lsls	r2, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	4691      	mov	r9, r2
 8001f98:	4698      	mov	r8, r3
 8001f9a:	e657      	b.n	8001c4c <__aeabi_ddiv+0xfc>
 8001f9c:	4658      	mov	r0, fp
 8001f9e:	f001 f8f9 	bl	8003194 <__clzsi2>
 8001fa2:	3020      	adds	r0, #32
 8001fa4:	e640      	b.n	8001c28 <__aeabi_ddiv+0xd8>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	4652      	mov	r2, sl
 8001faa:	3b28      	subs	r3, #40	; 0x28
 8001fac:	409a      	lsls	r2, r3
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4693      	mov	fp, r2
 8001fb2:	e677      	b.n	8001ca4 <__aeabi_ddiv+0x154>
 8001fb4:	f001 f8ee 	bl	8003194 <__clzsi2>
 8001fb8:	3020      	adds	r0, #32
 8001fba:	e65f      	b.n	8001c7c <__aeabi_ddiv+0x12c>
 8001fbc:	4588      	cmp	r8, r1
 8001fbe:	d200      	bcs.n	8001fc2 <__aeabi_ddiv+0x472>
 8001fc0:	e6c7      	b.n	8001d52 <__aeabi_ddiv+0x202>
 8001fc2:	464b      	mov	r3, r9
 8001fc4:	07de      	lsls	r6, r3, #31
 8001fc6:	085d      	lsrs	r5, r3, #1
 8001fc8:	4643      	mov	r3, r8
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	431e      	orrs	r6, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	07db      	lsls	r3, r3, #31
 8001fd2:	469a      	mov	sl, r3
 8001fd4:	e6c2      	b.n	8001d5c <__aeabi_ddiv+0x20c>
 8001fd6:	2500      	movs	r5, #0
 8001fd8:	4592      	cmp	sl, r2
 8001fda:	d300      	bcc.n	8001fde <__aeabi_ddiv+0x48e>
 8001fdc:	e733      	b.n	8001e46 <__aeabi_ddiv+0x2f6>
 8001fde:	9e03      	ldr	r6, [sp, #12]
 8001fe0:	4659      	mov	r1, fp
 8001fe2:	46b4      	mov	ip, r6
 8001fe4:	44e2      	add	sl, ip
 8001fe6:	45b2      	cmp	sl, r6
 8001fe8:	41ad      	sbcs	r5, r5
 8001fea:	426d      	negs	r5, r5
 8001fec:	4445      	add	r5, r8
 8001fee:	18eb      	adds	r3, r5, r3
 8001ff0:	3901      	subs	r1, #1
 8001ff2:	4598      	cmp	r8, r3
 8001ff4:	d207      	bcs.n	8002006 <__aeabi_ddiv+0x4b6>
 8001ff6:	4298      	cmp	r0, r3
 8001ff8:	d900      	bls.n	8001ffc <__aeabi_ddiv+0x4ac>
 8001ffa:	e07f      	b.n	80020fc <__aeabi_ddiv+0x5ac>
 8001ffc:	d100      	bne.n	8002000 <__aeabi_ddiv+0x4b0>
 8001ffe:	e0bc      	b.n	800217a <__aeabi_ddiv+0x62a>
 8002000:	1a1d      	subs	r5, r3, r0
 8002002:	468b      	mov	fp, r1
 8002004:	e71f      	b.n	8001e46 <__aeabi_ddiv+0x2f6>
 8002006:	4598      	cmp	r8, r3
 8002008:	d1fa      	bne.n	8002000 <__aeabi_ddiv+0x4b0>
 800200a:	9d03      	ldr	r5, [sp, #12]
 800200c:	4555      	cmp	r5, sl
 800200e:	d9f2      	bls.n	8001ff6 <__aeabi_ddiv+0x4a6>
 8002010:	4643      	mov	r3, r8
 8002012:	468b      	mov	fp, r1
 8002014:	1a1d      	subs	r5, r3, r0
 8002016:	e716      	b.n	8001e46 <__aeabi_ddiv+0x2f6>
 8002018:	469b      	mov	fp, r3
 800201a:	e6ca      	b.n	8001db2 <__aeabi_ddiv+0x262>
 800201c:	0015      	movs	r5, r2
 800201e:	e6e7      	b.n	8001df0 <__aeabi_ddiv+0x2a0>
 8002020:	465a      	mov	r2, fp
 8002022:	08c9      	lsrs	r1, r1, #3
 8002024:	0752      	lsls	r2, r2, #29
 8002026:	430a      	orrs	r2, r1
 8002028:	055b      	lsls	r3, r3, #21
 800202a:	4690      	mov	r8, r2
 800202c:	0d5c      	lsrs	r4, r3, #21
 800202e:	465a      	mov	r2, fp
 8002030:	2301      	movs	r3, #1
 8002032:	9902      	ldr	r1, [sp, #8]
 8002034:	0252      	lsls	r2, r2, #9
 8002036:	4019      	ands	r1, r3
 8002038:	0b12      	lsrs	r2, r2, #12
 800203a:	468c      	mov	ip, r1
 800203c:	e656      	b.n	8001cec <__aeabi_ddiv+0x19c>
 800203e:	2b00      	cmp	r3, #0
 8002040:	d100      	bne.n	8002044 <__aeabi_ddiv+0x4f4>
 8002042:	e76f      	b.n	8001f24 <__aeabi_ddiv+0x3d4>
 8002044:	4446      	add	r6, r8
 8002046:	1e4a      	subs	r2, r1, #1
 8002048:	45b0      	cmp	r8, r6
 800204a:	d929      	bls.n	80020a0 <__aeabi_ddiv+0x550>
 800204c:	0011      	movs	r1, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x504>
 8002052:	e765      	b.n	8001f20 <__aeabi_ddiv+0x3d0>
 8002054:	9a03      	ldr	r2, [sp, #12]
 8002056:	4293      	cmp	r3, r2
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x50c>
 800205a:	e761      	b.n	8001f20 <__aeabi_ddiv+0x3d0>
 800205c:	e762      	b.n	8001f24 <__aeabi_ddiv+0x3d4>
 800205e:	2101      	movs	r1, #1
 8002060:	4249      	negs	r1, r1
 8002062:	2001      	movs	r0, #1
 8002064:	1ac2      	subs	r2, r0, r3
 8002066:	2a38      	cmp	r2, #56	; 0x38
 8002068:	dd21      	ble.n	80020ae <__aeabi_ddiv+0x55e>
 800206a:	9b02      	ldr	r3, [sp, #8]
 800206c:	4003      	ands	r3, r0
 800206e:	469c      	mov	ip, r3
 8002070:	e638      	b.n	8001ce4 <__aeabi_ddiv+0x194>
 8002072:	220f      	movs	r2, #15
 8002074:	400a      	ands	r2, r1
 8002076:	2a04      	cmp	r2, #4
 8002078:	d100      	bne.n	800207c <__aeabi_ddiv+0x52c>
 800207a:	e75b      	b.n	8001f34 <__aeabi_ddiv+0x3e4>
 800207c:	000a      	movs	r2, r1
 800207e:	1d11      	adds	r1, r2, #4
 8002080:	4291      	cmp	r1, r2
 8002082:	4192      	sbcs	r2, r2
 8002084:	4252      	negs	r2, r2
 8002086:	4493      	add	fp, r2
 8002088:	e754      	b.n	8001f34 <__aeabi_ddiv+0x3e4>
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <__aeabi_ddiv+0x658>)
 800208c:	18e3      	adds	r3, r4, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	dde5      	ble.n	800205e <__aeabi_ddiv+0x50e>
 8002092:	2201      	movs	r2, #1
 8002094:	4252      	negs	r2, r2
 8002096:	e7f2      	b.n	800207e <__aeabi_ddiv+0x52e>
 8002098:	001d      	movs	r5, r3
 800209a:	e6fa      	b.n	8001e92 <__aeabi_ddiv+0x342>
 800209c:	469a      	mov	sl, r3
 800209e:	e71c      	b.n	8001eda <__aeabi_ddiv+0x38a>
 80020a0:	42b0      	cmp	r0, r6
 80020a2:	d839      	bhi.n	8002118 <__aeabi_ddiv+0x5c8>
 80020a4:	d06e      	beq.n	8002184 <__aeabi_ddiv+0x634>
 80020a6:	0011      	movs	r1, r2
 80020a8:	e73a      	b.n	8001f20 <__aeabi_ddiv+0x3d0>
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	e73a      	b.n	8001f24 <__aeabi_ddiv+0x3d4>
 80020ae:	2a1f      	cmp	r2, #31
 80020b0:	dc3c      	bgt.n	800212c <__aeabi_ddiv+0x5dc>
 80020b2:	2320      	movs	r3, #32
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	000c      	movs	r4, r1
 80020b8:	4658      	mov	r0, fp
 80020ba:	4099      	lsls	r1, r3
 80020bc:	4098      	lsls	r0, r3
 80020be:	1e4b      	subs	r3, r1, #1
 80020c0:	4199      	sbcs	r1, r3
 80020c2:	465b      	mov	r3, fp
 80020c4:	40d4      	lsrs	r4, r2
 80020c6:	40d3      	lsrs	r3, r2
 80020c8:	4320      	orrs	r0, r4
 80020ca:	4308      	orrs	r0, r1
 80020cc:	001a      	movs	r2, r3
 80020ce:	0743      	lsls	r3, r0, #29
 80020d0:	d009      	beq.n	80020e6 <__aeabi_ddiv+0x596>
 80020d2:	230f      	movs	r3, #15
 80020d4:	4003      	ands	r3, r0
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d005      	beq.n	80020e6 <__aeabi_ddiv+0x596>
 80020da:	0001      	movs	r1, r0
 80020dc:	1d08      	adds	r0, r1, #4
 80020de:	4288      	cmp	r0, r1
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	18d2      	adds	r2, r2, r3
 80020e6:	0213      	lsls	r3, r2, #8
 80020e8:	d53a      	bpl.n	8002160 <__aeabi_ddiv+0x610>
 80020ea:	2301      	movs	r3, #1
 80020ec:	9a02      	ldr	r2, [sp, #8]
 80020ee:	2401      	movs	r4, #1
 80020f0:	401a      	ands	r2, r3
 80020f2:	2300      	movs	r3, #0
 80020f4:	4694      	mov	ip, r2
 80020f6:	4698      	mov	r8, r3
 80020f8:	2200      	movs	r2, #0
 80020fa:	e5f7      	b.n	8001cec <__aeabi_ddiv+0x19c>
 80020fc:	2102      	movs	r1, #2
 80020fe:	4249      	negs	r1, r1
 8002100:	468c      	mov	ip, r1
 8002102:	9d03      	ldr	r5, [sp, #12]
 8002104:	44e3      	add	fp, ip
 8002106:	46ac      	mov	ip, r5
 8002108:	44e2      	add	sl, ip
 800210a:	45aa      	cmp	sl, r5
 800210c:	41ad      	sbcs	r5, r5
 800210e:	426d      	negs	r5, r5
 8002110:	4445      	add	r5, r8
 8002112:	18ed      	adds	r5, r5, r3
 8002114:	1a2d      	subs	r5, r5, r0
 8002116:	e696      	b.n	8001e46 <__aeabi_ddiv+0x2f6>
 8002118:	1e8a      	subs	r2, r1, #2
 800211a:	9903      	ldr	r1, [sp, #12]
 800211c:	004d      	lsls	r5, r1, #1
 800211e:	428d      	cmp	r5, r1
 8002120:	4189      	sbcs	r1, r1
 8002122:	4249      	negs	r1, r1
 8002124:	4441      	add	r1, r8
 8002126:	1876      	adds	r6, r6, r1
 8002128:	9503      	str	r5, [sp, #12]
 800212a:	e78f      	b.n	800204c <__aeabi_ddiv+0x4fc>
 800212c:	201f      	movs	r0, #31
 800212e:	4240      	negs	r0, r0
 8002130:	1ac3      	subs	r3, r0, r3
 8002132:	4658      	mov	r0, fp
 8002134:	40d8      	lsrs	r0, r3
 8002136:	0003      	movs	r3, r0
 8002138:	2a20      	cmp	r2, #32
 800213a:	d028      	beq.n	800218e <__aeabi_ddiv+0x63e>
 800213c:	2040      	movs	r0, #64	; 0x40
 800213e:	465d      	mov	r5, fp
 8002140:	1a82      	subs	r2, r0, r2
 8002142:	4095      	lsls	r5, r2
 8002144:	4329      	orrs	r1, r5
 8002146:	1e4a      	subs	r2, r1, #1
 8002148:	4191      	sbcs	r1, r2
 800214a:	4319      	orrs	r1, r3
 800214c:	2307      	movs	r3, #7
 800214e:	2200      	movs	r2, #0
 8002150:	400b      	ands	r3, r1
 8002152:	d009      	beq.n	8002168 <__aeabi_ddiv+0x618>
 8002154:	230f      	movs	r3, #15
 8002156:	2200      	movs	r2, #0
 8002158:	400b      	ands	r3, r1
 800215a:	0008      	movs	r0, r1
 800215c:	2b04      	cmp	r3, #4
 800215e:	d1bd      	bne.n	80020dc <__aeabi_ddiv+0x58c>
 8002160:	0001      	movs	r1, r0
 8002162:	0753      	lsls	r3, r2, #29
 8002164:	0252      	lsls	r2, r2, #9
 8002166:	0b12      	lsrs	r2, r2, #12
 8002168:	08c9      	lsrs	r1, r1, #3
 800216a:	4319      	orrs	r1, r3
 800216c:	2301      	movs	r3, #1
 800216e:	4688      	mov	r8, r1
 8002170:	9902      	ldr	r1, [sp, #8]
 8002172:	2400      	movs	r4, #0
 8002174:	4019      	ands	r1, r3
 8002176:	468c      	mov	ip, r1
 8002178:	e5b8      	b.n	8001cec <__aeabi_ddiv+0x19c>
 800217a:	4552      	cmp	r2, sl
 800217c:	d8be      	bhi.n	80020fc <__aeabi_ddiv+0x5ac>
 800217e:	468b      	mov	fp, r1
 8002180:	2500      	movs	r5, #0
 8002182:	e660      	b.n	8001e46 <__aeabi_ddiv+0x2f6>
 8002184:	9d03      	ldr	r5, [sp, #12]
 8002186:	429d      	cmp	r5, r3
 8002188:	d3c6      	bcc.n	8002118 <__aeabi_ddiv+0x5c8>
 800218a:	0011      	movs	r1, r2
 800218c:	e762      	b.n	8002054 <__aeabi_ddiv+0x504>
 800218e:	2500      	movs	r5, #0
 8002190:	e7d8      	b.n	8002144 <__aeabi_ddiv+0x5f4>
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	465b      	mov	r3, fp
 8002196:	0312      	lsls	r2, r2, #12
 8002198:	431a      	orrs	r2, r3
 800219a:	9b01      	ldr	r3, [sp, #4]
 800219c:	0312      	lsls	r2, r2, #12
 800219e:	0b12      	lsrs	r2, r2, #12
 80021a0:	469c      	mov	ip, r3
 80021a2:	4688      	mov	r8, r1
 80021a4:	4c03      	ldr	r4, [pc, #12]	; (80021b4 <__aeabi_ddiv+0x664>)
 80021a6:	e5a1      	b.n	8001cec <__aeabi_ddiv+0x19c>
 80021a8:	000003ff 	.word	0x000003ff
 80021ac:	feffffff 	.word	0xfeffffff
 80021b0:	000007fe 	.word	0x000007fe
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__eqdf2>:
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	464f      	mov	r7, r9
 80021bc:	4646      	mov	r6, r8
 80021be:	46d6      	mov	lr, sl
 80021c0:	005c      	lsls	r4, r3, #1
 80021c2:	b5c0      	push	{r6, r7, lr}
 80021c4:	031f      	lsls	r7, r3, #12
 80021c6:	0fdb      	lsrs	r3, r3, #31
 80021c8:	469a      	mov	sl, r3
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <__eqdf2+0x70>)
 80021cc:	030e      	lsls	r6, r1, #12
 80021ce:	004d      	lsls	r5, r1, #1
 80021d0:	4684      	mov	ip, r0
 80021d2:	4680      	mov	r8, r0
 80021d4:	0b36      	lsrs	r6, r6, #12
 80021d6:	0d6d      	lsrs	r5, r5, #21
 80021d8:	0fc9      	lsrs	r1, r1, #31
 80021da:	4691      	mov	r9, r2
 80021dc:	0b3f      	lsrs	r7, r7, #12
 80021de:	0d64      	lsrs	r4, r4, #21
 80021e0:	2001      	movs	r0, #1
 80021e2:	429d      	cmp	r5, r3
 80021e4:	d008      	beq.n	80021f8 <__eqdf2+0x40>
 80021e6:	429c      	cmp	r4, r3
 80021e8:	d001      	beq.n	80021ee <__eqdf2+0x36>
 80021ea:	42a5      	cmp	r5, r4
 80021ec:	d00b      	beq.n	8002206 <__eqdf2+0x4e>
 80021ee:	bc1c      	pop	{r2, r3, r4}
 80021f0:	4690      	mov	r8, r2
 80021f2:	4699      	mov	r9, r3
 80021f4:	46a2      	mov	sl, r4
 80021f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f8:	4663      	mov	r3, ip
 80021fa:	4333      	orrs	r3, r6
 80021fc:	d1f7      	bne.n	80021ee <__eqdf2+0x36>
 80021fe:	42ac      	cmp	r4, r5
 8002200:	d1f5      	bne.n	80021ee <__eqdf2+0x36>
 8002202:	433a      	orrs	r2, r7
 8002204:	d1f3      	bne.n	80021ee <__eqdf2+0x36>
 8002206:	2001      	movs	r0, #1
 8002208:	42be      	cmp	r6, r7
 800220a:	d1f0      	bne.n	80021ee <__eqdf2+0x36>
 800220c:	45c8      	cmp	r8, r9
 800220e:	d1ee      	bne.n	80021ee <__eqdf2+0x36>
 8002210:	4551      	cmp	r1, sl
 8002212:	d007      	beq.n	8002224 <__eqdf2+0x6c>
 8002214:	2d00      	cmp	r5, #0
 8002216:	d1ea      	bne.n	80021ee <__eqdf2+0x36>
 8002218:	4663      	mov	r3, ip
 800221a:	431e      	orrs	r6, r3
 800221c:	0030      	movs	r0, r6
 800221e:	1e46      	subs	r6, r0, #1
 8002220:	41b0      	sbcs	r0, r6
 8002222:	e7e4      	b.n	80021ee <__eqdf2+0x36>
 8002224:	2000      	movs	r0, #0
 8002226:	e7e2      	b.n	80021ee <__eqdf2+0x36>
 8002228:	000007ff 	.word	0x000007ff

0800222c <__gedf2>:
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	4645      	mov	r5, r8
 8002230:	46de      	mov	lr, fp
 8002232:	4657      	mov	r7, sl
 8002234:	464e      	mov	r6, r9
 8002236:	b5e0      	push	{r5, r6, r7, lr}
 8002238:	031f      	lsls	r7, r3, #12
 800223a:	0b3d      	lsrs	r5, r7, #12
 800223c:	4f2c      	ldr	r7, [pc, #176]	; (80022f0 <__gedf2+0xc4>)
 800223e:	030e      	lsls	r6, r1, #12
 8002240:	004c      	lsls	r4, r1, #1
 8002242:	46ab      	mov	fp, r5
 8002244:	005d      	lsls	r5, r3, #1
 8002246:	4684      	mov	ip, r0
 8002248:	0b36      	lsrs	r6, r6, #12
 800224a:	0d64      	lsrs	r4, r4, #21
 800224c:	0fc9      	lsrs	r1, r1, #31
 800224e:	4690      	mov	r8, r2
 8002250:	0d6d      	lsrs	r5, r5, #21
 8002252:	0fdb      	lsrs	r3, r3, #31
 8002254:	42bc      	cmp	r4, r7
 8002256:	d02a      	beq.n	80022ae <__gedf2+0x82>
 8002258:	4f25      	ldr	r7, [pc, #148]	; (80022f0 <__gedf2+0xc4>)
 800225a:	42bd      	cmp	r5, r7
 800225c:	d02d      	beq.n	80022ba <__gedf2+0x8e>
 800225e:	2c00      	cmp	r4, #0
 8002260:	d10f      	bne.n	8002282 <__gedf2+0x56>
 8002262:	4330      	orrs	r0, r6
 8002264:	0007      	movs	r7, r0
 8002266:	4681      	mov	r9, r0
 8002268:	4278      	negs	r0, r7
 800226a:	4178      	adcs	r0, r7
 800226c:	b2c0      	uxtb	r0, r0
 800226e:	2d00      	cmp	r5, #0
 8002270:	d117      	bne.n	80022a2 <__gedf2+0x76>
 8002272:	465f      	mov	r7, fp
 8002274:	433a      	orrs	r2, r7
 8002276:	d114      	bne.n	80022a2 <__gedf2+0x76>
 8002278:	464b      	mov	r3, r9
 800227a:	2000      	movs	r0, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <__gedf2+0x6a>
 8002280:	e006      	b.n	8002290 <__gedf2+0x64>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d102      	bne.n	800228c <__gedf2+0x60>
 8002286:	4658      	mov	r0, fp
 8002288:	4302      	orrs	r2, r0
 800228a:	d001      	beq.n	8002290 <__gedf2+0x64>
 800228c:	4299      	cmp	r1, r3
 800228e:	d018      	beq.n	80022c2 <__gedf2+0x96>
 8002290:	4248      	negs	r0, r1
 8002292:	2101      	movs	r1, #1
 8002294:	4308      	orrs	r0, r1
 8002296:	bc3c      	pop	{r2, r3, r4, r5}
 8002298:	4690      	mov	r8, r2
 800229a:	4699      	mov	r9, r3
 800229c:	46a2      	mov	sl, r4
 800229e:	46ab      	mov	fp, r5
 80022a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d0f2      	beq.n	800228c <__gedf2+0x60>
 80022a6:	2001      	movs	r0, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	4318      	orrs	r0, r3
 80022ac:	e7f3      	b.n	8002296 <__gedf2+0x6a>
 80022ae:	0037      	movs	r7, r6
 80022b0:	4307      	orrs	r7, r0
 80022b2:	d0d1      	beq.n	8002258 <__gedf2+0x2c>
 80022b4:	2002      	movs	r0, #2
 80022b6:	4240      	negs	r0, r0
 80022b8:	e7ed      	b.n	8002296 <__gedf2+0x6a>
 80022ba:	465f      	mov	r7, fp
 80022bc:	4317      	orrs	r7, r2
 80022be:	d0ce      	beq.n	800225e <__gedf2+0x32>
 80022c0:	e7f8      	b.n	80022b4 <__gedf2+0x88>
 80022c2:	42ac      	cmp	r4, r5
 80022c4:	dce4      	bgt.n	8002290 <__gedf2+0x64>
 80022c6:	da03      	bge.n	80022d0 <__gedf2+0xa4>
 80022c8:	1e48      	subs	r0, r1, #1
 80022ca:	2101      	movs	r1, #1
 80022cc:	4308      	orrs	r0, r1
 80022ce:	e7e2      	b.n	8002296 <__gedf2+0x6a>
 80022d0:	455e      	cmp	r6, fp
 80022d2:	d8dd      	bhi.n	8002290 <__gedf2+0x64>
 80022d4:	d006      	beq.n	80022e4 <__gedf2+0xb8>
 80022d6:	2000      	movs	r0, #0
 80022d8:	455e      	cmp	r6, fp
 80022da:	d2dc      	bcs.n	8002296 <__gedf2+0x6a>
 80022dc:	2301      	movs	r3, #1
 80022de:	1e48      	subs	r0, r1, #1
 80022e0:	4318      	orrs	r0, r3
 80022e2:	e7d8      	b.n	8002296 <__gedf2+0x6a>
 80022e4:	45c4      	cmp	ip, r8
 80022e6:	d8d3      	bhi.n	8002290 <__gedf2+0x64>
 80022e8:	2000      	movs	r0, #0
 80022ea:	45c4      	cmp	ip, r8
 80022ec:	d3f6      	bcc.n	80022dc <__gedf2+0xb0>
 80022ee:	e7d2      	b.n	8002296 <__gedf2+0x6a>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__ledf2>:
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	464e      	mov	r6, r9
 80022f8:	4645      	mov	r5, r8
 80022fa:	46de      	mov	lr, fp
 80022fc:	4657      	mov	r7, sl
 80022fe:	005c      	lsls	r4, r3, #1
 8002300:	b5e0      	push	{r5, r6, r7, lr}
 8002302:	031f      	lsls	r7, r3, #12
 8002304:	0fdb      	lsrs	r3, r3, #31
 8002306:	4699      	mov	r9, r3
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <__ledf2+0xc0>)
 800230a:	030e      	lsls	r6, r1, #12
 800230c:	004d      	lsls	r5, r1, #1
 800230e:	0fc9      	lsrs	r1, r1, #31
 8002310:	4684      	mov	ip, r0
 8002312:	0b36      	lsrs	r6, r6, #12
 8002314:	0d6d      	lsrs	r5, r5, #21
 8002316:	468b      	mov	fp, r1
 8002318:	4690      	mov	r8, r2
 800231a:	0b3f      	lsrs	r7, r7, #12
 800231c:	0d64      	lsrs	r4, r4, #21
 800231e:	429d      	cmp	r5, r3
 8002320:	d020      	beq.n	8002364 <__ledf2+0x70>
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <__ledf2+0xc0>)
 8002324:	429c      	cmp	r4, r3
 8002326:	d022      	beq.n	800236e <__ledf2+0x7a>
 8002328:	2d00      	cmp	r5, #0
 800232a:	d112      	bne.n	8002352 <__ledf2+0x5e>
 800232c:	4330      	orrs	r0, r6
 800232e:	4243      	negs	r3, r0
 8002330:	4143      	adcs	r3, r0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2c00      	cmp	r4, #0
 8002336:	d01f      	beq.n	8002378 <__ledf2+0x84>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00c      	beq.n	8002356 <__ledf2+0x62>
 800233c:	464b      	mov	r3, r9
 800233e:	2001      	movs	r0, #1
 8002340:	3b01      	subs	r3, #1
 8002342:	4303      	orrs	r3, r0
 8002344:	0018      	movs	r0, r3
 8002346:	bc3c      	pop	{r2, r3, r4, r5}
 8002348:	4690      	mov	r8, r2
 800234a:	4699      	mov	r9, r3
 800234c:	46a2      	mov	sl, r4
 800234e:	46ab      	mov	fp, r5
 8002350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002352:	2c00      	cmp	r4, #0
 8002354:	d016      	beq.n	8002384 <__ledf2+0x90>
 8002356:	45cb      	cmp	fp, r9
 8002358:	d017      	beq.n	800238a <__ledf2+0x96>
 800235a:	465b      	mov	r3, fp
 800235c:	4259      	negs	r1, r3
 800235e:	2301      	movs	r3, #1
 8002360:	430b      	orrs	r3, r1
 8002362:	e7ef      	b.n	8002344 <__ledf2+0x50>
 8002364:	0031      	movs	r1, r6
 8002366:	2302      	movs	r3, #2
 8002368:	4301      	orrs	r1, r0
 800236a:	d1eb      	bne.n	8002344 <__ledf2+0x50>
 800236c:	e7d9      	b.n	8002322 <__ledf2+0x2e>
 800236e:	0039      	movs	r1, r7
 8002370:	2302      	movs	r3, #2
 8002372:	4311      	orrs	r1, r2
 8002374:	d1e6      	bne.n	8002344 <__ledf2+0x50>
 8002376:	e7d7      	b.n	8002328 <__ledf2+0x34>
 8002378:	433a      	orrs	r2, r7
 800237a:	d1dd      	bne.n	8002338 <__ledf2+0x44>
 800237c:	2300      	movs	r3, #0
 800237e:	2800      	cmp	r0, #0
 8002380:	d0e0      	beq.n	8002344 <__ledf2+0x50>
 8002382:	e7ea      	b.n	800235a <__ledf2+0x66>
 8002384:	433a      	orrs	r2, r7
 8002386:	d1e6      	bne.n	8002356 <__ledf2+0x62>
 8002388:	e7e7      	b.n	800235a <__ledf2+0x66>
 800238a:	42a5      	cmp	r5, r4
 800238c:	dce5      	bgt.n	800235a <__ledf2+0x66>
 800238e:	db05      	blt.n	800239c <__ledf2+0xa8>
 8002390:	42be      	cmp	r6, r7
 8002392:	d8e2      	bhi.n	800235a <__ledf2+0x66>
 8002394:	d007      	beq.n	80023a6 <__ledf2+0xb2>
 8002396:	2300      	movs	r3, #0
 8002398:	42be      	cmp	r6, r7
 800239a:	d2d3      	bcs.n	8002344 <__ledf2+0x50>
 800239c:	4659      	mov	r1, fp
 800239e:	2301      	movs	r3, #1
 80023a0:	3901      	subs	r1, #1
 80023a2:	430b      	orrs	r3, r1
 80023a4:	e7ce      	b.n	8002344 <__ledf2+0x50>
 80023a6:	45c4      	cmp	ip, r8
 80023a8:	d8d7      	bhi.n	800235a <__ledf2+0x66>
 80023aa:	2300      	movs	r3, #0
 80023ac:	45c4      	cmp	ip, r8
 80023ae:	d3f5      	bcc.n	800239c <__ledf2+0xa8>
 80023b0:	e7c8      	b.n	8002344 <__ledf2+0x50>
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	000007ff 	.word	0x000007ff

080023b8 <__aeabi_dmul>:
 80023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ba:	4657      	mov	r7, sl
 80023bc:	4645      	mov	r5, r8
 80023be:	46de      	mov	lr, fp
 80023c0:	464e      	mov	r6, r9
 80023c2:	b5e0      	push	{r5, r6, r7, lr}
 80023c4:	030c      	lsls	r4, r1, #12
 80023c6:	4698      	mov	r8, r3
 80023c8:	004e      	lsls	r6, r1, #1
 80023ca:	0b23      	lsrs	r3, r4, #12
 80023cc:	b087      	sub	sp, #28
 80023ce:	0007      	movs	r7, r0
 80023d0:	4692      	mov	sl, r2
 80023d2:	469b      	mov	fp, r3
 80023d4:	0d76      	lsrs	r6, r6, #21
 80023d6:	0fcd      	lsrs	r5, r1, #31
 80023d8:	2e00      	cmp	r6, #0
 80023da:	d06b      	beq.n	80024b4 <__aeabi_dmul+0xfc>
 80023dc:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <__aeabi_dmul+0x1dc>)
 80023de:	429e      	cmp	r6, r3
 80023e0:	d035      	beq.n	800244e <__aeabi_dmul+0x96>
 80023e2:	2480      	movs	r4, #128	; 0x80
 80023e4:	465b      	mov	r3, fp
 80023e6:	0f42      	lsrs	r2, r0, #29
 80023e8:	0424      	lsls	r4, r4, #16
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4314      	orrs	r4, r2
 80023ee:	431c      	orrs	r4, r3
 80023f0:	00c3      	lsls	r3, r0, #3
 80023f2:	4699      	mov	r9, r3
 80023f4:	4b68      	ldr	r3, [pc, #416]	; (8002598 <__aeabi_dmul+0x1e0>)
 80023f6:	46a3      	mov	fp, r4
 80023f8:	469c      	mov	ip, r3
 80023fa:	2300      	movs	r3, #0
 80023fc:	2700      	movs	r7, #0
 80023fe:	4466      	add	r6, ip
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	4643      	mov	r3, r8
 8002404:	031c      	lsls	r4, r3, #12
 8002406:	005a      	lsls	r2, r3, #1
 8002408:	0fdb      	lsrs	r3, r3, #31
 800240a:	4650      	mov	r0, sl
 800240c:	0b24      	lsrs	r4, r4, #12
 800240e:	0d52      	lsrs	r2, r2, #21
 8002410:	4698      	mov	r8, r3
 8002412:	d100      	bne.n	8002416 <__aeabi_dmul+0x5e>
 8002414:	e076      	b.n	8002504 <__aeabi_dmul+0x14c>
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <__aeabi_dmul+0x1dc>)
 8002418:	429a      	cmp	r2, r3
 800241a:	d06d      	beq.n	80024f8 <__aeabi_dmul+0x140>
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	0f41      	lsrs	r1, r0, #29
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	430b      	orrs	r3, r1
 8002424:	495c      	ldr	r1, [pc, #368]	; (8002598 <__aeabi_dmul+0x1e0>)
 8002426:	00e4      	lsls	r4, r4, #3
 8002428:	468c      	mov	ip, r1
 800242a:	431c      	orrs	r4, r3
 800242c:	00c3      	lsls	r3, r0, #3
 800242e:	2000      	movs	r0, #0
 8002430:	4462      	add	r2, ip
 8002432:	4641      	mov	r1, r8
 8002434:	18b6      	adds	r6, r6, r2
 8002436:	4069      	eors	r1, r5
 8002438:	1c72      	adds	r2, r6, #1
 800243a:	9101      	str	r1, [sp, #4]
 800243c:	4694      	mov	ip, r2
 800243e:	4307      	orrs	r7, r0
 8002440:	2f0f      	cmp	r7, #15
 8002442:	d900      	bls.n	8002446 <__aeabi_dmul+0x8e>
 8002444:	e0b0      	b.n	80025a8 <__aeabi_dmul+0x1f0>
 8002446:	4a55      	ldr	r2, [pc, #340]	; (800259c <__aeabi_dmul+0x1e4>)
 8002448:	00bf      	lsls	r7, r7, #2
 800244a:	59d2      	ldr	r2, [r2, r7]
 800244c:	4697      	mov	pc, r2
 800244e:	465b      	mov	r3, fp
 8002450:	4303      	orrs	r3, r0
 8002452:	4699      	mov	r9, r3
 8002454:	d000      	beq.n	8002458 <__aeabi_dmul+0xa0>
 8002456:	e087      	b.n	8002568 <__aeabi_dmul+0x1b0>
 8002458:	2300      	movs	r3, #0
 800245a:	469b      	mov	fp, r3
 800245c:	3302      	adds	r3, #2
 800245e:	2708      	movs	r7, #8
 8002460:	9302      	str	r3, [sp, #8]
 8002462:	e7ce      	b.n	8002402 <__aeabi_dmul+0x4a>
 8002464:	4642      	mov	r2, r8
 8002466:	9201      	str	r2, [sp, #4]
 8002468:	2802      	cmp	r0, #2
 800246a:	d067      	beq.n	800253c <__aeabi_dmul+0x184>
 800246c:	2803      	cmp	r0, #3
 800246e:	d100      	bne.n	8002472 <__aeabi_dmul+0xba>
 8002470:	e20e      	b.n	8002890 <__aeabi_dmul+0x4d8>
 8002472:	2801      	cmp	r0, #1
 8002474:	d000      	beq.n	8002478 <__aeabi_dmul+0xc0>
 8002476:	e162      	b.n	800273e <__aeabi_dmul+0x386>
 8002478:	2300      	movs	r3, #0
 800247a:	2400      	movs	r4, #0
 800247c:	2200      	movs	r2, #0
 800247e:	4699      	mov	r9, r3
 8002480:	9901      	ldr	r1, [sp, #4]
 8002482:	4001      	ands	r1, r0
 8002484:	b2cd      	uxtb	r5, r1
 8002486:	2100      	movs	r1, #0
 8002488:	0312      	lsls	r2, r2, #12
 800248a:	0d0b      	lsrs	r3, r1, #20
 800248c:	0b12      	lsrs	r2, r2, #12
 800248e:	051b      	lsls	r3, r3, #20
 8002490:	4313      	orrs	r3, r2
 8002492:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <__aeabi_dmul+0x1e8>)
 8002494:	0524      	lsls	r4, r4, #20
 8002496:	4013      	ands	r3, r2
 8002498:	431c      	orrs	r4, r3
 800249a:	0064      	lsls	r4, r4, #1
 800249c:	07ed      	lsls	r5, r5, #31
 800249e:	0864      	lsrs	r4, r4, #1
 80024a0:	432c      	orrs	r4, r5
 80024a2:	4648      	mov	r0, r9
 80024a4:	0021      	movs	r1, r4
 80024a6:	b007      	add	sp, #28
 80024a8:	bc3c      	pop	{r2, r3, r4, r5}
 80024aa:	4690      	mov	r8, r2
 80024ac:	4699      	mov	r9, r3
 80024ae:	46a2      	mov	sl, r4
 80024b0:	46ab      	mov	fp, r5
 80024b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b4:	4303      	orrs	r3, r0
 80024b6:	4699      	mov	r9, r3
 80024b8:	d04f      	beq.n	800255a <__aeabi_dmul+0x1a2>
 80024ba:	465b      	mov	r3, fp
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d100      	bne.n	80024c2 <__aeabi_dmul+0x10a>
 80024c0:	e189      	b.n	80027d6 <__aeabi_dmul+0x41e>
 80024c2:	4658      	mov	r0, fp
 80024c4:	f000 fe66 	bl	8003194 <__clzsi2>
 80024c8:	0003      	movs	r3, r0
 80024ca:	3b0b      	subs	r3, #11
 80024cc:	2b1c      	cmp	r3, #28
 80024ce:	dd00      	ble.n	80024d2 <__aeabi_dmul+0x11a>
 80024d0:	e17a      	b.n	80027c8 <__aeabi_dmul+0x410>
 80024d2:	221d      	movs	r2, #29
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	003a      	movs	r2, r7
 80024d8:	0001      	movs	r1, r0
 80024da:	465c      	mov	r4, fp
 80024dc:	40da      	lsrs	r2, r3
 80024de:	3908      	subs	r1, #8
 80024e0:	408c      	lsls	r4, r1
 80024e2:	0013      	movs	r3, r2
 80024e4:	408f      	lsls	r7, r1
 80024e6:	4323      	orrs	r3, r4
 80024e8:	469b      	mov	fp, r3
 80024ea:	46b9      	mov	r9, r7
 80024ec:	2300      	movs	r3, #0
 80024ee:	4e2d      	ldr	r6, [pc, #180]	; (80025a4 <__aeabi_dmul+0x1ec>)
 80024f0:	2700      	movs	r7, #0
 80024f2:	1a36      	subs	r6, r6, r0
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	e784      	b.n	8002402 <__aeabi_dmul+0x4a>
 80024f8:	4653      	mov	r3, sl
 80024fa:	4323      	orrs	r3, r4
 80024fc:	d12a      	bne.n	8002554 <__aeabi_dmul+0x19c>
 80024fe:	2400      	movs	r4, #0
 8002500:	2002      	movs	r0, #2
 8002502:	e796      	b.n	8002432 <__aeabi_dmul+0x7a>
 8002504:	4653      	mov	r3, sl
 8002506:	4323      	orrs	r3, r4
 8002508:	d020      	beq.n	800254c <__aeabi_dmul+0x194>
 800250a:	2c00      	cmp	r4, #0
 800250c:	d100      	bne.n	8002510 <__aeabi_dmul+0x158>
 800250e:	e157      	b.n	80027c0 <__aeabi_dmul+0x408>
 8002510:	0020      	movs	r0, r4
 8002512:	f000 fe3f 	bl	8003194 <__clzsi2>
 8002516:	0003      	movs	r3, r0
 8002518:	3b0b      	subs	r3, #11
 800251a:	2b1c      	cmp	r3, #28
 800251c:	dd00      	ble.n	8002520 <__aeabi_dmul+0x168>
 800251e:	e149      	b.n	80027b4 <__aeabi_dmul+0x3fc>
 8002520:	211d      	movs	r1, #29
 8002522:	1acb      	subs	r3, r1, r3
 8002524:	4651      	mov	r1, sl
 8002526:	0002      	movs	r2, r0
 8002528:	40d9      	lsrs	r1, r3
 800252a:	4653      	mov	r3, sl
 800252c:	3a08      	subs	r2, #8
 800252e:	4094      	lsls	r4, r2
 8002530:	4093      	lsls	r3, r2
 8002532:	430c      	orrs	r4, r1
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <__aeabi_dmul+0x1ec>)
 8002536:	1a12      	subs	r2, r2, r0
 8002538:	2000      	movs	r0, #0
 800253a:	e77a      	b.n	8002432 <__aeabi_dmul+0x7a>
 800253c:	2501      	movs	r5, #1
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	4c14      	ldr	r4, [pc, #80]	; (8002594 <__aeabi_dmul+0x1dc>)
 8002542:	401d      	ands	r5, r3
 8002544:	2300      	movs	r3, #0
 8002546:	2200      	movs	r2, #0
 8002548:	4699      	mov	r9, r3
 800254a:	e79c      	b.n	8002486 <__aeabi_dmul+0xce>
 800254c:	2400      	movs	r4, #0
 800254e:	2200      	movs	r2, #0
 8002550:	2001      	movs	r0, #1
 8002552:	e76e      	b.n	8002432 <__aeabi_dmul+0x7a>
 8002554:	4653      	mov	r3, sl
 8002556:	2003      	movs	r0, #3
 8002558:	e76b      	b.n	8002432 <__aeabi_dmul+0x7a>
 800255a:	2300      	movs	r3, #0
 800255c:	469b      	mov	fp, r3
 800255e:	3301      	adds	r3, #1
 8002560:	2704      	movs	r7, #4
 8002562:	2600      	movs	r6, #0
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	e74c      	b.n	8002402 <__aeabi_dmul+0x4a>
 8002568:	2303      	movs	r3, #3
 800256a:	4681      	mov	r9, r0
 800256c:	270c      	movs	r7, #12
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	e747      	b.n	8002402 <__aeabi_dmul+0x4a>
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	2300      	movs	r3, #0
 8002576:	2500      	movs	r5, #0
 8002578:	0312      	lsls	r2, r2, #12
 800257a:	4699      	mov	r9, r3
 800257c:	4c05      	ldr	r4, [pc, #20]	; (8002594 <__aeabi_dmul+0x1dc>)
 800257e:	e782      	b.n	8002486 <__aeabi_dmul+0xce>
 8002580:	465c      	mov	r4, fp
 8002582:	464b      	mov	r3, r9
 8002584:	9802      	ldr	r0, [sp, #8]
 8002586:	e76f      	b.n	8002468 <__aeabi_dmul+0xb0>
 8002588:	465c      	mov	r4, fp
 800258a:	464b      	mov	r3, r9
 800258c:	9501      	str	r5, [sp, #4]
 800258e:	9802      	ldr	r0, [sp, #8]
 8002590:	e76a      	b.n	8002468 <__aeabi_dmul+0xb0>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	000007ff 	.word	0x000007ff
 8002598:	fffffc01 	.word	0xfffffc01
 800259c:	0800a2ac 	.word	0x0800a2ac
 80025a0:	800fffff 	.word	0x800fffff
 80025a4:	fffffc0d 	.word	0xfffffc0d
 80025a8:	464a      	mov	r2, r9
 80025aa:	4649      	mov	r1, r9
 80025ac:	0c17      	lsrs	r7, r2, #16
 80025ae:	0c1a      	lsrs	r2, r3, #16
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	0408      	lsls	r0, r1, #16
 80025b6:	0019      	movs	r1, r3
 80025b8:	0c00      	lsrs	r0, r0, #16
 80025ba:	4341      	muls	r1, r0
 80025bc:	0015      	movs	r5, r2
 80025be:	4688      	mov	r8, r1
 80025c0:	0019      	movs	r1, r3
 80025c2:	437d      	muls	r5, r7
 80025c4:	4379      	muls	r1, r7
 80025c6:	9503      	str	r5, [sp, #12]
 80025c8:	4689      	mov	r9, r1
 80025ca:	0029      	movs	r1, r5
 80025cc:	0015      	movs	r5, r2
 80025ce:	4345      	muls	r5, r0
 80025d0:	444d      	add	r5, r9
 80025d2:	9502      	str	r5, [sp, #8]
 80025d4:	4645      	mov	r5, r8
 80025d6:	0c2d      	lsrs	r5, r5, #16
 80025d8:	46aa      	mov	sl, r5
 80025da:	9d02      	ldr	r5, [sp, #8]
 80025dc:	4455      	add	r5, sl
 80025de:	45a9      	cmp	r9, r5
 80025e0:	d906      	bls.n	80025f0 <__aeabi_dmul+0x238>
 80025e2:	468a      	mov	sl, r1
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	0249      	lsls	r1, r1, #9
 80025e8:	4689      	mov	r9, r1
 80025ea:	44ca      	add	sl, r9
 80025ec:	4651      	mov	r1, sl
 80025ee:	9103      	str	r1, [sp, #12]
 80025f0:	0c29      	lsrs	r1, r5, #16
 80025f2:	9104      	str	r1, [sp, #16]
 80025f4:	4641      	mov	r1, r8
 80025f6:	0409      	lsls	r1, r1, #16
 80025f8:	042d      	lsls	r5, r5, #16
 80025fa:	0c09      	lsrs	r1, r1, #16
 80025fc:	4688      	mov	r8, r1
 80025fe:	0029      	movs	r1, r5
 8002600:	0c25      	lsrs	r5, r4, #16
 8002602:	0424      	lsls	r4, r4, #16
 8002604:	4441      	add	r1, r8
 8002606:	0c24      	lsrs	r4, r4, #16
 8002608:	9105      	str	r1, [sp, #20]
 800260a:	0021      	movs	r1, r4
 800260c:	4341      	muls	r1, r0
 800260e:	4688      	mov	r8, r1
 8002610:	0021      	movs	r1, r4
 8002612:	4379      	muls	r1, r7
 8002614:	468a      	mov	sl, r1
 8002616:	4368      	muls	r0, r5
 8002618:	4641      	mov	r1, r8
 800261a:	4450      	add	r0, sl
 800261c:	4681      	mov	r9, r0
 800261e:	0c08      	lsrs	r0, r1, #16
 8002620:	4448      	add	r0, r9
 8002622:	436f      	muls	r7, r5
 8002624:	4582      	cmp	sl, r0
 8002626:	d903      	bls.n	8002630 <__aeabi_dmul+0x278>
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	0249      	lsls	r1, r1, #9
 800262c:	4689      	mov	r9, r1
 800262e:	444f      	add	r7, r9
 8002630:	0c01      	lsrs	r1, r0, #16
 8002632:	4689      	mov	r9, r1
 8002634:	0039      	movs	r1, r7
 8002636:	4449      	add	r1, r9
 8002638:	9102      	str	r1, [sp, #8]
 800263a:	4641      	mov	r1, r8
 800263c:	040f      	lsls	r7, r1, #16
 800263e:	9904      	ldr	r1, [sp, #16]
 8002640:	0c3f      	lsrs	r7, r7, #16
 8002642:	4688      	mov	r8, r1
 8002644:	0400      	lsls	r0, r0, #16
 8002646:	19c0      	adds	r0, r0, r7
 8002648:	4480      	add	r8, r0
 800264a:	4641      	mov	r1, r8
 800264c:	9104      	str	r1, [sp, #16]
 800264e:	4659      	mov	r1, fp
 8002650:	0c0f      	lsrs	r7, r1, #16
 8002652:	0409      	lsls	r1, r1, #16
 8002654:	0c09      	lsrs	r1, r1, #16
 8002656:	4688      	mov	r8, r1
 8002658:	4359      	muls	r1, r3
 800265a:	468a      	mov	sl, r1
 800265c:	0039      	movs	r1, r7
 800265e:	4351      	muls	r1, r2
 8002660:	4689      	mov	r9, r1
 8002662:	4641      	mov	r1, r8
 8002664:	434a      	muls	r2, r1
 8002666:	4651      	mov	r1, sl
 8002668:	0c09      	lsrs	r1, r1, #16
 800266a:	468b      	mov	fp, r1
 800266c:	437b      	muls	r3, r7
 800266e:	18d2      	adds	r2, r2, r3
 8002670:	445a      	add	r2, fp
 8002672:	4293      	cmp	r3, r2
 8002674:	d903      	bls.n	800267e <__aeabi_dmul+0x2c6>
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	025b      	lsls	r3, r3, #9
 800267a:	469b      	mov	fp, r3
 800267c:	44d9      	add	r9, fp
 800267e:	4651      	mov	r1, sl
 8002680:	0409      	lsls	r1, r1, #16
 8002682:	0c09      	lsrs	r1, r1, #16
 8002684:	468a      	mov	sl, r1
 8002686:	4641      	mov	r1, r8
 8002688:	4361      	muls	r1, r4
 800268a:	437c      	muls	r4, r7
 800268c:	0c13      	lsrs	r3, r2, #16
 800268e:	0412      	lsls	r2, r2, #16
 8002690:	444b      	add	r3, r9
 8002692:	4452      	add	r2, sl
 8002694:	46a1      	mov	r9, r4
 8002696:	468a      	mov	sl, r1
 8002698:	003c      	movs	r4, r7
 800269a:	4641      	mov	r1, r8
 800269c:	436c      	muls	r4, r5
 800269e:	434d      	muls	r5, r1
 80026a0:	4651      	mov	r1, sl
 80026a2:	444d      	add	r5, r9
 80026a4:	0c0f      	lsrs	r7, r1, #16
 80026a6:	197d      	adds	r5, r7, r5
 80026a8:	45a9      	cmp	r9, r5
 80026aa:	d903      	bls.n	80026b4 <__aeabi_dmul+0x2fc>
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0249      	lsls	r1, r1, #9
 80026b0:	4688      	mov	r8, r1
 80026b2:	4444      	add	r4, r8
 80026b4:	9f04      	ldr	r7, [sp, #16]
 80026b6:	9903      	ldr	r1, [sp, #12]
 80026b8:	46b8      	mov	r8, r7
 80026ba:	4441      	add	r1, r8
 80026bc:	468b      	mov	fp, r1
 80026be:	4583      	cmp	fp, r0
 80026c0:	4180      	sbcs	r0, r0
 80026c2:	4241      	negs	r1, r0
 80026c4:	4688      	mov	r8, r1
 80026c6:	4651      	mov	r1, sl
 80026c8:	0408      	lsls	r0, r1, #16
 80026ca:	042f      	lsls	r7, r5, #16
 80026cc:	0c00      	lsrs	r0, r0, #16
 80026ce:	183f      	adds	r7, r7, r0
 80026d0:	4658      	mov	r0, fp
 80026d2:	9902      	ldr	r1, [sp, #8]
 80026d4:	1810      	adds	r0, r2, r0
 80026d6:	4689      	mov	r9, r1
 80026d8:	4290      	cmp	r0, r2
 80026da:	4192      	sbcs	r2, r2
 80026dc:	444f      	add	r7, r9
 80026de:	46ba      	mov	sl, r7
 80026e0:	4252      	negs	r2, r2
 80026e2:	4699      	mov	r9, r3
 80026e4:	4693      	mov	fp, r2
 80026e6:	44c2      	add	sl, r8
 80026e8:	44d1      	add	r9, sl
 80026ea:	44cb      	add	fp, r9
 80026ec:	428f      	cmp	r7, r1
 80026ee:	41bf      	sbcs	r7, r7
 80026f0:	45c2      	cmp	sl, r8
 80026f2:	4189      	sbcs	r1, r1
 80026f4:	4599      	cmp	r9, r3
 80026f6:	419b      	sbcs	r3, r3
 80026f8:	4593      	cmp	fp, r2
 80026fa:	4192      	sbcs	r2, r2
 80026fc:	427f      	negs	r7, r7
 80026fe:	4249      	negs	r1, r1
 8002700:	0c2d      	lsrs	r5, r5, #16
 8002702:	4252      	negs	r2, r2
 8002704:	430f      	orrs	r7, r1
 8002706:	425b      	negs	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	197f      	adds	r7, r7, r5
 800270c:	18ff      	adds	r7, r7, r3
 800270e:	465b      	mov	r3, fp
 8002710:	193c      	adds	r4, r7, r4
 8002712:	0ddb      	lsrs	r3, r3, #23
 8002714:	9a05      	ldr	r2, [sp, #20]
 8002716:	0264      	lsls	r4, r4, #9
 8002718:	431c      	orrs	r4, r3
 800271a:	0243      	lsls	r3, r0, #9
 800271c:	4313      	orrs	r3, r2
 800271e:	1e5d      	subs	r5, r3, #1
 8002720:	41ab      	sbcs	r3, r5
 8002722:	465a      	mov	r2, fp
 8002724:	0dc0      	lsrs	r0, r0, #23
 8002726:	4303      	orrs	r3, r0
 8002728:	0252      	lsls	r2, r2, #9
 800272a:	4313      	orrs	r3, r2
 800272c:	01e2      	lsls	r2, r4, #7
 800272e:	d556      	bpl.n	80027de <__aeabi_dmul+0x426>
 8002730:	2001      	movs	r0, #1
 8002732:	085a      	lsrs	r2, r3, #1
 8002734:	4003      	ands	r3, r0
 8002736:	4313      	orrs	r3, r2
 8002738:	07e2      	lsls	r2, r4, #31
 800273a:	4313      	orrs	r3, r2
 800273c:	0864      	lsrs	r4, r4, #1
 800273e:	485a      	ldr	r0, [pc, #360]	; (80028a8 <__aeabi_dmul+0x4f0>)
 8002740:	4460      	add	r0, ip
 8002742:	2800      	cmp	r0, #0
 8002744:	dd4d      	ble.n	80027e2 <__aeabi_dmul+0x42a>
 8002746:	075a      	lsls	r2, r3, #29
 8002748:	d009      	beq.n	800275e <__aeabi_dmul+0x3a6>
 800274a:	220f      	movs	r2, #15
 800274c:	401a      	ands	r2, r3
 800274e:	2a04      	cmp	r2, #4
 8002750:	d005      	beq.n	800275e <__aeabi_dmul+0x3a6>
 8002752:	1d1a      	adds	r2, r3, #4
 8002754:	429a      	cmp	r2, r3
 8002756:	419b      	sbcs	r3, r3
 8002758:	425b      	negs	r3, r3
 800275a:	18e4      	adds	r4, r4, r3
 800275c:	0013      	movs	r3, r2
 800275e:	01e2      	lsls	r2, r4, #7
 8002760:	d504      	bpl.n	800276c <__aeabi_dmul+0x3b4>
 8002762:	2080      	movs	r0, #128	; 0x80
 8002764:	4a51      	ldr	r2, [pc, #324]	; (80028ac <__aeabi_dmul+0x4f4>)
 8002766:	00c0      	lsls	r0, r0, #3
 8002768:	4014      	ands	r4, r2
 800276a:	4460      	add	r0, ip
 800276c:	4a50      	ldr	r2, [pc, #320]	; (80028b0 <__aeabi_dmul+0x4f8>)
 800276e:	4290      	cmp	r0, r2
 8002770:	dd00      	ble.n	8002774 <__aeabi_dmul+0x3bc>
 8002772:	e6e3      	b.n	800253c <__aeabi_dmul+0x184>
 8002774:	2501      	movs	r5, #1
 8002776:	08db      	lsrs	r3, r3, #3
 8002778:	0762      	lsls	r2, r4, #29
 800277a:	431a      	orrs	r2, r3
 800277c:	0264      	lsls	r4, r4, #9
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	4691      	mov	r9, r2
 8002782:	0b22      	lsrs	r2, r4, #12
 8002784:	0544      	lsls	r4, r0, #21
 8002786:	0d64      	lsrs	r4, r4, #21
 8002788:	401d      	ands	r5, r3
 800278a:	e67c      	b.n	8002486 <__aeabi_dmul+0xce>
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	4659      	mov	r1, fp
 8002790:	0312      	lsls	r2, r2, #12
 8002792:	4211      	tst	r1, r2
 8002794:	d008      	beq.n	80027a8 <__aeabi_dmul+0x3f0>
 8002796:	4214      	tst	r4, r2
 8002798:	d106      	bne.n	80027a8 <__aeabi_dmul+0x3f0>
 800279a:	4322      	orrs	r2, r4
 800279c:	0312      	lsls	r2, r2, #12
 800279e:	0b12      	lsrs	r2, r2, #12
 80027a0:	4645      	mov	r5, r8
 80027a2:	4699      	mov	r9, r3
 80027a4:	4c43      	ldr	r4, [pc, #268]	; (80028b4 <__aeabi_dmul+0x4fc>)
 80027a6:	e66e      	b.n	8002486 <__aeabi_dmul+0xce>
 80027a8:	465b      	mov	r3, fp
 80027aa:	431a      	orrs	r2, r3
 80027ac:	0312      	lsls	r2, r2, #12
 80027ae:	0b12      	lsrs	r2, r2, #12
 80027b0:	4c40      	ldr	r4, [pc, #256]	; (80028b4 <__aeabi_dmul+0x4fc>)
 80027b2:	e668      	b.n	8002486 <__aeabi_dmul+0xce>
 80027b4:	0003      	movs	r3, r0
 80027b6:	4654      	mov	r4, sl
 80027b8:	3b28      	subs	r3, #40	; 0x28
 80027ba:	409c      	lsls	r4, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	e6b9      	b.n	8002534 <__aeabi_dmul+0x17c>
 80027c0:	f000 fce8 	bl	8003194 <__clzsi2>
 80027c4:	3020      	adds	r0, #32
 80027c6:	e6a6      	b.n	8002516 <__aeabi_dmul+0x15e>
 80027c8:	0003      	movs	r3, r0
 80027ca:	3b28      	subs	r3, #40	; 0x28
 80027cc:	409f      	lsls	r7, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	46bb      	mov	fp, r7
 80027d2:	4699      	mov	r9, r3
 80027d4:	e68a      	b.n	80024ec <__aeabi_dmul+0x134>
 80027d6:	f000 fcdd 	bl	8003194 <__clzsi2>
 80027da:	3020      	adds	r0, #32
 80027dc:	e674      	b.n	80024c8 <__aeabi_dmul+0x110>
 80027de:	46b4      	mov	ip, r6
 80027e0:	e7ad      	b.n	800273e <__aeabi_dmul+0x386>
 80027e2:	2501      	movs	r5, #1
 80027e4:	1a2a      	subs	r2, r5, r0
 80027e6:	2a38      	cmp	r2, #56	; 0x38
 80027e8:	dd06      	ble.n	80027f8 <__aeabi_dmul+0x440>
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	2400      	movs	r4, #0
 80027ee:	401d      	ands	r5, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	2200      	movs	r2, #0
 80027f4:	4699      	mov	r9, r3
 80027f6:	e646      	b.n	8002486 <__aeabi_dmul+0xce>
 80027f8:	2a1f      	cmp	r2, #31
 80027fa:	dc21      	bgt.n	8002840 <__aeabi_dmul+0x488>
 80027fc:	2520      	movs	r5, #32
 80027fe:	0020      	movs	r0, r4
 8002800:	1aad      	subs	r5, r5, r2
 8002802:	001e      	movs	r6, r3
 8002804:	40ab      	lsls	r3, r5
 8002806:	40a8      	lsls	r0, r5
 8002808:	40d6      	lsrs	r6, r2
 800280a:	1e5d      	subs	r5, r3, #1
 800280c:	41ab      	sbcs	r3, r5
 800280e:	4330      	orrs	r0, r6
 8002810:	4318      	orrs	r0, r3
 8002812:	40d4      	lsrs	r4, r2
 8002814:	0743      	lsls	r3, r0, #29
 8002816:	d009      	beq.n	800282c <__aeabi_dmul+0x474>
 8002818:	230f      	movs	r3, #15
 800281a:	4003      	ands	r3, r0
 800281c:	2b04      	cmp	r3, #4
 800281e:	d005      	beq.n	800282c <__aeabi_dmul+0x474>
 8002820:	0003      	movs	r3, r0
 8002822:	1d18      	adds	r0, r3, #4
 8002824:	4298      	cmp	r0, r3
 8002826:	419b      	sbcs	r3, r3
 8002828:	425b      	negs	r3, r3
 800282a:	18e4      	adds	r4, r4, r3
 800282c:	0223      	lsls	r3, r4, #8
 800282e:	d521      	bpl.n	8002874 <__aeabi_dmul+0x4bc>
 8002830:	2501      	movs	r5, #1
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	2401      	movs	r4, #1
 8002836:	401d      	ands	r5, r3
 8002838:	2300      	movs	r3, #0
 800283a:	2200      	movs	r2, #0
 800283c:	4699      	mov	r9, r3
 800283e:	e622      	b.n	8002486 <__aeabi_dmul+0xce>
 8002840:	251f      	movs	r5, #31
 8002842:	0021      	movs	r1, r4
 8002844:	426d      	negs	r5, r5
 8002846:	1a28      	subs	r0, r5, r0
 8002848:	40c1      	lsrs	r1, r0
 800284a:	0008      	movs	r0, r1
 800284c:	2a20      	cmp	r2, #32
 800284e:	d01d      	beq.n	800288c <__aeabi_dmul+0x4d4>
 8002850:	355f      	adds	r5, #95	; 0x5f
 8002852:	1aaa      	subs	r2, r5, r2
 8002854:	4094      	lsls	r4, r2
 8002856:	4323      	orrs	r3, r4
 8002858:	1e5c      	subs	r4, r3, #1
 800285a:	41a3      	sbcs	r3, r4
 800285c:	2507      	movs	r5, #7
 800285e:	4303      	orrs	r3, r0
 8002860:	401d      	ands	r5, r3
 8002862:	2200      	movs	r2, #0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d009      	beq.n	800287c <__aeabi_dmul+0x4c4>
 8002868:	220f      	movs	r2, #15
 800286a:	2400      	movs	r4, #0
 800286c:	401a      	ands	r2, r3
 800286e:	0018      	movs	r0, r3
 8002870:	2a04      	cmp	r2, #4
 8002872:	d1d6      	bne.n	8002822 <__aeabi_dmul+0x46a>
 8002874:	0003      	movs	r3, r0
 8002876:	0765      	lsls	r5, r4, #29
 8002878:	0264      	lsls	r4, r4, #9
 800287a:	0b22      	lsrs	r2, r4, #12
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	432b      	orrs	r3, r5
 8002880:	2501      	movs	r5, #1
 8002882:	4699      	mov	r9, r3
 8002884:	9b01      	ldr	r3, [sp, #4]
 8002886:	2400      	movs	r4, #0
 8002888:	401d      	ands	r5, r3
 800288a:	e5fc      	b.n	8002486 <__aeabi_dmul+0xce>
 800288c:	2400      	movs	r4, #0
 800288e:	e7e2      	b.n	8002856 <__aeabi_dmul+0x49e>
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	2501      	movs	r5, #1
 8002894:	0312      	lsls	r2, r2, #12
 8002896:	4322      	orrs	r2, r4
 8002898:	9901      	ldr	r1, [sp, #4]
 800289a:	0312      	lsls	r2, r2, #12
 800289c:	0b12      	lsrs	r2, r2, #12
 800289e:	400d      	ands	r5, r1
 80028a0:	4699      	mov	r9, r3
 80028a2:	4c04      	ldr	r4, [pc, #16]	; (80028b4 <__aeabi_dmul+0x4fc>)
 80028a4:	e5ef      	b.n	8002486 <__aeabi_dmul+0xce>
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	000003ff 	.word	0x000003ff
 80028ac:	feffffff 	.word	0xfeffffff
 80028b0:	000007fe 	.word	0x000007fe
 80028b4:	000007ff 	.word	0x000007ff

080028b8 <__aeabi_dsub>:
 80028b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ba:	4646      	mov	r6, r8
 80028bc:	46d6      	mov	lr, sl
 80028be:	464f      	mov	r7, r9
 80028c0:	030c      	lsls	r4, r1, #12
 80028c2:	b5c0      	push	{r6, r7, lr}
 80028c4:	0fcd      	lsrs	r5, r1, #31
 80028c6:	004e      	lsls	r6, r1, #1
 80028c8:	0a61      	lsrs	r1, r4, #9
 80028ca:	0f44      	lsrs	r4, r0, #29
 80028cc:	430c      	orrs	r4, r1
 80028ce:	00c1      	lsls	r1, r0, #3
 80028d0:	0058      	lsls	r0, r3, #1
 80028d2:	0d40      	lsrs	r0, r0, #21
 80028d4:	4684      	mov	ip, r0
 80028d6:	468a      	mov	sl, r1
 80028d8:	000f      	movs	r7, r1
 80028da:	0319      	lsls	r1, r3, #12
 80028dc:	0f50      	lsrs	r0, r2, #29
 80028de:	0a49      	lsrs	r1, r1, #9
 80028e0:	4301      	orrs	r1, r0
 80028e2:	48c6      	ldr	r0, [pc, #792]	; (8002bfc <__aeabi_dsub+0x344>)
 80028e4:	0d76      	lsrs	r6, r6, #21
 80028e6:	46a8      	mov	r8, r5
 80028e8:	0fdb      	lsrs	r3, r3, #31
 80028ea:	00d2      	lsls	r2, r2, #3
 80028ec:	4584      	cmp	ip, r0
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x3a>
 80028f0:	e0d8      	b.n	8002aa4 <__aeabi_dsub+0x1ec>
 80028f2:	2001      	movs	r0, #1
 80028f4:	4043      	eors	r3, r0
 80028f6:	42ab      	cmp	r3, r5
 80028f8:	d100      	bne.n	80028fc <__aeabi_dsub+0x44>
 80028fa:	e0a6      	b.n	8002a4a <__aeabi_dsub+0x192>
 80028fc:	4660      	mov	r0, ip
 80028fe:	1a35      	subs	r5, r6, r0
 8002900:	2d00      	cmp	r5, #0
 8002902:	dc00      	bgt.n	8002906 <__aeabi_dsub+0x4e>
 8002904:	e105      	b.n	8002b12 <__aeabi_dsub+0x25a>
 8002906:	2800      	cmp	r0, #0
 8002908:	d110      	bne.n	800292c <__aeabi_dsub+0x74>
 800290a:	000b      	movs	r3, r1
 800290c:	4313      	orrs	r3, r2
 800290e:	d100      	bne.n	8002912 <__aeabi_dsub+0x5a>
 8002910:	e0d7      	b.n	8002ac2 <__aeabi_dsub+0x20a>
 8002912:	1e6b      	subs	r3, r5, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x62>
 8002918:	e14b      	b.n	8002bb2 <__aeabi_dsub+0x2fa>
 800291a:	4653      	mov	r3, sl
 800291c:	1a9f      	subs	r7, r3, r2
 800291e:	45ba      	cmp	sl, r7
 8002920:	4180      	sbcs	r0, r0
 8002922:	1a64      	subs	r4, r4, r1
 8002924:	4240      	negs	r0, r0
 8002926:	1a24      	subs	r4, r4, r0
 8002928:	2601      	movs	r6, #1
 800292a:	e01e      	b.n	800296a <__aeabi_dsub+0xb2>
 800292c:	4bb3      	ldr	r3, [pc, #716]	; (8002bfc <__aeabi_dsub+0x344>)
 800292e:	429e      	cmp	r6, r3
 8002930:	d048      	beq.n	80029c4 <__aeabi_dsub+0x10c>
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	4319      	orrs	r1, r3
 8002938:	2d38      	cmp	r5, #56	; 0x38
 800293a:	dd00      	ble.n	800293e <__aeabi_dsub+0x86>
 800293c:	e119      	b.n	8002b72 <__aeabi_dsub+0x2ba>
 800293e:	2d1f      	cmp	r5, #31
 8002940:	dd00      	ble.n	8002944 <__aeabi_dsub+0x8c>
 8002942:	e14c      	b.n	8002bde <__aeabi_dsub+0x326>
 8002944:	2320      	movs	r3, #32
 8002946:	000f      	movs	r7, r1
 8002948:	1b5b      	subs	r3, r3, r5
 800294a:	0010      	movs	r0, r2
 800294c:	409a      	lsls	r2, r3
 800294e:	409f      	lsls	r7, r3
 8002950:	40e8      	lsrs	r0, r5
 8002952:	1e53      	subs	r3, r2, #1
 8002954:	419a      	sbcs	r2, r3
 8002956:	40e9      	lsrs	r1, r5
 8002958:	4307      	orrs	r7, r0
 800295a:	4317      	orrs	r7, r2
 800295c:	4653      	mov	r3, sl
 800295e:	1bdf      	subs	r7, r3, r7
 8002960:	1a61      	subs	r1, r4, r1
 8002962:	45ba      	cmp	sl, r7
 8002964:	41a4      	sbcs	r4, r4
 8002966:	4264      	negs	r4, r4
 8002968:	1b0c      	subs	r4, r1, r4
 800296a:	0223      	lsls	r3, r4, #8
 800296c:	d400      	bmi.n	8002970 <__aeabi_dsub+0xb8>
 800296e:	e0c5      	b.n	8002afc <__aeabi_dsub+0x244>
 8002970:	0264      	lsls	r4, r4, #9
 8002972:	0a65      	lsrs	r5, r4, #9
 8002974:	2d00      	cmp	r5, #0
 8002976:	d100      	bne.n	800297a <__aeabi_dsub+0xc2>
 8002978:	e0f6      	b.n	8002b68 <__aeabi_dsub+0x2b0>
 800297a:	0028      	movs	r0, r5
 800297c:	f000 fc0a 	bl	8003194 <__clzsi2>
 8002980:	0003      	movs	r3, r0
 8002982:	3b08      	subs	r3, #8
 8002984:	2b1f      	cmp	r3, #31
 8002986:	dd00      	ble.n	800298a <__aeabi_dsub+0xd2>
 8002988:	e0e9      	b.n	8002b5e <__aeabi_dsub+0x2a6>
 800298a:	2220      	movs	r2, #32
 800298c:	003c      	movs	r4, r7
 800298e:	1ad2      	subs	r2, r2, r3
 8002990:	409d      	lsls	r5, r3
 8002992:	40d4      	lsrs	r4, r2
 8002994:	409f      	lsls	r7, r3
 8002996:	4325      	orrs	r5, r4
 8002998:	429e      	cmp	r6, r3
 800299a:	dd00      	ble.n	800299e <__aeabi_dsub+0xe6>
 800299c:	e0db      	b.n	8002b56 <__aeabi_dsub+0x29e>
 800299e:	1b9e      	subs	r6, r3, r6
 80029a0:	1c73      	adds	r3, r6, #1
 80029a2:	2b1f      	cmp	r3, #31
 80029a4:	dd00      	ble.n	80029a8 <__aeabi_dsub+0xf0>
 80029a6:	e10a      	b.n	8002bbe <__aeabi_dsub+0x306>
 80029a8:	2220      	movs	r2, #32
 80029aa:	0038      	movs	r0, r7
 80029ac:	1ad2      	subs	r2, r2, r3
 80029ae:	0029      	movs	r1, r5
 80029b0:	4097      	lsls	r7, r2
 80029b2:	002c      	movs	r4, r5
 80029b4:	4091      	lsls	r1, r2
 80029b6:	40d8      	lsrs	r0, r3
 80029b8:	1e7a      	subs	r2, r7, #1
 80029ba:	4197      	sbcs	r7, r2
 80029bc:	40dc      	lsrs	r4, r3
 80029be:	2600      	movs	r6, #0
 80029c0:	4301      	orrs	r1, r0
 80029c2:	430f      	orrs	r7, r1
 80029c4:	077b      	lsls	r3, r7, #29
 80029c6:	d009      	beq.n	80029dc <__aeabi_dsub+0x124>
 80029c8:	230f      	movs	r3, #15
 80029ca:	403b      	ands	r3, r7
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d005      	beq.n	80029dc <__aeabi_dsub+0x124>
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	42bb      	cmp	r3, r7
 80029d4:	41bf      	sbcs	r7, r7
 80029d6:	427f      	negs	r7, r7
 80029d8:	19e4      	adds	r4, r4, r7
 80029da:	001f      	movs	r7, r3
 80029dc:	0223      	lsls	r3, r4, #8
 80029de:	d525      	bpl.n	8002a2c <__aeabi_dsub+0x174>
 80029e0:	4b86      	ldr	r3, [pc, #536]	; (8002bfc <__aeabi_dsub+0x344>)
 80029e2:	3601      	adds	r6, #1
 80029e4:	429e      	cmp	r6, r3
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x132>
 80029e8:	e0af      	b.n	8002b4a <__aeabi_dsub+0x292>
 80029ea:	4b85      	ldr	r3, [pc, #532]	; (8002c00 <__aeabi_dsub+0x348>)
 80029ec:	2501      	movs	r5, #1
 80029ee:	401c      	ands	r4, r3
 80029f0:	4643      	mov	r3, r8
 80029f2:	0762      	lsls	r2, r4, #29
 80029f4:	08ff      	lsrs	r7, r7, #3
 80029f6:	0264      	lsls	r4, r4, #9
 80029f8:	0576      	lsls	r6, r6, #21
 80029fa:	4317      	orrs	r7, r2
 80029fc:	0b24      	lsrs	r4, r4, #12
 80029fe:	0d76      	lsrs	r6, r6, #21
 8002a00:	401d      	ands	r5, r3
 8002a02:	2100      	movs	r1, #0
 8002a04:	0324      	lsls	r4, r4, #12
 8002a06:	0b23      	lsrs	r3, r4, #12
 8002a08:	0d0c      	lsrs	r4, r1, #20
 8002a0a:	4a7e      	ldr	r2, [pc, #504]	; (8002c04 <__aeabi_dsub+0x34c>)
 8002a0c:	0524      	lsls	r4, r4, #20
 8002a0e:	431c      	orrs	r4, r3
 8002a10:	4014      	ands	r4, r2
 8002a12:	0533      	lsls	r3, r6, #20
 8002a14:	4323      	orrs	r3, r4
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	07ed      	lsls	r5, r5, #31
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	432b      	orrs	r3, r5
 8002a1e:	0038      	movs	r0, r7
 8002a20:	0019      	movs	r1, r3
 8002a22:	bc1c      	pop	{r2, r3, r4}
 8002a24:	4690      	mov	r8, r2
 8002a26:	4699      	mov	r9, r3
 8002a28:	46a2      	mov	sl, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	2501      	movs	r5, #1
 8002a2e:	4643      	mov	r3, r8
 8002a30:	0762      	lsls	r2, r4, #29
 8002a32:	08ff      	lsrs	r7, r7, #3
 8002a34:	4317      	orrs	r7, r2
 8002a36:	08e4      	lsrs	r4, r4, #3
 8002a38:	401d      	ands	r5, r3
 8002a3a:	4b70      	ldr	r3, [pc, #448]	; (8002bfc <__aeabi_dsub+0x344>)
 8002a3c:	429e      	cmp	r6, r3
 8002a3e:	d036      	beq.n	8002aae <__aeabi_dsub+0x1f6>
 8002a40:	0324      	lsls	r4, r4, #12
 8002a42:	0576      	lsls	r6, r6, #21
 8002a44:	0b24      	lsrs	r4, r4, #12
 8002a46:	0d76      	lsrs	r6, r6, #21
 8002a48:	e7db      	b.n	8002a02 <__aeabi_dsub+0x14a>
 8002a4a:	4663      	mov	r3, ip
 8002a4c:	1af3      	subs	r3, r6, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	dc00      	bgt.n	8002a54 <__aeabi_dsub+0x19c>
 8002a52:	e094      	b.n	8002b7e <__aeabi_dsub+0x2c6>
 8002a54:	4660      	mov	r0, ip
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d035      	beq.n	8002ac6 <__aeabi_dsub+0x20e>
 8002a5a:	4868      	ldr	r0, [pc, #416]	; (8002bfc <__aeabi_dsub+0x344>)
 8002a5c:	4286      	cmp	r6, r0
 8002a5e:	d0b1      	beq.n	80029c4 <__aeabi_dsub+0x10c>
 8002a60:	2780      	movs	r7, #128	; 0x80
 8002a62:	043f      	lsls	r7, r7, #16
 8002a64:	4339      	orrs	r1, r7
 8002a66:	2b38      	cmp	r3, #56	; 0x38
 8002a68:	dc00      	bgt.n	8002a6c <__aeabi_dsub+0x1b4>
 8002a6a:	e0fd      	b.n	8002c68 <__aeabi_dsub+0x3b0>
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	0017      	movs	r7, r2
 8002a70:	2100      	movs	r1, #0
 8002a72:	1e7a      	subs	r2, r7, #1
 8002a74:	4197      	sbcs	r7, r2
 8002a76:	4457      	add	r7, sl
 8002a78:	4557      	cmp	r7, sl
 8002a7a:	4180      	sbcs	r0, r0
 8002a7c:	1909      	adds	r1, r1, r4
 8002a7e:	4244      	negs	r4, r0
 8002a80:	190c      	adds	r4, r1, r4
 8002a82:	0223      	lsls	r3, r4, #8
 8002a84:	d53a      	bpl.n	8002afc <__aeabi_dsub+0x244>
 8002a86:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <__aeabi_dsub+0x344>)
 8002a88:	3601      	adds	r6, #1
 8002a8a:	429e      	cmp	r6, r3
 8002a8c:	d100      	bne.n	8002a90 <__aeabi_dsub+0x1d8>
 8002a8e:	e14b      	b.n	8002d28 <__aeabi_dsub+0x470>
 8002a90:	2201      	movs	r2, #1
 8002a92:	4b5b      	ldr	r3, [pc, #364]	; (8002c00 <__aeabi_dsub+0x348>)
 8002a94:	401c      	ands	r4, r3
 8002a96:	087b      	lsrs	r3, r7, #1
 8002a98:	4017      	ands	r7, r2
 8002a9a:	431f      	orrs	r7, r3
 8002a9c:	07e2      	lsls	r2, r4, #31
 8002a9e:	4317      	orrs	r7, r2
 8002aa0:	0864      	lsrs	r4, r4, #1
 8002aa2:	e78f      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002aa4:	0008      	movs	r0, r1
 8002aa6:	4310      	orrs	r0, r2
 8002aa8:	d000      	beq.n	8002aac <__aeabi_dsub+0x1f4>
 8002aaa:	e724      	b.n	80028f6 <__aeabi_dsub+0x3e>
 8002aac:	e721      	b.n	80028f2 <__aeabi_dsub+0x3a>
 8002aae:	0023      	movs	r3, r4
 8002ab0:	433b      	orrs	r3, r7
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x1fe>
 8002ab4:	e1b9      	b.n	8002e2a <__aeabi_dsub+0x572>
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	0312      	lsls	r2, r2, #12
 8002aba:	4314      	orrs	r4, r2
 8002abc:	0324      	lsls	r4, r4, #12
 8002abe:	0b24      	lsrs	r4, r4, #12
 8002ac0:	e79f      	b.n	8002a02 <__aeabi_dsub+0x14a>
 8002ac2:	002e      	movs	r6, r5
 8002ac4:	e77e      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002ac6:	0008      	movs	r0, r1
 8002ac8:	4310      	orrs	r0, r2
 8002aca:	d100      	bne.n	8002ace <__aeabi_dsub+0x216>
 8002acc:	e0ca      	b.n	8002c64 <__aeabi_dsub+0x3ac>
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	4684      	mov	ip, r0
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d000      	beq.n	8002ad8 <__aeabi_dsub+0x220>
 8002ad6:	e0e7      	b.n	8002ca8 <__aeabi_dsub+0x3f0>
 8002ad8:	4452      	add	r2, sl
 8002ada:	4552      	cmp	r2, sl
 8002adc:	4180      	sbcs	r0, r0
 8002ade:	1864      	adds	r4, r4, r1
 8002ae0:	4240      	negs	r0, r0
 8002ae2:	1824      	adds	r4, r4, r0
 8002ae4:	0017      	movs	r7, r2
 8002ae6:	2601      	movs	r6, #1
 8002ae8:	0223      	lsls	r3, r4, #8
 8002aea:	d507      	bpl.n	8002afc <__aeabi_dsub+0x244>
 8002aec:	2602      	movs	r6, #2
 8002aee:	e7cf      	b.n	8002a90 <__aeabi_dsub+0x1d8>
 8002af0:	4664      	mov	r4, ip
 8002af2:	432c      	orrs	r4, r5
 8002af4:	d100      	bne.n	8002af8 <__aeabi_dsub+0x240>
 8002af6:	e1b3      	b.n	8002e60 <__aeabi_dsub+0x5a8>
 8002af8:	002c      	movs	r4, r5
 8002afa:	4667      	mov	r7, ip
 8002afc:	077b      	lsls	r3, r7, #29
 8002afe:	d000      	beq.n	8002b02 <__aeabi_dsub+0x24a>
 8002b00:	e762      	b.n	80029c8 <__aeabi_dsub+0x110>
 8002b02:	0763      	lsls	r3, r4, #29
 8002b04:	08ff      	lsrs	r7, r7, #3
 8002b06:	431f      	orrs	r7, r3
 8002b08:	2501      	movs	r5, #1
 8002b0a:	4643      	mov	r3, r8
 8002b0c:	08e4      	lsrs	r4, r4, #3
 8002b0e:	401d      	ands	r5, r3
 8002b10:	e793      	b.n	8002a3a <__aeabi_dsub+0x182>
 8002b12:	2d00      	cmp	r5, #0
 8002b14:	d178      	bne.n	8002c08 <__aeabi_dsub+0x350>
 8002b16:	1c75      	adds	r5, r6, #1
 8002b18:	056d      	lsls	r5, r5, #21
 8002b1a:	0d6d      	lsrs	r5, r5, #21
 8002b1c:	2d01      	cmp	r5, #1
 8002b1e:	dc00      	bgt.n	8002b22 <__aeabi_dsub+0x26a>
 8002b20:	e0f2      	b.n	8002d08 <__aeabi_dsub+0x450>
 8002b22:	4650      	mov	r0, sl
 8002b24:	1a80      	subs	r0, r0, r2
 8002b26:	4582      	cmp	sl, r0
 8002b28:	41bf      	sbcs	r7, r7
 8002b2a:	1a65      	subs	r5, r4, r1
 8002b2c:	427f      	negs	r7, r7
 8002b2e:	1bed      	subs	r5, r5, r7
 8002b30:	4684      	mov	ip, r0
 8002b32:	0228      	lsls	r0, r5, #8
 8002b34:	d400      	bmi.n	8002b38 <__aeabi_dsub+0x280>
 8002b36:	e08c      	b.n	8002c52 <__aeabi_dsub+0x39a>
 8002b38:	4650      	mov	r0, sl
 8002b3a:	1a17      	subs	r7, r2, r0
 8002b3c:	42ba      	cmp	r2, r7
 8002b3e:	4192      	sbcs	r2, r2
 8002b40:	1b0c      	subs	r4, r1, r4
 8002b42:	4255      	negs	r5, r2
 8002b44:	1b65      	subs	r5, r4, r5
 8002b46:	4698      	mov	r8, r3
 8002b48:	e714      	b.n	8002974 <__aeabi_dsub+0xbc>
 8002b4a:	2501      	movs	r5, #1
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	2400      	movs	r4, #0
 8002b50:	401d      	ands	r5, r3
 8002b52:	2700      	movs	r7, #0
 8002b54:	e755      	b.n	8002a02 <__aeabi_dsub+0x14a>
 8002b56:	4c2a      	ldr	r4, [pc, #168]	; (8002c00 <__aeabi_dsub+0x348>)
 8002b58:	1af6      	subs	r6, r6, r3
 8002b5a:	402c      	ands	r4, r5
 8002b5c:	e732      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002b5e:	003d      	movs	r5, r7
 8002b60:	3828      	subs	r0, #40	; 0x28
 8002b62:	4085      	lsls	r5, r0
 8002b64:	2700      	movs	r7, #0
 8002b66:	e717      	b.n	8002998 <__aeabi_dsub+0xe0>
 8002b68:	0038      	movs	r0, r7
 8002b6a:	f000 fb13 	bl	8003194 <__clzsi2>
 8002b6e:	3020      	adds	r0, #32
 8002b70:	e706      	b.n	8002980 <__aeabi_dsub+0xc8>
 8002b72:	430a      	orrs	r2, r1
 8002b74:	0017      	movs	r7, r2
 8002b76:	2100      	movs	r1, #0
 8002b78:	1e7a      	subs	r2, r7, #1
 8002b7a:	4197      	sbcs	r7, r2
 8002b7c:	e6ee      	b.n	800295c <__aeabi_dsub+0xa4>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d000      	beq.n	8002b84 <__aeabi_dsub+0x2cc>
 8002b82:	e0e5      	b.n	8002d50 <__aeabi_dsub+0x498>
 8002b84:	1c73      	adds	r3, r6, #1
 8002b86:	469c      	mov	ip, r3
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0d5b      	lsrs	r3, r3, #21
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	dc00      	bgt.n	8002b92 <__aeabi_dsub+0x2da>
 8002b90:	e09f      	b.n	8002cd2 <__aeabi_dsub+0x41a>
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <__aeabi_dsub+0x344>)
 8002b94:	459c      	cmp	ip, r3
 8002b96:	d100      	bne.n	8002b9a <__aeabi_dsub+0x2e2>
 8002b98:	e0c5      	b.n	8002d26 <__aeabi_dsub+0x46e>
 8002b9a:	4452      	add	r2, sl
 8002b9c:	4552      	cmp	r2, sl
 8002b9e:	4180      	sbcs	r0, r0
 8002ba0:	1864      	adds	r4, r4, r1
 8002ba2:	4240      	negs	r0, r0
 8002ba4:	1824      	adds	r4, r4, r0
 8002ba6:	07e7      	lsls	r7, r4, #31
 8002ba8:	0852      	lsrs	r2, r2, #1
 8002baa:	4317      	orrs	r7, r2
 8002bac:	0864      	lsrs	r4, r4, #1
 8002bae:	4666      	mov	r6, ip
 8002bb0:	e708      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002bb2:	4812      	ldr	r0, [pc, #72]	; (8002bfc <__aeabi_dsub+0x344>)
 8002bb4:	4285      	cmp	r5, r0
 8002bb6:	d100      	bne.n	8002bba <__aeabi_dsub+0x302>
 8002bb8:	e085      	b.n	8002cc6 <__aeabi_dsub+0x40e>
 8002bba:	001d      	movs	r5, r3
 8002bbc:	e6bc      	b.n	8002938 <__aeabi_dsub+0x80>
 8002bbe:	0029      	movs	r1, r5
 8002bc0:	3e1f      	subs	r6, #31
 8002bc2:	40f1      	lsrs	r1, r6
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x312>
 8002bc8:	e07f      	b.n	8002cca <__aeabi_dsub+0x412>
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	409d      	lsls	r5, r3
 8002bd0:	432f      	orrs	r7, r5
 8002bd2:	1e7d      	subs	r5, r7, #1
 8002bd4:	41af      	sbcs	r7, r5
 8002bd6:	2400      	movs	r4, #0
 8002bd8:	430f      	orrs	r7, r1
 8002bda:	2600      	movs	r6, #0
 8002bdc:	e78e      	b.n	8002afc <__aeabi_dsub+0x244>
 8002bde:	002b      	movs	r3, r5
 8002be0:	000f      	movs	r7, r1
 8002be2:	3b20      	subs	r3, #32
 8002be4:	40df      	lsrs	r7, r3
 8002be6:	2d20      	cmp	r5, #32
 8002be8:	d071      	beq.n	8002cce <__aeabi_dsub+0x416>
 8002bea:	2340      	movs	r3, #64	; 0x40
 8002bec:	1b5d      	subs	r5, r3, r5
 8002bee:	40a9      	lsls	r1, r5
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	1e51      	subs	r1, r2, #1
 8002bf4:	418a      	sbcs	r2, r1
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4317      	orrs	r7, r2
 8002bfa:	e6af      	b.n	800295c <__aeabi_dsub+0xa4>
 8002bfc:	000007ff 	.word	0x000007ff
 8002c00:	ff7fffff 	.word	0xff7fffff
 8002c04:	800fffff 	.word	0x800fffff
 8002c08:	2e00      	cmp	r6, #0
 8002c0a:	d03e      	beq.n	8002c8a <__aeabi_dsub+0x3d2>
 8002c0c:	4eb3      	ldr	r6, [pc, #716]	; (8002edc <__aeabi_dsub+0x624>)
 8002c0e:	45b4      	cmp	ip, r6
 8002c10:	d045      	beq.n	8002c9e <__aeabi_dsub+0x3e6>
 8002c12:	2680      	movs	r6, #128	; 0x80
 8002c14:	0436      	lsls	r6, r6, #16
 8002c16:	426d      	negs	r5, r5
 8002c18:	4334      	orrs	r4, r6
 8002c1a:	2d38      	cmp	r5, #56	; 0x38
 8002c1c:	dd00      	ble.n	8002c20 <__aeabi_dsub+0x368>
 8002c1e:	e0a8      	b.n	8002d72 <__aeabi_dsub+0x4ba>
 8002c20:	2d1f      	cmp	r5, #31
 8002c22:	dd00      	ble.n	8002c26 <__aeabi_dsub+0x36e>
 8002c24:	e11f      	b.n	8002e66 <__aeabi_dsub+0x5ae>
 8002c26:	2620      	movs	r6, #32
 8002c28:	0027      	movs	r7, r4
 8002c2a:	4650      	mov	r0, sl
 8002c2c:	1b76      	subs	r6, r6, r5
 8002c2e:	40b7      	lsls	r7, r6
 8002c30:	40e8      	lsrs	r0, r5
 8002c32:	4307      	orrs	r7, r0
 8002c34:	4650      	mov	r0, sl
 8002c36:	40b0      	lsls	r0, r6
 8002c38:	1e46      	subs	r6, r0, #1
 8002c3a:	41b0      	sbcs	r0, r6
 8002c3c:	40ec      	lsrs	r4, r5
 8002c3e:	4338      	orrs	r0, r7
 8002c40:	1a17      	subs	r7, r2, r0
 8002c42:	42ba      	cmp	r2, r7
 8002c44:	4192      	sbcs	r2, r2
 8002c46:	1b0c      	subs	r4, r1, r4
 8002c48:	4252      	negs	r2, r2
 8002c4a:	1aa4      	subs	r4, r4, r2
 8002c4c:	4666      	mov	r6, ip
 8002c4e:	4698      	mov	r8, r3
 8002c50:	e68b      	b.n	800296a <__aeabi_dsub+0xb2>
 8002c52:	4664      	mov	r4, ip
 8002c54:	4667      	mov	r7, ip
 8002c56:	432c      	orrs	r4, r5
 8002c58:	d000      	beq.n	8002c5c <__aeabi_dsub+0x3a4>
 8002c5a:	e68b      	b.n	8002974 <__aeabi_dsub+0xbc>
 8002c5c:	2500      	movs	r5, #0
 8002c5e:	2600      	movs	r6, #0
 8002c60:	2700      	movs	r7, #0
 8002c62:	e6ea      	b.n	8002a3a <__aeabi_dsub+0x182>
 8002c64:	001e      	movs	r6, r3
 8002c66:	e6ad      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002c68:	2b1f      	cmp	r3, #31
 8002c6a:	dc60      	bgt.n	8002d2e <__aeabi_dsub+0x476>
 8002c6c:	2720      	movs	r7, #32
 8002c6e:	1af8      	subs	r0, r7, r3
 8002c70:	000f      	movs	r7, r1
 8002c72:	4684      	mov	ip, r0
 8002c74:	4087      	lsls	r7, r0
 8002c76:	0010      	movs	r0, r2
 8002c78:	40d8      	lsrs	r0, r3
 8002c7a:	4307      	orrs	r7, r0
 8002c7c:	4660      	mov	r0, ip
 8002c7e:	4082      	lsls	r2, r0
 8002c80:	1e50      	subs	r0, r2, #1
 8002c82:	4182      	sbcs	r2, r0
 8002c84:	40d9      	lsrs	r1, r3
 8002c86:	4317      	orrs	r7, r2
 8002c88:	e6f5      	b.n	8002a76 <__aeabi_dsub+0x1be>
 8002c8a:	0026      	movs	r6, r4
 8002c8c:	4650      	mov	r0, sl
 8002c8e:	4306      	orrs	r6, r0
 8002c90:	d005      	beq.n	8002c9e <__aeabi_dsub+0x3e6>
 8002c92:	43ed      	mvns	r5, r5
 8002c94:	2d00      	cmp	r5, #0
 8002c96:	d0d3      	beq.n	8002c40 <__aeabi_dsub+0x388>
 8002c98:	4e90      	ldr	r6, [pc, #576]	; (8002edc <__aeabi_dsub+0x624>)
 8002c9a:	45b4      	cmp	ip, r6
 8002c9c:	d1bd      	bne.n	8002c1a <__aeabi_dsub+0x362>
 8002c9e:	000c      	movs	r4, r1
 8002ca0:	0017      	movs	r7, r2
 8002ca2:	4666      	mov	r6, ip
 8002ca4:	4698      	mov	r8, r3
 8002ca6:	e68d      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002ca8:	488c      	ldr	r0, [pc, #560]	; (8002edc <__aeabi_dsub+0x624>)
 8002caa:	4283      	cmp	r3, r0
 8002cac:	d00b      	beq.n	8002cc6 <__aeabi_dsub+0x40e>
 8002cae:	4663      	mov	r3, ip
 8002cb0:	e6d9      	b.n	8002a66 <__aeabi_dsub+0x1ae>
 8002cb2:	2d00      	cmp	r5, #0
 8002cb4:	d000      	beq.n	8002cb8 <__aeabi_dsub+0x400>
 8002cb6:	e096      	b.n	8002de6 <__aeabi_dsub+0x52e>
 8002cb8:	0008      	movs	r0, r1
 8002cba:	4310      	orrs	r0, r2
 8002cbc:	d100      	bne.n	8002cc0 <__aeabi_dsub+0x408>
 8002cbe:	e0e2      	b.n	8002e86 <__aeabi_dsub+0x5ce>
 8002cc0:	000c      	movs	r4, r1
 8002cc2:	0017      	movs	r7, r2
 8002cc4:	4698      	mov	r8, r3
 8002cc6:	4e85      	ldr	r6, [pc, #532]	; (8002edc <__aeabi_dsub+0x624>)
 8002cc8:	e67c      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002cca:	2500      	movs	r5, #0
 8002ccc:	e780      	b.n	8002bd0 <__aeabi_dsub+0x318>
 8002cce:	2100      	movs	r1, #0
 8002cd0:	e78e      	b.n	8002bf0 <__aeabi_dsub+0x338>
 8002cd2:	0023      	movs	r3, r4
 8002cd4:	4650      	mov	r0, sl
 8002cd6:	4303      	orrs	r3, r0
 8002cd8:	2e00      	cmp	r6, #0
 8002cda:	d000      	beq.n	8002cde <__aeabi_dsub+0x426>
 8002cdc:	e0a8      	b.n	8002e30 <__aeabi_dsub+0x578>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x42c>
 8002ce2:	e0de      	b.n	8002ea2 <__aeabi_dsub+0x5ea>
 8002ce4:	000b      	movs	r3, r1
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	d100      	bne.n	8002cec <__aeabi_dsub+0x434>
 8002cea:	e66b      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002cec:	4452      	add	r2, sl
 8002cee:	4552      	cmp	r2, sl
 8002cf0:	4180      	sbcs	r0, r0
 8002cf2:	1864      	adds	r4, r4, r1
 8002cf4:	4240      	negs	r0, r0
 8002cf6:	1824      	adds	r4, r4, r0
 8002cf8:	0017      	movs	r7, r2
 8002cfa:	0223      	lsls	r3, r4, #8
 8002cfc:	d400      	bmi.n	8002d00 <__aeabi_dsub+0x448>
 8002cfe:	e6fd      	b.n	8002afc <__aeabi_dsub+0x244>
 8002d00:	4b77      	ldr	r3, [pc, #476]	; (8002ee0 <__aeabi_dsub+0x628>)
 8002d02:	4666      	mov	r6, ip
 8002d04:	401c      	ands	r4, r3
 8002d06:	e65d      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002d08:	0025      	movs	r5, r4
 8002d0a:	4650      	mov	r0, sl
 8002d0c:	4305      	orrs	r5, r0
 8002d0e:	2e00      	cmp	r6, #0
 8002d10:	d1cf      	bne.n	8002cb2 <__aeabi_dsub+0x3fa>
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	d14f      	bne.n	8002db6 <__aeabi_dsub+0x4fe>
 8002d16:	000c      	movs	r4, r1
 8002d18:	4314      	orrs	r4, r2
 8002d1a:	d100      	bne.n	8002d1e <__aeabi_dsub+0x466>
 8002d1c:	e0a0      	b.n	8002e60 <__aeabi_dsub+0x5a8>
 8002d1e:	000c      	movs	r4, r1
 8002d20:	0017      	movs	r7, r2
 8002d22:	4698      	mov	r8, r3
 8002d24:	e64e      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002d26:	4666      	mov	r6, ip
 8002d28:	2400      	movs	r4, #0
 8002d2a:	2700      	movs	r7, #0
 8002d2c:	e685      	b.n	8002a3a <__aeabi_dsub+0x182>
 8002d2e:	001f      	movs	r7, r3
 8002d30:	0008      	movs	r0, r1
 8002d32:	3f20      	subs	r7, #32
 8002d34:	40f8      	lsrs	r0, r7
 8002d36:	0007      	movs	r7, r0
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d100      	bne.n	8002d3e <__aeabi_dsub+0x486>
 8002d3c:	e08e      	b.n	8002e5c <__aeabi_dsub+0x5a4>
 8002d3e:	2040      	movs	r0, #64	; 0x40
 8002d40:	1ac3      	subs	r3, r0, r3
 8002d42:	4099      	lsls	r1, r3
 8002d44:	430a      	orrs	r2, r1
 8002d46:	1e51      	subs	r1, r2, #1
 8002d48:	418a      	sbcs	r2, r1
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4317      	orrs	r7, r2
 8002d4e:	e692      	b.n	8002a76 <__aeabi_dsub+0x1be>
 8002d50:	2e00      	cmp	r6, #0
 8002d52:	d114      	bne.n	8002d7e <__aeabi_dsub+0x4c6>
 8002d54:	0026      	movs	r6, r4
 8002d56:	4650      	mov	r0, sl
 8002d58:	4306      	orrs	r6, r0
 8002d5a:	d062      	beq.n	8002e22 <__aeabi_dsub+0x56a>
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d15c      	bne.n	8002e1c <__aeabi_dsub+0x564>
 8002d62:	1887      	adds	r7, r0, r2
 8002d64:	4297      	cmp	r7, r2
 8002d66:	4192      	sbcs	r2, r2
 8002d68:	1864      	adds	r4, r4, r1
 8002d6a:	4252      	negs	r2, r2
 8002d6c:	18a4      	adds	r4, r4, r2
 8002d6e:	4666      	mov	r6, ip
 8002d70:	e687      	b.n	8002a82 <__aeabi_dsub+0x1ca>
 8002d72:	4650      	mov	r0, sl
 8002d74:	4320      	orrs	r0, r4
 8002d76:	1e44      	subs	r4, r0, #1
 8002d78:	41a0      	sbcs	r0, r4
 8002d7a:	2400      	movs	r4, #0
 8002d7c:	e760      	b.n	8002c40 <__aeabi_dsub+0x388>
 8002d7e:	4e57      	ldr	r6, [pc, #348]	; (8002edc <__aeabi_dsub+0x624>)
 8002d80:	45b4      	cmp	ip, r6
 8002d82:	d04e      	beq.n	8002e22 <__aeabi_dsub+0x56a>
 8002d84:	2680      	movs	r6, #128	; 0x80
 8002d86:	0436      	lsls	r6, r6, #16
 8002d88:	425b      	negs	r3, r3
 8002d8a:	4334      	orrs	r4, r6
 8002d8c:	2b38      	cmp	r3, #56	; 0x38
 8002d8e:	dd00      	ble.n	8002d92 <__aeabi_dsub+0x4da>
 8002d90:	e07f      	b.n	8002e92 <__aeabi_dsub+0x5da>
 8002d92:	2b1f      	cmp	r3, #31
 8002d94:	dd00      	ble.n	8002d98 <__aeabi_dsub+0x4e0>
 8002d96:	e08b      	b.n	8002eb0 <__aeabi_dsub+0x5f8>
 8002d98:	2620      	movs	r6, #32
 8002d9a:	0027      	movs	r7, r4
 8002d9c:	4650      	mov	r0, sl
 8002d9e:	1af6      	subs	r6, r6, r3
 8002da0:	40b7      	lsls	r7, r6
 8002da2:	40d8      	lsrs	r0, r3
 8002da4:	4307      	orrs	r7, r0
 8002da6:	4650      	mov	r0, sl
 8002da8:	40b0      	lsls	r0, r6
 8002daa:	1e46      	subs	r6, r0, #1
 8002dac:	41b0      	sbcs	r0, r6
 8002dae:	4307      	orrs	r7, r0
 8002db0:	40dc      	lsrs	r4, r3
 8002db2:	18bf      	adds	r7, r7, r2
 8002db4:	e7d6      	b.n	8002d64 <__aeabi_dsub+0x4ac>
 8002db6:	000d      	movs	r5, r1
 8002db8:	4315      	orrs	r5, r2
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x506>
 8002dbc:	e602      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002dbe:	4650      	mov	r0, sl
 8002dc0:	1a80      	subs	r0, r0, r2
 8002dc2:	4582      	cmp	sl, r0
 8002dc4:	41bf      	sbcs	r7, r7
 8002dc6:	1a65      	subs	r5, r4, r1
 8002dc8:	427f      	negs	r7, r7
 8002dca:	1bed      	subs	r5, r5, r7
 8002dcc:	4684      	mov	ip, r0
 8002dce:	0228      	lsls	r0, r5, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x51c>
 8002dd2:	e68d      	b.n	8002af0 <__aeabi_dsub+0x238>
 8002dd4:	4650      	mov	r0, sl
 8002dd6:	1a17      	subs	r7, r2, r0
 8002dd8:	42ba      	cmp	r2, r7
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	1b0c      	subs	r4, r1, r4
 8002dde:	4252      	negs	r2, r2
 8002de0:	1aa4      	subs	r4, r4, r2
 8002de2:	4698      	mov	r8, r3
 8002de4:	e5ee      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002de6:	000d      	movs	r5, r1
 8002de8:	4315      	orrs	r5, r2
 8002dea:	d100      	bne.n	8002dee <__aeabi_dsub+0x536>
 8002dec:	e76b      	b.n	8002cc6 <__aeabi_dsub+0x40e>
 8002dee:	4650      	mov	r0, sl
 8002df0:	0767      	lsls	r7, r4, #29
 8002df2:	08c0      	lsrs	r0, r0, #3
 8002df4:	4307      	orrs	r7, r0
 8002df6:	2080      	movs	r0, #128	; 0x80
 8002df8:	08e4      	lsrs	r4, r4, #3
 8002dfa:	0300      	lsls	r0, r0, #12
 8002dfc:	4204      	tst	r4, r0
 8002dfe:	d007      	beq.n	8002e10 <__aeabi_dsub+0x558>
 8002e00:	08cd      	lsrs	r5, r1, #3
 8002e02:	4205      	tst	r5, r0
 8002e04:	d104      	bne.n	8002e10 <__aeabi_dsub+0x558>
 8002e06:	002c      	movs	r4, r5
 8002e08:	4698      	mov	r8, r3
 8002e0a:	08d7      	lsrs	r7, r2, #3
 8002e0c:	0749      	lsls	r1, r1, #29
 8002e0e:	430f      	orrs	r7, r1
 8002e10:	0f7b      	lsrs	r3, r7, #29
 8002e12:	00e4      	lsls	r4, r4, #3
 8002e14:	431c      	orrs	r4, r3
 8002e16:	00ff      	lsls	r7, r7, #3
 8002e18:	4e30      	ldr	r6, [pc, #192]	; (8002edc <__aeabi_dsub+0x624>)
 8002e1a:	e5d3      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002e1c:	4e2f      	ldr	r6, [pc, #188]	; (8002edc <__aeabi_dsub+0x624>)
 8002e1e:	45b4      	cmp	ip, r6
 8002e20:	d1b4      	bne.n	8002d8c <__aeabi_dsub+0x4d4>
 8002e22:	000c      	movs	r4, r1
 8002e24:	0017      	movs	r7, r2
 8002e26:	4666      	mov	r6, ip
 8002e28:	e5cc      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002e2a:	2700      	movs	r7, #0
 8002e2c:	2400      	movs	r4, #0
 8002e2e:	e5e8      	b.n	8002a02 <__aeabi_dsub+0x14a>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d039      	beq.n	8002ea8 <__aeabi_dsub+0x5f0>
 8002e34:	000b      	movs	r3, r1
 8002e36:	4313      	orrs	r3, r2
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x584>
 8002e3a:	e744      	b.n	8002cc6 <__aeabi_dsub+0x40e>
 8002e3c:	08c0      	lsrs	r0, r0, #3
 8002e3e:	0767      	lsls	r7, r4, #29
 8002e40:	4307      	orrs	r7, r0
 8002e42:	2080      	movs	r0, #128	; 0x80
 8002e44:	08e4      	lsrs	r4, r4, #3
 8002e46:	0300      	lsls	r0, r0, #12
 8002e48:	4204      	tst	r4, r0
 8002e4a:	d0e1      	beq.n	8002e10 <__aeabi_dsub+0x558>
 8002e4c:	08cb      	lsrs	r3, r1, #3
 8002e4e:	4203      	tst	r3, r0
 8002e50:	d1de      	bne.n	8002e10 <__aeabi_dsub+0x558>
 8002e52:	08d7      	lsrs	r7, r2, #3
 8002e54:	0749      	lsls	r1, r1, #29
 8002e56:	430f      	orrs	r7, r1
 8002e58:	001c      	movs	r4, r3
 8002e5a:	e7d9      	b.n	8002e10 <__aeabi_dsub+0x558>
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	e771      	b.n	8002d44 <__aeabi_dsub+0x48c>
 8002e60:	2500      	movs	r5, #0
 8002e62:	2700      	movs	r7, #0
 8002e64:	e5e9      	b.n	8002a3a <__aeabi_dsub+0x182>
 8002e66:	002e      	movs	r6, r5
 8002e68:	0027      	movs	r7, r4
 8002e6a:	3e20      	subs	r6, #32
 8002e6c:	40f7      	lsrs	r7, r6
 8002e6e:	2d20      	cmp	r5, #32
 8002e70:	d02f      	beq.n	8002ed2 <__aeabi_dsub+0x61a>
 8002e72:	2640      	movs	r6, #64	; 0x40
 8002e74:	1b75      	subs	r5, r6, r5
 8002e76:	40ac      	lsls	r4, r5
 8002e78:	4650      	mov	r0, sl
 8002e7a:	4320      	orrs	r0, r4
 8002e7c:	1e44      	subs	r4, r0, #1
 8002e7e:	41a0      	sbcs	r0, r4
 8002e80:	2400      	movs	r4, #0
 8002e82:	4338      	orrs	r0, r7
 8002e84:	e6dc      	b.n	8002c40 <__aeabi_dsub+0x388>
 8002e86:	2480      	movs	r4, #128	; 0x80
 8002e88:	2500      	movs	r5, #0
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	4e13      	ldr	r6, [pc, #76]	; (8002edc <__aeabi_dsub+0x624>)
 8002e8e:	2700      	movs	r7, #0
 8002e90:	e5d3      	b.n	8002a3a <__aeabi_dsub+0x182>
 8002e92:	4650      	mov	r0, sl
 8002e94:	4320      	orrs	r0, r4
 8002e96:	0007      	movs	r7, r0
 8002e98:	1e78      	subs	r0, r7, #1
 8002e9a:	4187      	sbcs	r7, r0
 8002e9c:	2400      	movs	r4, #0
 8002e9e:	18bf      	adds	r7, r7, r2
 8002ea0:	e760      	b.n	8002d64 <__aeabi_dsub+0x4ac>
 8002ea2:	000c      	movs	r4, r1
 8002ea4:	0017      	movs	r7, r2
 8002ea6:	e58d      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002ea8:	000c      	movs	r4, r1
 8002eaa:	0017      	movs	r7, r2
 8002eac:	4e0b      	ldr	r6, [pc, #44]	; (8002edc <__aeabi_dsub+0x624>)
 8002eae:	e589      	b.n	80029c4 <__aeabi_dsub+0x10c>
 8002eb0:	001e      	movs	r6, r3
 8002eb2:	0027      	movs	r7, r4
 8002eb4:	3e20      	subs	r6, #32
 8002eb6:	40f7      	lsrs	r7, r6
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d00c      	beq.n	8002ed6 <__aeabi_dsub+0x61e>
 8002ebc:	2640      	movs	r6, #64	; 0x40
 8002ebe:	1af3      	subs	r3, r6, r3
 8002ec0:	409c      	lsls	r4, r3
 8002ec2:	4650      	mov	r0, sl
 8002ec4:	4320      	orrs	r0, r4
 8002ec6:	1e44      	subs	r4, r0, #1
 8002ec8:	41a0      	sbcs	r0, r4
 8002eca:	4307      	orrs	r7, r0
 8002ecc:	2400      	movs	r4, #0
 8002ece:	18bf      	adds	r7, r7, r2
 8002ed0:	e748      	b.n	8002d64 <__aeabi_dsub+0x4ac>
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	e7d0      	b.n	8002e78 <__aeabi_dsub+0x5c0>
 8002ed6:	2400      	movs	r4, #0
 8002ed8:	e7f3      	b.n	8002ec2 <__aeabi_dsub+0x60a>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	000007ff 	.word	0x000007ff
 8002ee0:	ff7fffff 	.word	0xff7fffff

08002ee4 <__aeabi_dcmpun>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4e0e      	ldr	r6, [pc, #56]	; (8002f20 <__aeabi_dcmpun+0x3c>)
 8002ee8:	030d      	lsls	r5, r1, #12
 8002eea:	031c      	lsls	r4, r3, #12
 8002eec:	0049      	lsls	r1, r1, #1
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	0b2d      	lsrs	r5, r5, #12
 8002ef2:	0d49      	lsrs	r1, r1, #21
 8002ef4:	0b24      	lsrs	r4, r4, #12
 8002ef6:	0d5b      	lsrs	r3, r3, #21
 8002ef8:	42b1      	cmp	r1, r6
 8002efa:	d004      	beq.n	8002f06 <__aeabi_dcmpun+0x22>
 8002efc:	4908      	ldr	r1, [pc, #32]	; (8002f20 <__aeabi_dcmpun+0x3c>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d008      	beq.n	8002f16 <__aeabi_dcmpun+0x32>
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
 8002f06:	4305      	orrs	r5, r0
 8002f08:	2001      	movs	r0, #1
 8002f0a:	2d00      	cmp	r5, #0
 8002f0c:	d1fa      	bne.n	8002f04 <__aeabi_dcmpun+0x20>
 8002f0e:	4904      	ldr	r1, [pc, #16]	; (8002f20 <__aeabi_dcmpun+0x3c>)
 8002f10:	2000      	movs	r0, #0
 8002f12:	428b      	cmp	r3, r1
 8002f14:	d1f6      	bne.n	8002f04 <__aeabi_dcmpun+0x20>
 8002f16:	4314      	orrs	r4, r2
 8002f18:	0020      	movs	r0, r4
 8002f1a:	1e44      	subs	r4, r0, #1
 8002f1c:	41a0      	sbcs	r0, r4
 8002f1e:	e7f1      	b.n	8002f04 <__aeabi_dcmpun+0x20>
 8002f20:	000007ff 	.word	0x000007ff

08002f24 <__aeabi_d2iz>:
 8002f24:	b530      	push	{r4, r5, lr}
 8002f26:	4d13      	ldr	r5, [pc, #76]	; (8002f74 <__aeabi_d2iz+0x50>)
 8002f28:	030a      	lsls	r2, r1, #12
 8002f2a:	004b      	lsls	r3, r1, #1
 8002f2c:	0b12      	lsrs	r2, r2, #12
 8002f2e:	0d5b      	lsrs	r3, r3, #21
 8002f30:	0fc9      	lsrs	r1, r1, #31
 8002f32:	2400      	movs	r4, #0
 8002f34:	42ab      	cmp	r3, r5
 8002f36:	dd10      	ble.n	8002f5a <__aeabi_d2iz+0x36>
 8002f38:	4c0f      	ldr	r4, [pc, #60]	; (8002f78 <__aeabi_d2iz+0x54>)
 8002f3a:	42a3      	cmp	r3, r4
 8002f3c:	dc0f      	bgt.n	8002f5e <__aeabi_d2iz+0x3a>
 8002f3e:	2480      	movs	r4, #128	; 0x80
 8002f40:	4d0e      	ldr	r5, [pc, #56]	; (8002f7c <__aeabi_d2iz+0x58>)
 8002f42:	0364      	lsls	r4, r4, #13
 8002f44:	4322      	orrs	r2, r4
 8002f46:	1aed      	subs	r5, r5, r3
 8002f48:	2d1f      	cmp	r5, #31
 8002f4a:	dd0b      	ble.n	8002f64 <__aeabi_d2iz+0x40>
 8002f4c:	480c      	ldr	r0, [pc, #48]	; (8002f80 <__aeabi_d2iz+0x5c>)
 8002f4e:	1ac3      	subs	r3, r0, r3
 8002f50:	40da      	lsrs	r2, r3
 8002f52:	4254      	negs	r4, r2
 8002f54:	2900      	cmp	r1, #0
 8002f56:	d100      	bne.n	8002f5a <__aeabi_d2iz+0x36>
 8002f58:	0014      	movs	r4, r2
 8002f5a:	0020      	movs	r0, r4
 8002f5c:	bd30      	pop	{r4, r5, pc}
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <__aeabi_d2iz+0x60>)
 8002f60:	18cc      	adds	r4, r1, r3
 8002f62:	e7fa      	b.n	8002f5a <__aeabi_d2iz+0x36>
 8002f64:	4c08      	ldr	r4, [pc, #32]	; (8002f88 <__aeabi_d2iz+0x64>)
 8002f66:	40e8      	lsrs	r0, r5
 8002f68:	46a4      	mov	ip, r4
 8002f6a:	4463      	add	r3, ip
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	4302      	orrs	r2, r0
 8002f70:	e7ef      	b.n	8002f52 <__aeabi_d2iz+0x2e>
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	000003fe 	.word	0x000003fe
 8002f78:	0000041d 	.word	0x0000041d
 8002f7c:	00000433 	.word	0x00000433
 8002f80:	00000413 	.word	0x00000413
 8002f84:	7fffffff 	.word	0x7fffffff
 8002f88:	fffffbed 	.word	0xfffffbed

08002f8c <__aeabi_i2d>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d030      	beq.n	8002ff4 <__aeabi_i2d+0x68>
 8002f92:	17c3      	asrs	r3, r0, #31
 8002f94:	18c4      	adds	r4, r0, r3
 8002f96:	405c      	eors	r4, r3
 8002f98:	0fc5      	lsrs	r5, r0, #31
 8002f9a:	0020      	movs	r0, r4
 8002f9c:	f000 f8fa 	bl	8003194 <__clzsi2>
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <__aeabi_i2d+0x74>)
 8002fa2:	4a18      	ldr	r2, [pc, #96]	; (8003004 <__aeabi_i2d+0x78>)
 8002fa4:	1a1b      	subs	r3, r3, r0
 8002fa6:	1ad2      	subs	r2, r2, r3
 8002fa8:	2a1f      	cmp	r2, #31
 8002faa:	dd18      	ble.n	8002fde <__aeabi_i2d+0x52>
 8002fac:	4a16      	ldr	r2, [pc, #88]	; (8003008 <__aeabi_i2d+0x7c>)
 8002fae:	1ad2      	subs	r2, r2, r3
 8002fb0:	4094      	lsls	r4, r2
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	0324      	lsls	r4, r4, #12
 8002fb6:	055b      	lsls	r3, r3, #21
 8002fb8:	0b24      	lsrs	r4, r4, #12
 8002fba:	0d5b      	lsrs	r3, r3, #21
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	0010      	movs	r0, r2
 8002fc0:	0324      	lsls	r4, r4, #12
 8002fc2:	0d0a      	lsrs	r2, r1, #20
 8002fc4:	0b24      	lsrs	r4, r4, #12
 8002fc6:	0512      	lsls	r2, r2, #20
 8002fc8:	4322      	orrs	r2, r4
 8002fca:	4c10      	ldr	r4, [pc, #64]	; (800300c <__aeabi_i2d+0x80>)
 8002fcc:	051b      	lsls	r3, r3, #20
 8002fce:	4022      	ands	r2, r4
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	07ed      	lsls	r5, r5, #31
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	432b      	orrs	r3, r5
 8002fda:	0019      	movs	r1, r3
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
 8002fde:	0021      	movs	r1, r4
 8002fe0:	4091      	lsls	r1, r2
 8002fe2:	000a      	movs	r2, r1
 8002fe4:	210b      	movs	r1, #11
 8002fe6:	1a08      	subs	r0, r1, r0
 8002fe8:	40c4      	lsrs	r4, r0
 8002fea:	055b      	lsls	r3, r3, #21
 8002fec:	0324      	lsls	r4, r4, #12
 8002fee:	0b24      	lsrs	r4, r4, #12
 8002ff0:	0d5b      	lsrs	r3, r3, #21
 8002ff2:	e7e3      	b.n	8002fbc <__aeabi_i2d+0x30>
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	e7de      	b.n	8002fbc <__aeabi_i2d+0x30>
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	0000041e 	.word	0x0000041e
 8003004:	00000433 	.word	0x00000433
 8003008:	00000413 	.word	0x00000413
 800300c:	800fffff 	.word	0x800fffff

08003010 <__aeabi_ui2d>:
 8003010:	b510      	push	{r4, lr}
 8003012:	1e04      	subs	r4, r0, #0
 8003014:	d028      	beq.n	8003068 <__aeabi_ui2d+0x58>
 8003016:	f000 f8bd 	bl	8003194 <__clzsi2>
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <__aeabi_ui2d+0x60>)
 800301c:	4a15      	ldr	r2, [pc, #84]	; (8003074 <__aeabi_ui2d+0x64>)
 800301e:	1a1b      	subs	r3, r3, r0
 8003020:	1ad2      	subs	r2, r2, r3
 8003022:	2a1f      	cmp	r2, #31
 8003024:	dd15      	ble.n	8003052 <__aeabi_ui2d+0x42>
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <__aeabi_ui2d+0x68>)
 8003028:	1ad2      	subs	r2, r2, r3
 800302a:	4094      	lsls	r4, r2
 800302c:	2200      	movs	r2, #0
 800302e:	0324      	lsls	r4, r4, #12
 8003030:	055b      	lsls	r3, r3, #21
 8003032:	0b24      	lsrs	r4, r4, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	2100      	movs	r1, #0
 8003038:	0010      	movs	r0, r2
 800303a:	0324      	lsls	r4, r4, #12
 800303c:	0d0a      	lsrs	r2, r1, #20
 800303e:	0b24      	lsrs	r4, r4, #12
 8003040:	0512      	lsls	r2, r2, #20
 8003042:	4322      	orrs	r2, r4
 8003044:	4c0d      	ldr	r4, [pc, #52]	; (800307c <__aeabi_ui2d+0x6c>)
 8003046:	051b      	lsls	r3, r3, #20
 8003048:	4022      	ands	r2, r4
 800304a:	4313      	orrs	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	0859      	lsrs	r1, r3, #1
 8003050:	bd10      	pop	{r4, pc}
 8003052:	0021      	movs	r1, r4
 8003054:	4091      	lsls	r1, r2
 8003056:	000a      	movs	r2, r1
 8003058:	210b      	movs	r1, #11
 800305a:	1a08      	subs	r0, r1, r0
 800305c:	40c4      	lsrs	r4, r0
 800305e:	055b      	lsls	r3, r3, #21
 8003060:	0324      	lsls	r4, r4, #12
 8003062:	0b24      	lsrs	r4, r4, #12
 8003064:	0d5b      	lsrs	r3, r3, #21
 8003066:	e7e6      	b.n	8003036 <__aeabi_ui2d+0x26>
 8003068:	2300      	movs	r3, #0
 800306a:	2400      	movs	r4, #0
 800306c:	2200      	movs	r2, #0
 800306e:	e7e2      	b.n	8003036 <__aeabi_ui2d+0x26>
 8003070:	0000041e 	.word	0x0000041e
 8003074:	00000433 	.word	0x00000433
 8003078:	00000413 	.word	0x00000413
 800307c:	800fffff 	.word	0x800fffff

08003080 <__aeabi_d2f>:
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	004c      	lsls	r4, r1, #1
 8003084:	0d64      	lsrs	r4, r4, #21
 8003086:	030b      	lsls	r3, r1, #12
 8003088:	1c62      	adds	r2, r4, #1
 800308a:	0f45      	lsrs	r5, r0, #29
 800308c:	0a5b      	lsrs	r3, r3, #9
 800308e:	0552      	lsls	r2, r2, #21
 8003090:	432b      	orrs	r3, r5
 8003092:	0fc9      	lsrs	r1, r1, #31
 8003094:	00c5      	lsls	r5, r0, #3
 8003096:	0d52      	lsrs	r2, r2, #21
 8003098:	2a01      	cmp	r2, #1
 800309a:	dd28      	ble.n	80030ee <__aeabi_d2f+0x6e>
 800309c:	4a3a      	ldr	r2, [pc, #232]	; (8003188 <__aeabi_d2f+0x108>)
 800309e:	18a6      	adds	r6, r4, r2
 80030a0:	2efe      	cmp	r6, #254	; 0xfe
 80030a2:	dc1b      	bgt.n	80030dc <__aeabi_d2f+0x5c>
 80030a4:	2e00      	cmp	r6, #0
 80030a6:	dd3e      	ble.n	8003126 <__aeabi_d2f+0xa6>
 80030a8:	0180      	lsls	r0, r0, #6
 80030aa:	0002      	movs	r2, r0
 80030ac:	1e50      	subs	r0, r2, #1
 80030ae:	4182      	sbcs	r2, r0
 80030b0:	0f6d      	lsrs	r5, r5, #29
 80030b2:	432a      	orrs	r2, r5
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4313      	orrs	r3, r2
 80030b8:	075a      	lsls	r2, r3, #29
 80030ba:	d004      	beq.n	80030c6 <__aeabi_d2f+0x46>
 80030bc:	220f      	movs	r2, #15
 80030be:	401a      	ands	r2, r3
 80030c0:	2a04      	cmp	r2, #4
 80030c2:	d000      	beq.n	80030c6 <__aeabi_d2f+0x46>
 80030c4:	3304      	adds	r3, #4
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	04d2      	lsls	r2, r2, #19
 80030ca:	401a      	ands	r2, r3
 80030cc:	d05a      	beq.n	8003184 <__aeabi_d2f+0x104>
 80030ce:	3601      	adds	r6, #1
 80030d0:	2eff      	cmp	r6, #255	; 0xff
 80030d2:	d003      	beq.n	80030dc <__aeabi_d2f+0x5c>
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	0a5b      	lsrs	r3, r3, #9
 80030d8:	b2f4      	uxtb	r4, r6
 80030da:	e001      	b.n	80030e0 <__aeabi_d2f+0x60>
 80030dc:	24ff      	movs	r4, #255	; 0xff
 80030de:	2300      	movs	r3, #0
 80030e0:	0258      	lsls	r0, r3, #9
 80030e2:	05e4      	lsls	r4, r4, #23
 80030e4:	0a40      	lsrs	r0, r0, #9
 80030e6:	07c9      	lsls	r1, r1, #31
 80030e8:	4320      	orrs	r0, r4
 80030ea:	4308      	orrs	r0, r1
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ee:	2c00      	cmp	r4, #0
 80030f0:	d007      	beq.n	8003102 <__aeabi_d2f+0x82>
 80030f2:	431d      	orrs	r5, r3
 80030f4:	d0f2      	beq.n	80030dc <__aeabi_d2f+0x5c>
 80030f6:	2080      	movs	r0, #128	; 0x80
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	0480      	lsls	r0, r0, #18
 80030fc:	4303      	orrs	r3, r0
 80030fe:	26ff      	movs	r6, #255	; 0xff
 8003100:	e7da      	b.n	80030b8 <__aeabi_d2f+0x38>
 8003102:	432b      	orrs	r3, r5
 8003104:	d003      	beq.n	800310e <__aeabi_d2f+0x8e>
 8003106:	2305      	movs	r3, #5
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	2cff      	cmp	r4, #255	; 0xff
 800310c:	d003      	beq.n	8003116 <__aeabi_d2f+0x96>
 800310e:	025b      	lsls	r3, r3, #9
 8003110:	0a5b      	lsrs	r3, r3, #9
 8003112:	b2e4      	uxtb	r4, r4
 8003114:	e7e4      	b.n	80030e0 <__aeabi_d2f+0x60>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d032      	beq.n	8003180 <__aeabi_d2f+0x100>
 800311a:	2080      	movs	r0, #128	; 0x80
 800311c:	03c0      	lsls	r0, r0, #15
 800311e:	4303      	orrs	r3, r0
 8003120:	025b      	lsls	r3, r3, #9
 8003122:	0a5b      	lsrs	r3, r3, #9
 8003124:	e7dc      	b.n	80030e0 <__aeabi_d2f+0x60>
 8003126:	0032      	movs	r2, r6
 8003128:	3217      	adds	r2, #23
 800312a:	db14      	blt.n	8003156 <__aeabi_d2f+0xd6>
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	271e      	movs	r7, #30
 8003130:	0412      	lsls	r2, r2, #16
 8003132:	4313      	orrs	r3, r2
 8003134:	1bbf      	subs	r7, r7, r6
 8003136:	2f1f      	cmp	r7, #31
 8003138:	dc0f      	bgt.n	800315a <__aeabi_d2f+0xda>
 800313a:	4a14      	ldr	r2, [pc, #80]	; (800318c <__aeabi_d2f+0x10c>)
 800313c:	4694      	mov	ip, r2
 800313e:	4464      	add	r4, ip
 8003140:	002a      	movs	r2, r5
 8003142:	40a5      	lsls	r5, r4
 8003144:	002e      	movs	r6, r5
 8003146:	40a3      	lsls	r3, r4
 8003148:	1e75      	subs	r5, r6, #1
 800314a:	41ae      	sbcs	r6, r5
 800314c:	40fa      	lsrs	r2, r7
 800314e:	4333      	orrs	r3, r6
 8003150:	4313      	orrs	r3, r2
 8003152:	2600      	movs	r6, #0
 8003154:	e7b0      	b.n	80030b8 <__aeabi_d2f+0x38>
 8003156:	2400      	movs	r4, #0
 8003158:	e7d5      	b.n	8003106 <__aeabi_d2f+0x86>
 800315a:	2202      	movs	r2, #2
 800315c:	4252      	negs	r2, r2
 800315e:	1b96      	subs	r6, r2, r6
 8003160:	001a      	movs	r2, r3
 8003162:	40f2      	lsrs	r2, r6
 8003164:	2f20      	cmp	r7, #32
 8003166:	d009      	beq.n	800317c <__aeabi_d2f+0xfc>
 8003168:	4809      	ldr	r0, [pc, #36]	; (8003190 <__aeabi_d2f+0x110>)
 800316a:	4684      	mov	ip, r0
 800316c:	4464      	add	r4, ip
 800316e:	40a3      	lsls	r3, r4
 8003170:	432b      	orrs	r3, r5
 8003172:	1e5d      	subs	r5, r3, #1
 8003174:	41ab      	sbcs	r3, r5
 8003176:	2600      	movs	r6, #0
 8003178:	4313      	orrs	r3, r2
 800317a:	e79d      	b.n	80030b8 <__aeabi_d2f+0x38>
 800317c:	2300      	movs	r3, #0
 800317e:	e7f7      	b.n	8003170 <__aeabi_d2f+0xf0>
 8003180:	2300      	movs	r3, #0
 8003182:	e7ad      	b.n	80030e0 <__aeabi_d2f+0x60>
 8003184:	0034      	movs	r4, r6
 8003186:	e7bf      	b.n	8003108 <__aeabi_d2f+0x88>
 8003188:	fffffc80 	.word	0xfffffc80
 800318c:	fffffc82 	.word	0xfffffc82
 8003190:	fffffca2 	.word	0xfffffca2

08003194 <__clzsi2>:
 8003194:	211c      	movs	r1, #28
 8003196:	2301      	movs	r3, #1
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	4298      	cmp	r0, r3
 800319c:	d301      	bcc.n	80031a2 <__clzsi2+0xe>
 800319e:	0c00      	lsrs	r0, r0, #16
 80031a0:	3910      	subs	r1, #16
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	4298      	cmp	r0, r3
 80031a6:	d301      	bcc.n	80031ac <__clzsi2+0x18>
 80031a8:	0a00      	lsrs	r0, r0, #8
 80031aa:	3908      	subs	r1, #8
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	4298      	cmp	r0, r3
 80031b0:	d301      	bcc.n	80031b6 <__clzsi2+0x22>
 80031b2:	0900      	lsrs	r0, r0, #4
 80031b4:	3904      	subs	r1, #4
 80031b6:	a202      	add	r2, pc, #8	; (adr r2, 80031c0 <__clzsi2+0x2c>)
 80031b8:	5c10      	ldrb	r0, [r2, r0]
 80031ba:	1840      	adds	r0, r0, r1
 80031bc:	4770      	bx	lr
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	02020304 	.word	0x02020304
 80031c4:	01010101 	.word	0x01010101
	...

080031d0 <__clzdi2>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	2900      	cmp	r1, #0
 80031d4:	d103      	bne.n	80031de <__clzdi2+0xe>
 80031d6:	f7ff ffdd 	bl	8003194 <__clzsi2>
 80031da:	3020      	adds	r0, #32
 80031dc:	e002      	b.n	80031e4 <__clzdi2+0x14>
 80031de:	1c08      	adds	r0, r1, #0
 80031e0:	f7ff ffd8 	bl	8003194 <__clzsi2>
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)

080031e8 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80031e8:	21fa      	movs	r1, #250	; 0xfa
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_InitTick+0x2c>)
{
 80031ec:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80031ee:	0089      	lsls	r1, r1, #2
{
 80031f0:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	f7fc ffa4 	bl	8000140 <__udivsi3>
 80031f8:	f000 fcb4 	bl	8003b64 <HAL_SYSTICK_Config>
 80031fc:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 80031fe:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8003200:	2c00      	cmp	r4, #0
 8003202:	d105      	bne.n	8003210 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8003204:	3802      	subs	r0, #2
 8003206:	0022      	movs	r2, r4
 8003208:	0029      	movs	r1, r5
 800320a:	f000 fc5f 	bl	8003acc <HAL_NVIC_SetPriority>
 800320e:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8003210:	bd70      	pop	{r4, r5, r6, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003218:	2302      	movs	r3, #2
 800321a:	4a08      	ldr	r2, [pc, #32]	; (800323c <HAL_Init+0x24>)
{
 800321c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800321e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003220:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003222:	430b      	orrs	r3, r1
 8003224:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003226:	f7ff ffdf 	bl	80031e8 <HAL_InitTick>
 800322a:	1e04      	subs	r4, r0, #0
 800322c:	d103      	bne.n	8003236 <HAL_Init+0x1e>
    HAL_MspInit();
 800322e:	f004 fa95 	bl	800775c <HAL_MspInit>
}
 8003232:	0020      	movs	r0, r4
 8003234:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003236:	2401      	movs	r4, #1
 8003238:	e7fb      	b.n	8003232 <HAL_Init+0x1a>
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	40022000 	.word	0x40022000

08003240 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003240:	4a02      	ldr	r2, [pc, #8]	; (800324c <HAL_IncTick+0xc>)
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	4770      	bx	lr
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	2000022c 	.word	0x2000022c

08003250 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <HAL_GetTick+0x8>)
 8003252:	6818      	ldr	r0, [r3, #0]
}
 8003254:	4770      	bx	lr
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	2000022c 	.word	0x2000022c

0800325c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003260:	f7ff fff6 	bl	8003250 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8003264:	1c63      	adds	r3, r4, #1
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 800326a:	0005      	movs	r5, r0
    wait++;
 800326c:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800326e:	f7ff ffef 	bl	8003250 <HAL_GetTick>
 8003272:	1b40      	subs	r0, r0, r5
 8003274:	4284      	cmp	r4, r0
 8003276:	d8fa      	bhi.n	800326e <HAL_Delay+0x12>
  {
  }
}
 8003278:	bd70      	pop	{r4, r5, r6, pc}
	...

0800327c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <ADC_DelayMicroSecond+0x24>)
{
 800327e:	b513      	push	{r0, r1, r4, lr}
 8003280:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003282:	4908      	ldr	r1, [pc, #32]	; (80032a4 <ADC_DelayMicroSecond+0x28>)
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	f7fc ff5b 	bl	8000140 <__udivsi3>
 800328a:	4344      	muls	r4, r0
 800328c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800328e:	9b01      	ldr	r3, [sp, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d100      	bne.n	8003296 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8003294:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8003296:	9b01      	ldr	r3, [sp, #4]
 8003298:	3b01      	subs	r3, #1
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	e7f7      	b.n	800328e <ADC_DelayMicroSecond+0x12>
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	20000004 	.word	0x20000004
 80032a4:	000f4240 	.word	0x000f4240

080032a8 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032a8:	2103      	movs	r1, #3
 80032aa:	6803      	ldr	r3, [r0, #0]
{
 80032ac:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032ae:	689a      	ldr	r2, [r3, #8]
{
 80032b0:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032b2:	400a      	ands	r2, r1
 80032b4:	2a01      	cmp	r2, #1
 80032b6:	d10d      	bne.n	80032d4 <ADC_Enable+0x2c>
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	4211      	tst	r1, r2
 80032bc:	d00a      	beq.n	80032d4 <ADC_Enable+0x2c>
  return HAL_OK;
 80032be:	2000      	movs	r0, #0
}
 80032c0:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c2:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80032c8:	4313      	orrs	r3, r2
 80032ca:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032ce:	4303      	orrs	r3, r0
 80032d0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80032d2:	e7f5      	b.n	80032c0 <ADC_Enable+0x18>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80032d4:	6899      	ldr	r1, [r3, #8]
 80032d6:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <ADC_Enable+0x6c>)
 80032d8:	4211      	tst	r1, r2
 80032da:	d1f2      	bne.n	80032c2 <ADC_Enable+0x1a>
    __HAL_ADC_ENABLE(hadc);
 80032dc:	2501      	movs	r5, #1
 80032de:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80032e0:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80032e2:	432a      	orrs	r2, r5
 80032e4:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80032e6:	f7ff ffc9 	bl	800327c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80032ea:	f7ff ffb1 	bl	8003250 <HAL_GetTick>
 80032ee:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	422b      	tst	r3, r5
 80032f6:	d1e2      	bne.n	80032be <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032f8:	f7ff ffaa 	bl	8003250 <HAL_GetTick>
 80032fc:	1b80      	subs	r0, r0, r6
 80032fe:	280a      	cmp	r0, #10
 8003300:	d9f6      	bls.n	80032f0 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003302:	2310      	movs	r3, #16
 8003304:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003306:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003308:	4313      	orrs	r3, r2
 800330a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800330e:	431d      	orrs	r5, r3
 8003310:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003312:	e7d5      	b.n	80032c0 <ADC_Enable+0x18>
 8003314:	80000017 	.word	0x80000017

08003318 <HAL_ADC_Init>:
{
 8003318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800331a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800331c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800331e:	2c00      	cmp	r4, #0
 8003320:	d100      	bne.n	8003324 <HAL_ADC_Init+0xc>
 8003322:	e0d1      	b.n	80034c8 <HAL_ADC_Init+0x1b0>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003324:	4b69      	ldr	r3, [pc, #420]	; (80034cc <HAL_ADC_Init+0x1b4>)
 8003326:	6822      	ldr	r2, [r4, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d004      	beq.n	8003336 <HAL_ADC_Init+0x1e>
 800332c:	21ce      	movs	r1, #206	; 0xce
 800332e:	4868      	ldr	r0, [pc, #416]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 8003330:	0049      	lsls	r1, r1, #1
 8003332:	f003 fef2 	bl	800711a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003336:	6862      	ldr	r2, [r4, #4]
 8003338:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_ADC_Init+0x1bc>)
 800333a:	4013      	ands	r3, r2
 800333c:	d016      	beq.n	800336c <HAL_ADC_Init+0x54>
 800333e:	2080      	movs	r0, #128	; 0x80
 8003340:	0051      	lsls	r1, r2, #1
 8003342:	0849      	lsrs	r1, r1, #1
 8003344:	05c0      	lsls	r0, r0, #23
 8003346:	4281      	cmp	r1, r0
 8003348:	d010      	beq.n	800336c <HAL_ADC_Init+0x54>
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	0609      	lsls	r1, r1, #24
 800334e:	428a      	cmp	r2, r1
 8003350:	d00c      	beq.n	800336c <HAL_ADC_Init+0x54>
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0352      	lsls	r2, r2, #13
 8003356:	4293      	cmp	r3, r2
 8003358:	d008      	beq.n	800336c <HAL_ADC_Init+0x54>
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	0392      	lsls	r2, r2, #14
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_ADC_Init+0x54>
 8003362:	219e      	movs	r1, #158	; 0x9e
 8003364:	485a      	ldr	r0, [pc, #360]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 8003366:	31ff      	adds	r1, #255	; 0xff
 8003368:	f003 fed7 	bl	800711a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800336c:	2318      	movs	r3, #24
 800336e:	68a2      	ldr	r2, [r4, #8]
 8003370:	439a      	bics	r2, r3
 8003372:	d004      	beq.n	800337e <HAL_ADC_Init+0x66>
 8003374:	21cf      	movs	r1, #207	; 0xcf
 8003376:	4856      	ldr	r0, [pc, #344]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 8003378:	0049      	lsls	r1, r1, #1
 800337a:	f003 fece 	bl	800711a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800337e:	2320      	movs	r3, #32
 8003380:	68e2      	ldr	r2, [r4, #12]
 8003382:	439a      	bics	r2, r3
 8003384:	d004      	beq.n	8003390 <HAL_ADC_Init+0x78>
 8003386:	21a0      	movs	r1, #160	; 0xa0
 8003388:	4851      	ldr	r0, [pc, #324]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800338a:	31ff      	adds	r1, #255	; 0xff
 800338c:	f003 fec5 	bl	800711a <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	3b01      	subs	r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d904      	bls.n	80033a2 <HAL_ADC_Init+0x8a>
 8003398:	21d0      	movs	r1, #208	; 0xd0
 800339a:	484d      	ldr	r0, [pc, #308]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800339c:	0049      	lsls	r1, r1, #1
 800339e:	f003 febc 	bl	800711a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80033a2:	1c66      	adds	r6, r4, #1
 80033a4:	7ff3      	ldrb	r3, [r6, #31]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d904      	bls.n	80033b4 <HAL_ADC_Init+0x9c>
 80033aa:	21a2      	movs	r1, #162	; 0xa2
 80033ac:	4848      	ldr	r0, [pc, #288]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 80033ae:	31ff      	adds	r1, #255	; 0xff
 80033b0:	f003 feb3 	bl	800711a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80033b4:	1ca3      	adds	r3, r4, #2
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	7fdb      	ldrb	r3, [r3, #31]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d904      	bls.n	80033c8 <HAL_ADC_Init+0xb0>
 80033be:	21d1      	movs	r1, #209	; 0xd1
 80033c0:	4843      	ldr	r0, [pc, #268]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 80033c2:	0049      	lsls	r1, r1, #1
 80033c4:	f003 fea9 	bl	800711a <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_ADC_Init+0x1c0>)
 80033ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80033cc:	421a      	tst	r2, r3
 80033ce:	d004      	beq.n	80033da <HAL_ADC_Init+0xc2>
 80033d0:	21a4      	movs	r1, #164	; 0xa4
 80033d2:	483f      	ldr	r0, [pc, #252]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 80033d4:	31ff      	adds	r1, #255	; 0xff
 80033d6:	f003 fea0 	bl	800711a <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80033da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033dc:	2240      	movs	r2, #64	; 0x40
 80033de:	0019      	movs	r1, r3
 80033e0:	0018      	movs	r0, r3
 80033e2:	4391      	bics	r1, r2
 80033e4:	3280      	adds	r2, #128	; 0x80
 80033e6:	4390      	bics	r0, r2
 80033e8:	d00f      	beq.n	800340a <HAL_ADC_Init+0xf2>
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	0052      	lsls	r2, r2, #1
 80033ee:	4291      	cmp	r1, r2
 80033f0:	d00b      	beq.n	800340a <HAL_ADC_Init+0xf2>
 80033f2:	3280      	adds	r2, #128	; 0x80
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d008      	beq.n	800340a <HAL_ADC_Init+0xf2>
 80033f8:	3bc1      	subs	r3, #193	; 0xc1
 80033fa:	3bff      	subs	r3, #255	; 0xff
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d904      	bls.n	800340a <HAL_ADC_Init+0xf2>
 8003400:	21d2      	movs	r1, #210	; 0xd2
 8003402:	4833      	ldr	r0, [pc, #204]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 8003404:	0049      	lsls	r1, r1, #1
 8003406:	f003 fe88 	bl	800711a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800340a:	0023      	movs	r3, r4
 800340c:	332c      	adds	r3, #44	; 0x2c
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d904      	bls.n	800341e <HAL_ADC_Init+0x106>
 8003414:	21a6      	movs	r1, #166	; 0xa6
 8003416:	482e      	ldr	r0, [pc, #184]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 8003418:	31ff      	adds	r1, #255	; 0xff
 800341a:	f003 fe7e 	bl	800711a <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800341e:	2204      	movs	r2, #4
 8003420:	6963      	ldr	r3, [r4, #20]
 8003422:	3b04      	subs	r3, #4
 8003424:	4393      	bics	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_ADC_Init+0x11a>
 8003428:	21d3      	movs	r1, #211	; 0xd3
 800342a:	4829      	ldr	r0, [pc, #164]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800342c:	0049      	lsls	r1, r1, #1
 800342e:	f003 fe74 	bl	800711a <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8003432:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_ADC_Init+0x1c4>)
 8003434:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003436:	421a      	tst	r2, r3
 8003438:	d004      	beq.n	8003444 <HAL_ADC_Init+0x12c>
 800343a:	21a8      	movs	r1, #168	; 0xa8
 800343c:	4824      	ldr	r0, [pc, #144]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800343e:	31ff      	adds	r1, #255	; 0xff
 8003440:	f003 fe6b 	bl	800711a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8003444:	69a3      	ldr	r3, [r4, #24]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d904      	bls.n	8003454 <HAL_ADC_Init+0x13c>
 800344a:	21d4      	movs	r1, #212	; 0xd4
 800344c:	4820      	ldr	r0, [pc, #128]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800344e:	0049      	lsls	r1, r1, #1
 8003450:	f003 fe63 	bl	800711a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 8003454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003456:	2b01      	cmp	r3, #1
 8003458:	d904      	bls.n	8003464 <HAL_ADC_Init+0x14c>
 800345a:	21aa      	movs	r1, #170	; 0xaa
 800345c:	481c      	ldr	r0, [pc, #112]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800345e:	31ff      	adds	r1, #255	; 0xff
 8003460:	f003 fe5b 	bl	800711a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8003464:	69e3      	ldr	r3, [r4, #28]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d904      	bls.n	8003474 <HAL_ADC_Init+0x15c>
 800346a:	21d5      	movs	r1, #213	; 0xd5
 800346c:	4818      	ldr	r0, [pc, #96]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800346e:	0049      	lsls	r1, r1, #1
 8003470:	f003 fe53 	bl	800711a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 8003474:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003476:	2b07      	cmp	r3, #7
 8003478:	d904      	bls.n	8003484 <HAL_ADC_Init+0x16c>
 800347a:	21ac      	movs	r1, #172	; 0xac
 800347c:	4814      	ldr	r0, [pc, #80]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800347e:	31ff      	adds	r1, #255	; 0xff
 8003480:	f003 fe4b 	bl	800711a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8003484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d904      	bls.n	8003494 <HAL_ADC_Init+0x17c>
 800348a:	21d6      	movs	r1, #214	; 0xd6
 800348c:	4810      	ldr	r0, [pc, #64]	; (80034d0 <HAL_ADC_Init+0x1b8>)
 800348e:	0049      	lsls	r1, r1, #1
 8003490:	f003 fe43 	bl	800711a <assert_failed>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003494:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_ADC_Init+0x190>
    hadc->Lock = HAL_UNLOCKED;
 800349a:	0022      	movs	r2, r4
 800349c:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800349e:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 80034a0:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80034a2:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80034a4:	f004 f968 	bl	8007778 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80034a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034aa:	06db      	lsls	r3, r3, #27
 80034ac:	d404      	bmi.n	80034b8 <HAL_ADC_Init+0x1a0>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80034ae:	2304      	movs	r3, #4
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	6891      	ldr	r1, [r2, #8]
 80034b4:	4019      	ands	r1, r3
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80034b6:	d013      	beq.n	80034e0 <HAL_ADC_Init+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b8:	2310      	movs	r3, #16
 80034ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80034bc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034be:	4313      	orrs	r3, r2
 80034c0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80034c2:	2300      	movs	r3, #0
 80034c4:	3450      	adds	r4, #80	; 0x50
 80034c6:	7023      	strb	r3, [r4, #0]
}
 80034c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	40012400 	.word	0x40012400
 80034d0:	0800a2ec 	.word	0x0800a2ec
 80034d4:	fff3ffff 	.word	0xfff3ffff
 80034d8:	fffff3ff 	.word	0xfffff3ff
 80034dc:	ffffefff 	.word	0xffffefff
  ADC_STATE_CLR_SET(hadc->State,
 80034e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034e2:	486a      	ldr	r0, [pc, #424]	; (800368c <HAL_ADC_Init+0x374>)
 80034e4:	4018      	ands	r0, r3
 80034e6:	2302      	movs	r3, #2
 80034e8:	4303      	orrs	r3, r0
 80034ea:	6563      	str	r3, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034ec:	2303      	movs	r3, #3
 80034ee:	6890      	ldr	r0, [r2, #8]
 80034f0:	4018      	ands	r0, r3
 80034f2:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_ADC_Init+0x378>)
 80034f4:	2801      	cmp	r0, #1
 80034f6:	d102      	bne.n	80034fe <HAL_ADC_Init+0x1e6>
 80034f8:	6817      	ldr	r7, [r2, #0]
 80034fa:	4207      	tst	r7, r0
 80034fc:	d11a      	bne.n	8003534 <HAL_ADC_Init+0x21c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80034fe:	2580      	movs	r5, #128	; 0x80
 8003500:	6867      	ldr	r7, [r4, #4]
 8003502:	05ed      	lsls	r5, r5, #23
 8003504:	0078      	lsls	r0, r7, #1
 8003506:	0840      	lsrs	r0, r0, #1
 8003508:	42a8      	cmp	r0, r5
 800350a:	d004      	beq.n	8003516 <HAL_ADC_Init+0x1fe>
 800350c:	2080      	movs	r0, #128	; 0x80
 800350e:	0600      	lsls	r0, r0, #24
 8003510:	4287      	cmp	r7, r0
 8003512:	d000      	beq.n	8003516 <HAL_ADC_Init+0x1fe>
 8003514:	e09e      	b.n	8003654 <HAL_ADC_Init+0x33c>
 8003516:	6910      	ldr	r0, [r2, #16]
 8003518:	0080      	lsls	r0, r0, #2
 800351a:	0880      	lsrs	r0, r0, #2
 800351c:	6110      	str	r0, [r2, #16]
 800351e:	6910      	ldr	r0, [r2, #16]
 8003520:	4307      	orrs	r7, r0
 8003522:	6117      	str	r7, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003524:	2718      	movs	r7, #24
 8003526:	68d0      	ldr	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003528:	68a5      	ldr	r5, [r4, #8]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800352a:	43b8      	bics	r0, r7
 800352c:	60d0      	str	r0, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800352e:	68d0      	ldr	r0, [r2, #12]
 8003530:	4328      	orrs	r0, r5
 8003532:	60d0      	str	r0, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4857      	ldr	r0, [pc, #348]	; (8003694 <HAL_ADC_Init+0x37c>)
 8003538:	4002      	ands	r2, r0
 800353a:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800353c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	0652      	lsls	r2, r2, #25
 8003542:	4302      	orrs	r2, r0
 8003544:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	055b      	lsls	r3, r3, #21
 800354c:	6890      	ldr	r0, [r2, #8]
 800354e:	4218      	tst	r0, r3
 8003550:	d102      	bne.n	8003558 <HAL_ADC_Init+0x240>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003552:	6890      	ldr	r0, [r2, #8]
 8003554:	4303      	orrs	r3, r0
 8003556:	6093      	str	r3, [r2, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003558:	68d3      	ldr	r3, [r2, #12]
 800355a:	484f      	ldr	r0, [pc, #316]	; (8003698 <HAL_ADC_Init+0x380>)
 800355c:	4003      	ands	r3, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800355e:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003560:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003562:	68d7      	ldr	r7, [r2, #12]
 8003564:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003566:	2802      	cmp	r0, #2
 8003568:	d100      	bne.n	800356c <HAL_ADC_Init+0x254>
 800356a:	2104      	movs	r1, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800356c:	6b25      	ldr	r5, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800356e:	7ff0      	ldrb	r0, [r6, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003570:	432b      	orrs	r3, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003572:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003574:	433b      	orrs	r3, r7
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003576:	03ae      	lsls	r6, r5, #14
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003578:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800357a:	4333      	orrs	r3, r6
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800357c:	03ee      	lsls	r6, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800357e:	4333      	orrs	r3, r6
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003580:	0346      	lsls	r6, r0, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003582:	4333      	orrs	r3, r6
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003584:	0026      	movs	r6, r4
 8003586:	362c      	adds	r6, #44	; 0x2c
 8003588:	7836      	ldrb	r6, [r6, #0]
 800358a:	0076      	lsls	r6, r6, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800358c:	4333      	orrs	r3, r6
 800358e:	430b      	orrs	r3, r1
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003590:	21c2      	movs	r1, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003592:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003596:	31ff      	adds	r1, #255	; 0xff
 8003598:	428b      	cmp	r3, r1
 800359a:	d004      	beq.n	80035a6 <HAL_ADC_Init+0x28e>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800359c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800359e:	68d1      	ldr	r1, [r2, #12]
 80035a0:	432b      	orrs	r3, r5
 80035a2:	430b      	orrs	r3, r1
 80035a4:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035a6:	1ca3      	adds	r3, r4, #2
 80035a8:	7fdb      	ldrb	r3, [r3, #31]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d106      	bne.n	80035bc <HAL_ADC_Init+0x2a4>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d15c      	bne.n	800366c <HAL_ADC_Init+0x354>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	68d1      	ldr	r1, [r2, #12]
 80035b6:	025b      	lsls	r3, r3, #9
 80035b8:	430b      	orrs	r3, r1
 80035ba:	60d3      	str	r3, [r2, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80035bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d15c      	bne.n	800367c <HAL_ADC_Init+0x364>
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 80035c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80035c4:	291c      	cmp	r1, #28
 80035c6:	d805      	bhi.n	80035d4 <HAL_ADC_Init+0x2bc>
 80035c8:	4a34      	ldr	r2, [pc, #208]	; (800369c <HAL_ADC_Init+0x384>)
 80035ca:	40ca      	lsrs	r2, r1
 80035cc:	4393      	bics	r3, r2
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_ADC_Init+0x2c6>
 80035d4:	2193      	movs	r1, #147	; 0x93
 80035d6:	4832      	ldr	r0, [pc, #200]	; (80036a0 <HAL_ADC_Init+0x388>)
 80035d8:	0089      	lsls	r1, r1, #2
 80035da:	f003 fd9e 	bl	800711a <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 80035de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80035e0:	2260      	movs	r2, #96	; 0x60
 80035e2:	0019      	movs	r1, r3
 80035e4:	4391      	bics	r1, r2
 80035e6:	d009      	beq.n	80035fc <HAL_ADC_Init+0x2e4>
 80035e8:	2980      	cmp	r1, #128	; 0x80
 80035ea:	d007      	beq.n	80035fc <HAL_ADC_Init+0x2e4>
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	0052      	lsls	r2, r2, #1
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <HAL_ADC_Init+0x2e4>
 80035f4:	492b      	ldr	r1, [pc, #172]	; (80036a4 <HAL_ADC_Init+0x38c>)
 80035f6:	482a      	ldr	r0, [pc, #168]	; (80036a0 <HAL_ADC_Init+0x388>)
 80035f8:	f003 fd8f 	bl	800711a <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_ADC_Init+0x390>)
 80035fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003600:	421a      	tst	r2, r3
 8003602:	d003      	beq.n	800360c <HAL_ADC_Init+0x2f4>
 8003604:	4929      	ldr	r1, [pc, #164]	; (80036ac <HAL_ADC_Init+0x394>)
 8003606:	4826      	ldr	r0, [pc, #152]	; (80036a0 <HAL_ADC_Init+0x388>)
 8003608:	f003 fd87 	bl	800711a <assert_failed>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	4928      	ldr	r1, [pc, #160]	; (80036b0 <HAL_ADC_Init+0x398>)
 8003610:	6913      	ldr	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003612:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003614:	400b      	ands	r3, r1
 8003616:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800361a:	6911      	ldr	r1, [r2, #16]
 800361c:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 800361e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003620:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003622:	430b      	orrs	r3, r1
 8003624:	6113      	str	r3, [r2, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003626:	2301      	movs	r3, #1
 8003628:	6911      	ldr	r1, [r2, #16]
 800362a:	430b      	orrs	r3, r1
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800362c:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800362e:	2107      	movs	r1, #7
 8003630:	6823      	ldr	r3, [r4, #0]
  ADC_CLEAR_ERRORCODE(hadc);
 8003632:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	438a      	bics	r2, r1
 8003638:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800363e:	430a      	orrs	r2, r1
 8003640:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8003642:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8003644:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8003646:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003648:	4393      	bics	r3, r2
 800364a:	001a      	movs	r2, r3
 800364c:	2301      	movs	r3, #1
 800364e:	4313      	orrs	r3, r2
 8003650:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8003652:	e739      	b.n	80034c8 <HAL_ADC_Init+0x1b0>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003654:	6910      	ldr	r0, [r2, #16]
 8003656:	4d17      	ldr	r5, [pc, #92]	; (80036b4 <HAL_ADC_Init+0x39c>)
 8003658:	0080      	lsls	r0, r0, #2
 800365a:	0880      	lsrs	r0, r0, #2
 800365c:	6110      	str	r0, [r2, #16]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	4028      	ands	r0, r5
 8003662:	6018      	str	r0, [r3, #0]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	4307      	orrs	r7, r0
 8003668:	601f      	str	r7, [r3, #0]
 800366a:	e75b      	b.n	8003524 <HAL_ADC_Init+0x20c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366c:	2120      	movs	r1, #32
 800366e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003670:	4301      	orrs	r1, r0
 8003672:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003674:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003676:	430b      	orrs	r3, r1
 8003678:	65a3      	str	r3, [r4, #88]	; 0x58
 800367a:	e79f      	b.n	80035bc <HAL_ADC_Init+0x2a4>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800367c:	2101      	movs	r1, #1
 800367e:	6913      	ldr	r3, [r2, #16]
 8003680:	420b      	tst	r3, r1
 8003682:	d0d4      	beq.n	800362e <HAL_ADC_Init+0x316>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003684:	6913      	ldr	r3, [r2, #16]
 8003686:	438b      	bics	r3, r1
 8003688:	e7d0      	b.n	800362c <HAL_ADC_Init+0x314>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	fffffefd 	.word	0xfffffefd
 8003690:	40012708 	.word	0x40012708
 8003694:	fdffffff 	.word	0xfdffffff
 8003698:	fffe0219 	.word	0xfffe0219
 800369c:	11111111 	.word	0x11111111
 80036a0:	0800a2ec 	.word	0x0800a2ec
 80036a4:	0000024d 	.word	0x0000024d
 80036a8:	fffffdff 	.word	0xfffffdff
 80036ac:	0000024e 	.word	0x0000024e
 80036b0:	fffffc03 	.word	0xfffffc03
 80036b4:	ffc3ffff 	.word	0xffc3ffff

080036b8 <HAL_ADC_Start_DMA>:
{
 80036b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_ADC_Start_DMA+0x94>)
{
 80036bc:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80036be:	6802      	ldr	r2, [r0, #0]
{
 80036c0:	0004      	movs	r4, r0
 80036c2:	000f      	movs	r7, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d003      	beq.n	80036d0 <HAL_ADC_Start_DMA+0x18>
 80036c8:	4921      	ldr	r1, [pc, #132]	; (8003750 <HAL_ADC_Start_DMA+0x98>)
 80036ca:	4822      	ldr	r0, [pc, #136]	; (8003754 <HAL_ADC_Start_DMA+0x9c>)
 80036cc:	f003 fd25 	bl	800711a <assert_failed>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036d0:	6823      	ldr	r3, [r4, #0]
    tmp_hal_status = HAL_BUSY;
 80036d2:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	075b      	lsls	r3, r3, #29
 80036d8:	d430      	bmi.n	800373c <HAL_ADC_Start_DMA+0x84>
    __HAL_LOCK(hadc);
 80036da:	0026      	movs	r6, r4
 80036dc:	3650      	adds	r6, #80	; 0x50
 80036de:	7833      	ldrb	r3, [r6, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d02b      	beq.n	800373c <HAL_ADC_Start_DMA+0x84>
 80036e4:	2301      	movs	r3, #1
 80036e6:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80036e8:	69e3      	ldr	r3, [r4, #28]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d127      	bne.n	800373e <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State,
 80036ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_ADC_Start_DMA+0xa0>)
      ADC_CLEAR_ERRORCODE(hadc);
 80036f2:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80036f4:	401a      	ands	r2, r3
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4313      	orrs	r3, r2
 80036fc:	6563      	str	r3, [r4, #84]	; 0x54
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036fe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003702:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8003704:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003706:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800370a:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800370c:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_ADC_Start_DMA+0xac>)
 8003710:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003712:	231c      	movs	r3, #28
 8003714:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003716:	684a      	ldr	r2, [r1, #4]
 8003718:	3b0c      	subs	r3, #12
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800371e:	2301      	movs	r3, #1
 8003720:	68ca      	ldr	r2, [r1, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003726:	003a      	movs	r2, r7
 8003728:	3140      	adds	r1, #64	; 0x40
 800372a:	9b01      	ldr	r3, [sp, #4]
 800372c:	f000 faf8 	bl	8003d20 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003730:	2304      	movs	r3, #4
 8003732:	0028      	movs	r0, r5
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	6891      	ldr	r1, [r2, #8]
 8003738:	430b      	orrs	r3, r1
 800373a:	6093      	str	r3, [r2, #8]
}
 800373c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800373e:	0020      	movs	r0, r4
 8003740:	f7ff fdb2 	bl	80032a8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003744:	2800      	cmp	r0, #0
 8003746:	d1f9      	bne.n	800373c <HAL_ADC_Start_DMA+0x84>
 8003748:	e7d1      	b.n	80036ee <HAL_ADC_Start_DMA+0x36>
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	40012400 	.word	0x40012400
 8003750:	000005d9 	.word	0x000005d9
 8003754:	0800a2ec 	.word	0x0800a2ec
 8003758:	fffff0fe 	.word	0xfffff0fe
 800375c:	0800376d 	.word	0x0800376d
 8003760:	080037df 	.word	0x080037df
 8003764:	080037ed 	.word	0x080037ed

08003768 <HAL_ADC_ConvCpltCallback>:
 8003768:	4770      	bx	lr
	...

0800376c <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800376c:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800376e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8003770:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003772:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003774:	4211      	tst	r1, r2
 8003776:	d12b      	bne.n	80037d0 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800377a:	32b1      	adds	r2, #177	; 0xb1
 800377c:	32ff      	adds	r2, #255	; 0xff
 800377e:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003780:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	0109      	lsls	r1, r1, #4
 8003788:	68d0      	ldr	r0, [r2, #12]
 800378a:	4208      	tst	r0, r1
 800378c:	d113      	bne.n	80037b6 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800378e:	1c59      	adds	r1, r3, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003790:	7fc9      	ldrb	r1, [r1, #31]
 8003792:	2900      	cmp	r1, #0
 8003794:	d10f      	bne.n	80037b6 <ADC_DMAConvCplt+0x4a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003796:	6811      	ldr	r1, [r2, #0]
 8003798:	0709      	lsls	r1, r1, #28
 800379a:	d50c      	bpl.n	80037b6 <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800379c:	6891      	ldr	r1, [r2, #8]
 800379e:	0749      	lsls	r1, r1, #29
 80037a0:	d40d      	bmi.n	80037be <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037a2:	200c      	movs	r0, #12
 80037a4:	6851      	ldr	r1, [r2, #4]
 80037a6:	4381      	bics	r1, r0
 80037a8:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80037aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ac:	490a      	ldr	r1, [pc, #40]	; (80037d8 <ADC_DMAConvCplt+0x6c>)
 80037ae:	4011      	ands	r1, r2
 80037b0:	2201      	movs	r2, #1
 80037b2:	430a      	orrs	r2, r1
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7ff ffd6 	bl	8003768 <HAL_ADC_ConvCpltCallback>
}
 80037bc:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037be:	2220      	movs	r2, #32
 80037c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037c2:	430a      	orrs	r2, r1
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c6:	2201      	movs	r2, #1
 80037c8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80037ca:	430a      	orrs	r2, r1
 80037cc:	659a      	str	r2, [r3, #88]	; 0x58
 80037ce:	e7f2      	b.n	80037b6 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	4798      	blx	r3
}
 80037d6:	e7f1      	b.n	80037bc <ADC_DMAConvCplt+0x50>
 80037d8:	fffffefe 	.word	0xfffffefe

080037dc <HAL_ADC_ConvHalfCpltCallback>:
 80037dc:	4770      	bx	lr

080037de <ADC_DMAHalfConvCplt>:
{
 80037de:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80037e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80037e2:	f7ff fffb 	bl	80037dc <HAL_ADC_ConvHalfCpltCallback>
}
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <HAL_ADC_LevelOutOfWindowCallback>:
 80037e8:	4770      	bx	lr

080037ea <HAL_ADC_ErrorCallback>:
}
 80037ea:	4770      	bx	lr

080037ec <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037ec:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80037f0:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037f2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80037f4:	4313      	orrs	r3, r2
 80037f6:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037f8:	2304      	movs	r3, #4
 80037fa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80037fc:	4313      	orrs	r3, r2
 80037fe:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 8003800:	f7ff fff3 	bl	80037ea <HAL_ADC_ErrorCallback>
}
 8003804:	bd10      	pop	{r4, pc}
	...

08003808 <HAL_ADC_IRQHandler>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003808:	4b44      	ldr	r3, [pc, #272]	; (800391c <HAL_ADC_IRQHandler+0x114>)
 800380a:	6802      	ldr	r2, [r0, #0]
{
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	0004      	movs	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003810:	429a      	cmp	r2, r3
 8003812:	d003      	beq.n	800381c <HAL_ADC_IRQHandler+0x14>
 8003814:	4942      	ldr	r1, [pc, #264]	; (8003920 <HAL_ADC_IRQHandler+0x118>)
 8003816:	4843      	ldr	r0, [pc, #268]	; (8003924 <HAL_ADC_IRQHandler+0x11c>)
 8003818:	f003 fc7f 	bl	800711a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800381c:	1c65      	adds	r5, r4, #1
 800381e:	7feb      	ldrb	r3, [r5, #31]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d903      	bls.n	800382c <HAL_ADC_IRQHandler+0x24>
 8003824:	4940      	ldr	r1, [pc, #256]	; (8003928 <HAL_ADC_IRQHandler+0x120>)
 8003826:	483f      	ldr	r0, [pc, #252]	; (8003924 <HAL_ADC_IRQHandler+0x11c>)
 8003828:	f003 fc77 	bl	800711a <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800382c:	2204      	movs	r2, #4
 800382e:	6963      	ldr	r3, [r4, #20]
 8003830:	3b04      	subs	r3, #4
 8003832:	4393      	bics	r3, r2
 8003834:	d003      	beq.n	800383e <HAL_ADC_IRQHandler+0x36>
 8003836:	493d      	ldr	r1, [pc, #244]	; (800392c <HAL_ADC_IRQHandler+0x124>)
 8003838:	483a      	ldr	r0, [pc, #232]	; (8003924 <HAL_ADC_IRQHandler+0x11c>)
 800383a:	f003 fc6e 	bl	800711a <assert_failed>
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800383e:	2204      	movs	r2, #4
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	4211      	tst	r1, r2
 8003846:	d002      	beq.n	800384e <HAL_ADC_IRQHandler+0x46>
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	4211      	tst	r1, r2
 800384c:	d106      	bne.n	800385c <HAL_ADC_IRQHandler+0x54>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800384e:	2208      	movs	r2, #8
 8003850:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003852:	4211      	tst	r1, r2
 8003854:	d02b      	beq.n	80038ae <HAL_ADC_IRQHandler+0xa6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	4211      	tst	r1, r2
 800385a:	d028      	beq.n	80038ae <HAL_ADC_IRQHandler+0xa6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800385c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800385e:	06d2      	lsls	r2, r2, #27
 8003860:	d404      	bmi.n	800386c <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	430a      	orrs	r2, r1
 800386a:	6562      	str	r2, [r4, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800386c:	22c0      	movs	r2, #192	; 0xc0
 800386e:	68d9      	ldr	r1, [r3, #12]
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	4211      	tst	r1, r2
 8003874:	d112      	bne.n	800389c <HAL_ADC_IRQHandler+0x94>
 8003876:	7fea      	ldrb	r2, [r5, #31]
 8003878:	2a00      	cmp	r2, #0
 800387a:	d10f      	bne.n	800389c <HAL_ADC_IRQHandler+0x94>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	0712      	lsls	r2, r2, #28
 8003880:	d50c      	bpl.n	800389c <HAL_ADC_IRQHandler+0x94>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	0752      	lsls	r2, r2, #29
 8003886:	d43f      	bmi.n	8003908 <HAL_ADC_IRQHandler+0x100>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003888:	210c      	movs	r1, #12
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	438a      	bics	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003890:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003892:	4a27      	ldr	r2, [pc, #156]	; (8003930 <HAL_ADC_IRQHandler+0x128>)
 8003894:	401a      	ands	r2, r3
 8003896:	2301      	movs	r3, #1
 8003898:	4313      	orrs	r3, r2
 800389a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800389c:	0020      	movs	r0, r4
 800389e:	f7ff ff63 	bl	8003768 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80038a2:	69a3      	ldr	r3, [r4, #24]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d002      	beq.n	80038ae <HAL_ADC_IRQHandler+0xa6>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038a8:	220c      	movs	r2, #12
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80038ae:	2580      	movs	r5, #128	; 0x80
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	422a      	tst	r2, r5
 80038b6:	d00c      	beq.n	80038d2 <HAL_ADC_IRQHandler+0xca>
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	422b      	tst	r3, r5
 80038bc:	d009      	beq.n	80038d2 <HAL_ADC_IRQHandler+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038c2:	025b      	lsls	r3, r3, #9
 80038c4:	4313      	orrs	r3, r2
 80038c6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038c8:	0020      	movs	r0, r4
 80038ca:	f7ff ff8d 	bl	80037e8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80038d2:	2210      	movs	r2, #16
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	4211      	tst	r1, r2
 80038da:	d014      	beq.n	8003906 <HAL_ADC_IRQHandler+0xfe>
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	4211      	tst	r1, r2
 80038e0:	d011      	beq.n	8003906 <HAL_ADC_IRQHandler+0xfe>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80038e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80038e4:	2a00      	cmp	r2, #0
 80038e6:	d002      	beq.n	80038ee <HAL_ADC_IRQHandler+0xe6>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80038e8:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80038ea:	07d2      	lsls	r2, r2, #31
 80038ec:	d508      	bpl.n	8003900 <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038ee:	2202      	movs	r2, #2
 80038f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80038f2:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038f4:	430a      	orrs	r2, r1
 80038f6:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038f8:	2210      	movs	r2, #16
 80038fa:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80038fc:	f7ff ff75 	bl	80037ea <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003900:	2210      	movs	r2, #16
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003908:	2320      	movs	r3, #32
 800390a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800390c:	4313      	orrs	r3, r2
 800390e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003910:	2301      	movs	r3, #1
 8003912:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003914:	4313      	orrs	r3, r2
 8003916:	65a3      	str	r3, [r4, #88]	; 0x58
 8003918:	e7c0      	b.n	800389c <HAL_ADC_IRQHandler+0x94>
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	40012400 	.word	0x40012400
 8003920:	00000694 	.word	0x00000694
 8003924:	0800a2ec 	.word	0x0800a2ec
 8003928:	00000695 	.word	0x00000695
 800392c:	00000696 	.word	0x00000696
 8003930:	fffffefe 	.word	0xfffffefe

08003934 <HAL_ADC_ConfigChannel>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003934:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <HAL_ADC_ConfigChannel+0x130>)
 8003936:	6802      	ldr	r2, [r0, #0]
{
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	0005      	movs	r5, r0
 800393c:	000c      	movs	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800393e:	429a      	cmp	r2, r3
 8003940:	d003      	beq.n	800394a <HAL_ADC_ConfigChannel+0x16>
 8003942:	4949      	ldr	r1, [pc, #292]	; (8003a68 <HAL_ADC_ConfigChannel+0x134>)
 8003944:	4849      	ldr	r0, [pc, #292]	; (8003a6c <HAL_ADC_ConfigChannel+0x138>)
 8003946:	f003 fbe8 	bl	800711a <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d036      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003950:	4a47      	ldr	r2, [pc, #284]	; (8003a70 <HAL_ADC_ConfigChannel+0x13c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d033      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003956:	4a47      	ldr	r2, [pc, #284]	; (8003a74 <HAL_ADC_ConfigChannel+0x140>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d030      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 800395c:	4a46      	ldr	r2, [pc, #280]	; (8003a78 <HAL_ADC_ConfigChannel+0x144>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d02d      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003962:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <HAL_ADC_ConfigChannel+0x148>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d02a      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003968:	4a45      	ldr	r2, [pc, #276]	; (8003a80 <HAL_ADC_ConfigChannel+0x14c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d027      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 800396e:	4a45      	ldr	r2, [pc, #276]	; (8003a84 <HAL_ADC_ConfigChannel+0x150>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d024      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003974:	4a44      	ldr	r2, [pc, #272]	; (8003a88 <HAL_ADC_ConfigChannel+0x154>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d021      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 800397a:	4a44      	ldr	r2, [pc, #272]	; (8003a8c <HAL_ADC_ConfigChannel+0x158>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d01e      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003980:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_ADC_ConfigChannel+0x15c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01b      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003986:	4a43      	ldr	r2, [pc, #268]	; (8003a94 <HAL_ADC_ConfigChannel+0x160>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d018      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 800398c:	4a42      	ldr	r2, [pc, #264]	; (8003a98 <HAL_ADC_ConfigChannel+0x164>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d015      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003992:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <HAL_ADC_ConfigChannel+0x168>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d012      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 8003998:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <HAL_ADC_ConfigChannel+0x16c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00f      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 800399e:	4a41      	ldr	r2, [pc, #260]	; (8003aa4 <HAL_ADC_ConfigChannel+0x170>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00c      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 80039a4:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <HAL_ADC_ConfigChannel+0x174>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 80039aa:	4a40      	ldr	r2, [pc, #256]	; (8003aac <HAL_ADC_ConfigChannel+0x178>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d006      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 80039b0:	4a3f      	ldr	r2, [pc, #252]	; (8003ab0 <HAL_ADC_ConfigChannel+0x17c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <HAL_ADC_ConfigChannel+0x8a>
 80039b6:	493f      	ldr	r1, [pc, #252]	; (8003ab4 <HAL_ADC_ConfigChannel+0x180>)
 80039b8:	482c      	ldr	r0, [pc, #176]	; (8003a6c <HAL_ADC_ConfigChannel+0x138>)
 80039ba:	f003 fbae 	bl	800711a <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 80039be:	6863      	ldr	r3, [r4, #4]
 80039c0:	4a3d      	ldr	r2, [pc, #244]	; (8003ab8 <HAL_ADC_ConfigChannel+0x184>)
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d904      	bls.n	80039d2 <HAL_ADC_ConfigChannel+0x9e>
 80039c8:	21f0      	movs	r1, #240	; 0xf0
 80039ca:	4828      	ldr	r0, [pc, #160]	; (8003a6c <HAL_ADC_ConfigChannel+0x138>)
 80039cc:	00c9      	lsls	r1, r1, #3
 80039ce:	f003 fba4 	bl	800711a <assert_failed>
  __HAL_LOCK(hadc);
 80039d2:	002e      	movs	r6, r5
 80039d4:	3650      	adds	r6, #80	; 0x50
 80039d6:	7833      	ldrb	r3, [r6, #0]
 80039d8:	2002      	movs	r0, #2
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d00b      	beq.n	80039f6 <HAL_ADC_ConfigChannel+0xc2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80039de:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 80039e0:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80039e2:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 80039e4:	7030      	strb	r0, [r6, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80039e6:	075b      	lsls	r3, r3, #29
 80039e8:	d506      	bpl.n	80039f8 <HAL_ADC_ConfigChannel+0xc4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ea:	2320      	movs	r3, #32
 80039ec:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80039ee:	4313      	orrs	r3, r2
 80039f0:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80039f2:	2300      	movs	r3, #0
 80039f4:	7033      	strb	r3, [r6, #0]
}
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 80039fa:	4930      	ldr	r1, [pc, #192]	; (8003abc <HAL_ADC_ConfigChannel+0x188>)
 80039fc:	6865      	ldr	r5, [r4, #4]
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	02c0      	lsls	r0, r0, #11
 8003a02:	428d      	cmp	r5, r1
 8003a04:	d01b      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x10a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003a06:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8003a08:	0359      	lsls	r1, r3, #13
 8003a0a:	0b49      	lsrs	r1, r1, #13
 8003a0c:	4329      	orrs	r1, r5
 8003a0e:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003a10:	4203      	tst	r3, r0
 8003a12:	d008      	beq.n	8003a26 <HAL_ADC_ConfigChannel+0xf2>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <HAL_ADC_ConfigChannel+0x18c>)
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003a1c:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003a22:	f7ff fc2b 	bl	800327c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	039b      	lsls	r3, r3, #14
 8003a2a:	d505      	bpl.n	8003a38 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	4a24      	ldr	r2, [pc, #144]	; (8003ac0 <HAL_ADC_ConfigChannel+0x18c>)
 8003a30:	03db      	lsls	r3, r3, #15
 8003a32:	6811      	ldr	r1, [r2, #0]
 8003a34:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003a36:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003a38:	2000      	movs	r0, #0
 8003a3a:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8003a3c:	e7db      	b.n	80039f6 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003a3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a40:	035c      	lsls	r4, r3, #13
 8003a42:	0b64      	lsrs	r4, r4, #13
 8003a44:	43a1      	bics	r1, r4
 8003a46:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003a48:	4203      	tst	r3, r0
 8003a4a:	d004      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x122>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003a4c:	491c      	ldr	r1, [pc, #112]	; (8003ac0 <HAL_ADC_ConfigChannel+0x18c>)
 8003a4e:	481d      	ldr	r0, [pc, #116]	; (8003ac4 <HAL_ADC_ConfigChannel+0x190>)
 8003a50:	680a      	ldr	r2, [r1, #0]
 8003a52:	4002      	ands	r2, r0
 8003a54:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003a56:	039b      	lsls	r3, r3, #14
 8003a58:	d5ee      	bpl.n	8003a38 <HAL_ADC_ConfigChannel+0x104>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003a5a:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <HAL_ADC_ConfigChannel+0x18c>)
 8003a5c:	491a      	ldr	r1, [pc, #104]	; (8003ac8 <HAL_ADC_ConfigChannel+0x194>)
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	400b      	ands	r3, r1
 8003a62:	e7e8      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x102>
 8003a64:	40012400 	.word	0x40012400
 8003a68:	0000077e 	.word	0x0000077e
 8003a6c:	0800a2ec 	.word	0x0800a2ec
 8003a70:	04000002 	.word	0x04000002
 8003a74:	08000004 	.word	0x08000004
 8003a78:	0c000008 	.word	0x0c000008
 8003a7c:	10000010 	.word	0x10000010
 8003a80:	14000020 	.word	0x14000020
 8003a84:	18000040 	.word	0x18000040
 8003a88:	1c000080 	.word	0x1c000080
 8003a8c:	20000100 	.word	0x20000100
 8003a90:	24000200 	.word	0x24000200
 8003a94:	28000400 	.word	0x28000400
 8003a98:	2c000800 	.word	0x2c000800
 8003a9c:	30001000 	.word	0x30001000
 8003aa0:	34002000 	.word	0x34002000
 8003aa4:	38004000 	.word	0x38004000
 8003aa8:	3c008000 	.word	0x3c008000
 8003aac:	48040000 	.word	0x48040000
 8003ab0:	44020000 	.word	0x44020000
 8003ab4:	0000077f 	.word	0x0000077f
 8003ab8:	fffff000 	.word	0xfffff000
 8003abc:	00001001 	.word	0x00001001
 8003ac0:	40012708 	.word	0x40012708
 8003ac4:	ff7fffff 	.word	0xff7fffff
 8003ac8:	ffbfffff 	.word	0xffbfffff

08003acc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	0004      	movs	r4, r0
 8003ad0:	000d      	movs	r5, r1
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003ad2:	2903      	cmp	r1, #3
 8003ad4:	d903      	bls.n	8003ade <HAL_NVIC_SetPriority+0x12>
 8003ad6:	2187      	movs	r1, #135	; 0x87
 8003ad8:	4816      	ldr	r0, [pc, #88]	; (8003b34 <HAL_NVIC_SetPriority+0x68>)
 8003ada:	f003 fb1e 	bl	800711a <assert_failed>
 8003ade:	01a9      	lsls	r1, r5, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	da14      	bge.n	8003b0e <HAL_NVIC_SetPriority+0x42>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	b2e4      	uxtb	r4, r4
 8003ae8:	4023      	ands	r3, r4
 8003aea:	3b08      	subs	r3, #8
 8003aec:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <HAL_NVIC_SetPriority+0x6c>)
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	2203      	movs	r2, #3
 8003af6:	4014      	ands	r4, r2
 8003af8:	4094      	lsls	r4, r2
 8003afa:	32fc      	adds	r2, #252	; 0xfc
 8003afc:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003afe:	400a      	ands	r2, r1
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b00:	40a5      	lsls	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b02:	40a2      	lsls	r2, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b04:	69d8      	ldr	r0, [r3, #28]
 8003b06:	43a8      	bics	r0, r5
 8003b08:	4302      	orrs	r2, r0
 8003b0a:	61da      	str	r2, [r3, #28]
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b0e:	2503      	movs	r5, #3
 8003b10:	08a3      	lsrs	r3, r4, #2
 8003b12:	402c      	ands	r4, r5
 8003b14:	40ac      	lsls	r4, r5
 8003b16:	35fc      	adds	r5, #252	; 0xfc
 8003b18:	002e      	movs	r6, r5
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <HAL_NVIC_SetPriority+0x70>)
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	22c0      	movs	r2, #192	; 0xc0
 8003b22:	40a6      	lsls	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b24:	4029      	ands	r1, r5
 8003b26:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b28:	0092      	lsls	r2, r2, #2
 8003b2a:	5898      	ldr	r0, [r3, r2]
 8003b2c:	43b0      	bics	r0, r6
 8003b2e:	4301      	orrs	r1, r0
 8003b30:	5099      	str	r1, [r3, r2]
 8003b32:	e7eb      	b.n	8003b0c <HAL_NVIC_SetPriority+0x40>
 8003b34:	0800a324 	.word	0x0800a324
 8003b38:	e000ed00 	.word	0xe000ed00
 8003b3c:	e000e100 	.word	0xe000e100

08003b40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b510      	push	{r4, lr}
 8003b42:	1e04      	subs	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003b44:	da03      	bge.n	8003b4e <HAL_NVIC_EnableIRQ+0xe>
 8003b46:	2197      	movs	r1, #151	; 0x97
 8003b48:	4804      	ldr	r0, [pc, #16]	; (8003b5c <HAL_NVIC_EnableIRQ+0x1c>)
 8003b4a:	f003 fae6 	bl	800711a <assert_failed>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003b4e:	231f      	movs	r3, #31
 8003b50:	401c      	ands	r4, r3
 8003b52:	3b1e      	subs	r3, #30
 8003b54:	40a3      	lsls	r3, r4
 8003b56:	4a02      	ldr	r2, [pc, #8]	; (8003b60 <HAL_NVIC_EnableIRQ+0x20>)
 8003b58:	6013      	str	r3, [r2, #0]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003b5a:	bd10      	pop	{r4, pc}
 8003b5c:	0800a324 	.word	0x0800a324
 8003b60:	e000e100 	.word	0xe000e100

08003b64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b64:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <HAL_SYSTICK_Config+0x28>)
 8003b66:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b68:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d80d      	bhi.n	8003b8a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b6e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b72:	4808      	ldr	r0, [pc, #32]	; (8003b94 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b74:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b76:	6a03      	ldr	r3, [r0, #32]
 8003b78:	0609      	lsls	r1, r1, #24
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b82:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b84:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b86:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b88:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003b8a:	4770      	bx	lr
 8003b8c:	00ffffff 	.word	0x00ffffff
 8003b90:	e000e010 	.word	0xe000e010
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003b9c:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003b9e:	2c00      	cmp	r4, #0
 8003ba0:	d100      	bne.n	8003ba4 <HAL_DMA_Init+0xc>
 8003ba2:	e09e      	b.n	8003ce2 <HAL_DMA_Init+0x14a>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	4a4f      	ldr	r2, [pc, #316]	; (8003ce4 <HAL_DMA_Init+0x14c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d015      	beq.n	8003bd8 <HAL_DMA_Init+0x40>
 8003bac:	4a4e      	ldr	r2, [pc, #312]	; (8003ce8 <HAL_DMA_Init+0x150>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d012      	beq.n	8003bd8 <HAL_DMA_Init+0x40>
 8003bb2:	4a4e      	ldr	r2, [pc, #312]	; (8003cec <HAL_DMA_Init+0x154>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00f      	beq.n	8003bd8 <HAL_DMA_Init+0x40>
 8003bb8:	4a4d      	ldr	r2, [pc, #308]	; (8003cf0 <HAL_DMA_Init+0x158>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_DMA_Init+0x40>
 8003bbe:	4a4d      	ldr	r2, [pc, #308]	; (8003cf4 <HAL_DMA_Init+0x15c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d009      	beq.n	8003bd8 <HAL_DMA_Init+0x40>
 8003bc4:	4a4c      	ldr	r2, [pc, #304]	; (8003cf8 <HAL_DMA_Init+0x160>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d006      	beq.n	8003bd8 <HAL_DMA_Init+0x40>
 8003bca:	4a4c      	ldr	r2, [pc, #304]	; (8003cfc <HAL_DMA_Init+0x164>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <HAL_DMA_Init+0x40>
 8003bd0:	2196      	movs	r1, #150	; 0x96
 8003bd2:	484b      	ldr	r0, [pc, #300]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003bd4:	f003 faa1 	bl	800711a <assert_failed>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	2b0a      	cmp	r3, #10
 8003bdc:	d906      	bls.n	8003bec <HAL_DMA_Init+0x54>
 8003bde:	3b0c      	subs	r3, #12
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d903      	bls.n	8003bec <HAL_DMA_Init+0x54>
 8003be4:	2197      	movs	r1, #151	; 0x97
 8003be6:	4846      	ldr	r0, [pc, #280]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003be8:	f003 fa97 	bl	800711a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003bec:	68a3      	ldr	r3, [r4, #8]
 8003bee:	2210      	movs	r2, #16
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	4391      	bics	r1, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_DMA_Init+0x6e>
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	01d2      	lsls	r2, r2, #7
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <HAL_DMA_Init+0x6e>
 8003bfe:	2198      	movs	r1, #152	; 0x98
 8003c00:	483f      	ldr	r0, [pc, #252]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003c02:	f003 fa8a 	bl	800711a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003c06:	2340      	movs	r3, #64	; 0x40
 8003c08:	68e2      	ldr	r2, [r4, #12]
 8003c0a:	439a      	bics	r2, r3
 8003c0c:	d003      	beq.n	8003c16 <HAL_DMA_Init+0x7e>
 8003c0e:	2199      	movs	r1, #153	; 0x99
 8003c10:	483b      	ldr	r0, [pc, #236]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003c12:	f003 fa82 	bl	800711a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	6922      	ldr	r2, [r4, #16]
 8003c1a:	439a      	bics	r2, r3
 8003c1c:	d003      	beq.n	8003c26 <HAL_DMA_Init+0x8e>
 8003c1e:	219a      	movs	r1, #154	; 0x9a
 8003c20:	4837      	ldr	r0, [pc, #220]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003c22:	f003 fa7a 	bl	800711a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003c26:	6963      	ldr	r3, [r4, #20]
 8003c28:	4a36      	ldr	r2, [pc, #216]	; (8003d04 <HAL_DMA_Init+0x16c>)
 8003c2a:	4213      	tst	r3, r2
 8003c2c:	d007      	beq.n	8003c3e <HAL_DMA_Init+0xa6>
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	0092      	lsls	r2, r2, #2
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <HAL_DMA_Init+0xa6>
 8003c36:	219b      	movs	r1, #155	; 0x9b
 8003c38:	4831      	ldr	r0, [pc, #196]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003c3a:	f003 fa6e 	bl	800711a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003c3e:	69a3      	ldr	r3, [r4, #24]
 8003c40:	4a31      	ldr	r2, [pc, #196]	; (8003d08 <HAL_DMA_Init+0x170>)
 8003c42:	4213      	tst	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_DMA_Init+0xbe>
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <HAL_DMA_Init+0xbe>
 8003c4e:	219c      	movs	r1, #156	; 0x9c
 8003c50:	482b      	ldr	r0, [pc, #172]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003c52:	f003 fa62 	bl	800711a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003c56:	2320      	movs	r3, #32
 8003c58:	69e2      	ldr	r2, [r4, #28]
 8003c5a:	439a      	bics	r2, r3
 8003c5c:	d003      	beq.n	8003c66 <HAL_DMA_Init+0xce>
 8003c5e:	219d      	movs	r1, #157	; 0x9d
 8003c60:	4827      	ldr	r0, [pc, #156]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003c62:	f003 fa5a 	bl	800711a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003c66:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_DMA_Init+0x174>)
 8003c68:	6a22      	ldr	r2, [r4, #32]
 8003c6a:	421a      	tst	r2, r3
 8003c6c:	d003      	beq.n	8003c76 <HAL_DMA_Init+0xde>
 8003c6e:	219e      	movs	r1, #158	; 0x9e
 8003c70:	4823      	ldr	r0, [pc, #140]	; (8003d00 <HAL_DMA_Init+0x168>)
 8003c72:	f003 fa52 	bl	800711a <assert_failed>

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c76:	6825      	ldr	r5, [r4, #0]
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_DMA_Init+0x178>)
 8003c7a:	2114      	movs	r1, #20
 8003c7c:	18e8      	adds	r0, r5, r3
 8003c7e:	f7fc fa5f 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_DMA_Init+0x17c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c84:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003c86:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c8c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c8e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c90:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_DMA_Init+0x180>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c94:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c96:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003c98:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003c9c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9e:	433b      	orrs	r3, r7
 8003ca0:	6967      	ldr	r7, [r4, #20]
 8003ca2:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca4:	69a7      	ldr	r7, [r4, #24]
 8003ca6:	433b      	orrs	r3, r7
 8003ca8:	69e7      	ldr	r7, [r4, #28]
 8003caa:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cac:	6a27      	ldr	r7, [r4, #32]
 8003cae:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003cb0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cb2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	01db      	lsls	r3, r3, #7
 8003cb8:	4299      	cmp	r1, r3
 8003cba:	d00c      	beq.n	8003cd6 <HAL_DMA_Init+0x13e>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cbc:	251c      	movs	r5, #28
 8003cbe:	4028      	ands	r0, r5
 8003cc0:	3d0d      	subs	r5, #13
 8003cc2:	4085      	lsls	r5, r0
 8003cc4:	4915      	ldr	r1, [pc, #84]	; (8003d1c <HAL_DMA_Init+0x184>)
 8003cc6:	680b      	ldr	r3, [r1, #0]
 8003cc8:	43ab      	bics	r3, r5
 8003cca:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	680d      	ldr	r5, [r1, #0]
 8003cd0:	4083      	lsls	r3, r0
 8003cd2:	432b      	orrs	r3, r5
 8003cd4:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cd8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cda:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cdc:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003cde:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003ce0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce4:	40020008 	.word	0x40020008
 8003ce8:	4002001c 	.word	0x4002001c
 8003cec:	40020030 	.word	0x40020030
 8003cf0:	40020044 	.word	0x40020044
 8003cf4:	40020058 	.word	0x40020058
 8003cf8:	4002006c 	.word	0x4002006c
 8003cfc:	40020080 	.word	0x40020080
 8003d00:	0800a35f 	.word	0x0800a35f
 8003d04:	fffffeff 	.word	0xfffffeff
 8003d08:	fffffbff 	.word	0xfffffbff
 8003d0c:	ffffcfff 	.word	0xffffcfff
 8003d10:	bffdfff8 	.word	0xbffdfff8
 8003d14:	40020000 	.word	0x40020000
 8003d18:	ffff800f 	.word	0xffff800f
 8003d1c:	400200a8 	.word	0x400200a8

08003d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d22:	0015      	movs	r5, r2
 8003d24:	001f      	movs	r7, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003d26:	1e5a      	subs	r2, r3, #1
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <HAL_DMA_Start_IT+0x98>)
{
 8003d2a:	0004      	movs	r4, r0
 8003d2c:	000e      	movs	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d904      	bls.n	8003d3c <HAL_DMA_Start_IT+0x1c>
 8003d32:	21ab      	movs	r1, #171	; 0xab
 8003d34:	4821      	ldr	r0, [pc, #132]	; (8003dbc <HAL_DMA_Start_IT+0x9c>)
 8003d36:	0049      	lsls	r1, r1, #1
 8003d38:	f003 f9ef 	bl	800711a <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d3c:	1d63      	adds	r3, r4, #5
 8003d3e:	7fda      	ldrb	r2, [r3, #31]
 8003d40:	2002      	movs	r0, #2
 8003d42:	2a01      	cmp	r2, #1
 8003d44:	d02a      	beq.n	8003d9c <HAL_DMA_Start_IT+0x7c>
 8003d46:	2201      	movs	r2, #1
 8003d48:	77da      	strb	r2, [r3, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d4a:	1da2      	adds	r2, r4, #6
 8003d4c:	4694      	mov	ip, r2
 8003d4e:	7fd2      	ldrb	r2, [r2, #31]
 8003d50:	2100      	movs	r1, #0
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	2a01      	cmp	r2, #1
 8003d56:	d12c      	bne.n	8003db2 <HAL_DMA_Start_IT+0x92>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d58:	4663      	mov	r3, ip
 8003d5a:	77d8      	strb	r0, [r3, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d5c:	6823      	ldr	r3, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d5e:	63e1      	str	r1, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003d60:	6819      	ldr	r1, [r3, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d62:	301a      	adds	r0, #26
    __HAL_DMA_DISABLE(hdma);
 8003d64:	4391      	bics	r1, r2
 8003d66:	6019      	str	r1, [r3, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d68:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d6a:	9101      	str	r1, [sp, #4]
 8003d6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d6e:	4008      	ands	r0, r1
 8003d70:	4082      	lsls	r2, r0
 8003d72:	9901      	ldr	r1, [sp, #4]
 8003d74:	604a      	str	r2, [r1, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d76:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CNDTR = DataLength;
 8003d78:	605f      	str	r7, [r3, #4]
 8003d7a:	6821      	ldr	r1, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d7c:	2a10      	cmp	r2, #16
 8003d7e:	d10e      	bne.n	8003d9e <HAL_DMA_Start_IT+0x7e>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d80:	609d      	str	r5, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d82:	60de      	str	r6, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003d84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d86:	2a00      	cmp	r2, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d8a:	220e      	movs	r2, #14
 8003d8c:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d8e:	4302      	orrs	r2, r0
 8003d90:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003d92:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003d94:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003d96:	680a      	ldr	r2, [r1, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]
}
 8003d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003d9e:	609e      	str	r6, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003da0:	60dd      	str	r5, [r3, #12]
 8003da2:	e7ef      	b.n	8003d84 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003da4:	2004      	movs	r0, #4
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4382      	bics	r2, r0
 8003daa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	220a      	movs	r2, #10
 8003db0:	e7ed      	b.n	8003d8e <HAL_DMA_Start_IT+0x6e>
    __HAL_UNLOCK(hdma);
 8003db2:	77d9      	strb	r1, [r3, #31]
 8003db4:	e7f2      	b.n	8003d9c <HAL_DMA_Start_IT+0x7c>
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	0000fffe 	.word	0x0000fffe
 8003dbc:	0800a35f 	.word	0x0800a35f

08003dc0 <HAL_DMA_Abort_IT>:
{
 8003dc0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003dc2:	1d84      	adds	r4, r0, #6
 8003dc4:	7fe3      	ldrb	r3, [r4, #31]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dca:	2304      	movs	r3, #4
 8003dcc:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003dce:	3b03      	subs	r3, #3
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd4:	210e      	movs	r1, #14
 8003dd6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dd8:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	438a      	bics	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003de0:	2201      	movs	r2, #1
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	4391      	bics	r1, r2
 8003de6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003de8:	231c      	movs	r3, #28
 8003dea:	402b      	ands	r3, r5
 8003dec:	0015      	movs	r5, r2
 8003dee:	409d      	lsls	r5, r3
 8003df0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8003df2:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003df4:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003df6:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003df8:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8003dfa:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003dfc:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003e00:	42a2      	cmp	r2, r4
 8003e02:	d0e5      	beq.n	8003dd0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003e04:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003e06:	0023      	movs	r3, r4
 8003e08:	e7e2      	b.n	8003dd0 <HAL_DMA_Abort_IT+0x10>

08003e0a <HAL_DMA_IRQHandler>:
{
 8003e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e0c:	221c      	movs	r2, #28
 8003e0e:	2704      	movs	r7, #4
 8003e10:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e12:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e14:	4032      	ands	r2, r6
 8003e16:	003e      	movs	r6, r7
 8003e18:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e1a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003e1c:	6803      	ldr	r3, [r0, #0]
 8003e1e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e20:	422e      	tst	r6, r5
 8003e22:	d00d      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x36>
 8003e24:	423c      	tst	r4, r7
 8003e26:	d00b      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	0692      	lsls	r2, r2, #26
 8003e2c:	d402      	bmi.n	8003e34 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	43ba      	bics	r2, r7
 8003e32:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003e34:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003e36:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d019      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003e3c:	4798      	blx	r3
  return;
 8003e3e:	e017      	b.n	8003e70 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003e40:	2702      	movs	r7, #2
 8003e42:	003e      	movs	r6, r7
 8003e44:	4096      	lsls	r6, r2
 8003e46:	422e      	tst	r6, r5
 8003e48:	d013      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x68>
 8003e4a:	423c      	tst	r4, r7
 8003e4c:	d011      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	0692      	lsls	r2, r2, #26
 8003e52:	d406      	bmi.n	8003e62 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e54:	240a      	movs	r4, #10
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	43a2      	bics	r2, r4
 8003e5a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	1d83      	adds	r3, r0, #6
 8003e60:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003e62:	2200      	movs	r2, #0
 8003e64:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e66:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003e68:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003e6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d1e5      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x32>
}
 8003e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003e72:	2608      	movs	r6, #8
 8003e74:	0037      	movs	r7, r6
 8003e76:	4097      	lsls	r7, r2
 8003e78:	423d      	tst	r5, r7
 8003e7a:	d0f9      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x66>
 8003e7c:	4234      	tst	r4, r6
 8003e7e:	d0f7      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e80:	250e      	movs	r5, #14
 8003e82:	681c      	ldr	r4, [r3, #0]
 8003e84:	43ac      	bics	r4, r5
 8003e86:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e88:	2301      	movs	r3, #1
 8003e8a:	001c      	movs	r4, r3
 8003e8c:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003e8e:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e90:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e92:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003e94:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003e96:	2200      	movs	r2, #0
 8003e98:	1d43      	adds	r3, r0, #5
 8003e9a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003e9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e9e:	e7e5      	b.n	8003e6c <HAL_DMA_IRQHandler+0x62>

08003ea0 <HAL_GPIO_Init>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
 
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003ea0:	684b      	ldr	r3, [r1, #4]
{
 8003ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ea4:	0004      	movs	r4, r0
 8003ea6:	000d      	movs	r5, r1
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d912      	bls.n	8003ed2 <HAL_GPIO_Init+0x32>
 8003eac:	001a      	movs	r2, r3
 8003eae:	3a11      	subs	r2, #17
 8003eb0:	2a01      	cmp	r2, #1
 8003eb2:	d90e      	bls.n	8003ed2 <HAL_GPIO_Init+0x32>
 8003eb4:	4a85      	ldr	r2, [pc, #532]	; (80040cc <HAL_GPIO_Init+0x22c>)
 8003eb6:	4986      	ldr	r1, [pc, #536]	; (80040d0 <HAL_GPIO_Init+0x230>)
 8003eb8:	401a      	ands	r2, r3
 8003eba:	1852      	adds	r2, r2, r1
 8003ebc:	4985      	ldr	r1, [pc, #532]	; (80040d4 <HAL_GPIO_Init+0x234>)
 8003ebe:	420a      	tst	r2, r1
 8003ec0:	d007      	beq.n	8003ed2 <HAL_GPIO_Init+0x32>
 8003ec2:	4a85      	ldr	r2, [pc, #532]	; (80040d8 <HAL_GPIO_Init+0x238>)
 8003ec4:	189b      	adds	r3, r3, r2
 8003ec6:	420b      	tst	r3, r1
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x32>
 8003eca:	21ae      	movs	r1, #174	; 0xae
 8003ecc:	4883      	ldr	r0, [pc, #524]	; (80040dc <HAL_GPIO_Init+0x23c>)
 8003ece:	f003 f924 	bl	800711a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003ed2:	68ab      	ldr	r3, [r5, #8]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d903      	bls.n	8003ee0 <HAL_GPIO_Init+0x40>
 8003ed8:	21af      	movs	r1, #175	; 0xaf
 8003eda:	4880      	ldr	r0, [pc, #512]	; (80040dc <HAL_GPIO_Init+0x23c>)
 8003edc:	f003 f91d 	bl	800711a <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));
 8003ee0:	23a0      	movs	r3, #160	; 0xa0
 8003ee2:	05db      	lsls	r3, r3, #23
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d00b      	beq.n	8003f00 <HAL_GPIO_Init+0x60>
 8003ee8:	4b7d      	ldr	r3, [pc, #500]	; (80040e0 <HAL_GPIO_Init+0x240>)
 8003eea:	429c      	cmp	r4, r3
 8003eec:	d008      	beq.n	8003f00 <HAL_GPIO_Init+0x60>
 8003eee:	4b7d      	ldr	r3, [pc, #500]	; (80040e4 <HAL_GPIO_Init+0x244>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d005      	beq.n	8003f00 <HAL_GPIO_Init+0x60>
 8003ef4:	4b7c      	ldr	r3, [pc, #496]	; (80040e8 <HAL_GPIO_Init+0x248>)
 8003ef6:	429c      	cmp	r4, r3
 8003ef8:	d002      	beq.n	8003f00 <HAL_GPIO_Init+0x60>
 8003efa:	4b7c      	ldr	r3, [pc, #496]	; (80040ec <HAL_GPIO_Init+0x24c>)
 8003efc:	429c      	cmp	r4, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_GPIO_Init+0x70>
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	2a00      	cmp	r2, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x70>
 8003f08:	4a79      	ldr	r2, [pc, #484]	; (80040f0 <HAL_GPIO_Init+0x250>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00d      	beq.n	8003f2c <HAL_GPIO_Init+0x8c>
 8003f10:	4b78      	ldr	r3, [pc, #480]	; (80040f4 <HAL_GPIO_Init+0x254>)
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d106      	bne.n	8003f24 <HAL_GPIO_Init+0x84>
 8003f16:	682b      	ldr	r3, [r5, #0]
 8003f18:	4a77      	ldr	r2, [pc, #476]	; (80040f8 <HAL_GPIO_Init+0x258>)
 8003f1a:	4213      	tst	r3, r2
 8003f1c:	d002      	beq.n	8003f24 <HAL_GPIO_Init+0x84>
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x8c>
 8003f24:	21b0      	movs	r1, #176	; 0xb0
 8003f26:	486d      	ldr	r0, [pc, #436]	; (80040dc <HAL_GPIO_Init+0x23c>)
 8003f28:	f003 f8f7 	bl	800711a <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003f2c:	2700      	movs	r7, #0
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f2e:	682b      	ldr	r3, [r5, #0]
 8003f30:	001a      	movs	r2, r3
 8003f32:	40fa      	lsrs	r2, r7
 8003f34:	d100      	bne.n	8003f38 <HAL_GPIO_Init+0x98>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003f36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003f38:	2201      	movs	r2, #1
 8003f3a:	40ba      	lsls	r2, r7
 8003f3c:	9201      	str	r2, [sp, #4]
 8003f3e:	401a      	ands	r2, r3
 8003f40:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8003f42:	d100      	bne.n	8003f46 <HAL_GPIO_Init+0xa6>
 8003f44:	e0c0      	b.n	80040c8 <HAL_GPIO_Init+0x228>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003f46:	2210      	movs	r2, #16
 8003f48:	686b      	ldr	r3, [r5, #4]
 8003f4a:	4393      	bics	r3, r2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d12c      	bne.n	8003faa <HAL_GPIO_Init+0x10a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003f50:	23a0      	movs	r3, #160	; 0xa0
 8003f52:	05db      	lsls	r3, r3, #23
 8003f54:	429c      	cmp	r4, r3
 8003f56:	d012      	beq.n	8003f7e <HAL_GPIO_Init+0xde>
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_GPIO_Init+0x240>)
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	d00f      	beq.n	8003f7e <HAL_GPIO_Init+0xde>
 8003f5e:	4b61      	ldr	r3, [pc, #388]	; (80040e4 <HAL_GPIO_Init+0x244>)
 8003f60:	429c      	cmp	r4, r3
 8003f62:	d00c      	beq.n	8003f7e <HAL_GPIO_Init+0xde>
 8003f64:	4b60      	ldr	r3, [pc, #384]	; (80040e8 <HAL_GPIO_Init+0x248>)
 8003f66:	429c      	cmp	r4, r3
 8003f68:	d009      	beq.n	8003f7e <HAL_GPIO_Init+0xde>
 8003f6a:	4b60      	ldr	r3, [pc, #384]	; (80040ec <HAL_GPIO_Init+0x24c>)
 8003f6c:	429c      	cmp	r4, r3
 8003f6e:	d006      	beq.n	8003f7e <HAL_GPIO_Init+0xde>
 8003f70:	4b60      	ldr	r3, [pc, #384]	; (80040f4 <HAL_GPIO_Init+0x254>)
 8003f72:	429c      	cmp	r4, r3
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0xde>
 8003f76:	21bf      	movs	r1, #191	; 0xbf
 8003f78:	4858      	ldr	r0, [pc, #352]	; (80040dc <HAL_GPIO_Init+0x23c>)
 8003f7a:	f003 f8ce 	bl	800711a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003f7e:	692b      	ldr	r3, [r5, #16]
 8003f80:	2b07      	cmp	r3, #7
 8003f82:	d903      	bls.n	8003f8c <HAL_GPIO_Init+0xec>
 8003f84:	21c0      	movs	r1, #192	; 0xc0
 8003f86:	4855      	ldr	r0, [pc, #340]	; (80040dc <HAL_GPIO_Init+0x23c>)
 8003f88:	f003 f8c7 	bl	800711a <assert_failed>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	200f      	movs	r0, #15
 8003f90:	403a      	ands	r2, r7
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	4090      	lsls	r0, r2
        temp = GPIOx->AFR[position >> 3U];
 8003f96:	08fb      	lsrs	r3, r7, #3
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	18e3      	adds	r3, r4, r3
 8003f9c:	6a19      	ldr	r1, [r3, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003f9e:	4381      	bics	r1, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8003fa0:	6928      	ldr	r0, [r5, #16]
 8003fa2:	4090      	lsls	r0, r2
 8003fa4:	0002      	movs	r2, r0
 8003fa6:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3U] = temp;
 8003fa8:	621a      	str	r2, [r3, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003faa:	2210      	movs	r2, #16
 8003fac:	686b      	ldr	r3, [r5, #4]
 8003fae:	007e      	lsls	r6, r7, #1
 8003fb0:	4393      	bics	r3, r2
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d819      	bhi.n	8003fec <HAL_GPIO_Init+0x14c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003fb8:	68eb      	ldr	r3, [r5, #12]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d903      	bls.n	8003fc6 <HAL_GPIO_Init+0x126>
 8003fbe:	21ce      	movs	r1, #206	; 0xce
 8003fc0:	4846      	ldr	r0, [pc, #280]	; (80040dc <HAL_GPIO_Init+0x23c>)
 8003fc2:	f003 f8aa 	bl	800711a <assert_failed>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	40b2      	lsls	r2, r6
        temp = GPIOx->OSPEEDR;
 8003fca:	68a3      	ldr	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fcc:	2101      	movs	r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fce:	4393      	bics	r3, r2
 8003fd0:	001a      	movs	r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd2:	68eb      	ldr	r3, [r5, #12]
 8003fd4:	40b3      	lsls	r3, r6
 8003fd6:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8003fd8:	60a3      	str	r3, [r4, #8]
        temp= GPIOx->OTYPER;
 8003fda:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fdc:	9b01      	ldr	r3, [sp, #4]
 8003fde:	439a      	bics	r2, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fe0:	686b      	ldr	r3, [r5, #4]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	400b      	ands	r3, r1
 8003fe6:	40bb      	lsls	r3, r7
 8003fe8:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8003fea:	6063      	str	r3, [r4, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fec:	2303      	movs	r3, #3
 8003fee:	469c      	mov	ip, r3
 8003ff0:	40b3      	lsls	r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff2:	4661      	mov	r1, ip
 8003ff4:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ff6:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff8:	4011      	ands	r1, r2
 8003ffa:	40b1      	lsls	r1, r6
      temp = GPIOx->MODER;
 8003ffc:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ffe:	4018      	ands	r0, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004000:	4301      	orrs	r1, r0
      GPIOx->MODER = temp;
 8004002:	6021      	str	r1, [r4, #0]
      temp = GPIOx->PUPDR;
 8004004:	68e1      	ldr	r1, [r4, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004006:	4019      	ands	r1, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8004008:	68ab      	ldr	r3, [r5, #8]
 800400a:	40b3      	lsls	r3, r6
 800400c:	430b      	orrs	r3, r1
      GPIOx->PUPDR = temp;
 800400e:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004010:	00d3      	lsls	r3, r2, #3
 8004012:	d559      	bpl.n	80040c8 <HAL_GPIO_Init+0x228>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004014:	2001      	movs	r0, #1
 8004016:	4939      	ldr	r1, [pc, #228]	; (80040fc <HAL_GPIO_Init+0x25c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004018:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800401c:	4303      	orrs	r3, r0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800401e:	4660      	mov	r0, ip
 8004020:	4038      	ands	r0, r7
 8004022:	0080      	lsls	r0, r0, #2
 8004024:	4086      	lsls	r6, r0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004026:	634b      	str	r3, [r1, #52]	; 0x34
 8004028:	4b35      	ldr	r3, [pc, #212]	; (8004100 <HAL_GPIO_Init+0x260>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800402a:	08b9      	lsrs	r1, r7, #2
 800402c:	0089      	lsls	r1, r1, #2
 800402e:	18c9      	adds	r1, r1, r3
 8004030:	688b      	ldr	r3, [r1, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004032:	43b3      	bics	r3, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004034:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004036:	9301      	str	r3, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004038:	05f6      	lsls	r6, r6, #23
 800403a:	2300      	movs	r3, #0
 800403c:	42b4      	cmp	r4, r6
 800403e:	d014      	beq.n	800406a <HAL_GPIO_Init+0x1ca>
 8004040:	4e27      	ldr	r6, [pc, #156]	; (80040e0 <HAL_GPIO_Init+0x240>)
 8004042:	3301      	adds	r3, #1
 8004044:	42b4      	cmp	r4, r6
 8004046:	d010      	beq.n	800406a <HAL_GPIO_Init+0x1ca>
 8004048:	4e26      	ldr	r6, [pc, #152]	; (80040e4 <HAL_GPIO_Init+0x244>)
 800404a:	3301      	adds	r3, #1
 800404c:	42b4      	cmp	r4, r6
 800404e:	d00c      	beq.n	800406a <HAL_GPIO_Init+0x1ca>
 8004050:	4e25      	ldr	r6, [pc, #148]	; (80040e8 <HAL_GPIO_Init+0x248>)
 8004052:	4663      	mov	r3, ip
 8004054:	42b4      	cmp	r4, r6
 8004056:	d008      	beq.n	800406a <HAL_GPIO_Init+0x1ca>
 8004058:	4e24      	ldr	r6, [pc, #144]	; (80040ec <HAL_GPIO_Init+0x24c>)
 800405a:	3301      	adds	r3, #1
 800405c:	42b4      	cmp	r4, r6
 800405e:	d004      	beq.n	800406a <HAL_GPIO_Init+0x1ca>
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <HAL_GPIO_Init+0x264>)
 8004062:	18e3      	adds	r3, r4, r3
 8004064:	1e5e      	subs	r6, r3, #1
 8004066:	41b3      	sbcs	r3, r6
 8004068:	3305      	adds	r3, #5
 800406a:	4083      	lsls	r3, r0
 800406c:	9801      	ldr	r0, [sp, #4]
 800406e:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004070:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 8004072:	4925      	ldr	r1, [pc, #148]	; (8004108 <HAL_GPIO_Init+0x268>)
        temp &= ~((uint32_t)iocurrent);
 8004074:	9b00      	ldr	r3, [sp, #0]
        temp = EXTI->IMR;
 8004076:	680e      	ldr	r6, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
 8004078:	43d8      	mvns	r0, r3
          temp |= iocurrent;
 800407a:	4333      	orrs	r3, r6
 800407c:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800407e:	03d3      	lsls	r3, r2, #15
 8004080:	d402      	bmi.n	8004088 <HAL_GPIO_Init+0x1e8>
        temp &= ~((uint32_t)iocurrent);
 8004082:	0033      	movs	r3, r6
 8004084:	4003      	ands	r3, r0
 8004086:	469c      	mov	ip, r3
        EXTI->IMR = temp;
 8004088:	4663      	mov	r3, ip
 800408a:	600b      	str	r3, [r1, #0]
        temp = EXTI->EMR;
 800408c:	684e      	ldr	r6, [r1, #4]
          temp |= iocurrent;
 800408e:	9b00      	ldr	r3, [sp, #0]
 8004090:	4333      	orrs	r3, r6
 8004092:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004094:	0393      	lsls	r3, r2, #14
 8004096:	d402      	bmi.n	800409e <HAL_GPIO_Init+0x1fe>
        temp &= ~((uint32_t)iocurrent);
 8004098:	0033      	movs	r3, r6
 800409a:	4003      	ands	r3, r0
 800409c:	469c      	mov	ip, r3
        EXTI->EMR = temp;
 800409e:	4663      	mov	r3, ip
 80040a0:	604b      	str	r3, [r1, #4]
        temp = EXTI->RTSR;
 80040a2:	688e      	ldr	r6, [r1, #8]
          temp |= iocurrent;
 80040a4:	9b00      	ldr	r3, [sp, #0]
 80040a6:	4333      	orrs	r3, r6
 80040a8:	469c      	mov	ip, r3
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040aa:	02d3      	lsls	r3, r2, #11
 80040ac:	d402      	bmi.n	80040b4 <HAL_GPIO_Init+0x214>
        temp &= ~((uint32_t)iocurrent);
 80040ae:	0033      	movs	r3, r6
 80040b0:	4003      	ands	r3, r0
 80040b2:	469c      	mov	ip, r3
        EXTI->RTSR = temp;
 80040b4:	4663      	mov	r3, ip
 80040b6:	608b      	str	r3, [r1, #8]
        temp = EXTI->FTSR;
 80040b8:	68ce      	ldr	r6, [r1, #12]
          temp |= iocurrent;
 80040ba:	9b00      	ldr	r3, [sp, #0]
 80040bc:	4333      	orrs	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040be:	0292      	lsls	r2, r2, #10
 80040c0:	d401      	bmi.n	80040c6 <HAL_GPIO_Init+0x226>
        temp &= ~((uint32_t)iocurrent);
 80040c2:	0033      	movs	r3, r6
 80040c4:	4003      	ands	r3, r0
        EXTI->FTSR = temp;
 80040c6:	60cb      	str	r3, [r1, #12]
    position++;
 80040c8:	3701      	adds	r7, #1
 80040ca:	e730      	b.n	8003f2e <HAL_GPIO_Init+0x8e>
 80040cc:	ffdfffff 	.word	0xffdfffff
 80040d0:	efef0000 	.word	0xefef0000
 80040d4:	fffeffff 	.word	0xfffeffff
 80040d8:	efdf0000 	.word	0xefdf0000
 80040dc:	0800a397 	.word	0x0800a397
 80040e0:	50000400 	.word	0x50000400
 80040e4:	50000800 	.word	0x50000800
 80040e8:	50000c00 	.word	0x50000c00
 80040ec:	50001000 	.word	0x50001000
 80040f0:	0000ffff 	.word	0x0000ffff
 80040f4:	50001c00 	.word	0x50001c00
 80040f8:	00000603 	.word	0x00000603
 80040fc:	40021000 	.word	0x40021000
 8004100:	40010000 	.word	0x40010000
 8004104:	afffe400 	.word	0xafffe400
 8004108:	40010400 	.word	0x40010400

0800410c <HAL_GPIO_WritePin>:
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 800410c:	23a0      	movs	r3, #160	; 0xa0
{
 800410e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8004110:	05db      	lsls	r3, r3, #23
{
 8004112:	0004      	movs	r4, r0
 8004114:	000d      	movs	r5, r1
 8004116:	0016      	movs	r6, r2
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8004118:	4298      	cmp	r0, r3
 800411a:	d00b      	beq.n	8004134 <HAL_GPIO_WritePin+0x28>
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_GPIO_WritePin+0x68>)
 800411e:	4298      	cmp	r0, r3
 8004120:	d008      	beq.n	8004134 <HAL_GPIO_WritePin+0x28>
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_GPIO_WritePin+0x6c>)
 8004124:	4298      	cmp	r0, r3
 8004126:	d005      	beq.n	8004134 <HAL_GPIO_WritePin+0x28>
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <HAL_GPIO_WritePin+0x70>)
 800412a:	4298      	cmp	r0, r3
 800412c:	d002      	beq.n	8004134 <HAL_GPIO_WritePin+0x28>
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_GPIO_WritePin+0x74>)
 8004130:	4298      	cmp	r0, r3
 8004132:	d10a      	bne.n	800414a <HAL_GPIO_WritePin+0x3e>
 8004134:	2d00      	cmp	r5, #0
 8004136:	d012      	beq.n	800415e <HAL_GPIO_WritePin+0x52>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004138:	2e01      	cmp	r6, #1
 800413a:	d916      	bls.n	800416a <HAL_GPIO_WritePin+0x5e>
 800413c:	219e      	movs	r1, #158	; 0x9e
 800413e:	4811      	ldr	r0, [pc, #68]	; (8004184 <HAL_GPIO_WritePin+0x78>)
 8004140:	31ff      	adds	r1, #255	; 0xff
 8004142:	f002 ffea 	bl	800711a <assert_failed>
  
  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8004146:	61a5      	str	r5, [r4, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004148:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_GPIO_WritePin+0x7c>)
 800414c:	4298      	cmp	r0, r3
 800414e:	d106      	bne.n	800415e <HAL_GPIO_WritePin+0x52>
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <HAL_GPIO_WritePin+0x80>)
 8004152:	4219      	tst	r1, r3
 8004154:	d003      	beq.n	800415e <HAL_GPIO_WritePin+0x52>
 8004156:	001a      	movs	r2, r3
 8004158:	430a      	orrs	r2, r1
 800415a:	429a      	cmp	r2, r3
 800415c:	d0ec      	beq.n	8004138 <HAL_GPIO_WritePin+0x2c>
 800415e:	21ce      	movs	r1, #206	; 0xce
 8004160:	4808      	ldr	r0, [pc, #32]	; (8004184 <HAL_GPIO_WritePin+0x78>)
 8004162:	0049      	lsls	r1, r1, #1
 8004164:	f002 ffd9 	bl	800711a <assert_failed>
 8004168:	e7e6      	b.n	8004138 <HAL_GPIO_WritePin+0x2c>
  if(PinState != GPIO_PIN_RESET)
 800416a:	2e00      	cmp	r6, #0
 800416c:	d1eb      	bne.n	8004146 <HAL_GPIO_WritePin+0x3a>
    GPIOx->BRR = GPIO_Pin ;
 800416e:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8004170:	e7ea      	b.n	8004148 <HAL_GPIO_WritePin+0x3c>
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	50000400 	.word	0x50000400
 8004178:	50000800 	.word	0x50000800
 800417c:	50000c00 	.word	0x50000c00
 8004180:	50001000 	.word	0x50001000
 8004184:	0800a397 	.word	0x0800a397
 8004188:	50001c00 	.word	0x50001c00
 800418c:	00000603 	.word	0x00000603

08004190 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004190:	6803      	ldr	r3, [r0, #0]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	0792      	lsls	r2, r2, #30
 8004196:	d501      	bpl.n	800419c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004198:	2200      	movs	r2, #0
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800419c:	2201      	movs	r2, #1
 800419e:	6999      	ldr	r1, [r3, #24]
 80041a0:	4211      	tst	r1, r2
 80041a2:	d102      	bne.n	80041aa <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	619a      	str	r2, [r3, #24]
  }
}
 80041aa:	4770      	bx	lr

080041ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80041ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ae:	001e      	movs	r6, r3
 80041b0:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80041b2:	6803      	ldr	r3, [r0, #0]
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <I2C_TransferConfig+0x80>)
{
 80041b6:	0007      	movs	r7, r0
 80041b8:	000c      	movs	r4, r1
 80041ba:	9d08      	ldr	r5, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80041bc:	4293      	cmp	r3, r2
 80041be:	d009      	beq.n	80041d4 <I2C_TransferConfig+0x28>
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <I2C_TransferConfig+0x84>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d006      	beq.n	80041d4 <I2C_TransferConfig+0x28>
 80041c6:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <I2C_TransferConfig+0x88>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <I2C_TransferConfig+0x28>
 80041cc:	491a      	ldr	r1, [pc, #104]	; (8004238 <I2C_TransferConfig+0x8c>)
 80041ce:	481b      	ldr	r0, [pc, #108]	; (800423c <I2C_TransferConfig+0x90>)
 80041d0:	f002 ffa3 	bl	800711a <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	049b      	lsls	r3, r3, #18
 80041d8:	429e      	cmp	r6, r3
 80041da:	d006      	beq.n	80041ea <I2C_TransferConfig+0x3e>
 80041dc:	4b18      	ldr	r3, [pc, #96]	; (8004240 <I2C_TransferConfig+0x94>)
 80041de:	421e      	tst	r6, r3
 80041e0:	d003      	beq.n	80041ea <I2C_TransferConfig+0x3e>
 80041e2:	4918      	ldr	r1, [pc, #96]	; (8004244 <I2C_TransferConfig+0x98>)
 80041e4:	4815      	ldr	r0, [pc, #84]	; (800423c <I2C_TransferConfig+0x90>)
 80041e6:	f002 ff98 	bl	800711a <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80041ea:	4b17      	ldr	r3, [pc, #92]	; (8004248 <I2C_TransferConfig+0x9c>)
 80041ec:	429d      	cmp	r5, r3
 80041ee:	d00a      	beq.n	8004206 <I2C_TransferConfig+0x5a>
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <I2C_TransferConfig+0xa0>)
 80041f2:	4a17      	ldr	r2, [pc, #92]	; (8004250 <I2C_TransferConfig+0xa4>)
 80041f4:	402b      	ands	r3, r5
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d005      	beq.n	8004206 <I2C_TransferConfig+0x5a>
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	d003      	beq.n	8004206 <I2C_TransferConfig+0x5a>
 80041fe:	4915      	ldr	r1, [pc, #84]	; (8004254 <I2C_TransferConfig+0xa8>)
 8004200:	480e      	ldr	r0, [pc, #56]	; (800423c <I2C_TransferConfig+0x90>)
 8004202:	f002 ff8a 	bl	800711a <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004206:	9901      	ldr	r1, [sp, #4]
 8004208:	05a4      	lsls	r4, r4, #22
 800420a:	0da4      	lsrs	r4, r4, #22
 800420c:	4326      	orrs	r6, r4
 800420e:	040c      	lsls	r4, r1, #16
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	432e      	orrs	r6, r5
 8004216:	00c9      	lsls	r1, r1, #3
 8004218:	0d6d      	lsrs	r5, r5, #21
 800421a:	400d      	ands	r5, r1
 800421c:	490e      	ldr	r1, [pc, #56]	; (8004258 <I2C_TransferConfig+0xac>)
 800421e:	6853      	ldr	r3, [r2, #4]
 8004220:	430d      	orrs	r5, r1
 8004222:	43ab      	bics	r3, r5
 8004224:	4326      	orrs	r6, r4
 8004226:	431e      	orrs	r6, r3
 8004228:	6056      	str	r6, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800422a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800422c:	40005400 	.word	0x40005400
 8004230:	40005800 	.word	0x40005800
 8004234:	40007800 	.word	0x40007800
 8004238:	000018ac 	.word	0x000018ac
 800423c:	0800a3d0 	.word	0x0800a3d0
 8004240:	feffffff 	.word	0xfeffffff
 8004244:	000018ad 	.word	0x000018ad
 8004248:	80004000 	.word	0x80004000
 800424c:	fffffbff 	.word	0xfffffbff
 8004250:	80002000 	.word	0x80002000
 8004254:	000018ae 	.word	0x000018ae
 8004258:	03ff63ff 	.word	0x03ff63ff

0800425c <I2C_WaitOnFlagUntilTimeout>:
{
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	0004      	movs	r4, r0
 8004260:	000e      	movs	r6, r1
 8004262:	0017      	movs	r7, r2
 8004264:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	6993      	ldr	r3, [r2, #24]
 800426a:	4033      	ands	r3, r6
 800426c:	1b9b      	subs	r3, r3, r6
 800426e:	4259      	negs	r1, r3
 8004270:	414b      	adcs	r3, r1
 8004272:	42bb      	cmp	r3, r7
 8004274:	d001      	beq.n	800427a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004276:	2000      	movs	r0, #0
 8004278:	e017      	b.n	80042aa <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800427a:	1c6b      	adds	r3, r5, #1
 800427c:	d0f4      	beq.n	8004268 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fe ffe7 	bl	8003250 <HAL_GetTick>
 8004282:	9b06      	ldr	r3, [sp, #24]
 8004284:	1ac0      	subs	r0, r0, r3
 8004286:	4285      	cmp	r5, r0
 8004288:	d301      	bcc.n	800428e <I2C_WaitOnFlagUntilTimeout+0x32>
 800428a:	2d00      	cmp	r5, #0
 800428c:	d1eb      	bne.n	8004266 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	2220      	movs	r2, #32
 8004290:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004292:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004294:	4313      	orrs	r3, r2
 8004296:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004298:	0023      	movs	r3, r4
 800429a:	3341      	adds	r3, #65	; 0x41
 800429c:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	0022      	movs	r2, r4
 80042a0:	2300      	movs	r3, #0
 80042a2:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80042a4:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a6:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80042a8:	7023      	strb	r3, [r4, #0]
}
 80042aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042ac <I2C_IsAcknowledgeFailed>:
{
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ae:	6803      	ldr	r3, [r0, #0]
{
 80042b0:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b2:	6998      	ldr	r0, [r3, #24]
 80042b4:	2310      	movs	r3, #16
{
 80042b6:	000e      	movs	r6, r1
 80042b8:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ba:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042bc:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042be:	2800      	cmp	r0, #0
 80042c0:	d118      	bne.n	80042f4 <I2C_IsAcknowledgeFailed+0x48>
}
 80042c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80042c4:	1c72      	adds	r2, r6, #1
 80042c6:	d016      	beq.n	80042f6 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c8:	f7fe ffc2 	bl	8003250 <HAL_GetTick>
 80042cc:	1bc0      	subs	r0, r0, r7
 80042ce:	4286      	cmp	r6, r0
 80042d0:	d301      	bcc.n	80042d6 <I2C_IsAcknowledgeFailed+0x2a>
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	d10e      	bne.n	80042f4 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	2220      	movs	r2, #32
 80042d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042da:	4313      	orrs	r3, r2
 80042dc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042de:	0023      	movs	r3, r4
 80042e0:	3341      	adds	r3, #65	; 0x41
 80042e2:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e4:	0022      	movs	r2, r4
 80042e6:	2300      	movs	r3, #0
 80042e8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80042ea:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ec:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80042ee:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80042f0:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80042f2:	e7e6      	b.n	80042c2 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	422a      	tst	r2, r5
 80042fa:	d0e3      	beq.n	80042c4 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fc:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80042fe:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004300:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004302:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004304:	f7ff ff44 	bl	8004190 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004308:	6822      	ldr	r2, [r4, #0]
 800430a:	4906      	ldr	r1, [pc, #24]	; (8004324 <I2C_IsAcknowledgeFailed+0x78>)
 800430c:	6853      	ldr	r3, [r2, #4]
 800430e:	400b      	ands	r3, r1
 8004310:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004312:	2304      	movs	r3, #4
 8004314:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004316:	4313      	orrs	r3, r2
 8004318:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800431a:	0023      	movs	r3, r4
 800431c:	3341      	adds	r3, #65	; 0x41
 800431e:	701d      	strb	r5, [r3, #0]
 8004320:	e7e0      	b.n	80042e4 <I2C_IsAcknowledgeFailed+0x38>
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	fe00e800 	.word	0xfe00e800

08004328 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	0004      	movs	r4, r0
 800432c:	000d      	movs	r5, r1
 800432e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004330:	2702      	movs	r7, #2
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	423b      	tst	r3, r7
 8004338:	d001      	beq.n	800433e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800433a:	2000      	movs	r0, #0
}
 800433c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	0032      	movs	r2, r6
 8004340:	0029      	movs	r1, r5
 8004342:	0020      	movs	r0, r4
 8004344:	f7ff ffb2 	bl	80042ac <I2C_IsAcknowledgeFailed>
 8004348:	2800      	cmp	r0, #0
 800434a:	d115      	bne.n	8004378 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800434c:	1c6b      	adds	r3, r5, #1
 800434e:	d0f0      	beq.n	8004332 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004350:	f7fe ff7e 	bl	8003250 <HAL_GetTick>
 8004354:	1b80      	subs	r0, r0, r6
 8004356:	4285      	cmp	r5, r0
 8004358:	d301      	bcc.n	800435e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800435a:	2d00      	cmp	r5, #0
 800435c:	d1e9      	bne.n	8004332 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800435e:	2220      	movs	r2, #32
 8004360:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004362:	4313      	orrs	r3, r2
 8004364:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004366:	0023      	movs	r3, r4
 8004368:	3341      	adds	r3, #65	; 0x41
 800436a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	0022      	movs	r2, r4
 800436e:	2300      	movs	r3, #0
 8004370:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8004372:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8004376:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004378:	2001      	movs	r0, #1
 800437a:	e7df      	b.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800437c <I2C_RequestMemoryWrite>:
{
 800437c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800437e:	0014      	movs	r4, r2
 8004380:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <I2C_RequestMemoryWrite+0x60>)
{
 8004386:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	045b      	lsls	r3, r3, #17
 800438e:	f7ff ff0d 	bl	80041ac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	9a07      	ldr	r2, [sp, #28]
 8004394:	9906      	ldr	r1, [sp, #24]
 8004396:	0028      	movs	r0, r5
 8004398:	f7ff ffc6 	bl	8004328 <I2C_WaitOnTXISFlagUntilTimeout>
 800439c:	2800      	cmp	r0, #0
 800439e:	d001      	beq.n	80043a4 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 80043a0:	2001      	movs	r0, #1
}
 80043a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80043a4:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a6:	2e01      	cmp	r6, #1
 80043a8:	d10d      	bne.n	80043c6 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043aa:	b2e4      	uxtb	r4, r4
 80043ac:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043ae:	9b07      	ldr	r3, [sp, #28]
 80043b0:	2200      	movs	r2, #0
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	9b06      	ldr	r3, [sp, #24]
 80043b8:	0028      	movs	r0, r5
 80043ba:	f7ff ff4f 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 80043be:	1e43      	subs	r3, r0, #1
 80043c0:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80043c2:	b2c0      	uxtb	r0, r0
 80043c4:	e7ed      	b.n	80043a2 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043c6:	0a22      	lsrs	r2, r4, #8
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	9906      	ldr	r1, [sp, #24]
 80043cc:	9a07      	ldr	r2, [sp, #28]
 80043ce:	0028      	movs	r0, r5
 80043d0:	f7ff ffaa 	bl	8004328 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d1e3      	bne.n	80043a0 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	e7e6      	b.n	80043aa <I2C_RequestMemoryWrite+0x2e>
 80043dc:	80002000 	.word	0x80002000

080043e0 <I2C_RequestMemoryRead>:
{
 80043e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043e2:	0005      	movs	r5, r0
 80043e4:	0014      	movs	r4, r2
 80043e6:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <I2C_RequestMemoryRead+0x60>)
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2300      	movs	r3, #0
 80043f0:	f7ff fedc 	bl	80041ac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f4:	9a07      	ldr	r2, [sp, #28]
 80043f6:	9906      	ldr	r1, [sp, #24]
 80043f8:	0028      	movs	r0, r5
 80043fa:	f7ff ff95 	bl	8004328 <I2C_WaitOnTXISFlagUntilTimeout>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d001      	beq.n	8004406 <I2C_RequestMemoryRead+0x26>
    return HAL_ERROR;
 8004402:	2001      	movs	r0, #1
}
 8004404:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004406:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004408:	2e01      	cmp	r6, #1
 800440a:	d10d      	bne.n	8004428 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800440c:	b2e4      	uxtb	r4, r4
 800440e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	9b07      	ldr	r3, [sp, #28]
 8004412:	2200      	movs	r2, #0
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	2140      	movs	r1, #64	; 0x40
 8004418:	9b06      	ldr	r3, [sp, #24]
 800441a:	0028      	movs	r0, r5
 800441c:	f7ff ff1e 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 8004420:	1e43      	subs	r3, r0, #1
 8004422:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004424:	b2c0      	uxtb	r0, r0
 8004426:	e7ed      	b.n	8004404 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004428:	0a22      	lsrs	r2, r4, #8
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442c:	9906      	ldr	r1, [sp, #24]
 800442e:	9a07      	ldr	r2, [sp, #28]
 8004430:	0028      	movs	r0, r5
 8004432:	f7ff ff79 	bl	8004328 <I2C_WaitOnTXISFlagUntilTimeout>
 8004436:	2800      	cmp	r0, #0
 8004438:	d1e3      	bne.n	8004402 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800443a:	682b      	ldr	r3, [r5, #0]
 800443c:	e7e6      	b.n	800440c <I2C_RequestMemoryRead+0x2c>
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	80002000 	.word	0x80002000

08004444 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	0004      	movs	r4, r0
 8004448:	000d      	movs	r5, r1
 800444a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800444c:	2720      	movs	r7, #32
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	423b      	tst	r3, r7
 8004454:	d001      	beq.n	800445a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8004456:	2000      	movs	r0, #0
}
 8004458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	0032      	movs	r2, r6
 800445c:	0029      	movs	r1, r5
 800445e:	0020      	movs	r0, r4
 8004460:	f7ff ff24 	bl	80042ac <I2C_IsAcknowledgeFailed>
 8004464:	2800      	cmp	r0, #0
 8004466:	d113      	bne.n	8004490 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fe fef2 	bl	8003250 <HAL_GetTick>
 800446c:	1b80      	subs	r0, r0, r6
 800446e:	4285      	cmp	r5, r0
 8004470:	d301      	bcc.n	8004476 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8004472:	2d00      	cmp	r5, #0
 8004474:	d1eb      	bne.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004476:	2220      	movs	r2, #32
 8004478:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800447a:	4313      	orrs	r3, r2
 800447c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800447e:	0023      	movs	r3, r4
 8004480:	3341      	adds	r3, #65	; 0x41
 8004482:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004484:	0022      	movs	r2, r4
 8004486:	2300      	movs	r3, #0
 8004488:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800448a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800448e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004490:	2001      	movs	r0, #1
 8004492:	e7e1      	b.n	8004458 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08004494 <HAL_I2C_Init>:
{
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004498:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800449a:	2c00      	cmp	r4, #0
 800449c:	d100      	bne.n	80044a0 <HAL_I2C_Init+0xc>
 800449e:	e08a      	b.n	80045b6 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <HAL_I2C_Init+0x138>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00a      	beq.n	80044be <HAL_I2C_Init+0x2a>
 80044a8:	4a49      	ldr	r2, [pc, #292]	; (80045d0 <HAL_I2C_Init+0x13c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d007      	beq.n	80044be <HAL_I2C_Init+0x2a>
 80044ae:	4a49      	ldr	r2, [pc, #292]	; (80045d4 <HAL_I2C_Init+0x140>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_I2C_Init+0x2a>
 80044b4:	21ef      	movs	r1, #239	; 0xef
 80044b6:	4848      	ldr	r0, [pc, #288]	; (80045d8 <HAL_I2C_Init+0x144>)
 80044b8:	0049      	lsls	r1, r1, #1
 80044ba:	f002 fe2e 	bl	800711a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_I2C_Init+0x148>)
 80044c0:	68a2      	ldr	r2, [r4, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d904      	bls.n	80044d0 <HAL_I2C_Init+0x3c>
 80044c6:	21e0      	movs	r1, #224	; 0xe0
 80044c8:	4843      	ldr	r0, [pc, #268]	; (80045d8 <HAL_I2C_Init+0x144>)
 80044ca:	31ff      	adds	r1, #255	; 0xff
 80044cc:	f002 fe25 	bl	800711a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80044d0:	68e3      	ldr	r3, [r4, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d904      	bls.n	80044e2 <HAL_I2C_Init+0x4e>
 80044d8:	21f0      	movs	r1, #240	; 0xf0
 80044da:	483f      	ldr	r0, [pc, #252]	; (80045d8 <HAL_I2C_Init+0x144>)
 80044dc:	0049      	lsls	r1, r1, #1
 80044de:	f002 fe1c 	bl	800711a <assert_failed>
 80044e2:	4e3f      	ldr	r6, [pc, #252]	; (80045e0 <HAL_I2C_Init+0x14c>)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	4233      	tst	r3, r6
 80044e8:	d004      	beq.n	80044f4 <HAL_I2C_Init+0x60>
 80044ea:	21e2      	movs	r1, #226	; 0xe2
 80044ec:	483a      	ldr	r0, [pc, #232]	; (80045d8 <HAL_I2C_Init+0x144>)
 80044ee:	31ff      	adds	r1, #255	; 0xff
 80044f0:	f002 fe13 	bl	800711a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80044f4:	6963      	ldr	r3, [r4, #20]
 80044f6:	2bff      	cmp	r3, #255	; 0xff
 80044f8:	d904      	bls.n	8004504 <HAL_I2C_Init+0x70>
 80044fa:	21f1      	movs	r1, #241	; 0xf1
 80044fc:	4836      	ldr	r0, [pc, #216]	; (80045d8 <HAL_I2C_Init+0x144>)
 80044fe:	0049      	lsls	r1, r1, #1
 8004500:	f002 fe0b 	bl	800711a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004504:	69a3      	ldr	r3, [r4, #24]
 8004506:	2b07      	cmp	r3, #7
 8004508:	d904      	bls.n	8004514 <HAL_I2C_Init+0x80>
 800450a:	21e4      	movs	r1, #228	; 0xe4
 800450c:	4832      	ldr	r0, [pc, #200]	; (80045d8 <HAL_I2C_Init+0x144>)
 800450e:	31ff      	adds	r1, #255	; 0xff
 8004510:	f002 fe03 	bl	800711a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004514:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_I2C_Init+0x150>)
 8004516:	69e2      	ldr	r2, [r4, #28]
 8004518:	421a      	tst	r2, r3
 800451a:	d004      	beq.n	8004526 <HAL_I2C_Init+0x92>
 800451c:	21f2      	movs	r1, #242	; 0xf2
 800451e:	482e      	ldr	r0, [pc, #184]	; (80045d8 <HAL_I2C_Init+0x144>)
 8004520:	0049      	lsls	r1, r1, #1
 8004522:	f002 fdfa 	bl	800711a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004526:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <HAL_I2C_Init+0x154>)
 8004528:	6a22      	ldr	r2, [r4, #32]
 800452a:	421a      	tst	r2, r3
 800452c:	d004      	beq.n	8004538 <HAL_I2C_Init+0xa4>
 800452e:	21e6      	movs	r1, #230	; 0xe6
 8004530:	4829      	ldr	r0, [pc, #164]	; (80045d8 <HAL_I2C_Init+0x144>)
 8004532:	31ff      	adds	r1, #255	; 0xff
 8004534:	f002 fdf1 	bl	800711a <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004538:	0025      	movs	r5, r4
 800453a:	3541      	adds	r5, #65	; 0x41
 800453c:	782b      	ldrb	r3, [r5, #0]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <HAL_I2C_Init+0xbc>
    hi2c->Lock = HAL_UNLOCKED;
 8004544:	0022      	movs	r2, r4
 8004546:	3240      	adds	r2, #64	; 0x40
 8004548:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 800454a:	0020      	movs	r0, r4
 800454c:	f003 f964 	bl	8007818 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004550:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004552:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004554:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	68a0      	ldr	r0, [r4, #8]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	438a      	bics	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004560:	6861      	ldr	r1, [r4, #4]
 8004562:	4a22      	ldr	r2, [pc, #136]	; (80045ec <HAL_I2C_Init+0x158>)
 8004564:	400a      	ands	r2, r1
 8004566:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004568:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800456a:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800456c:	4032      	ands	r2, r6
 800456e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004570:	2901      	cmp	r1, #1
 8004572:	d121      	bne.n	80045b8 <HAL_I2C_Init+0x124>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004574:	2280      	movs	r2, #128	; 0x80
 8004576:	0212      	lsls	r2, r2, #8
 8004578:	4302      	orrs	r2, r0
 800457a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800457c:	6859      	ldr	r1, [r3, #4]
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <HAL_I2C_Init+0x15c>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004580:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004586:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004588:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800458a:	4016      	ands	r6, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800458c:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800458e:	60de      	str	r6, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004590:	430a      	orrs	r2, r1
 8004592:	69a1      	ldr	r1, [r4, #24]
 8004594:	0209      	lsls	r1, r1, #8
 8004596:	430a      	orrs	r2, r1
 8004598:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800459a:	6a21      	ldr	r1, [r4, #32]
 800459c:	69e2      	ldr	r2, [r4, #28]
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80045a2:	2201      	movs	r2, #1
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b2:	3442      	adds	r4, #66	; 0x42
 80045b4:	7020      	strb	r0, [r4, #0]
}
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045b8:	2284      	movs	r2, #132	; 0x84
 80045ba:	0212      	lsls	r2, r2, #8
 80045bc:	4302      	orrs	r2, r0
 80045be:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045c0:	2902      	cmp	r1, #2
 80045c2:	d1db      	bne.n	800457c <HAL_I2C_Init+0xe8>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045c4:	2280      	movs	r2, #128	; 0x80
 80045c6:	0112      	lsls	r2, r2, #4
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	e7d7      	b.n	800457c <HAL_I2C_Init+0xe8>
 80045cc:	40005400 	.word	0x40005400
 80045d0:	40005800 	.word	0x40005800
 80045d4:	40007800 	.word	0x40007800
 80045d8:	0800a3d0 	.word	0x0800a3d0
 80045dc:	000003ff 	.word	0x000003ff
 80045e0:	ffff7fff 	.word	0xffff7fff
 80045e4:	fff7ffff 	.word	0xfff7ffff
 80045e8:	fffdffff 	.word	0xfffdffff
 80045ec:	f0ffffff 	.word	0xf0ffffff
 80045f0:	02008000 	.word	0x02008000

080045f4 <HAL_I2C_Mem_Write>:
{
 80045f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f6:	b089      	sub	sp, #36	; 0x24
 80045f8:	9303      	str	r3, [sp, #12]
 80045fa:	ab0e      	add	r3, sp, #56	; 0x38
 80045fc:	9207      	str	r2, [sp, #28]
 80045fe:	cb04      	ldmia	r3!, {r2}
 8004600:	0004      	movs	r4, r0
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	000d      	movs	r5, r1
 8004606:	9305      	str	r3, [sp, #20]
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004608:	9b03      	ldr	r3, [sp, #12]
{
 800460a:	9204      	str	r2, [sp, #16]
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800460c:	3b01      	subs	r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d903      	bls.n	800461a <HAL_I2C_Mem_Write+0x26>
 8004612:	4959      	ldr	r1, [pc, #356]	; (8004778 <HAL_I2C_Mem_Write+0x184>)
 8004614:	4859      	ldr	r0, [pc, #356]	; (800477c <HAL_I2C_Mem_Write+0x188>)
 8004616:	f002 fd80 	bl	800711a <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800461a:	0023      	movs	r3, r4
 800461c:	3341      	adds	r3, #65	; 0x41
 800461e:	9306      	str	r3, [sp, #24]
 8004620:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8004622:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004624:	2b20      	cmp	r3, #32
 8004626:	d109      	bne.n	800463c <HAL_I2C_Mem_Write+0x48>
    if ((pData == NULL) || (Size == 0U))
 8004628:	9b04      	ldr	r3, [sp, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_I2C_Mem_Write+0x40>
 800462e:	9b05      	ldr	r3, [sp, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_I2C_Mem_Write+0x4c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800463a:	2001      	movs	r0, #1
}
 800463c:	b009      	add	sp, #36	; 0x24
 800463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8004640:	0023      	movs	r3, r4
 8004642:	3340      	adds	r3, #64	; 0x40
 8004644:	9302      	str	r3, [sp, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d0f7      	beq.n	800463c <HAL_I2C_Mem_Write+0x48>
 800464c:	2201      	movs	r2, #1
 800464e:	9b02      	ldr	r3, [sp, #8]
 8004650:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004652:	f7fe fdfd 	bl	8003250 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800465a:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800465c:	2319      	movs	r3, #25
 800465e:	2201      	movs	r2, #1
 8004660:	0209      	lsls	r1, r1, #8
 8004662:	0020      	movs	r0, r4
 8004664:	f7ff fdfa 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 8004668:	1e06      	subs	r6, r0, #0
 800466a:	d1e6      	bne.n	800463a <HAL_I2C_Mem_Write+0x46>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800466c:	2321      	movs	r3, #33	; 0x21
 800466e:	9a06      	ldr	r2, [sp, #24]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004670:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004672:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004674:	0023      	movs	r3, r4
 8004676:	3342      	adds	r3, #66	; 0x42
 8004678:	9306      	str	r3, [sp, #24]
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	9a06      	ldr	r2, [sp, #24]
 800467e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8004680:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004682:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004684:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004686:	466b      	mov	r3, sp
 8004688:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800468a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800468c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004690:	9701      	str	r7, [sp, #4]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	9a07      	ldr	r2, [sp, #28]
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	0020      	movs	r0, r4
 800469a:	f7ff fe6f 	bl	800437c <I2C_RequestMemoryWrite>
 800469e:	2800      	cmp	r0, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_I2C_Mem_Write+0xb4>
      __HAL_UNLOCK(hi2c);
 80046a2:	9b02      	ldr	r3, [sp, #8]
 80046a4:	701e      	strb	r6, [r3, #0]
 80046a6:	e7c8      	b.n	800463a <HAL_I2C_Mem_Write+0x46>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046aa:	2bff      	cmp	r3, #255	; 0xff
 80046ac:	d954      	bls.n	8004758 <HAL_I2C_Mem_Write+0x164>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ae:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046b0:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046b4:	045b      	lsls	r3, r3, #17
 80046b6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046b8:	0029      	movs	r1, r5
 80046ba:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046bc:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046be:	f7ff fd75 	bl	80041ac <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046c2:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c4:	003a      	movs	r2, r7
 80046c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80046c8:	0020      	movs	r0, r4
 80046ca:	f7ff fe2d 	bl	8004328 <I2C_WaitOnTXISFlagUntilTimeout>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d1b3      	bne.n	800463a <HAL_I2C_Mem_Write+0x46>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046d4:	6822      	ldr	r2, [r4, #0]
 80046d6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80046d8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046da:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80046dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80046de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80046e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80046e8:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80046ec:	b292      	uxth	r2, r2
 80046ee:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d017      	beq.n	8004724 <HAL_I2C_Mem_Write+0x130>
 80046f4:	2a00      	cmp	r2, #0
 80046f6:	d115      	bne.n	8004724 <HAL_I2C_Mem_Write+0x130>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046f8:	9700      	str	r7, [sp, #0]
 80046fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	0020      	movs	r0, r4
 8004700:	f7ff fdac 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 8004704:	2800      	cmp	r0, #0
 8004706:	d000      	beq.n	800470a <HAL_I2C_Mem_Write+0x116>
 8004708:	e797      	b.n	800463a <HAL_I2C_Mem_Write+0x46>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800470a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800470c:	2bff      	cmp	r3, #255	; 0xff
 800470e:	d92b      	bls.n	8004768 <HAL_I2C_Mem_Write+0x174>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004710:	23ff      	movs	r3, #255	; 0xff
 8004712:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	22ff      	movs	r2, #255	; 0xff
 8004718:	9000      	str	r0, [sp, #0]
 800471a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800471c:	0029      	movs	r1, r5
 800471e:	0020      	movs	r0, r4
 8004720:	f7ff fd44 	bl	80041ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004724:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1cc      	bne.n	80046c4 <HAL_I2C_Mem_Write+0xd0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472a:	003a      	movs	r2, r7
 800472c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800472e:	0020      	movs	r0, r4
 8004730:	f7ff fe88 	bl	8004444 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004734:	2800      	cmp	r0, #0
 8004736:	d000      	beq.n	800473a <HAL_I2C_Mem_Write+0x146>
 8004738:	e77f      	b.n	800463a <HAL_I2C_Mem_Write+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473a:	2120      	movs	r1, #32
 800473c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800473e:	4d10      	ldr	r5, [pc, #64]	; (8004780 <HAL_I2C_Mem_Write+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004740:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	402a      	ands	r2, r5
 8004746:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004748:	0023      	movs	r3, r4
 800474a:	3341      	adds	r3, #65	; 0x41
 800474c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800474e:	9b06      	ldr	r3, [sp, #24]
    __HAL_UNLOCK(hi2c);
 8004750:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004752:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004754:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004756:	e771      	b.n	800463c <HAL_I2C_Mem_Write+0x48>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004758:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800475a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800475c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800475e:	b292      	uxth	r2, r2
 8004760:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	9000      	str	r0, [sp, #0]
 8004766:	e7a7      	b.n	80046b8 <HAL_I2C_Mem_Write+0xc4>
          hi2c->XferSize = hi2c->XferCount;
 8004768:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800476a:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800476c:	b292      	uxth	r2, r2
 800476e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	9000      	str	r0, [sp, #0]
 8004774:	e7d2      	b.n	800471c <HAL_I2C_Mem_Write+0x128>
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	000008ed 	.word	0x000008ed
 800477c:	0800a3d0 	.word	0x0800a3d0
 8004780:	fe00e800 	.word	0xfe00e800

08004784 <HAL_I2C_Mem_Read>:
{
 8004784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	9303      	str	r3, [sp, #12]
 800478a:	ab0e      	add	r3, sp, #56	; 0x38
 800478c:	9207      	str	r2, [sp, #28]
 800478e:	cb04      	ldmia	r3!, {r2}
 8004790:	0004      	movs	r4, r0
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	000d      	movs	r5, r1
 8004796:	9305      	str	r3, [sp, #20]
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004798:	9b03      	ldr	r3, [sp, #12]
{
 800479a:	9204      	str	r2, [sp, #16]
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800479c:	3b01      	subs	r3, #1
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d903      	bls.n	80047aa <HAL_I2C_Mem_Read+0x26>
 80047a2:	495b      	ldr	r1, [pc, #364]	; (8004910 <HAL_I2C_Mem_Read+0x18c>)
 80047a4:	485b      	ldr	r0, [pc, #364]	; (8004914 <HAL_I2C_Mem_Read+0x190>)
 80047a6:	f002 fcb8 	bl	800711a <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047aa:	0023      	movs	r3, r4
 80047ac:	3341      	adds	r3, #65	; 0x41
 80047ae:	9306      	str	r3, [sp, #24]
 80047b0:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 80047b2:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d109      	bne.n	80047cc <HAL_I2C_Mem_Read+0x48>
    if ((pData == NULL) || (Size == 0U))
 80047b8:	9b04      	ldr	r3, [sp, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_I2C_Mem_Read+0x40>
 80047be:	9b05      	ldr	r3, [sp, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <HAL_I2C_Mem_Read+0x4c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80047ca:	2001      	movs	r0, #1
}
 80047cc:	b009      	add	sp, #36	; 0x24
 80047ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80047d0:	0023      	movs	r3, r4
 80047d2:	3340      	adds	r3, #64	; 0x40
 80047d4:	9302      	str	r3, [sp, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d0f7      	beq.n	80047cc <HAL_I2C_Mem_Read+0x48>
 80047dc:	2201      	movs	r2, #1
 80047de:	9b02      	ldr	r3, [sp, #8]
 80047e0:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80047e2:	f7fe fd35 	bl	8003250 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80047ea:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047ec:	2319      	movs	r3, #25
 80047ee:	2201      	movs	r2, #1
 80047f0:	0209      	lsls	r1, r1, #8
 80047f2:	0020      	movs	r0, r4
 80047f4:	f7ff fd32 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 80047f8:	1e06      	subs	r6, r0, #0
 80047fa:	d1e6      	bne.n	80047ca <HAL_I2C_Mem_Read+0x46>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047fc:	2322      	movs	r3, #34	; 0x22
 80047fe:	9a06      	ldr	r2, [sp, #24]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004800:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004802:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004804:	0023      	movs	r3, r4
 8004806:	3342      	adds	r3, #66	; 0x42
 8004808:	9306      	str	r3, [sp, #24]
 800480a:	2340      	movs	r3, #64	; 0x40
 800480c:	9a06      	ldr	r2, [sp, #24]
 800480e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8004810:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004812:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004814:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004816:	466b      	mov	r3, sp
 8004818:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800481a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800481c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800481e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004820:	9701      	str	r7, [sp, #4]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	9a07      	ldr	r2, [sp, #28]
 8004826:	9b03      	ldr	r3, [sp, #12]
 8004828:	0020      	movs	r0, r4
 800482a:	f7ff fdd9 	bl	80043e0 <I2C_RequestMemoryRead>
 800482e:	2800      	cmp	r0, #0
 8004830:	d002      	beq.n	8004838 <HAL_I2C_Mem_Read+0xb4>
      __HAL_UNLOCK(hi2c);
 8004832:	9b02      	ldr	r3, [sp, #8]
 8004834:	701e      	strb	r6, [r3, #0]
 8004836:	e7c8      	b.n	80047ca <HAL_I2C_Mem_Read+0x46>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004838:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800483a:	4b37      	ldr	r3, [pc, #220]	; (8004918 <HAL_I2C_Mem_Read+0x194>)
 800483c:	2aff      	cmp	r2, #255	; 0xff
 800483e:	d957      	bls.n	80048f0 <HAL_I2C_Mem_Read+0x16c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800484a:	0029      	movs	r1, r5
 800484c:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800484e:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004850:	f7ff fcac 	bl	80041ac <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004854:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004856:	9700      	str	r7, [sp, #0]
 8004858:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800485a:	2200      	movs	r2, #0
 800485c:	2104      	movs	r1, #4
 800485e:	0020      	movs	r0, r4
 8004860:	f7ff fcfc 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 8004864:	2800      	cmp	r0, #0
 8004866:	d1b0      	bne.n	80047ca <HAL_I2C_Mem_Read+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8004870:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004872:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004874:	3301      	adds	r3, #1
 8004876:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800487a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800487c:	3b01      	subs	r3, #1
 800487e:	b29b      	uxth	r3, r3
 8004880:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004882:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004884:	b292      	uxth	r2, r2
 8004886:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004888:	2b00      	cmp	r3, #0
 800488a:	d017      	beq.n	80048bc <HAL_I2C_Mem_Read+0x138>
 800488c:	2a00      	cmp	r2, #0
 800488e:	d115      	bne.n	80048bc <HAL_I2C_Mem_Read+0x138>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004890:	9700      	str	r7, [sp, #0]
 8004892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004894:	2180      	movs	r1, #128	; 0x80
 8004896:	0020      	movs	r0, r4
 8004898:	f7ff fce0 	bl	800425c <I2C_WaitOnFlagUntilTimeout>
 800489c:	2800      	cmp	r0, #0
 800489e:	d000      	beq.n	80048a2 <HAL_I2C_Mem_Read+0x11e>
 80048a0:	e793      	b.n	80047ca <HAL_I2C_Mem_Read+0x46>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048a4:	2bff      	cmp	r3, #255	; 0xff
 80048a6:	d92b      	bls.n	8004900 <HAL_I2C_Mem_Read+0x17c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048a8:	23ff      	movs	r3, #255	; 0xff
 80048aa:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	22ff      	movs	r2, #255	; 0xff
 80048b0:	9000      	str	r0, [sp, #0]
 80048b2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048b4:	0029      	movs	r1, r5
 80048b6:	0020      	movs	r0, r4
 80048b8:	f7ff fc78 	bl	80041ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80048bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1c9      	bne.n	8004856 <HAL_I2C_Mem_Read+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c2:	003a      	movs	r2, r7
 80048c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80048c6:	0020      	movs	r0, r4
 80048c8:	f7ff fdbc 	bl	8004444 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d000      	beq.n	80048d2 <HAL_I2C_Mem_Read+0x14e>
 80048d0:	e77b      	b.n	80047ca <HAL_I2C_Mem_Read+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d2:	2120      	movs	r1, #32
 80048d4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80048d6:	4d11      	ldr	r5, [pc, #68]	; (800491c <HAL_I2C_Mem_Read+0x198>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	402a      	ands	r2, r5
 80048de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	0023      	movs	r3, r4
 80048e2:	3341      	adds	r3, #65	; 0x41
 80048e4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048e6:	9b06      	ldr	r3, [sp, #24]
    __HAL_UNLOCK(hi2c);
 80048e8:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048ea:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80048ec:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80048ee:	e76d      	b.n	80047cc <HAL_I2C_Mem_Read+0x48>
      hi2c->XferSize = hi2c->XferCount;
 80048f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80048f2:	b292      	uxth	r2, r2
 80048f4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	049b      	lsls	r3, r3, #18
 80048fe:	e7a4      	b.n	800484a <HAL_I2C_Mem_Read+0xc6>
          hi2c->XferSize = hi2c->XferCount;
 8004900:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004902:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8004904:	b292      	uxth	r2, r2
 8004906:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	9000      	str	r0, [sp, #0]
 800490c:	e7d2      	b.n	80048b4 <HAL_I2C_Mem_Read+0x130>
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	00000974 	.word	0x00000974
 8004914:	0800a3d0 	.word	0x0800a3d0
 8004918:	80002400 	.word	0x80002400
 800491c:	fe00e800 	.word	0xfe00e800

08004920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004922:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <HAL_I2CEx_ConfigAnalogFilter+0x78>)
 8004924:	6803      	ldr	r3, [r0, #0]
{
 8004926:	0006      	movs	r6, r0
 8004928:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 800492e:	4a1b      	ldr	r2, [pc, #108]	; (800499c <HAL_I2CEx_ConfigAnalogFilter+0x7c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d006      	beq.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 8004934:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <HAL_I2CEx_ConfigAnalogFilter+0x80>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x22>
 800493a:	2164      	movs	r1, #100	; 0x64
 800493c:	4819      	ldr	r0, [pc, #100]	; (80049a4 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 800493e:	f002 fbec 	bl	800711a <assert_failed>
 8004942:	4d19      	ldr	r5, [pc, #100]	; (80049a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>)
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004944:	422c      	tst	r4, r5
 8004946:	d003      	beq.n	8004950 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004948:	2165      	movs	r1, #101	; 0x65
 800494a:	4816      	ldr	r0, [pc, #88]	; (80049a4 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 800494c:	f002 fbe5 	bl	800711a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004950:	2341      	movs	r3, #65	; 0x41
 8004952:	469c      	mov	ip, r3
 8004954:	44b4      	add	ip, r6
 8004956:	4663      	mov	r3, ip
 8004958:	781a      	ldrb	r2, [r3, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800495a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	2a20      	cmp	r2, #32
 8004960:	d119      	bne.n	8004996 <HAL_I2CEx_ConfigAnalogFilter+0x76>
    __HAL_LOCK(hi2c);
 8004962:	0037      	movs	r7, r6
 8004964:	3740      	adds	r7, #64	; 0x40
 8004966:	783b      	ldrb	r3, [r7, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d014      	beq.n	8004996 <HAL_I2CEx_ConfigAnalogFilter+0x76>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800496c:	2324      	movs	r3, #36	; 0x24
 800496e:	4661      	mov	r1, ip
 8004970:	700b      	strb	r3, [r1, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004972:	2101      	movs	r1, #1
 8004974:	6833      	ldr	r3, [r6, #0]
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	4388      	bics	r0, r1
 800497a:	6018      	str	r0, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	4005      	ands	r5, r0
 8004980:	601d      	str	r5, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	4304      	orrs	r4, r0
 8004986:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	4301      	orrs	r1, r0
 800498c:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800498e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004990:	4663      	mov	r3, ip
 8004992:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004994:	7038      	strb	r0, [r7, #0]
  }
}
 8004996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004998:	40005400 	.word	0x40005400
 800499c:	40005800 	.word	0x40005800
 80049a0:	40007800 	.word	0x40007800
 80049a4:	0800a408 	.word	0x0800a408
 80049a8:	ffffefff 	.word	0xffffefff

080049ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_I2CEx_ConfigDigitalFilter+0x70>)
 80049b0:	6803      	ldr	r3, [r0, #0]
{
 80049b2:	0005      	movs	r5, r0
 80049b4:	000c      	movs	r4, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x22>
 80049ba:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_I2CEx_ConfigDigitalFilter+0x74>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d006      	beq.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x22>
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_I2CEx_ConfigDigitalFilter+0x78>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x22>
 80049c6:	2192      	movs	r1, #146	; 0x92
 80049c8:	4817      	ldr	r0, [pc, #92]	; (8004a28 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 80049ca:	f002 fba6 	bl	800711a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80049ce:	2c0f      	cmp	r4, #15
 80049d0:	d903      	bls.n	80049da <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80049d2:	2193      	movs	r1, #147	; 0x93
 80049d4:	4814      	ldr	r0, [pc, #80]	; (8004a28 <HAL_I2CEx_ConfigDigitalFilter+0x7c>)
 80049d6:	f002 fba0 	bl	800711a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049da:	002e      	movs	r6, r5
 80049dc:	3641      	adds	r6, #65	; 0x41
 80049de:	7832      	ldrb	r2, [r6, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	2a20      	cmp	r2, #32
 80049e6:	d117      	bne.n	8004a18 <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    __HAL_LOCK(hi2c);
 80049e8:	0029      	movs	r1, r5
 80049ea:	3140      	adds	r1, #64	; 0x40
 80049ec:	780b      	ldrb	r3, [r1, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d012      	beq.n	8004a18 <HAL_I2CEx_ConfigDigitalFilter+0x6c>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049f2:	2324      	movs	r3, #36	; 0x24
 80049f4:	7033      	strb	r3, [r6, #0]
    __HAL_I2C_DISABLE(hi2c);
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	3801      	subs	r0, #1
 80049fa:	681d      	ldr	r5, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80049fc:	4f0b      	ldr	r7, [pc, #44]	; (8004a2c <HAL_I2CEx_ConfigDigitalFilter+0x80>)
    __HAL_I2C_DISABLE(hi2c);
 80049fe:	4385      	bics	r5, r0
 8004a00:	601d      	str	r5, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8004a02:	681d      	ldr	r5, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8004a04:	0224      	lsls	r4, r4, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8004a06:	403d      	ands	r5, r7
    tmpreg |= DigitalFilter << 8U;
 8004a08:	432c      	orrs	r4, r5
    hi2c->Instance->CR1 = tmpreg;
 8004a0a:	601c      	str	r4, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004a0c:	681c      	ldr	r4, [r3, #0]
 8004a0e:	4320      	orrs	r0, r4
 8004a10:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004a12:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	7032      	strb	r2, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8004a16:	7008      	strb	r0, [r1, #0]
  }
}
 8004a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	40005400 	.word	0x40005400
 8004a20:	40005800 	.word	0x40005800
 8004a24:	40007800 	.word	0x40007800
 8004a28:	0800a408 	.word	0x0800a408
 8004a2c:	fffff0ff 	.word	0xfffff0ff

08004a30 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a30:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8004a34:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8004a36:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004a38:	400a      	ands	r2, r1
 8004a3a:	2a08      	cmp	r2, #8
 8004a3c:	d026      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x5c>
 8004a3e:	2a0c      	cmp	r2, #12
 8004a40:	d006      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x20>
 8004a42:	2a04      	cmp	r2, #4
 8004a44:	d11a      	bne.n	8004a7c <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	06db      	lsls	r3, r3, #27
 8004a4a:	d421      	bmi.n	8004a90 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8004a4c:	4812      	ldr	r0, [pc, #72]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8004a4e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004a50:	028a      	lsls	r2, r1, #10
 8004a52:	4812      	ldr	r0, [pc, #72]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x6c>)
 8004a54:	0f12      	lsrs	r2, r2, #28
 8004a56:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004a58:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a5a:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004a5c:	0f89      	lsrs	r1, r1, #30
 8004a5e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a60:	03c0      	lsls	r0, r0, #15
 8004a62:	d504      	bpl.n	8004a6e <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8004a64:	480e      	ldr	r0, [pc, #56]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004a66:	4350      	muls	r0, r2
 8004a68:	f7fb fb6a 	bl	8000140 <__udivsi3>
 8004a6c:	e7ef      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	06db      	lsls	r3, r3, #27
 8004a72:	d501      	bpl.n	8004a78 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004a74:	480b      	ldr	r0, [pc, #44]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x74>)
 8004a76:	e7f6      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8004a78:	4807      	ldr	r0, [pc, #28]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x68>)
 8004a7a:	e7f4      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004a7c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004a7e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004a80:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004a82:	041b      	lsls	r3, r3, #16
 8004a84:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004a86:	3301      	adds	r3, #1
 8004a88:	4098      	lsls	r0, r3
 8004a8a:	e7e0      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8004a8c:	4804      	ldr	r0, [pc, #16]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x70>)
 8004a8e:	e7de      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8004a90:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8004a92:	e7dc      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1e>
 8004a94:	40021000 	.word	0x40021000
 8004a98:	00f42400 	.word	0x00f42400
 8004a9c:	0800a5b3 	.word	0x0800a5b3
 8004aa0:	007a1200 	.word	0x007a1200
 8004aa4:	003d0900 	.word	0x003d0900

08004aa8 <HAL_RCC_OscConfig>:
{
 8004aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aaa:	0005      	movs	r5, r0
 8004aac:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d102      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8004ab2:	2001      	movs	r0, #1
}
 8004ab4:	b007      	add	sp, #28
 8004ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004ab8:	6803      	ldr	r3, [r0, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d006      	beq.n	8004acc <HAL_RCC_OscConfig+0x24>
 8004abe:	069b      	lsls	r3, r3, #26
 8004ac0:	d104      	bne.n	8004acc <HAL_RCC_OscConfig+0x24>
 8004ac2:	21b0      	movs	r1, #176	; 0xb0
 8004ac4:	48c7      	ldr	r0, [pc, #796]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004ac6:	0049      	lsls	r1, r1, #1
 8004ac8:	f002 fb27 	bl	800711a <assert_failed>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004acc:	230c      	movs	r3, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ace:	2780      	movs	r7, #128	; 0x80
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad0:	4cc5      	ldr	r4, [pc, #788]	; (8004de8 <HAL_RCC_OscConfig+0x340>)
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad2:	027f      	lsls	r7, r7, #9
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad4:	68e2      	ldr	r2, [r4, #12]
 8004ad6:	401a      	ands	r2, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad8:	68e3      	ldr	r3, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ada:	9201      	str	r2, [sp, #4]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004adc:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ade:	682b      	ldr	r3, [r5, #0]
 8004ae0:	07db      	lsls	r3, r3, #31
 8004ae2:	d464      	bmi.n	8004bae <HAL_RCC_OscConfig+0x106>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	079b      	lsls	r3, r3, #30
 8004ae8:	d500      	bpl.n	8004aec <HAL_RCC_OscConfig+0x44>
 8004aea:	e0c0      	b.n	8004c6e <HAL_RCC_OscConfig+0x1c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	06db      	lsls	r3, r3, #27
 8004af0:	d543      	bpl.n	8004b7a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d000      	beq.n	8004afa <HAL_RCC_OscConfig+0x52>
 8004af8:	e12d      	b.n	8004d56 <HAL_RCC_OscConfig+0x2ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	059b      	lsls	r3, r3, #22
 8004afe:	d502      	bpl.n	8004b06 <HAL_RCC_OscConfig+0x5e>
 8004b00:	69eb      	ldr	r3, [r5, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0d5      	beq.n	8004ab2 <HAL_RCC_OscConfig+0xa>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004b06:	6a2b      	ldr	r3, [r5, #32]
 8004b08:	2bff      	cmp	r3, #255	; 0xff
 8004b0a:	d904      	bls.n	8004b16 <HAL_RCC_OscConfig+0x6e>
 8004b0c:	2180      	movs	r1, #128	; 0x80
 8004b0e:	48b5      	ldr	r0, [pc, #724]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004b10:	0089      	lsls	r1, r1, #2
 8004b12:	f002 fb02 	bl	800711a <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b18:	4ab4      	ldr	r2, [pc, #720]	; (8004dec <HAL_RCC_OscConfig+0x344>)
 8004b1a:	49b5      	ldr	r1, [pc, #724]	; (8004df0 <HAL_RCC_OscConfig+0x348>)
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	420b      	tst	r3, r1
 8004b20:	d00b      	beq.n	8004b3a <HAL_RCC_OscConfig+0x92>
 8004b22:	2180      	movs	r1, #128	; 0x80
 8004b24:	0209      	lsls	r1, r1, #8
 8004b26:	428a      	cmp	r2, r1
 8004b28:	d007      	beq.n	8004b3a <HAL_RCC_OscConfig+0x92>
 8004b2a:	22c0      	movs	r2, #192	; 0xc0
 8004b2c:	0212      	lsls	r2, r2, #8
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d003      	beq.n	8004b3a <HAL_RCC_OscConfig+0x92>
 8004b32:	49b0      	ldr	r1, [pc, #704]	; (8004df4 <HAL_RCC_OscConfig+0x34c>)
 8004b34:	48ab      	ldr	r0, [pc, #684]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004b36:	f002 faf0 	bl	800711a <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b3a:	6862      	ldr	r2, [r4, #4]
 8004b3c:	49ae      	ldr	r1, [pc, #696]	; (8004df8 <HAL_RCC_OscConfig+0x350>)
 8004b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b40:	400a      	ands	r2, r1
 8004b42:	431a      	orrs	r2, r3
 8004b44:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b46:	6861      	ldr	r1, [r4, #4]
 8004b48:	6a2a      	ldr	r2, [r5, #32]
 8004b4a:	0209      	lsls	r1, r1, #8
 8004b4c:	0a09      	lsrs	r1, r1, #8
 8004b4e:	0612      	lsls	r2, r2, #24
 8004b50:	430a      	orrs	r2, r1
 8004b52:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	0b5b      	lsrs	r3, r3, #13
 8004b58:	3301      	adds	r3, #1
 8004b5a:	0212      	lsls	r2, r2, #8
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004b60:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004b62:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004b64:	060a      	lsls	r2, r1, #24
 8004b66:	49a5      	ldr	r1, [pc, #660]	; (8004dfc <HAL_RCC_OscConfig+0x354>)
 8004b68:	0f12      	lsrs	r2, r2, #28
 8004b6a:	5c8a      	ldrb	r2, [r1, r2]
 8004b6c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b6e:	4aa4      	ldr	r2, [pc, #656]	; (8004e00 <HAL_RCC_OscConfig+0x358>)
 8004b70:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004b72:	f7fe fb39 	bl	80031e8 <HAL_InitTick>
        if(status != HAL_OK)
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d19c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	d500      	bpl.n	8004b82 <HAL_RCC_OscConfig+0xda>
 8004b80:	e15b      	b.n	8004e3a <HAL_RCC_OscConfig+0x392>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b82:	682b      	ldr	r3, [r5, #0]
 8004b84:	075b      	lsls	r3, r3, #29
 8004b86:	d500      	bpl.n	8004b8a <HAL_RCC_OscConfig+0xe2>
 8004b88:	e184      	b.n	8004e94 <HAL_RCC_OscConfig+0x3ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b8a:	682b      	ldr	r3, [r5, #0]
 8004b8c:	069b      	lsls	r3, r3, #26
 8004b8e:	d500      	bpl.n	8004b92 <HAL_RCC_OscConfig+0xea>
 8004b90:	e1fd      	b.n	8004f8e <HAL_RCC_OscConfig+0x4e6>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004b92:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d904      	bls.n	8004ba2 <HAL_RCC_OscConfig+0xfa>
 8004b98:	21ba      	movs	r1, #186	; 0xba
 8004b9a:	4892      	ldr	r0, [pc, #584]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004b9c:	0089      	lsls	r1, r1, #2
 8004b9e:	f002 fabc 	bl	800711a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d000      	beq.n	8004baa <HAL_RCC_OscConfig+0x102>
 8004ba8:	e22b      	b.n	8005002 <HAL_RCC_OscConfig+0x55a>
  return HAL_OK;
 8004baa:	2000      	movs	r0, #0
 8004bac:	e782      	b.n	8004ab4 <HAL_RCC_OscConfig+0xc>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004bae:	686b      	ldr	r3, [r5, #4]
 8004bb0:	4e94      	ldr	r6, [pc, #592]	; (8004e04 <HAL_RCC_OscConfig+0x35c>)
 8004bb2:	4233      	tst	r3, r6
 8004bb4:	d008      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x120>
 8004bb6:	22a0      	movs	r2, #160	; 0xa0
 8004bb8:	02d2      	lsls	r2, r2, #11
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x120>
 8004bbe:	216a      	movs	r1, #106	; 0x6a
 8004bc0:	4888      	ldr	r0, [pc, #544]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004bc2:	31ff      	adds	r1, #255	; 0xff
 8004bc4:	f002 faa9 	bl	800711a <assert_failed>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x12e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bce:	2b0c      	cmp	r3, #12
 8004bd0:	d108      	bne.n	8004be4 <HAL_RCC_OscConfig+0x13c>
 8004bd2:	2f00      	cmp	r7, #0
 8004bd4:	d006      	beq.n	8004be4 <HAL_RCC_OscConfig+0x13c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	039b      	lsls	r3, r3, #14
 8004bda:	d583      	bpl.n	8004ae4 <HAL_RCC_OscConfig+0x3c>
 8004bdc:	686b      	ldr	r3, [r5, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d180      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x3c>
 8004be2:	e766      	b.n	8004ab2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	686b      	ldr	r3, [r5, #4]
 8004be8:	0249      	lsls	r1, r1, #9
 8004bea:	428b      	cmp	r3, r1
 8004bec:	d114      	bne.n	8004c18 <HAL_RCC_OscConfig+0x170>
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004bf4:	f7fe fb2c 	bl	8003250 <HAL_GetTick>
 8004bf8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bfa:	2280      	movs	r2, #128	; 0x80
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	0292      	lsls	r2, r2, #10
 8004c00:	4213      	tst	r3, r2
 8004c02:	d000      	beq.n	8004c06 <HAL_RCC_OscConfig+0x15e>
 8004c04:	e76e      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c06:	f7fe fb23 	bl	8003250 <HAL_GetTick>
 8004c0a:	23fa      	movs	r3, #250	; 0xfa
 8004c0c:	1b80      	subs	r0, r0, r6
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4298      	cmp	r0, r3
 8004c12:	d9f2      	bls.n	8004bfa <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 8004c14:	2003      	movs	r0, #3
 8004c16:	e74d      	b.n	8004ab4 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c18:	22a0      	movs	r2, #160	; 0xa0
 8004c1a:	02d2      	lsls	r2, r2, #11
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d108      	bne.n	8004c32 <HAL_RCC_OscConfig+0x18a>
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	02db      	lsls	r3, r3, #11
 8004c26:	4313      	orrs	r3, r2
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	6022      	str	r2, [r4, #0]
 8004c30:	e7e0      	b.n	8004bf4 <HAL_RCC_OscConfig+0x14c>
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	4016      	ands	r6, r2
 8004c36:	6026      	str	r6, [r4, #0]
 8004c38:	6822      	ldr	r2, [r4, #0]
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	9205      	str	r2, [sp, #20]
 8004c3e:	9a05      	ldr	r2, [sp, #20]
 8004c40:	4971      	ldr	r1, [pc, #452]	; (8004e08 <HAL_RCC_OscConfig+0x360>)
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	400a      	ands	r2, r1
 8004c46:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1d3      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x14c>
        tickstart = HAL_GetTick();
 8004c4c:	f7fe fb00 	bl	8003250 <HAL_GetTick>
 8004c50:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c52:	2280      	movs	r2, #128	; 0x80
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	0292      	lsls	r2, r2, #10
 8004c58:	4213      	tst	r3, r2
 8004c5a:	d100      	bne.n	8004c5e <HAL_RCC_OscConfig+0x1b6>
 8004c5c:	e742      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c5e:	f7fe faf7 	bl	8003250 <HAL_GetTick>
 8004c62:	23fa      	movs	r3, #250	; 0xfa
 8004c64:	1b80      	subs	r0, r0, r6
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4298      	cmp	r0, r3
 8004c6a:	d9f2      	bls.n	8004c52 <HAL_RCC_OscConfig+0x1aa>
 8004c6c:	e7d2      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004c6e:	2320      	movs	r3, #32
 8004c70:	68ea      	ldr	r2, [r5, #12]
 8004c72:	439a      	bics	r2, r3
 8004c74:	2a01      	cmp	r2, #1
 8004c76:	d906      	bls.n	8004c86 <HAL_RCC_OscConfig+0x1de>
 8004c78:	2a09      	cmp	r2, #9
 8004c7a:	d004      	beq.n	8004c86 <HAL_RCC_OscConfig+0x1de>
 8004c7c:	21ce      	movs	r1, #206	; 0xce
 8004c7e:	4859      	ldr	r0, [pc, #356]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004c80:	0049      	lsls	r1, r1, #1
 8004c82:	f002 fa4a 	bl	800711a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004c86:	692b      	ldr	r3, [r5, #16]
 8004c88:	2b1f      	cmp	r3, #31
 8004c8a:	d904      	bls.n	8004c96 <HAL_RCC_OscConfig+0x1ee>
 8004c8c:	219e      	movs	r1, #158	; 0x9e
 8004c8e:	4855      	ldr	r0, [pc, #340]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004c90:	31ff      	adds	r1, #255	; 0xff
 8004c92:	f002 fa42 	bl	800711a <assert_failed>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004c96:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8004c98:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004c9a:	4213      	tst	r3, r2
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1fe>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004c9e:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004ca0:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ca6:	9a01      	ldr	r2, [sp, #4]
 8004ca8:	2a04      	cmp	r2, #4
 8004caa:	d003      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x20c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cac:	2a0c      	cmp	r2, #12
 8004cae:	d124      	bne.n	8004cfa <HAL_RCC_OscConfig+0x252>
 8004cb0:	2f00      	cmp	r7, #0
 8004cb2:	d122      	bne.n	8004cfa <HAL_RCC_OscConfig+0x252>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004cb4:	6822      	ldr	r2, [r4, #0]
 8004cb6:	0752      	lsls	r2, r2, #29
 8004cb8:	d502      	bpl.n	8004cc0 <HAL_RCC_OscConfig+0x218>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d100      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x218>
 8004cbe:	e6f8      	b.n	8004ab2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	6861      	ldr	r1, [r4, #4]
 8004cc2:	692a      	ldr	r2, [r5, #16]
 8004cc4:	4851      	ldr	r0, [pc, #324]	; (8004e0c <HAL_RCC_OscConfig+0x364>)
 8004cc6:	0212      	lsls	r2, r2, #8
 8004cc8:	4001      	ands	r1, r0
 8004cca:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ccc:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cce:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	438a      	bics	r2, r1
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cd8:	f7ff feaa 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8004cdc:	68e3      	ldr	r3, [r4, #12]
 8004cde:	4a47      	ldr	r2, [pc, #284]	; (8004dfc <HAL_RCC_OscConfig+0x354>)
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	0f1b      	lsrs	r3, r3, #28
 8004ce4:	5cd3      	ldrb	r3, [r2, r3]
 8004ce6:	40d8      	lsrs	r0, r3
 8004ce8:	4b45      	ldr	r3, [pc, #276]	; (8004e00 <HAL_RCC_OscConfig+0x358>)
 8004cea:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004cec:	2000      	movs	r0, #0
 8004cee:	f7fe fa7b 	bl	80031e8 <HAL_InitTick>
      if(status != HAL_OK)
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d100      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x250>
 8004cf6:	e6f9      	b.n	8004aec <HAL_RCC_OscConfig+0x44>
 8004cf8:	e6dc      	b.n	8004ab4 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d019      	beq.n	8004d32 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004cfe:	2109      	movs	r1, #9
 8004d00:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d02:	2704      	movs	r7, #4
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d04:	438a      	bics	r2, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004d0a:	f7fe faa1 	bl	8003250 <HAL_GetTick>
 8004d0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	423b      	tst	r3, r7
 8004d14:	d007      	beq.n	8004d26 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d16:	6862      	ldr	r2, [r4, #4]
 8004d18:	692b      	ldr	r3, [r5, #16]
 8004d1a:	493c      	ldr	r1, [pc, #240]	; (8004e0c <HAL_RCC_OscConfig+0x364>)
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	400a      	ands	r2, r1
 8004d20:	4313      	orrs	r3, r2
 8004d22:	6063      	str	r3, [r4, #4]
 8004d24:	e6e2      	b.n	8004aec <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d26:	f7fe fa93 	bl	8003250 <HAL_GetTick>
 8004d2a:	1b80      	subs	r0, r0, r6
 8004d2c:	2802      	cmp	r0, #2
 8004d2e:	d9ef      	bls.n	8004d10 <HAL_RCC_OscConfig+0x268>
 8004d30:	e770      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI_DISABLE();
 8004d32:	2201      	movs	r2, #1
 8004d34:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d36:	2704      	movs	r7, #4
        __HAL_RCC_HSI_DISABLE();
 8004d38:	4393      	bics	r3, r2
 8004d3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004d3c:	f7fe fa88 	bl	8003250 <HAL_GetTick>
 8004d40:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	423b      	tst	r3, r7
 8004d46:	d100      	bne.n	8004d4a <HAL_RCC_OscConfig+0x2a2>
 8004d48:	e6d0      	b.n	8004aec <HAL_RCC_OscConfig+0x44>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d4a:	f7fe fa81 	bl	8003250 <HAL_GetTick>
 8004d4e:	1b80      	subs	r0, r0, r6
 8004d50:	2802      	cmp	r0, #2
 8004d52:	d9f6      	bls.n	8004d42 <HAL_RCC_OscConfig+0x29a>
 8004d54:	e75e      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004d56:	69eb      	ldr	r3, [r5, #28]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d904      	bls.n	8004d66 <HAL_RCC_OscConfig+0x2be>
 8004d5c:	2186      	movs	r1, #134	; 0x86
 8004d5e:	4821      	ldr	r0, [pc, #132]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004d60:	0089      	lsls	r1, r1, #2
 8004d62:	f002 f9da 	bl	800711a <assert_failed>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d66:	69eb      	ldr	r3, [r5, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d053      	beq.n	8004e14 <HAL_RCC_OscConfig+0x36c>
        __HAL_RCC_MSI_ENABLE();
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	6822      	ldr	r2, [r4, #0]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004d76:	f7fe fa6b 	bl	8003250 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d7a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004d7c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d7e:	00bf      	lsls	r7, r7, #2
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	423b      	tst	r3, r7
 8004d84:	d027      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x32e>
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004d86:	6a2b      	ldr	r3, [r5, #32]
 8004d88:	2bff      	cmp	r3, #255	; 0xff
 8004d8a:	d904      	bls.n	8004d96 <HAL_RCC_OscConfig+0x2ee>
 8004d8c:	218b      	movs	r1, #139	; 0x8b
 8004d8e:	4815      	ldr	r0, [pc, #84]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004d90:	0089      	lsls	r1, r1, #2
 8004d92:	f002 f9c2 	bl	800711a <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <HAL_RCC_OscConfig+0x344>)
 8004d9a:	4915      	ldr	r1, [pc, #84]	; (8004df0 <HAL_RCC_OscConfig+0x348>)
 8004d9c:	401a      	ands	r2, r3
 8004d9e:	420b      	tst	r3, r1
 8004da0:	d00b      	beq.n	8004dba <HAL_RCC_OscConfig+0x312>
 8004da2:	2180      	movs	r1, #128	; 0x80
 8004da4:	0209      	lsls	r1, r1, #8
 8004da6:	428a      	cmp	r2, r1
 8004da8:	d007      	beq.n	8004dba <HAL_RCC_OscConfig+0x312>
 8004daa:	22c0      	movs	r2, #192	; 0xc0
 8004dac:	0212      	lsls	r2, r2, #8
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_OscConfig+0x312>
 8004db2:	4917      	ldr	r1, [pc, #92]	; (8004e10 <HAL_RCC_OscConfig+0x368>)
 8004db4:	480b      	ldr	r0, [pc, #44]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004db6:	f002 f9b0 	bl	800711a <assert_failed>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dba:	6863      	ldr	r3, [r4, #4]
 8004dbc:	4a0e      	ldr	r2, [pc, #56]	; (8004df8 <HAL_RCC_OscConfig+0x350>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dc6:	6862      	ldr	r2, [r4, #4]
 8004dc8:	6a2b      	ldr	r3, [r5, #32]
 8004dca:	0212      	lsls	r2, r2, #8
 8004dcc:	061b      	lsls	r3, r3, #24
 8004dce:	0a12      	lsrs	r2, r2, #8
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	6063      	str	r3, [r4, #4]
 8004dd4:	e6d1      	b.n	8004b7a <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dd6:	f7fe fa3b 	bl	8003250 <HAL_GetTick>
 8004dda:	1b80      	subs	r0, r0, r6
 8004ddc:	2802      	cmp	r0, #2
 8004dde:	d9cf      	bls.n	8004d80 <HAL_RCC_OscConfig+0x2d8>
 8004de0:	e718      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	0800a443 	.word	0x0800a443
 8004de8:	40021000 	.word	0x40021000
 8004dec:	ffffdfff 	.word	0xffffdfff
 8004df0:	ffff9fff 	.word	0xffff9fff
 8004df4:	00000201 	.word	0x00000201
 8004df8:	ffff1fff 	.word	0xffff1fff
 8004dfc:	0800a59b 	.word	0x0800a59b
 8004e00:	20000004 	.word	0x20000004
 8004e04:	fffeffff 	.word	0xfffeffff
 8004e08:	fffbffff 	.word	0xfffbffff
 8004e0c:	ffffe0ff 	.word	0xffffe0ff
 8004e10:	0000022d 	.word	0x0000022d
        __HAL_RCC_MSI_DISABLE();
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	4ac0      	ldr	r2, [pc, #768]	; (8005118 <HAL_RCC_OscConfig+0x670>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e18:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004e1e:	f7fe fa17 	bl	8003250 <HAL_GetTick>
 8004e22:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e24:	00bf      	lsls	r7, r7, #2
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	423b      	tst	r3, r7
 8004e2a:	d100      	bne.n	8004e2e <HAL_RCC_OscConfig+0x386>
 8004e2c:	e6a5      	b.n	8004b7a <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e2e:	f7fe fa0f 	bl	8003250 <HAL_GetTick>
 8004e32:	1b80      	subs	r0, r0, r6
 8004e34:	2802      	cmp	r0, #2
 8004e36:	d9f6      	bls.n	8004e26 <HAL_RCC_OscConfig+0x37e>
 8004e38:	e6ec      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004e3a:	696b      	ldr	r3, [r5, #20]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d903      	bls.n	8004e48 <HAL_RCC_OscConfig+0x3a0>
 8004e40:	49b6      	ldr	r1, [pc, #728]	; (800511c <HAL_RCC_OscConfig+0x674>)
 8004e42:	48b7      	ldr	r0, [pc, #732]	; (8005120 <HAL_RCC_OscConfig+0x678>)
 8004e44:	f002 f969 	bl	800711a <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e48:	696a      	ldr	r2, [r5, #20]
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_LSI_ENABLE();
 8004e50:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e52:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8004e54:	4313      	orrs	r3, r2
 8004e56:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004e58:	f7fe f9fa 	bl	8003250 <HAL_GetTick>
 8004e5c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e60:	423b      	tst	r3, r7
 8004e62:	d000      	beq.n	8004e66 <HAL_RCC_OscConfig+0x3be>
 8004e64:	e68d      	b.n	8004b82 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e66:	f7fe f9f3 	bl	8003250 <HAL_GetTick>
 8004e6a:	1b80      	subs	r0, r0, r6
 8004e6c:	2802      	cmp	r0, #2
 8004e6e:	d9f6      	bls.n	8004e5e <HAL_RCC_OscConfig+0x3b6>
 8004e70:	e6d0      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_LSI_DISABLE();
 8004e72:	6d22      	ldr	r2, [r4, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e74:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8004e76:	439a      	bics	r2, r3
 8004e78:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004e7a:	f7fe f9e9 	bl	8003250 <HAL_GetTick>
 8004e7e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e82:	423b      	tst	r3, r7
 8004e84:	d100      	bne.n	8004e88 <HAL_RCC_OscConfig+0x3e0>
 8004e86:	e67c      	b.n	8004b82 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fe f9e2 	bl	8003250 <HAL_GetTick>
 8004e8c:	1b80      	subs	r0, r0, r6
 8004e8e:	2802      	cmp	r0, #2
 8004e90:	d9f6      	bls.n	8004e80 <HAL_RCC_OscConfig+0x3d8>
 8004e92:	e6bf      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004e94:	68ab      	ldr	r3, [r5, #8]
 8004e96:	4aa0      	ldr	r2, [pc, #640]	; (8005118 <HAL_RCC_OscConfig+0x670>)
 8004e98:	4213      	tst	r3, r2
 8004e9a:	d007      	beq.n	8004eac <HAL_RCC_OscConfig+0x404>
 8004e9c:	22a0      	movs	r2, #160	; 0xa0
 8004e9e:	00d2      	lsls	r2, r2, #3
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <HAL_RCC_OscConfig+0x404>
 8004ea4:	499f      	ldr	r1, [pc, #636]	; (8005124 <HAL_RCC_OscConfig+0x67c>)
 8004ea6:	489e      	ldr	r0, [pc, #632]	; (8005120 <HAL_RCC_OscConfig+0x678>)
 8004ea8:	f002 f937 	bl	800711a <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eac:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004eae:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004eb2:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004eb4:	9102      	str	r1, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb6:	421a      	tst	r2, r3
 8004eb8:	d104      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	9302      	str	r3, [sp, #8]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec4:	2780      	movs	r7, #128	; 0x80
 8004ec6:	4e98      	ldr	r6, [pc, #608]	; (8005128 <HAL_RCC_OscConfig+0x680>)
 8004ec8:	007f      	lsls	r7, r7, #1
 8004eca:	6833      	ldr	r3, [r6, #0]
 8004ecc:	423b      	tst	r3, r7
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed0:	2280      	movs	r2, #128	; 0x80
 8004ed2:	68ab      	ldr	r3, [r5, #8]
 8004ed4:	0052      	lsls	r2, r2, #1
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d113      	bne.n	8004f02 <HAL_RCC_OscConfig+0x45a>
 8004eda:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004edc:	4313      	orrs	r3, r2
 8004ede:	6523      	str	r3, [r4, #80]	; 0x50
 8004ee0:	e034      	b.n	8004f4c <HAL_RCC_OscConfig+0x4a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee2:	6833      	ldr	r3, [r6, #0]
 8004ee4:	433b      	orrs	r3, r7
 8004ee6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ee8:	f7fe f9b2 	bl	8003250 <HAL_GetTick>
 8004eec:	9003      	str	r0, [sp, #12]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	6833      	ldr	r3, [r6, #0]
 8004ef0:	423b      	tst	r3, r7
 8004ef2:	d1ed      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x428>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef4:	f7fe f9ac 	bl	8003250 <HAL_GetTick>
 8004ef8:	9b03      	ldr	r3, [sp, #12]
 8004efa:	1ac0      	subs	r0, r0, r3
 8004efc:	2864      	cmp	r0, #100	; 0x64
 8004efe:	d9f6      	bls.n	8004eee <HAL_RCC_OscConfig+0x446>
 8004f00:	e688      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d116      	bne.n	8004f34 <HAL_RCC_OscConfig+0x48c>
 8004f06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f08:	4a83      	ldr	r2, [pc, #524]	; (8005118 <HAL_RCC_OscConfig+0x670>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f0a:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	6523      	str	r3, [r4, #80]	; 0x50
 8004f10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f12:	4a86      	ldr	r2, [pc, #536]	; (800512c <HAL_RCC_OscConfig+0x684>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f14:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f16:	4013      	ands	r3, r2
 8004f18:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004f1a:	f7fe f999 	bl	8003250 <HAL_GetTick>
 8004f1e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f22:	423b      	tst	r3, r7
 8004f24:	d02a      	beq.n	8004f7c <HAL_RCC_OscConfig+0x4d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fe f993 	bl	8003250 <HAL_GetTick>
 8004f2a:	4b81      	ldr	r3, [pc, #516]	; (8005130 <HAL_RCC_OscConfig+0x688>)
 8004f2c:	1b80      	subs	r0, r0, r6
 8004f2e:	4298      	cmp	r0, r3
 8004f30:	d9f6      	bls.n	8004f20 <HAL_RCC_OscConfig+0x478>
 8004f32:	e66f      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f34:	21a0      	movs	r1, #160	; 0xa0
 8004f36:	00c9      	lsls	r1, r1, #3
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	d10d      	bne.n	8004f58 <HAL_RCC_OscConfig+0x4b0>
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6523      	str	r3, [r4, #80]	; 0x50
 8004f46:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004f4c:	f7fe f980 	bl	8003250 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f50:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8004f52:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f54:	00bf      	lsls	r7, r7, #2
 8004f56:	e00e      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f5a:	4a6f      	ldr	r2, [pc, #444]	; (8005118 <HAL_RCC_OscConfig+0x670>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	6523      	str	r3, [r4, #80]	; 0x50
 8004f60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f62:	4a72      	ldr	r2, [pc, #456]	; (800512c <HAL_RCC_OscConfig+0x684>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	e7ba      	b.n	8004ede <HAL_RCC_OscConfig+0x436>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fe f972 	bl	8003250 <HAL_GetTick>
 8004f6c:	4b70      	ldr	r3, [pc, #448]	; (8005130 <HAL_RCC_OscConfig+0x688>)
 8004f6e:	1b80      	subs	r0, r0, r6
 8004f70:	4298      	cmp	r0, r3
 8004f72:	d900      	bls.n	8004f76 <HAL_RCC_OscConfig+0x4ce>
 8004f74:	e64e      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f76:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f78:	423b      	tst	r3, r7
 8004f7a:	d0f5      	beq.n	8004f68 <HAL_RCC_OscConfig+0x4c0>
    if(pwrclkchanged == SET)
 8004f7c:	9b02      	ldr	r3, [sp, #8]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d000      	beq.n	8004f84 <HAL_RCC_OscConfig+0x4dc>
 8004f82:	e602      	b.n	8004b8a <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f86:	4a6b      	ldr	r2, [pc, #428]	; (8005134 <HAL_RCC_OscConfig+0x68c>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f8c:	e5fd      	b.n	8004b8a <HAL_RCC_OscConfig+0xe2>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004f8e:	69ab      	ldr	r3, [r5, #24]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d903      	bls.n	8004f9c <HAL_RCC_OscConfig+0x4f4>
 8004f94:	4968      	ldr	r1, [pc, #416]	; (8005138 <HAL_RCC_OscConfig+0x690>)
 8004f96:	4862      	ldr	r0, [pc, #392]	; (8005120 <HAL_RCC_OscConfig+0x678>)
 8004f98:	f002 f8bf 	bl	800711a <assert_failed>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f9c:	69a9      	ldr	r1, [r5, #24]
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	4a66      	ldr	r2, [pc, #408]	; (800513c <HAL_RCC_OscConfig+0x694>)
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	d018      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x530>
        __HAL_RCC_HSI48_ENABLE();
 8004fa6:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fa8:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 8004faa:	4319      	orrs	r1, r3
 8004fac:	60a1      	str	r1, [r4, #8]
 8004fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6363      	str	r3, [r4, #52]	; 0x34
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	6a11      	ldr	r1, [r2, #32]
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004fbe:	f7fe f947 	bl	8003250 <HAL_GetTick>
 8004fc2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fc4:	68a3      	ldr	r3, [r4, #8]
 8004fc6:	423b      	tst	r3, r7
 8004fc8:	d000      	beq.n	8004fcc <HAL_RCC_OscConfig+0x524>
 8004fca:	e5e2      	b.n	8004b92 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fcc:	f7fe f940 	bl	8003250 <HAL_GetTick>
 8004fd0:	1b80      	subs	r0, r0, r6
 8004fd2:	2802      	cmp	r0, #2
 8004fd4:	d9f6      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x51c>
 8004fd6:	e61d      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI48_DISABLE();
 8004fd8:	68a1      	ldr	r1, [r4, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fda:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_DISABLE();
 8004fdc:	4399      	bics	r1, r3
 8004fde:	60a1      	str	r1, [r4, #8]
 8004fe0:	6a13      	ldr	r3, [r2, #32]
 8004fe2:	4957      	ldr	r1, [pc, #348]	; (8005140 <HAL_RCC_OscConfig+0x698>)
 8004fe4:	400b      	ands	r3, r1
 8004fe6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004fe8:	f7fe f932 	bl	8003250 <HAL_GetTick>
 8004fec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	423b      	tst	r3, r7
 8004ff2:	d100      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x54e>
 8004ff4:	e5cd      	b.n	8004b92 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff6:	f7fe f92b 	bl	8003250 <HAL_GetTick>
 8004ffa:	1b80      	subs	r0, r0, r6
 8004ffc:	2802      	cmp	r0, #2
 8004ffe:	d9f6      	bls.n	8004fee <HAL_RCC_OscConfig+0x546>
 8005000:	e608      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005002:	9a01      	ldr	r2, [sp, #4]
 8005004:	2a0c      	cmp	r2, #12
 8005006:	d06a      	beq.n	80050de <HAL_RCC_OscConfig+0x636>
 8005008:	4e4e      	ldr	r6, [pc, #312]	; (8005144 <HAL_RCC_OscConfig+0x69c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500a:	2b02      	cmp	r3, #2
 800500c:	d155      	bne.n	80050ba <HAL_RCC_OscConfig+0x612>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800500e:	4b4e      	ldr	r3, [pc, #312]	; (8005148 <HAL_RCC_OscConfig+0x6a0>)
 8005010:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005012:	421a      	tst	r2, r3
 8005014:	d003      	beq.n	800501e <HAL_RCC_OscConfig+0x576>
 8005016:	494d      	ldr	r1, [pc, #308]	; (800514c <HAL_RCC_OscConfig+0x6a4>)
 8005018:	4841      	ldr	r0, [pc, #260]	; (8005120 <HAL_RCC_OscConfig+0x678>)
 800501a:	f002 f87e 	bl	800711a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800501e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <HAL_RCC_OscConfig+0x6a8>)
 8005022:	4013      	ands	r3, r2
 8005024:	d00b      	beq.n	800503e <HAL_RCC_OscConfig+0x596>
 8005026:	2180      	movs	r1, #128	; 0x80
 8005028:	0349      	lsls	r1, r1, #13
 800502a:	428b      	cmp	r3, r1
 800502c:	d007      	beq.n	800503e <HAL_RCC_OscConfig+0x596>
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	039b      	lsls	r3, r3, #14
 8005032:	429a      	cmp	r2, r3
 8005034:	d003      	beq.n	800503e <HAL_RCC_OscConfig+0x596>
 8005036:	4947      	ldr	r1, [pc, #284]	; (8005154 <HAL_RCC_OscConfig+0x6ac>)
 8005038:	4839      	ldr	r0, [pc, #228]	; (8005120 <HAL_RCC_OscConfig+0x678>)
 800503a:	f002 f86e 	bl	800711a <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 800503e:	2180      	movs	r1, #128	; 0x80
 8005040:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005042:	4b45      	ldr	r3, [pc, #276]	; (8005158 <HAL_RCC_OscConfig+0x6b0>)
 8005044:	03c9      	lsls	r1, r1, #15
 8005046:	4013      	ands	r3, r2
 8005048:	428b      	cmp	r3, r1
 800504a:	d007      	beq.n	800505c <HAL_RCC_OscConfig+0x5b4>
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	429a      	cmp	r2, r3
 8005052:	d003      	beq.n	800505c <HAL_RCC_OscConfig+0x5b4>
 8005054:	4941      	ldr	r1, [pc, #260]	; (800515c <HAL_RCC_OscConfig+0x6b4>)
 8005056:	4832      	ldr	r0, [pc, #200]	; (8005120 <HAL_RCC_OscConfig+0x678>)
 8005058:	f002 f85f 	bl	800711a <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	401e      	ands	r6, r3
 8005060:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 8005062:	f7fe f8f5 	bl	8003250 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005066:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8005068:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800506a:	04b6      	lsls	r6, r6, #18
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	4233      	tst	r3, r6
 8005070:	d11d      	bne.n	80050ae <HAL_RCC_OscConfig+0x606>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005072:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005074:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005076:	68e2      	ldr	r2, [r4, #12]
 8005078:	430b      	orrs	r3, r1
 800507a:	4939      	ldr	r1, [pc, #228]	; (8005160 <HAL_RCC_OscConfig+0x6b8>)
 800507c:	400a      	ands	r2, r1
 800507e:	4313      	orrs	r3, r2
 8005080:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005082:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005084:	4313      	orrs	r3, r2
 8005086:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	045b      	lsls	r3, r3, #17
 800508e:	4313      	orrs	r3, r2
 8005090:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005092:	f7fe f8dd 	bl	8003250 <HAL_GetTick>
 8005096:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005098:	04ad      	lsls	r5, r5, #18
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	422b      	tst	r3, r5
 800509e:	d000      	beq.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
 80050a0:	e583      	b.n	8004baa <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fe f8d5 	bl	8003250 <HAL_GetTick>
 80050a6:	1b80      	subs	r0, r0, r6
 80050a8:	2802      	cmp	r0, #2
 80050aa:	d9f6      	bls.n	800509a <HAL_RCC_OscConfig+0x5f2>
 80050ac:	e5b2      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fe f8cf 	bl	8003250 <HAL_GetTick>
 80050b2:	1bc0      	subs	r0, r0, r7
 80050b4:	2802      	cmp	r0, #2
 80050b6:	d9d9      	bls.n	800506c <HAL_RCC_OscConfig+0x5c4>
 80050b8:	e5ac      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 80050ba:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050bc:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80050be:	401e      	ands	r6, r3
 80050c0:	6026      	str	r6, [r4, #0]
        tickstart = HAL_GetTick();
 80050c2:	f7fe f8c5 	bl	8003250 <HAL_GetTick>
 80050c6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050c8:	04ad      	lsls	r5, r5, #18
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	422b      	tst	r3, r5
 80050ce:	d100      	bne.n	80050d2 <HAL_RCC_OscConfig+0x62a>
 80050d0:	e56b      	b.n	8004baa <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d2:	f7fe f8bd 	bl	8003250 <HAL_GetTick>
 80050d6:	1b80      	subs	r0, r0, r6
 80050d8:	2802      	cmp	r0, #2
 80050da:	d9f6      	bls.n	80050ca <HAL_RCC_OscConfig+0x622>
 80050dc:	e59a      	b.n	8004c14 <HAL_RCC_OscConfig+0x16c>
        return HAL_ERROR;
 80050de:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d100      	bne.n	80050e6 <HAL_RCC_OscConfig+0x63e>
 80050e4:	e4e6      	b.n	8004ab4 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80050e8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80050ec:	0252      	lsls	r2, r2, #9
 80050ee:	401a      	ands	r2, r3
        return HAL_ERROR;
 80050f0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	428a      	cmp	r2, r1
 80050f4:	d000      	beq.n	80050f8 <HAL_RCC_OscConfig+0x650>
 80050f6:	e4dd      	b.n	8004ab4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80050f8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80050fc:	0392      	lsls	r2, r2, #14
 80050fe:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005100:	428a      	cmp	r2, r1
 8005102:	d000      	beq.n	8005106 <HAL_RCC_OscConfig+0x65e>
 8005104:	e4d6      	b.n	8004ab4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005106:	20c0      	movs	r0, #192	; 0xc0
 8005108:	0400      	lsls	r0, r0, #16
 800510a:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800510c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800510e:	1a18      	subs	r0, r3, r0
 8005110:	1e43      	subs	r3, r0, #1
 8005112:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8005114:	b2c0      	uxtb	r0, r0
 8005116:	e4cd      	b.n	8004ab4 <HAL_RCC_OscConfig+0xc>
 8005118:	fffffeff 	.word	0xfffffeff
 800511c:	0000024b 	.word	0x0000024b
 8005120:	0800a443 	.word	0x0800a443
 8005124:	00000277 	.word	0x00000277
 8005128:	40007000 	.word	0x40007000
 800512c:	fffffbff 	.word	0xfffffbff
 8005130:	00001388 	.word	0x00001388
 8005134:	efffffff 	.word	0xefffffff
 8005138:	000002be 	.word	0x000002be
 800513c:	40010000 	.word	0x40010000
 8005140:	ffffdfff 	.word	0xffffdfff
 8005144:	feffffff 	.word	0xfeffffff
 8005148:	fffeffff 	.word	0xfffeffff
 800514c:	000002f1 	.word	0x000002f1
 8005150:	fff3ffff 	.word	0xfff3ffff
 8005154:	000002f2 	.word	0x000002f2
 8005158:	ff7fffff 	.word	0xff7fffff
 800515c:	000002f3 	.word	0x000002f3
 8005160:	ff02ffff 	.word	0xff02ffff

08005164 <HAL_RCC_ClockConfig>:
{
 8005164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005166:	0004      	movs	r4, r0
 8005168:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800516a:	2800      	cmp	r0, #0
 800516c:	d101      	bne.n	8005172 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800516e:	2001      	movs	r0, #1
}
 8005170:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005172:	6803      	ldr	r3, [r0, #0]
 8005174:	071b      	lsls	r3, r3, #28
 8005176:	d103      	bne.n	8005180 <HAL_RCC_ClockConfig+0x1c>
 8005178:	497c      	ldr	r1, [pc, #496]	; (800536c <HAL_RCC_ClockConfig+0x208>)
 800517a:	487d      	ldr	r0, [pc, #500]	; (8005370 <HAL_RCC_ClockConfig+0x20c>)
 800517c:	f001 ffcd 	bl	800711a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005180:	2f01      	cmp	r7, #1
 8005182:	d903      	bls.n	800518c <HAL_RCC_ClockConfig+0x28>
 8005184:	497b      	ldr	r1, [pc, #492]	; (8005374 <HAL_RCC_ClockConfig+0x210>)
 8005186:	487a      	ldr	r0, [pc, #488]	; (8005370 <HAL_RCC_ClockConfig+0x20c>)
 8005188:	f001 ffc7 	bl	800711a <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	2201      	movs	r2, #1
 800518e:	4d7a      	ldr	r5, [pc, #488]	; (8005378 <HAL_RCC_ClockConfig+0x214>)
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	4013      	ands	r3, r2
 8005194:	429f      	cmp	r7, r3
 8005196:	d83a      	bhi.n	800520e <HAL_RCC_ClockConfig+0xaa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	079b      	lsls	r3, r3, #30
 800519c:	d440      	bmi.n	8005220 <HAL_RCC_ClockConfig+0xbc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	07db      	lsls	r3, r3, #31
 80051a2:	d45f      	bmi.n	8005264 <HAL_RCC_ClockConfig+0x100>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	2301      	movs	r3, #1
 80051a6:	682a      	ldr	r2, [r5, #0]
 80051a8:	401a      	ands	r2, r3
 80051aa:	4297      	cmp	r7, r2
 80051ac:	d200      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x4c>
 80051ae:	e0bb      	b.n	8005328 <HAL_RCC_ClockConfig+0x1c4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	4d72      	ldr	r5, [pc, #456]	; (800537c <HAL_RCC_ClockConfig+0x218>)
 80051b4:	075b      	lsls	r3, r3, #29
 80051b6:	d500      	bpl.n	80051ba <HAL_RCC_ClockConfig+0x56>
 80051b8:	e0be      	b.n	8005338 <HAL_RCC_ClockConfig+0x1d4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	071b      	lsls	r3, r3, #28
 80051be:	d518      	bpl.n	80051f2 <HAL_RCC_ClockConfig+0x8e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80051c0:	6923      	ldr	r3, [r4, #16]
 80051c2:	4a6f      	ldr	r2, [pc, #444]	; (8005380 <HAL_RCC_ClockConfig+0x21c>)
 80051c4:	4213      	tst	r3, r2
 80051c6:	d00d      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x80>
 80051c8:	21a0      	movs	r1, #160	; 0xa0
 80051ca:	4a6e      	ldr	r2, [pc, #440]	; (8005384 <HAL_RCC_ClockConfig+0x220>)
 80051cc:	00c9      	lsls	r1, r1, #3
 80051ce:	401a      	ands	r2, r3
 80051d0:	428a      	cmp	r2, r1
 80051d2:	d007      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x80>
 80051d4:	22c0      	movs	r2, #192	; 0xc0
 80051d6:	00d2      	lsls	r2, r2, #3
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x80>
 80051dc:	496a      	ldr	r1, [pc, #424]	; (8005388 <HAL_RCC_ClockConfig+0x224>)
 80051de:	4864      	ldr	r0, [pc, #400]	; (8005370 <HAL_RCC_ClockConfig+0x20c>)
 80051e0:	f001 ff9b 	bl	800711a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051e4:	68ea      	ldr	r2, [r5, #12]
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	4968      	ldr	r1, [pc, #416]	; (800538c <HAL_RCC_ClockConfig+0x228>)
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	400a      	ands	r2, r1
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051f2:	f7ff fc1d 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 80051f6:	68eb      	ldr	r3, [r5, #12]
 80051f8:	4a65      	ldr	r2, [pc, #404]	; (8005390 <HAL_RCC_ClockConfig+0x22c>)
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	0f1b      	lsrs	r3, r3, #28
 80051fe:	5cd3      	ldrb	r3, [r2, r3]
 8005200:	40d8      	lsrs	r0, r3
 8005202:	4b64      	ldr	r3, [pc, #400]	; (8005394 <HAL_RCC_ClockConfig+0x230>)
 8005204:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005206:	2000      	movs	r0, #0
 8005208:	f7fd ffee 	bl	80031e8 <HAL_InitTick>
 800520c:	e7b0      	b.n	8005170 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	4393      	bics	r3, r2
 8005212:	433b      	orrs	r3, r7
 8005214:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	4013      	ands	r3, r2
 800521a:	429f      	cmp	r7, r3
 800521c:	d1a7      	bne.n	800516e <HAL_RCC_ClockConfig+0xa>
 800521e:	e7bb      	b.n	8005198 <HAL_RCC_ClockConfig+0x34>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005220:	68a3      	ldr	r3, [r4, #8]
 8005222:	2280      	movs	r2, #128	; 0x80
 8005224:	0019      	movs	r1, r3
 8005226:	4391      	bics	r1, r2
 8005228:	d014      	beq.n	8005254 <HAL_RCC_ClockConfig+0xf0>
 800522a:	2220      	movs	r2, #32
 800522c:	0019      	movs	r1, r3
 800522e:	4391      	bics	r1, r2
 8005230:	2990      	cmp	r1, #144	; 0x90
 8005232:	d00f      	beq.n	8005254 <HAL_RCC_ClockConfig+0xf0>
 8005234:	2240      	movs	r2, #64	; 0x40
 8005236:	0019      	movs	r1, r3
 8005238:	4391      	bics	r1, r2
 800523a:	29a0      	cmp	r1, #160	; 0xa0
 800523c:	d00a      	beq.n	8005254 <HAL_RCC_ClockConfig+0xf0>
 800523e:	2210      	movs	r2, #16
 8005240:	0019      	movs	r1, r3
 8005242:	4391      	bics	r1, r2
 8005244:	29c0      	cmp	r1, #192	; 0xc0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_ClockConfig+0xf0>
 8005248:	2bf0      	cmp	r3, #240	; 0xf0
 800524a:	d003      	beq.n	8005254 <HAL_RCC_ClockConfig+0xf0>
 800524c:	4952      	ldr	r1, [pc, #328]	; (8005398 <HAL_RCC_ClockConfig+0x234>)
 800524e:	4848      	ldr	r0, [pc, #288]	; (8005370 <HAL_RCC_ClockConfig+0x20c>)
 8005250:	f001 ff63 	bl	800711a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005254:	21f0      	movs	r1, #240	; 0xf0
 8005256:	4a49      	ldr	r2, [pc, #292]	; (800537c <HAL_RCC_ClockConfig+0x218>)
 8005258:	68d3      	ldr	r3, [r2, #12]
 800525a:	438b      	bics	r3, r1
 800525c:	68a1      	ldr	r1, [r4, #8]
 800525e:	430b      	orrs	r3, r1
 8005260:	60d3      	str	r3, [r2, #12]
 8005262:	e79c      	b.n	800519e <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	2b03      	cmp	r3, #3
 8005268:	d903      	bls.n	8005272 <HAL_RCC_ClockConfig+0x10e>
 800526a:	494c      	ldr	r1, [pc, #304]	; (800539c <HAL_RCC_ClockConfig+0x238>)
 800526c:	4840      	ldr	r0, [pc, #256]	; (8005370 <HAL_RCC_ClockConfig+0x20c>)
 800526e:	f001 ff54 	bl	800711a <assert_failed>
 8005272:	4e42      	ldr	r6, [pc, #264]	; (800537c <HAL_RCC_ClockConfig+0x218>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005274:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005276:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005278:	2a02      	cmp	r2, #2
 800527a:	d11c      	bne.n	80052b6 <HAL_RCC_ClockConfig+0x152>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800527c:	039b      	lsls	r3, r3, #14
 800527e:	d400      	bmi.n	8005282 <HAL_RCC_ClockConfig+0x11e>
 8005280:	e775      	b.n	800516e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005282:	2103      	movs	r1, #3
 8005284:	68f3      	ldr	r3, [r6, #12]
 8005286:	438b      	bics	r3, r1
 8005288:	4313      	orrs	r3, r2
 800528a:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800528c:	f7fd ffe0 	bl	8003250 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005290:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8005292:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005294:	2b02      	cmp	r3, #2
 8005296:	d11b      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x16c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005298:	220c      	movs	r2, #12
 800529a:	68f3      	ldr	r3, [r6, #12]
 800529c:	4013      	ands	r3, r2
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d100      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x140>
 80052a2:	e77f      	b.n	80051a4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a4:	f7fd ffd4 	bl	8003250 <HAL_GetTick>
 80052a8:	9b01      	ldr	r3, [sp, #4]
 80052aa:	1ac0      	subs	r0, r0, r3
 80052ac:	4b3c      	ldr	r3, [pc, #240]	; (80053a0 <HAL_RCC_ClockConfig+0x23c>)
 80052ae:	4298      	cmp	r0, r3
 80052b0:	d9f2      	bls.n	8005298 <HAL_RCC_ClockConfig+0x134>
          return HAL_TIMEOUT;
 80052b2:	2003      	movs	r0, #3
 80052b4:	e75c      	b.n	8005170 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b6:	2a03      	cmp	r2, #3
 80052b8:	d102      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ba:	019b      	lsls	r3, r3, #6
 80052bc:	d4e1      	bmi.n	8005282 <HAL_RCC_ClockConfig+0x11e>
 80052be:	e756      	b.n	800516e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052c0:	2a01      	cmp	r2, #1
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c4:	075b      	lsls	r3, r3, #29
 80052c6:	d4dc      	bmi.n	8005282 <HAL_RCC_ClockConfig+0x11e>
 80052c8:	e751      	b.n	800516e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052ca:	059b      	lsls	r3, r3, #22
 80052cc:	d4d9      	bmi.n	8005282 <HAL_RCC_ClockConfig+0x11e>
 80052ce:	e74e      	b.n	800516e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d10d      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x18c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d4:	220c      	movs	r2, #12
 80052d6:	68f3      	ldr	r3, [r6, #12]
 80052d8:	4013      	ands	r3, r2
 80052da:	4293      	cmp	r3, r2
 80052dc:	d100      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x17c>
 80052de:	e761      	b.n	80051a4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e0:	f7fd ffb6 	bl	8003250 <HAL_GetTick>
 80052e4:	9b01      	ldr	r3, [sp, #4]
 80052e6:	1ac0      	subs	r0, r0, r3
 80052e8:	4b2d      	ldr	r3, [pc, #180]	; (80053a0 <HAL_RCC_ClockConfig+0x23c>)
 80052ea:	4298      	cmp	r0, r3
 80052ec:	d9f2      	bls.n	80052d4 <HAL_RCC_ClockConfig+0x170>
 80052ee:	e7e0      	b.n	80052b2 <HAL_RCC_ClockConfig+0x14e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d013      	beq.n	800531c <HAL_RCC_ClockConfig+0x1b8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80052f4:	220c      	movs	r2, #12
 80052f6:	68f3      	ldr	r3, [r6, #12]
 80052f8:	4213      	tst	r3, r2
 80052fa:	d100      	bne.n	80052fe <HAL_RCC_ClockConfig+0x19a>
 80052fc:	e752      	b.n	80051a4 <HAL_RCC_ClockConfig+0x40>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fe:	f7fd ffa7 	bl	8003250 <HAL_GetTick>
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	1ac0      	subs	r0, r0, r3
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_RCC_ClockConfig+0x23c>)
 8005308:	4298      	cmp	r0, r3
 800530a:	d9f3      	bls.n	80052f4 <HAL_RCC_ClockConfig+0x190>
 800530c:	e7d1      	b.n	80052b2 <HAL_RCC_ClockConfig+0x14e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530e:	f7fd ff9f 	bl	8003250 <HAL_GetTick>
 8005312:	9b01      	ldr	r3, [sp, #4]
 8005314:	1ac0      	subs	r0, r0, r3
 8005316:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <HAL_RCC_ClockConfig+0x23c>)
 8005318:	4298      	cmp	r0, r3
 800531a:	d8ca      	bhi.n	80052b2 <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800531c:	220c      	movs	r2, #12
 800531e:	68f3      	ldr	r3, [r6, #12]
 8005320:	4013      	ands	r3, r2
 8005322:	2b04      	cmp	r3, #4
 8005324:	d1f3      	bne.n	800530e <HAL_RCC_ClockConfig+0x1aa>
 8005326:	e73d      	b.n	80051a4 <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005328:	682a      	ldr	r2, [r5, #0]
 800532a:	439a      	bics	r2, r3
 800532c:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	682a      	ldr	r2, [r5, #0]
 8005330:	421a      	tst	r2, r3
 8005332:	d000      	beq.n	8005336 <HAL_RCC_ClockConfig+0x1d2>
 8005334:	e71b      	b.n	800516e <HAL_RCC_ClockConfig+0xa>
 8005336:	e73b      	b.n	80051b0 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005338:	68e3      	ldr	r3, [r4, #12]
 800533a:	4a11      	ldr	r2, [pc, #68]	; (8005380 <HAL_RCC_ClockConfig+0x21c>)
 800533c:	4213      	tst	r3, r2
 800533e:	d00d      	beq.n	800535c <HAL_RCC_ClockConfig+0x1f8>
 8005340:	21a0      	movs	r1, #160	; 0xa0
 8005342:	4a10      	ldr	r2, [pc, #64]	; (8005384 <HAL_RCC_ClockConfig+0x220>)
 8005344:	00c9      	lsls	r1, r1, #3
 8005346:	401a      	ands	r2, r3
 8005348:	428a      	cmp	r2, r1
 800534a:	d007      	beq.n	800535c <HAL_RCC_ClockConfig+0x1f8>
 800534c:	22c0      	movs	r2, #192	; 0xc0
 800534e:	00d2      	lsls	r2, r2, #3
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <HAL_RCC_ClockConfig+0x1f8>
 8005354:	4913      	ldr	r1, [pc, #76]	; (80053a4 <HAL_RCC_ClockConfig+0x240>)
 8005356:	4806      	ldr	r0, [pc, #24]	; (8005370 <HAL_RCC_ClockConfig+0x20c>)
 8005358:	f001 fedf 	bl	800711a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800535c:	68eb      	ldr	r3, [r5, #12]
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <HAL_RCC_ClockConfig+0x244>)
 8005360:	4013      	ands	r3, r2
 8005362:	68e2      	ldr	r2, [r4, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60eb      	str	r3, [r5, #12]
 8005368:	e727      	b.n	80051ba <HAL_RCC_ClockConfig+0x56>
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	00000366 	.word	0x00000366
 8005370:	0800a443 	.word	0x0800a443
 8005374:	00000367 	.word	0x00000367
 8005378:	40022000 	.word	0x40022000
 800537c:	40021000 	.word	0x40021000
 8005380:	fffffbff 	.word	0xfffffbff
 8005384:	fffffdff 	.word	0xfffffdff
 8005388:	000003f1 	.word	0x000003f1
 800538c:	ffffc7ff 	.word	0xffffc7ff
 8005390:	0800a59b 	.word	0x0800a59b
 8005394:	20000004 	.word	0x20000004
 8005398:	0000037e 	.word	0x0000037e
 800539c:	00000385 	.word	0x00000385
 80053a0:	00001388 	.word	0x00001388
 80053a4:	000003ea 	.word	0x000003ea
 80053a8:	fffff8ff 	.word	0xfffff8ff

080053ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80053ae:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	055b      	lsls	r3, r3, #21
 80053b4:	0f5b      	lsrs	r3, r3, #29
 80053b6:	5cd3      	ldrb	r3, [r2, r3]
 80053b8:	4a03      	ldr	r2, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80053ba:	6810      	ldr	r0, [r2, #0]
 80053bc:	40d8      	lsrs	r0, r3
}
 80053be:	4770      	bx	lr
 80053c0:	40021000 	.word	0x40021000
 80053c4:	0800a5ab 	.word	0x0800a5ab
 80053c8:	20000004 	.word	0x20000004

080053cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80053ce:	4a05      	ldr	r2, [pc, #20]	; (80053e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	049b      	lsls	r3, r3, #18
 80053d4:	0f5b      	lsrs	r3, r3, #29
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	4a03      	ldr	r2, [pc, #12]	; (80053e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80053da:	6810      	ldr	r0, [r2, #0]
 80053dc:	40d8      	lsrs	r0, r3
}
 80053de:	4770      	bx	lr
 80053e0:	40021000 	.word	0x40021000
 80053e4:	0800a5ab 	.word	0x0800a5ab
 80053e8:	20000004 	.word	0x20000004

080053ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp_reg;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80053ee:	4b93      	ldr	r3, [pc, #588]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80053f0:	6802      	ldr	r2, [r0, #0]
{
 80053f2:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d903      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80053f8:	2167      	movs	r1, #103	; 0x67
 80053fa:	4891      	ldr	r0, [pc, #580]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053fc:	f001 fe8d 	bl	800711a <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	069b      	lsls	r3, r3, #26
 8005404:	d54d      	bpl.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005406:	6863      	ldr	r3, [r4, #4]
 8005408:	4a8e      	ldr	r2, [pc, #568]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800540a:	4213      	tst	r3, r2
 800540c:	d00d      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800540e:	2198      	movs	r1, #152	; 0x98
 8005410:	4a8d      	ldr	r2, [pc, #564]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005412:	0349      	lsls	r1, r1, #13
 8005414:	401a      	ands	r2, r3
 8005416:	428a      	cmp	r2, r1
 8005418:	d007      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800541a:	228c      	movs	r2, #140	; 0x8c
 800541c:	0392      	lsls	r2, r2, #14
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8005422:	2173      	movs	r1, #115	; 0x73
 8005424:	4886      	ldr	r0, [pc, #536]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005426:	f001 fe78 	bl	800711a <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800542c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542e:	4d87      	ldr	r5, [pc, #540]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005430:	055b      	lsls	r3, r3, #21
 8005432:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8005434:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005436:	421a      	tst	r2, r3
 8005438:	d104      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x58>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800543c:	4313      	orrs	r3, r2
 800543e:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8005440:	2301      	movs	r3, #1
 8005442:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005444:	2780      	movs	r7, #128	; 0x80
 8005446:	4e82      	ldr	r6, [pc, #520]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005448:	007f      	lsls	r7, r7, #1
 800544a:	6833      	ldr	r3, [r6, #0]
 800544c:	423b      	tst	r3, r7
 800544e:	d100      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8005450:	e0af      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005452:	22c0      	movs	r2, #192	; 0xc0
 8005454:	21c0      	movs	r1, #192	; 0xc0
 8005456:	6828      	ldr	r0, [r5, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005458:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800545a:	0392      	lsls	r2, r2, #14
 800545c:	4010      	ands	r0, r2
 800545e:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005460:	401a      	ands	r2, r3
 8005462:	4290      	cmp	r0, r2
 8005464:	d000      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005466:	e0b6      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005468:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800546a:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800546c:	d000      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x84>
 800546e:	e0bd      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x200>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005470:	6861      	ldr	r1, [r4, #4]
 8005472:	23c0      	movs	r3, #192	; 0xc0
 8005474:	000a      	movs	r2, r1
 8005476:	029b      	lsls	r3, r3, #10
 8005478:	401a      	ands	r2, r3
 800547a:	429a      	cmp	r2, r3
 800547c:	d107      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800547e:	682b      	ldr	r3, [r5, #0]
 8005480:	4874      	ldr	r0, [pc, #464]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005482:	4003      	ands	r3, r0
 8005484:	20c0      	movs	r0, #192	; 0xc0
 8005486:	0380      	lsls	r0, r0, #14
 8005488:	4001      	ands	r1, r0
 800548a:	430b      	orrs	r3, r1
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005490:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005492:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005494:	652a      	str	r2, [r5, #80]	; 0x50
    if(pwrclkchanged == SET)
 8005496:	2b01      	cmp	r3, #1
 8005498:	d103      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800549a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800549c:	4a6e      	ldr	r2, [pc, #440]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800549e:	4013      	ands	r3, r2
 80054a0:	63ab      	str	r3, [r5, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	07db      	lsls	r3, r3, #31
 80054a6:	d50d      	bpl.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80054a8:	68a3      	ldr	r3, [r4, #8]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d903      	bls.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 80054ae:	21de      	movs	r1, #222	; 0xde
 80054b0:	4863      	ldr	r0, [pc, #396]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054b2:	f001 fe32 	bl	800711a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054b6:	2103      	movs	r1, #3
 80054b8:	4a64      	ldr	r2, [pc, #400]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80054bc:	438b      	bics	r3, r1
 80054be:	68a1      	ldr	r1, [r4, #8]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	079b      	lsls	r3, r3, #30
 80054c8:	d50e      	bpl.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80054ca:	230c      	movs	r3, #12
 80054cc:	68e2      	ldr	r2, [r4, #12]
 80054ce:	439a      	bics	r2, r3
 80054d0:	d003      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xee>
 80054d2:	21e9      	movs	r1, #233	; 0xe9
 80054d4:	485a      	ldr	r0, [pc, #360]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054d6:	f001 fe20 	bl	800711a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054da:	210c      	movs	r1, #12
 80054dc:	4a5b      	ldr	r2, [pc, #364]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80054e0:	438b      	bics	r3, r1
 80054e2:	68e1      	ldr	r1, [r4, #12]
 80054e4:	430b      	orrs	r3, r1
 80054e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	075b      	lsls	r3, r3, #29
 80054ec:	d50d      	bpl.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80054ee:	4d5b      	ldr	r5, [pc, #364]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80054f0:	6923      	ldr	r3, [r4, #16]
 80054f2:	422b      	tst	r3, r5
 80054f4:	d003      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 80054f6:	21f3      	movs	r1, #243	; 0xf3
 80054f8:	4851      	ldr	r0, [pc, #324]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054fa:	f001 fe0e 	bl	800711a <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054fe:	4a53      	ldr	r2, [pc, #332]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005500:	6921      	ldr	r1, [r4, #16]
 8005502:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005504:	402b      	ands	r3, r5
 8005506:	430b      	orrs	r3, r1
 8005508:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	071b      	lsls	r3, r3, #28
 800550e:	d512      	bpl.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005510:	6963      	ldr	r3, [r4, #20]
 8005512:	4a53      	ldr	r2, [pc, #332]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005514:	4213      	tst	r3, r2
 8005516:	d007      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005518:	2280      	movs	r2, #128	; 0x80
 800551a:	0192      	lsls	r2, r2, #6
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005520:	21fd      	movs	r1, #253	; 0xfd
 8005522:	4847      	ldr	r0, [pc, #284]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005524:	f001 fdf9 	bl	800711a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005528:	4a48      	ldr	r2, [pc, #288]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552a:	494e      	ldr	r1, [pc, #312]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800552c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800552e:	400b      	ands	r3, r1
 8005530:	6961      	ldr	r1, [r4, #20]
 8005532:	430b      	orrs	r3, r1
 8005534:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	05db      	lsls	r3, r3, #23
 800553a:	d513      	bpl.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800553c:	69a3      	ldr	r3, [r4, #24]
 800553e:	4a4a      	ldr	r2, [pc, #296]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005540:	4213      	tst	r3, r2
 8005542:	d008      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8005544:	2280      	movs	r2, #128	; 0x80
 8005546:	0292      	lsls	r2, r2, #10
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800554c:	2184      	movs	r1, #132	; 0x84
 800554e:	483c      	ldr	r0, [pc, #240]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005550:	0049      	lsls	r1, r1, #1
 8005552:	f001 fde2 	bl	800711a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005556:	4a3d      	ldr	r2, [pc, #244]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005558:	493a      	ldr	r1, [pc, #232]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800555a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800555c:	400b      	ands	r3, r1
 800555e:	69a1      	ldr	r1, [r4, #24]
 8005560:	430b      	orrs	r3, r1
 8005562:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	065b      	lsls	r3, r3, #25
 8005568:	d50e      	bpl.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800556a:	4d40      	ldr	r5, [pc, #256]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x280>)
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800556c:	6a23      	ldr	r3, [r4, #32]
 800556e:	422b      	tst	r3, r5
 8005570:	d004      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005572:	2114      	movs	r1, #20
 8005574:	4832      	ldr	r0, [pc, #200]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005576:	31ff      	adds	r1, #255	; 0xff
 8005578:	f001 fdcf 	bl	800711a <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800557c:	4a33      	ldr	r2, [pc, #204]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557e:	6a21      	ldr	r1, [r4, #32]
 8005580:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005582:	402b      	ands	r3, r5
 8005584:	430b      	orrs	r3, r1
 8005586:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005588:	6823      	ldr	r3, [r4, #0]
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800558a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800558c:	061b      	lsls	r3, r3, #24
 800558e:	d521      	bpl.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005590:	4d37      	ldr	r5, [pc, #220]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x284>)
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8005592:	69e3      	ldr	r3, [r4, #28]
 8005594:	422b      	tst	r3, r5
 8005596:	d004      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005598:	211c      	movs	r1, #28
 800559a:	4829      	ldr	r0, [pc, #164]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800559c:	31ff      	adds	r1, #255	; 0xff
 800559e:	f001 fdbc 	bl	800711a <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80055a2:	4a2a      	ldr	r2, [pc, #168]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a4:	69e1      	ldr	r1, [r4, #28]
 80055a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  return HAL_OK;
 80055a8:	2000      	movs	r0, #0
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80055aa:	402b      	ands	r3, r5
 80055ac:	430b      	orrs	r3, r1
 80055ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055b0:	e010      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b2:	6833      	ldr	r3, [r6, #0]
 80055b4:	433b      	orrs	r3, r7
 80055b6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80055b8:	f7fd fe4a 	bl	8003250 <HAL_GetTick>
 80055bc:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055be:	6833      	ldr	r3, [r6, #0]
 80055c0:	423b      	tst	r3, r7
 80055c2:	d000      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 80055c4:	e745      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x66>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c6:	f7fd fe43 	bl	8003250 <HAL_GetTick>
 80055ca:	9b01      	ldr	r3, [sp, #4]
 80055cc:	1ac0      	subs	r0, r0, r3
 80055ce:	2864      	cmp	r0, #100	; 0x64
 80055d0:	d9f5      	bls.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          return HAL_TIMEOUT;
 80055d2:	2003      	movs	r0, #3
}
 80055d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80055d6:	001a      	movs	r2, r3
 80055d8:	400a      	ands	r2, r1
 80055da:	428a      	cmp	r2, r1
 80055dc:	d000      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80055de:	e743      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055e0:	682a      	ldr	r2, [r5, #0]
          return HAL_ERROR;
 80055e2:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055e4:	0392      	lsls	r2, r2, #14
 80055e6:	d400      	bmi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80055e8:	e73e      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055ea:	e7f3      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80055ec:	400b      	ands	r3, r1
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d100      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80055f2:	e73d      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x84>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	069b      	lsls	r3, r3, #26
 80055f8:	d400      	bmi.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80055fa:	e739      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_BACKUPRESET_FORCE();
 80055fc:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80055fe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8005600:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8005602:	031b      	lsls	r3, r3, #12
 8005604:	4303      	orrs	r3, r0
 8005606:	652b      	str	r3, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005608:	6d2b      	ldr	r3, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800560a:	490e      	ldr	r1, [pc, #56]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x258>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800560c:	4819      	ldr	r0, [pc, #100]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x288>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800560e:	4011      	ands	r1, r2
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005610:	4003      	ands	r3, r0
 8005612:	652b      	str	r3, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 8005614:	6529      	str	r1, [r5, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005616:	05d3      	lsls	r3, r2, #23
 8005618:	d400      	bmi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800561a:	e729      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x84>
        tickstart = HAL_GetTick();
 800561c:	f7fd fe18 	bl	8003250 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005620:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8005622:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005624:	00bf      	lsls	r7, r7, #2
 8005626:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005628:	423b      	tst	r3, r7
 800562a:	d000      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800562c:	e720      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x84>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800562e:	f7fd fe0f 	bl	8003250 <HAL_GetTick>
 8005632:	4b11      	ldr	r3, [pc, #68]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005634:	1b80      	subs	r0, r0, r6
 8005636:	4298      	cmp	r0, r3
 8005638:	d9f5      	bls.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 800563a:	e7ca      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800563c:	000001ff 	.word	0x000001ff
 8005640:	0800a47b 	.word	0x0800a47b
 8005644:	fffcffff 	.word	0xfffcffff
 8005648:	ffdfffff 	.word	0xffdfffff
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
 8005654:	ffcfffff 	.word	0xffcfffff
 8005658:	efffffff 	.word	0xefffffff
 800565c:	fffff3ff 	.word	0xfffff3ff
 8005660:	ffffefff 	.word	0xffffefff
 8005664:	ffffcfff 	.word	0xffffcfff
 8005668:	fffeffff 	.word	0xfffeffff
 800566c:	fbffffff 	.word	0xfbffffff
 8005670:	fff3ffff 	.word	0xfff3ffff
 8005674:	fff7ffff 	.word	0xfff7ffff
 8005678:	00001388 	.word	0x00001388

0800567c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	4907      	ldr	r1, [pc, #28]	; (800569c <UART_EndRxTransfer+0x20>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	400a      	ands	r2, r1
 8005684:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	3123      	adds	r1, #35	; 0x23
 800568a:	31ff      	adds	r1, #255	; 0xff
 800568c:	438a      	bics	r2, r1
 800568e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005690:	2320      	movs	r3, #32
 8005692:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005698:	4770      	bx	lr
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	fffffedf 	.word	0xfffffedf

080056a0 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80056a2:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056a4:	2b21      	cmp	r3, #33	; 0x21
 80056a6:	d10d      	bne.n	80056c4 <UART_TxISR_16BIT+0x24>
  {
    if (huart->TxXferCount == 0U)
 80056a8:	0001      	movs	r1, r0
 80056aa:	3152      	adds	r1, #82	; 0x52
 80056ac:	880a      	ldrh	r2, [r1, #0]
 80056ae:	6803      	ldr	r3, [r0, #0]
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	d108      	bne.n	80056c6 <UART_TxISR_16BIT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80056b4:	2180      	movs	r1, #128	; 0x80
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	438a      	bics	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056bc:	2240      	movs	r2, #64	; 0x40
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80056c4:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056c6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80056c8:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 80056ca:	3402      	adds	r4, #2
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80056cc:	05d2      	lsls	r2, r2, #23
 80056ce:	0dd2      	lsrs	r2, r2, #23
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80056d2:	64c4      	str	r4, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80056d4:	880b      	ldrh	r3, [r1, #0]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29b      	uxth	r3, r3
 80056da:	800b      	strh	r3, [r1, #0]
}
 80056dc:	e7f2      	b.n	80056c4 <UART_TxISR_16BIT+0x24>

080056de <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056de:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80056e0:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056e2:	2b21      	cmp	r3, #33	; 0x21
 80056e4:	d10d      	bne.n	8005702 <UART_TxISR_8BIT+0x24>
    if (huart->TxXferCount == 0U)
 80056e6:	0001      	movs	r1, r0
 80056e8:	3152      	adds	r1, #82	; 0x52
 80056ea:	880a      	ldrh	r2, [r1, #0]
 80056ec:	6803      	ldr	r3, [r0, #0]
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	d108      	bne.n	8005704 <UART_TxISR_8BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80056f2:	2180      	movs	r1, #128	; 0x80
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	438a      	bics	r2, r1
 80056f8:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056fa:	2240      	movs	r2, #64	; 0x40
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	601a      	str	r2, [r3, #0]
}
 8005702:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005704:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005706:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8005708:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800570a:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800570c:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800570e:	880b      	ldrh	r3, [r1, #0]
 8005710:	3b01      	subs	r3, #1
 8005712:	b29b      	uxth	r3, r3
 8005714:	800b      	strh	r3, [r1, #0]
}
 8005716:	e7f4      	b.n	8005702 <UART_TxISR_8BIT+0x24>

08005718 <HAL_UART_Transmit_IT>:
{
 8005718:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800571a:	6f44      	ldr	r4, [r0, #116]	; 0x74
{
 800571c:	0003      	movs	r3, r0
    return HAL_BUSY;
 800571e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005720:	2c20      	cmp	r4, #32
 8005722:	d130      	bne.n	8005786 <HAL_UART_Transmit_IT+0x6e>
      return HAL_ERROR;
 8005724:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005726:	2900      	cmp	r1, #0
 8005728:	d02d      	beq.n	8005786 <HAL_UART_Transmit_IT+0x6e>
 800572a:	2a00      	cmp	r2, #0
 800572c:	d02b      	beq.n	8005786 <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800572e:	2480      	movs	r4, #128	; 0x80
 8005730:	689d      	ldr	r5, [r3, #8]
 8005732:	0164      	lsls	r4, r4, #5
 8005734:	42a5      	cmp	r5, r4
 8005736:	d104      	bne.n	8005742 <HAL_UART_Transmit_IT+0x2a>
 8005738:	691c      	ldr	r4, [r3, #16]
 800573a:	2c00      	cmp	r4, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 800573e:	4201      	tst	r1, r0
 8005740:	d121      	bne.n	8005786 <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 8005742:	001c      	movs	r4, r3
 8005744:	3470      	adds	r4, #112	; 0x70
 8005746:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8005748:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800574a:	2e01      	cmp	r6, #1
 800574c:	d01b      	beq.n	8005786 <HAL_UART_Transmit_IT+0x6e>
 800574e:	3801      	subs	r0, #1
 8005750:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8005752:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005754:	0019      	movs	r1, r3
 8005756:	3150      	adds	r1, #80	; 0x50
 8005758:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 800575a:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 800575c:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->TxISR       = NULL;
 8005760:	665a      	str	r2, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005762:	3221      	adds	r2, #33	; 0x21
 8005764:	675a      	str	r2, [r3, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	0152      	lsls	r2, r2, #5
 800576a:	4295      	cmp	r5, r2
 800576c:	d10c      	bne.n	8005788 <HAL_UART_Transmit_IT+0x70>
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	2a00      	cmp	r2, #0
 8005772:	d109      	bne.n	8005788 <HAL_UART_Transmit_IT+0x70>
      huart->TxISR = UART_TxISR_16BIT;
 8005774:	4a05      	ldr	r2, [pc, #20]	; (800578c <HAL_UART_Transmit_IT+0x74>)
      huart->TxISR = UART_TxISR_8BIT;
 8005776:	665a      	str	r2, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	2380      	movs	r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 800577c:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800577e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8005780:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005782:	430b      	orrs	r3, r1
 8005784:	6013      	str	r3, [r2, #0]
}
 8005786:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 8005788:	4a01      	ldr	r2, [pc, #4]	; (8005790 <HAL_UART_Transmit_IT+0x78>)
 800578a:	e7f4      	b.n	8005776 <HAL_UART_Transmit_IT+0x5e>
 800578c:	080056a1 	.word	0x080056a1
 8005790:	080056df 	.word	0x080056df

08005794 <HAL_UART_Receive_IT>:
{
 8005794:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005796:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8005798:	0003      	movs	r3, r0
    return HAL_BUSY;
 800579a:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800579c:	2c20      	cmp	r4, #32
 800579e:	d141      	bne.n	8005824 <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 80057a0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d03e      	beq.n	8005824 <HAL_UART_Receive_IT+0x90>
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d03c      	beq.n	8005824 <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057aa:	2580      	movs	r5, #128	; 0x80
 80057ac:	689c      	ldr	r4, [r3, #8]
 80057ae:	016d      	lsls	r5, r5, #5
 80057b0:	42ac      	cmp	r4, r5
 80057b2:	d104      	bne.n	80057be <HAL_UART_Receive_IT+0x2a>
 80057b4:	691d      	ldr	r5, [r3, #16]
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	d101      	bne.n	80057be <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 80057ba:	4201      	tst	r1, r0
 80057bc:	d132      	bne.n	8005824 <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 80057be:	001d      	movs	r5, r3
 80057c0:	3570      	adds	r5, #112	; 0x70
 80057c2:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 80057c4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80057c6:	2e01      	cmp	r6, #1
 80057c8:	d02c      	beq.n	8005824 <HAL_UART_Receive_IT+0x90>
 80057ca:	3801      	subs	r0, #1
 80057cc:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 80057ce:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80057d0:	0019      	movs	r1, r3
 80057d2:	3158      	adds	r1, #88	; 0x58
 80057d4:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 80057d6:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 80057d8:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 80057da:	2100      	movs	r1, #0
 80057dc:	001a      	movs	r2, r3
 80057de:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80057e0:	0140      	lsls	r0, r0, #5
 80057e2:	325c      	adds	r2, #92	; 0x5c
 80057e4:	4284      	cmp	r4, r0
 80057e6:	d120      	bne.n	800582a <HAL_UART_Receive_IT+0x96>
 80057e8:	6919      	ldr	r1, [r3, #16]
 80057ea:	2900      	cmp	r1, #0
 80057ec:	d11b      	bne.n	8005826 <HAL_UART_Receive_IT+0x92>
 80057ee:	4918      	ldr	r1, [pc, #96]	; (8005850 <HAL_UART_Receive_IT+0xbc>)
 80057f0:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f4:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f8:	3222      	adds	r2, #34	; 0x22
 80057fa:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	6890      	ldr	r0, [r2, #8]
 8005800:	4301      	orrs	r1, r0
 8005802:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005804:	2180      	movs	r1, #128	; 0x80
 8005806:	0149      	lsls	r1, r1, #5
 8005808:	428c      	cmp	r4, r1
 800580a:	d11e      	bne.n	800584a <HAL_UART_Receive_IT+0xb6>
 800580c:	6919      	ldr	r1, [r3, #16]
 800580e:	2900      	cmp	r1, #0
 8005810:	d11b      	bne.n	800584a <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 8005812:	4910      	ldr	r1, [pc, #64]	; (8005854 <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 8005814:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005816:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8005818:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800581a:	6811      	ldr	r1, [r2, #0]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8005820:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005822:	6013      	str	r3, [r2, #0]
}
 8005824:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 8005826:	21ff      	movs	r1, #255	; 0xff
 8005828:	e7e2      	b.n	80057f0 <HAL_UART_Receive_IT+0x5c>
 800582a:	2c00      	cmp	r4, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Receive_IT+0xa4>
 800582e:	6919      	ldr	r1, [r3, #16]
 8005830:	2900      	cmp	r1, #0
 8005832:	d0f8      	beq.n	8005826 <HAL_UART_Receive_IT+0x92>
 8005834:	217f      	movs	r1, #127	; 0x7f
 8005836:	e7db      	b.n	80057f0 <HAL_UART_Receive_IT+0x5c>
 8005838:	2080      	movs	r0, #128	; 0x80
 800583a:	0540      	lsls	r0, r0, #21
 800583c:	4284      	cmp	r4, r0
 800583e:	d1d7      	bne.n	80057f0 <HAL_UART_Receive_IT+0x5c>
 8005840:	6919      	ldr	r1, [r3, #16]
 8005842:	2900      	cmp	r1, #0
 8005844:	d0f6      	beq.n	8005834 <HAL_UART_Receive_IT+0xa0>
 8005846:	213f      	movs	r1, #63	; 0x3f
 8005848:	e7d2      	b.n	80057f0 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 800584a:	4903      	ldr	r1, [pc, #12]	; (8005858 <HAL_UART_Receive_IT+0xc4>)
 800584c:	e7e2      	b.n	8005814 <HAL_UART_Receive_IT+0x80>
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	000001ff 	.word	0x000001ff
 8005854:	080058bd 	.word	0x080058bd
 8005858:	0800585d 	.word	0x0800585d

0800585c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800585c:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800585e:	b510      	push	{r4, lr}
 8005860:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005862:	2a22      	cmp	r2, #34	; 0x22
 8005864:	d123      	bne.n	80058ae <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8005866:	0002      	movs	r2, r0
 8005868:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800586c:	8812      	ldrh	r2, [r2, #0]
 800586e:	4013      	ands	r3, r2
 8005870:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005872:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8005874:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8005876:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005878:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 800587a:	3301      	adds	r3, #1
 800587c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800587e:	8813      	ldrh	r3, [r2, #0]
 8005880:	3b01      	subs	r3, #1
 8005882:	b29b      	uxth	r3, r3
 8005884:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8005886:	8813      	ldrh	r3, [r2, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10e      	bne.n	80058ac <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588e:	6802      	ldr	r2, [r0, #0]
 8005890:	4c09      	ldr	r4, [pc, #36]	; (80058b8 <UART_RxISR_8BIT+0x5c>)
 8005892:	6811      	ldr	r1, [r2, #0]
 8005894:	4021      	ands	r1, r4
 8005896:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005898:	6891      	ldr	r1, [r2, #8]
 800589a:	3423      	adds	r4, #35	; 0x23
 800589c:	34ff      	adds	r4, #255	; 0xff
 800589e:	43a1      	bics	r1, r4
 80058a0:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058a2:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058a4:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80058a6:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80058a8:	f000 fd3e 	bl	8006328 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ac:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058ae:	2208      	movs	r2, #8
 80058b0:	6999      	ldr	r1, [r3, #24]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	619a      	str	r2, [r3, #24]
}
 80058b6:	e7f9      	b.n	80058ac <UART_RxISR_8BIT+0x50>
 80058b8:	fffffedf 	.word	0xfffffedf

080058bc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058bc:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80058be:	b510      	push	{r4, lr}
 80058c0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058c2:	2a22      	cmp	r2, #34	; 0x22
 80058c4:	d121      	bne.n	800590a <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 80058c6:	0004      	movs	r4, r0
 80058c8:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80058cc:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 80058d0:	4021      	ands	r1, r4
 80058d2:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80058d4:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 80058d6:	3202      	adds	r2, #2
 80058d8:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80058da:	315a      	adds	r1, #90	; 0x5a
 80058dc:	880a      	ldrh	r2, [r1, #0]
 80058de:	3a01      	subs	r2, #1
 80058e0:	b292      	uxth	r2, r2
 80058e2:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 80058e4:	880a      	ldrh	r2, [r1, #0]
 80058e6:	b292      	uxth	r2, r2
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	d10d      	bne.n	8005908 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ec:	6819      	ldr	r1, [r3, #0]
 80058ee:	4c09      	ldr	r4, [pc, #36]	; (8005914 <UART_RxISR_16BIT+0x58>)
 80058f0:	4021      	ands	r1, r4
 80058f2:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f4:	6899      	ldr	r1, [r3, #8]
 80058f6:	3423      	adds	r4, #35	; 0x23
 80058f8:	34ff      	adds	r4, #255	; 0xff
 80058fa:	43a1      	bics	r1, r4
 80058fc:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058fe:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005900:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8005902:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005904:	f000 fd10 	bl	8006328 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005908:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800590a:	2208      	movs	r2, #8
 800590c:	6999      	ldr	r1, [r3, #24]
 800590e:	430a      	orrs	r2, r1
 8005910:	619a      	str	r2, [r3, #24]
}
 8005912:	e7f9      	b.n	8005908 <UART_RxISR_16BIT+0x4c>
 8005914:	fffffedf 	.word	0xfffffedf

08005918 <HAL_UART_ErrorCallback>:
 8005918:	4770      	bx	lr
	...

0800591c <HAL_UART_IRQHandler>:
{
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800591e:	6803      	ldr	r3, [r0, #0]
{
 8005920:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005922:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005924:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005926:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8005928:	0711      	lsls	r1, r2, #28
 800592a:	d10a      	bne.n	8005942 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800592c:	2120      	movs	r1, #32
 800592e:	420a      	tst	r2, r1
 8005930:	d100      	bne.n	8005934 <HAL_UART_IRQHandler+0x18>
 8005932:	e06a      	b.n	8005a0a <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005934:	4208      	tst	r0, r1
 8005936:	d068      	beq.n	8005a0a <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8005938:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 800593a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 800593c:	2b00      	cmp	r3, #0
 800593e:	d15a      	bne.n	80059f6 <HAL_UART_IRQHandler+0xda>
 8005940:	e05a      	b.n	80059f8 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005942:	2101      	movs	r1, #1
 8005944:	0035      	movs	r5, r6
 8005946:	400d      	ands	r5, r1
 8005948:	d103      	bne.n	8005952 <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800594a:	2790      	movs	r7, #144	; 0x90
 800594c:	007f      	lsls	r7, r7, #1
 800594e:	4238      	tst	r0, r7
 8005950:	d05b      	beq.n	8005a0a <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005952:	420a      	tst	r2, r1
 8005954:	d005      	beq.n	8005962 <HAL_UART_IRQHandler+0x46>
 8005956:	05c6      	lsls	r6, r0, #23
 8005958:	d503      	bpl.n	8005962 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800595a:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800595c:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800595e:	4331      	orrs	r1, r6
 8005960:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005962:	2102      	movs	r1, #2
 8005964:	420a      	tst	r2, r1
 8005966:	d006      	beq.n	8005976 <HAL_UART_IRQHandler+0x5a>
 8005968:	2d00      	cmp	r5, #0
 800596a:	d004      	beq.n	8005976 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800596c:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800596e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005970:	1849      	adds	r1, r1, r1
 8005972:	4331      	orrs	r1, r6
 8005974:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005976:	2104      	movs	r1, #4
 8005978:	420a      	tst	r2, r1
 800597a:	d006      	beq.n	800598a <HAL_UART_IRQHandler+0x6e>
 800597c:	2d00      	cmp	r5, #0
 800597e:	d004      	beq.n	800598a <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005980:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005982:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005984:	3902      	subs	r1, #2
 8005986:	4331      	orrs	r1, r6
 8005988:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800598a:	0711      	lsls	r1, r2, #28
 800598c:	d508      	bpl.n	80059a0 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800598e:	0681      	lsls	r1, r0, #26
 8005990:	d401      	bmi.n	8005996 <HAL_UART_IRQHandler+0x7a>
 8005992:	2d00      	cmp	r5, #0
 8005994:	d004      	beq.n	80059a0 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005996:	2108      	movs	r1, #8
 8005998:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800599a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800599c:	4319      	orrs	r1, r3
 800599e:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d028      	beq.n	80059f8 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059a6:	2320      	movs	r3, #32
 80059a8:	421a      	tst	r2, r3
 80059aa:	d006      	beq.n	80059ba <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059ac:	4218      	tst	r0, r3
 80059ae:	d004      	beq.n	80059ba <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 80059b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 80059b6:	0020      	movs	r0, r4
 80059b8:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059ba:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80059bc:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059be:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 80059c0:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c2:	065b      	lsls	r3, r3, #25
 80059c4:	d402      	bmi.n	80059cc <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80059c6:	2308      	movs	r3, #8
 80059c8:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059ca:	d01a      	beq.n	8005a02 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80059cc:	f7ff fe56 	bl	800567c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	2140      	movs	r1, #64	; 0x40
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	420a      	tst	r2, r1
 80059d8:	d00f      	beq.n	80059fa <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059da:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80059dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059de:	438a      	bics	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d009      	beq.n	80059fa <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <HAL_UART_IRQHandler+0x134>)
 80059e8:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ea:	f7fe f9e9 	bl	8003dc0 <HAL_DMA_Abort_IT>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059f2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80059f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80059f6:	4798      	blx	r3
}
 80059f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80059fa:	0020      	movs	r0, r4
 80059fc:	f7ff ff8c 	bl	8005918 <HAL_UART_ErrorCallback>
 8005a00:	e7fa      	b.n	80059f8 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8005a02:	f7ff ff89 	bl	8005918 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a06:	67e5      	str	r5, [r4, #124]	; 0x7c
 8005a08:	e7f6      	b.n	80059f8 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	0349      	lsls	r1, r1, #13
 8005a0e:	420a      	tst	r2, r1
 8005a10:	d006      	beq.n	8005a20 <HAL_UART_IRQHandler+0x104>
 8005a12:	0275      	lsls	r5, r6, #9
 8005a14:	d504      	bpl.n	8005a20 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a16:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005a18:	0020      	movs	r0, r4
 8005a1a:	f000 fc5d 	bl	80062d8 <HAL_UARTEx_WakeupCallback>
    return;
 8005a1e:	e7eb      	b.n	80059f8 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	420a      	tst	r2, r1
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a26:	4208      	tst	r0, r1
 8005a28:	d001      	beq.n	8005a2e <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8005a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a2c:	e785      	b.n	800593a <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a2e:	2140      	movs	r1, #64	; 0x40
 8005a30:	420a      	tst	r2, r1
 8005a32:	d0e1      	beq.n	80059f8 <HAL_UART_IRQHandler+0xdc>
 8005a34:	4208      	tst	r0, r1
 8005a36:	d0df      	beq.n	80059f8 <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a38:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8005a3a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a3c:	438a      	bics	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005a40:	2320      	movs	r3, #32
 8005a42:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8005a48:	f001 fb0a 	bl	8007060 <HAL_UART_TxCpltCallback>
 8005a4c:	e7d4      	b.n	80059f8 <HAL_UART_IRQHandler+0xdc>
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	08005a55 	.word	0x08005a55

08005a54 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a54:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	0002      	movs	r2, r0
{
 8005a5a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005a5c:	325a      	adds	r2, #90	; 0x5a
 8005a5e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005a60:	3a08      	subs	r2, #8
 8005a62:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8005a64:	f7ff ff58 	bl	8005918 <HAL_UART_ErrorCallback>
}
 8005a68:	bd10      	pop	{r4, pc}
	...

08005a6c <UART_SetConfig>:
{
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005a6e:	6842      	ldr	r2, [r0, #4]
 8005a70:	4baf      	ldr	r3, [pc, #700]	; (8005d30 <UART_SetConfig+0x2c4>)
{
 8005a72:	0004      	movs	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d903      	bls.n	8005a80 <UART_SetConfig+0x14>
 8005a78:	49ae      	ldr	r1, [pc, #696]	; (8005d34 <UART_SetConfig+0x2c8>)
 8005a7a:	48af      	ldr	r0, [pc, #700]	; (8005d38 <UART_SetConfig+0x2cc>)
 8005a7c:	f001 fb4d 	bl	800711a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	68a3      	ldr	r3, [r4, #8]
 8005a84:	0552      	lsls	r2, r2, #21
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d006      	beq.n	8005a98 <UART_SetConfig+0x2c>
 8005a8a:	4aac      	ldr	r2, [pc, #688]	; (8005d3c <UART_SetConfig+0x2d0>)
 8005a8c:	4213      	tst	r3, r2
 8005a8e:	d003      	beq.n	8005a98 <UART_SetConfig+0x2c>
 8005a90:	49ab      	ldr	r1, [pc, #684]	; (8005d40 <UART_SetConfig+0x2d4>)
 8005a92:	48a9      	ldr	r0, [pc, #676]	; (8005d38 <UART_SetConfig+0x2cc>)
 8005a94:	f001 fb41 	bl	800711a <assert_failed>
 8005a98:	4daa      	ldr	r5, [pc, #680]	; (8005d44 <UART_SetConfig+0x2d8>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	68e3      	ldr	r3, [r4, #12]
 8005a9e:	4eaa      	ldr	r6, [pc, #680]	; (8005d48 <UART_SetConfig+0x2dc>)
 8005aa0:	42aa      	cmp	r2, r5
 8005aa2:	d160      	bne.n	8005b66 <UART_SetConfig+0xfa>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005aa4:	4aa9      	ldr	r2, [pc, #676]	; (8005d4c <UART_SetConfig+0x2e0>)
 8005aa6:	4213      	tst	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <UART_SetConfig+0x46>
 8005aaa:	49a9      	ldr	r1, [pc, #676]	; (8005d50 <UART_SetConfig+0x2e4>)
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005aac:	48a2      	ldr	r0, [pc, #648]	; (8005d38 <UART_SetConfig+0x2cc>)
 8005aae:	f001 fb34 	bl	800711a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	4aa7      	ldr	r2, [pc, #668]	; (8005d54 <UART_SetConfig+0x2e8>)
 8005ab6:	4213      	tst	r3, r2
 8005ab8:	d007      	beq.n	8005aca <UART_SetConfig+0x5e>
 8005aba:	22c0      	movs	r2, #192	; 0xc0
 8005abc:	00d2      	lsls	r2, r2, #3
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <UART_SetConfig+0x5e>
 8005ac2:	49a5      	ldr	r1, [pc, #660]	; (8005d58 <UART_SetConfig+0x2ec>)
 8005ac4:	489c      	ldr	r0, [pc, #624]	; (8005d38 <UART_SetConfig+0x2cc>)
 8005ac6:	f001 fb28 	bl	800711a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	220c      	movs	r2, #12
 8005ace:	0019      	movs	r1, r3
 8005ad0:	4391      	bics	r1, r2
 8005ad2:	d101      	bne.n	8005ad8 <UART_SetConfig+0x6c>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <UART_SetConfig+0x74>
 8005ad8:	49a0      	ldr	r1, [pc, #640]	; (8005d5c <UART_SetConfig+0x2f0>)
 8005ada:	4897      	ldr	r0, [pc, #604]	; (8005d38 <UART_SetConfig+0x2cc>)
 8005adc:	f001 fb1d 	bl	800711a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005ae0:	4b9f      	ldr	r3, [pc, #636]	; (8005d60 <UART_SetConfig+0x2f4>)
 8005ae2:	69a2      	ldr	r2, [r4, #24]
 8005ae4:	421a      	tst	r2, r3
 8005ae6:	d003      	beq.n	8005af0 <UART_SetConfig+0x84>
 8005ae8:	499e      	ldr	r1, [pc, #632]	; (8005d64 <UART_SetConfig+0x2f8>)
 8005aea:	4893      	ldr	r0, [pc, #588]	; (8005d38 <UART_SetConfig+0x2cc>)
 8005aec:	f001 fb15 	bl	800711a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005af0:	4b9d      	ldr	r3, [pc, #628]	; (8005d68 <UART_SetConfig+0x2fc>)
 8005af2:	69e2      	ldr	r2, [r4, #28]
 8005af4:	421a      	tst	r2, r3
 8005af6:	d003      	beq.n	8005b00 <UART_SetConfig+0x94>
 8005af8:	499c      	ldr	r1, [pc, #624]	; (8005d6c <UART_SetConfig+0x300>)
 8005afa:	488f      	ldr	r0, [pc, #572]	; (8005d38 <UART_SetConfig+0x2cc>)
 8005afc:	f001 fb0d 	bl	800711a <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b00:	6927      	ldr	r7, [r4, #16]
 8005b02:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b04:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b06:	433a      	orrs	r2, r7
 8005b08:	6967      	ldr	r7, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b0a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b0c:	69e1      	ldr	r1, [r4, #28]
 8005b0e:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b10:	4f97      	ldr	r7, [pc, #604]	; (8005d70 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b12:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b14:	4038      	ands	r0, r7
 8005b16:	4302      	orrs	r2, r0
 8005b18:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b1a:	685a      	ldr	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b1c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b1e:	4016      	ands	r6, r2
 8005b20:	68e2      	ldr	r2, [r4, #12]
 8005b22:	4316      	orrs	r6, r2
 8005b24:	605e      	str	r6, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b26:	42ab      	cmp	r3, r5
 8005b28:	d001      	beq.n	8005b2e <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
 8005b2a:	6a22      	ldr	r2, [r4, #32]
 8005b2c:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	4e90      	ldr	r6, [pc, #576]	; (8005d74 <UART_SetConfig+0x308>)
 8005b32:	4032      	ands	r2, r6
 8005b34:	4302      	orrs	r2, r0
 8005b36:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b38:	4a8f      	ldr	r2, [pc, #572]	; (8005d78 <UART_SetConfig+0x30c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d120      	bne.n	8005b80 <UART_SetConfig+0x114>
 8005b3e:	2203      	movs	r2, #3
 8005b40:	4b8e      	ldr	r3, [pc, #568]	; (8005d7c <UART_SetConfig+0x310>)
 8005b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b44:	4013      	ands	r3, r2
 8005b46:	4a8e      	ldr	r2, [pc, #568]	; (8005d80 <UART_SetConfig+0x314>)
 8005b48:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	4299      	cmp	r1, r3
 8005b50:	d100      	bne.n	8005b54 <UART_SetConfig+0xe8>
 8005b52:	e0de      	b.n	8005d12 <UART_SetConfig+0x2a6>
    switch (clocksource)
 8005b54:	2808      	cmp	r0, #8
 8005b56:	d833      	bhi.n	8005bc0 <UART_SetConfig+0x154>
 8005b58:	f7fa fade 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005b5c:	32a5a29b 	.word	0x32a5a29b
 8005b60:	323232c0 	.word	0x323232c0
 8005b64:	c3          	.byte	0xc3
 8005b65:	00          	.byte	0x00
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005b66:	4233      	tst	r3, r6
 8005b68:	d004      	beq.n	8005b74 <UART_SetConfig+0x108>
 8005b6a:	21ad      	movs	r1, #173	; 0xad
 8005b6c:	4872      	ldr	r0, [pc, #456]	; (8005d38 <UART_SetConfig+0x2cc>)
 8005b6e:	0109      	lsls	r1, r1, #4
 8005b70:	f001 fad3 	bl	800711a <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005b74:	4b83      	ldr	r3, [pc, #524]	; (8005d84 <UART_SetConfig+0x318>)
 8005b76:	6a22      	ldr	r2, [r4, #32]
 8005b78:	421a      	tst	r2, r3
 8005b7a:	d09a      	beq.n	8005ab2 <UART_SetConfig+0x46>
 8005b7c:	4982      	ldr	r1, [pc, #520]	; (8005d88 <UART_SetConfig+0x31c>)
 8005b7e:	e795      	b.n	8005aac <UART_SetConfig+0x40>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b80:	4a82      	ldr	r2, [pc, #520]	; (8005d8c <UART_SetConfig+0x320>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d105      	bne.n	8005b92 <UART_SetConfig+0x126>
 8005b86:	220c      	movs	r2, #12
 8005b88:	4b7c      	ldr	r3, [pc, #496]	; (8005d7c <UART_SetConfig+0x310>)
 8005b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	4a80      	ldr	r2, [pc, #512]	; (8005d90 <UART_SetConfig+0x324>)
 8005b90:	e7da      	b.n	8005b48 <UART_SetConfig+0xdc>
 8005b92:	4a80      	ldr	r2, [pc, #512]	; (8005d94 <UART_SetConfig+0x328>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d100      	bne.n	8005b9a <UART_SetConfig+0x12e>
 8005b98:	e0af      	b.n	8005cfa <UART_SetConfig+0x28e>
 8005b9a:	4a7f      	ldr	r2, [pc, #508]	; (8005d98 <UART_SetConfig+0x32c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <UART_SetConfig+0x136>
 8005ba0:	e0ab      	b.n	8005cfa <UART_SetConfig+0x28e>
 8005ba2:	42ab      	cmp	r3, r5
 8005ba4:	d000      	beq.n	8005ba8 <UART_SetConfig+0x13c>
 8005ba6:	e0a1      	b.n	8005cec <UART_SetConfig+0x280>
 8005ba8:	21c0      	movs	r1, #192	; 0xc0
 8005baa:	2080      	movs	r0, #128	; 0x80
 8005bac:	4a73      	ldr	r2, [pc, #460]	; (8005d7c <UART_SetConfig+0x310>)
 8005bae:	0109      	lsls	r1, r1, #4
 8005bb0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005bb2:	00c0      	lsls	r0, r0, #3
 8005bb4:	400b      	ands	r3, r1
 8005bb6:	4283      	cmp	r3, r0
 8005bb8:	d038      	beq.n	8005c2c <UART_SetConfig+0x1c0>
 8005bba:	d803      	bhi.n	8005bc4 <UART_SetConfig+0x158>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8005bc0:	2501      	movs	r5, #1
 8005bc2:	e00d      	b.n	8005be0 <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc4:	2080      	movs	r0, #128	; 0x80
 8005bc6:	0100      	lsls	r0, r0, #4
 8005bc8:	4283      	cmp	r3, r0
 8005bca:	d00e      	beq.n	8005bea <UART_SetConfig+0x17e>
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	d1f7      	bne.n	8005bc0 <UART_SetConfig+0x154>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005bd0:	2080      	movs	r0, #128	; 0x80
 8005bd2:	0200      	lsls	r0, r0, #8
 8005bd4:	e00d      	b.n	8005bf2 <UART_SetConfig+0x186>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005bd6:	f7ff fbe9 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8005bda:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8005bdc:	42a8      	cmp	r0, r5
 8005bde:	d108      	bne.n	8005bf2 <UART_SetConfig+0x186>
  huart->RxISR = NULL;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8005be4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005be6:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bea:	6813      	ldr	r3, [r2, #0]
 8005bec:	06db      	lsls	r3, r3, #27
 8005bee:	d520      	bpl.n	8005c32 <UART_SetConfig+0x1c6>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8005bf0:	484f      	ldr	r0, [pc, #316]	; (8005d30 <UART_SetConfig+0x2c4>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	6863      	ldr	r3, [r4, #4]
 8005bf6:	435a      	muls	r2, r3
 8005bf8:	4282      	cmp	r2, r0
 8005bfa:	d8e1      	bhi.n	8005bc0 <UART_SetConfig+0x154>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bfc:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bfe:	4282      	cmp	r2, r0
 8005c00:	d3de      	bcc.n	8005bc0 <UART_SetConfig+0x154>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8005c02:	2700      	movs	r7, #0
 8005c04:	0e02      	lsrs	r2, r0, #24
 8005c06:	0201      	lsls	r1, r0, #8
 8005c08:	085e      	lsrs	r6, r3, #1
 8005c0a:	1989      	adds	r1, r1, r6
 8005c0c:	417a      	adcs	r2, r7
 8005c0e:	0008      	movs	r0, r1
 8005c10:	0011      	movs	r1, r2
 8005c12:	001a      	movs	r2, r3
 8005c14:	003b      	movs	r3, r7
 8005c16:	f7fa fc81 	bl	800051c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c1a:	4b60      	ldr	r3, [pc, #384]	; (8005d9c <UART_SetConfig+0x330>)
 8005c1c:	18c2      	adds	r2, r0, r3
 8005c1e:	4b60      	ldr	r3, [pc, #384]	; (8005da0 <UART_SetConfig+0x334>)
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d8cd      	bhi.n	8005bc0 <UART_SetConfig+0x154>
          huart->Instance->BRR = usartdiv;
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	003d      	movs	r5, r7
 8005c28:	60d8      	str	r0, [r3, #12]
 8005c2a:	e7d9      	b.n	8005be0 <UART_SetConfig+0x174>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005c2c:	f7fe ff00 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
        break;
 8005c30:	e7d3      	b.n	8005bda <UART_SetConfig+0x16e>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005c32:	485c      	ldr	r0, [pc, #368]	; (8005da4 <UART_SetConfig+0x338>)
 8005c34:	e7dd      	b.n	8005bf2 <UART_SetConfig+0x186>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c36:	f7ff fbc9 	bl	80053cc <HAL_RCC_GetPCLK2Freq>
 8005c3a:	e064      	b.n	8005d06 <UART_SetConfig+0x29a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c3c:	2510      	movs	r5, #16
 8005c3e:	4b4f      	ldr	r3, [pc, #316]	; (8005d7c <UART_SetConfig+0x310>)
 8005c40:	6861      	ldr	r1, [r4, #4]
 8005c42:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005c44:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c46:	4015      	ands	r5, r2
 8005c48:	d006      	beq.n	8005c58 <UART_SetConfig+0x1ec>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005c4a:	4b57      	ldr	r3, [pc, #348]	; (8005da8 <UART_SetConfig+0x33c>)
 8005c4c:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c4e:	f7fa fa77 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c52:	2500      	movs	r5, #0
 8005c54:	b283      	uxth	r3, r0
        break;
 8005c56:	e004      	b.n	8005c62 <UART_SetConfig+0x1f6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c58:	4b54      	ldr	r3, [pc, #336]	; (8005dac <UART_SetConfig+0x340>)
 8005c5a:	18c0      	adds	r0, r0, r3
 8005c5c:	f7fa fa70 	bl	8000140 <__udivsi3>
 8005c60:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c62:	0019      	movs	r1, r3
 8005c64:	4852      	ldr	r0, [pc, #328]	; (8005db0 <UART_SetConfig+0x344>)
 8005c66:	3910      	subs	r1, #16
 8005c68:	4281      	cmp	r1, r0
 8005c6a:	d8a9      	bhi.n	8005bc0 <UART_SetConfig+0x154>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c6c:	210f      	movs	r1, #15
 8005c6e:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c70:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c72:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c74:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8005c76:	6821      	ldr	r1, [r4, #0]
 8005c78:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8005c7a:	60cb      	str	r3, [r1, #12]
 8005c7c:	e7b0      	b.n	8005be0 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c7e:	f7fe fed7 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8005c82:	e040      	b.n	8005d06 <UART_SetConfig+0x29a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	0858      	lsrs	r0, r3, #1
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	025b      	lsls	r3, r3, #9
 8005c8c:	e03e      	b.n	8005d0c <UART_SetConfig+0x2a0>
  uint32_t usartdiv                   = 0x00000000U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e7e7      	b.n	8005c62 <UART_SetConfig+0x1f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c92:	f7ff fb8b 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c9a:	18c0      	adds	r0, r0, r3
 8005c9c:	6861      	ldr	r1, [r4, #4]
 8005c9e:	e00b      	b.n	8005cb8 <UART_SetConfig+0x24c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005ca0:	f7ff fb94 	bl	80053cc <HAL_RCC_GetPCLK2Freq>
 8005ca4:	e7f7      	b.n	8005c96 <UART_SetConfig+0x22a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca6:	2510      	movs	r5, #16
 8005ca8:	4b34      	ldr	r3, [pc, #208]	; (8005d7c <UART_SetConfig+0x310>)
 8005caa:	6861      	ldr	r1, [r4, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005cae:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb0:	4015      	ands	r5, r2
 8005cb2:	d006      	beq.n	8005cc2 <UART_SetConfig+0x256>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005cb4:	4b1e      	ldr	r3, [pc, #120]	; (8005d30 <UART_SetConfig+0x2c4>)
 8005cb6:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005cb8:	f7fa fa42 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cbc:	2500      	movs	r5, #0
 8005cbe:	b283      	uxth	r3, r0
        break;
 8005cc0:	e004      	b.n	8005ccc <UART_SetConfig+0x260>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005cc2:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <UART_SetConfig+0x338>)
 8005cc4:	18c0      	adds	r0, r0, r3
 8005cc6:	f7fa fa3b 	bl	8000140 <__udivsi3>
 8005cca:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ccc:	0019      	movs	r1, r3
 8005cce:	4838      	ldr	r0, [pc, #224]	; (8005db0 <UART_SetConfig+0x344>)
 8005cd0:	3910      	subs	r1, #16
 8005cd2:	4281      	cmp	r1, r0
 8005cd4:	d900      	bls.n	8005cd8 <UART_SetConfig+0x26c>
 8005cd6:	e773      	b.n	8005bc0 <UART_SetConfig+0x154>
      huart->Instance->BRR = usartdiv;
 8005cd8:	6821      	ldr	r1, [r4, #0]
 8005cda:	e7ce      	b.n	8005c7a <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cdc:	f7fe fea8 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8005ce0:	e7d9      	b.n	8005c96 <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005ce2:	6863      	ldr	r3, [r4, #4]
 8005ce4:	0858      	lsrs	r0, r3, #1
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	e7d6      	b.n	8005c9a <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cec:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 8005cee:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	4299      	cmp	r1, r3
 8005cf4:	d0cb      	beq.n	8005c8e <UART_SetConfig+0x222>
  uint32_t usartdiv                   = 0x00000000U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e7e8      	b.n	8005ccc <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfa:	2380      	movs	r3, #128	; 0x80
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	d1c7      	bne.n	8005c92 <UART_SetConfig+0x226>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d02:	f7ff fb53 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	0040      	lsls	r0, r0, #1
 8005d0a:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d0c:	18c0      	adds	r0, r0, r3
 8005d0e:	6861      	ldr	r1, [r4, #4]
 8005d10:	e79d      	b.n	8005c4e <UART_SetConfig+0x1e2>
    switch (clocksource)
 8005d12:	2808      	cmp	r0, #8
 8005d14:	d900      	bls.n	8005d18 <UART_SetConfig+0x2ac>
 8005d16:	e753      	b.n	8005bc0 <UART_SetConfig+0x154>
 8005d18:	f7fa fa08 	bl	800012c <__gnu_thumb1_case_shi>
 8005d1c:	ff8dfff3 	.word	0xff8dfff3
 8005d20:	ff52ff90 	.word	0xff52ff90
 8005d24:	ff52ffb1 	.word	0xff52ffb1
 8005d28:	ff52ff52 	.word	0xff52ff52
 8005d2c:	ffb4      	.short	0xffb4
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	003d0900 	.word	0x003d0900
 8005d34:	00000ac8 	.word	0x00000ac8
 8005d38:	0800a4c7 	.word	0x0800a4c7
 8005d3c:	ffffefff 	.word	0xffffefff
 8005d40:	00000ac9 	.word	0x00000ac9
 8005d44:	40004800 	.word	0x40004800
 8005d48:	ffffcfff 	.word	0xffffcfff
 8005d4c:	ffffdfff 	.word	0xffffdfff
 8005d50:	00000acc 	.word	0x00000acc
 8005d54:	fffffbff 	.word	0xfffffbff
 8005d58:	00000ad4 	.word	0x00000ad4
 8005d5c:	00000ad5 	.word	0x00000ad5
 8005d60:	fffffcff 	.word	0xfffffcff
 8005d64:	00000ad6 	.word	0x00000ad6
 8005d68:	ffff7fff 	.word	0xffff7fff
 8005d6c:	00000ad7 	.word	0x00000ad7
 8005d70:	efff69f3 	.word	0xefff69f3
 8005d74:	fffff4ff 	.word	0xfffff4ff
 8005d78:	40013800 	.word	0x40013800
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	0800a4b6 	.word	0x0800a4b6
 8005d84:	fffff7ff 	.word	0xfffff7ff
 8005d88:	00000ad1 	.word	0x00000ad1
 8005d8c:	40004400 	.word	0x40004400
 8005d90:	0800a4ba 	.word	0x0800a4ba
 8005d94:	40004c00 	.word	0x40004c00
 8005d98:	40005000 	.word	0x40005000
 8005d9c:	fffffd00 	.word	0xfffffd00
 8005da0:	000ffcff 	.word	0x000ffcff
 8005da4:	00f42400 	.word	0x00f42400
 8005da8:	007a1200 	.word	0x007a1200
 8005dac:	01e84800 	.word	0x01e84800
 8005db0:	0000ffef 	.word	0x0000ffef

08005db4 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005db4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005db6:	b570      	push	{r4, r5, r6, lr}
 8005db8:	0004      	movs	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005dba:	2bff      	cmp	r3, #255	; 0xff
 8005dbc:	d903      	bls.n	8005dc6 <UART_AdvFeatureConfig+0x12>
 8005dbe:	4955      	ldr	r1, [pc, #340]	; (8005f14 <UART_AdvFeatureConfig+0x160>)
 8005dc0:	4855      	ldr	r0, [pc, #340]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005dc2:	f001 f9aa 	bl	800711a <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc8:	07db      	lsls	r3, r3, #31
 8005dca:	d50d      	bpl.n	8005de8 <UART_AdvFeatureConfig+0x34>
 8005dcc:	4d53      	ldr	r5, [pc, #332]	; (8005f1c <UART_AdvFeatureConfig+0x168>)
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005dd0:	422b      	tst	r3, r5
 8005dd2:	d003      	beq.n	8005ddc <UART_AdvFeatureConfig+0x28>
 8005dd4:	4952      	ldr	r1, [pc, #328]	; (8005f20 <UART_AdvFeatureConfig+0x16c>)
 8005dd6:	4850      	ldr	r0, [pc, #320]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005dd8:	f001 f99f 	bl	800711a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ddc:	6822      	ldr	r2, [r4, #0]
 8005dde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005de0:	6853      	ldr	r3, [r2, #4]
 8005de2:	402b      	ands	r3, r5
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dea:	079b      	lsls	r3, r3, #30
 8005dec:	d50d      	bpl.n	8005e0a <UART_AdvFeatureConfig+0x56>
 8005dee:	4d4d      	ldr	r5, [pc, #308]	; (8005f24 <UART_AdvFeatureConfig+0x170>)
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005df0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005df2:	422b      	tst	r3, r5
 8005df4:	d003      	beq.n	8005dfe <UART_AdvFeatureConfig+0x4a>
 8005df6:	494c      	ldr	r1, [pc, #304]	; (8005f28 <UART_AdvFeatureConfig+0x174>)
 8005df8:	4847      	ldr	r0, [pc, #284]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005dfa:	f001 f98e 	bl	800711a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e02:	6853      	ldr	r3, [r2, #4]
 8005e04:	402b      	ands	r3, r5
 8005e06:	430b      	orrs	r3, r1
 8005e08:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0c:	075b      	lsls	r3, r3, #29
 8005e0e:	d50d      	bpl.n	8005e2c <UART_AdvFeatureConfig+0x78>
 8005e10:	4d46      	ldr	r5, [pc, #280]	; (8005f2c <UART_AdvFeatureConfig+0x178>)
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005e12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005e14:	422b      	tst	r3, r5
 8005e16:	d003      	beq.n	8005e20 <UART_AdvFeatureConfig+0x6c>
 8005e18:	4945      	ldr	r1, [pc, #276]	; (8005f30 <UART_AdvFeatureConfig+0x17c>)
 8005e1a:	483f      	ldr	r0, [pc, #252]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005e1c:	f001 f97d 	bl	800711a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e20:	6822      	ldr	r2, [r4, #0]
 8005e22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005e24:	6853      	ldr	r3, [r2, #4]
 8005e26:	402b      	ands	r3, r5
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e2e:	071b      	lsls	r3, r3, #28
 8005e30:	d50d      	bpl.n	8005e4e <UART_AdvFeatureConfig+0x9a>
 8005e32:	4d40      	ldr	r5, [pc, #256]	; (8005f34 <UART_AdvFeatureConfig+0x180>)
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e36:	422b      	tst	r3, r5
 8005e38:	d003      	beq.n	8005e42 <UART_AdvFeatureConfig+0x8e>
 8005e3a:	493f      	ldr	r1, [pc, #252]	; (8005f38 <UART_AdvFeatureConfig+0x184>)
 8005e3c:	4836      	ldr	r0, [pc, #216]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005e3e:	f001 f96c 	bl	800711a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e46:	6853      	ldr	r3, [r2, #4]
 8005e48:	402b      	ands	r3, r5
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e50:	06db      	lsls	r3, r3, #27
 8005e52:	d50d      	bpl.n	8005e70 <UART_AdvFeatureConfig+0xbc>
 8005e54:	4d39      	ldr	r5, [pc, #228]	; (8005f3c <UART_AdvFeatureConfig+0x188>)
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e58:	422b      	tst	r3, r5
 8005e5a:	d003      	beq.n	8005e64 <UART_AdvFeatureConfig+0xb0>
 8005e5c:	4938      	ldr	r1, [pc, #224]	; (8005f40 <UART_AdvFeatureConfig+0x18c>)
 8005e5e:	482e      	ldr	r0, [pc, #184]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005e60:	f001 f95b 	bl	800711a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e64:	6822      	ldr	r2, [r4, #0]
 8005e66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e68:	6893      	ldr	r3, [r2, #8]
 8005e6a:	402b      	ands	r3, r5
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e72:	069b      	lsls	r3, r3, #26
 8005e74:	d50d      	bpl.n	8005e92 <UART_AdvFeatureConfig+0xde>
 8005e76:	4d33      	ldr	r5, [pc, #204]	; (8005f44 <UART_AdvFeatureConfig+0x190>)
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005e78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e7a:	422b      	tst	r3, r5
 8005e7c:	d003      	beq.n	8005e86 <UART_AdvFeatureConfig+0xd2>
 8005e7e:	4932      	ldr	r1, [pc, #200]	; (8005f48 <UART_AdvFeatureConfig+0x194>)
 8005e80:	4825      	ldr	r0, [pc, #148]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005e82:	f001 f94a 	bl	800711a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005e8a:	6893      	ldr	r3, [r2, #8]
 8005e8c:	402b      	ands	r3, r5
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e94:	065b      	lsls	r3, r3, #25
 8005e96:	d52a      	bpl.n	8005eee <UART_AdvFeatureConfig+0x13a>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <UART_AdvFeatureConfig+0x198>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d006      	beq.n	8005eae <UART_AdvFeatureConfig+0xfa>
 8005ea0:	4a2b      	ldr	r2, [pc, #172]	; (8005f50 <UART_AdvFeatureConfig+0x19c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <UART_AdvFeatureConfig+0xfa>
 8005ea6:	492b      	ldr	r1, [pc, #172]	; (8005f54 <UART_AdvFeatureConfig+0x1a0>)
 8005ea8:	481b      	ldr	r0, [pc, #108]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005eaa:	f001 f936 	bl	800711a <assert_failed>
 8005eae:	4d2a      	ldr	r5, [pc, #168]	; (8005f58 <UART_AdvFeatureConfig+0x1a4>)
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005eb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005eb2:	422b      	tst	r3, r5
 8005eb4:	d003      	beq.n	8005ebe <UART_AdvFeatureConfig+0x10a>
 8005eb6:	4929      	ldr	r1, [pc, #164]	; (8005f5c <UART_AdvFeatureConfig+0x1a8>)
 8005eb8:	4817      	ldr	r0, [pc, #92]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005eba:	f001 f92e 	bl	800711a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ebe:	6821      	ldr	r1, [r4, #0]
 8005ec0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ec2:	684b      	ldr	r3, [r1, #4]
 8005ec4:	402b      	ands	r3, r5
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	035b      	lsls	r3, r3, #13
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d10d      	bne.n	8005eee <UART_AdvFeatureConfig+0x13a>
 8005ed2:	4d23      	ldr	r5, [pc, #140]	; (8005f60 <UART_AdvFeatureConfig+0x1ac>)
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005ed4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ed6:	422b      	tst	r3, r5
 8005ed8:	d003      	beq.n	8005ee2 <UART_AdvFeatureConfig+0x12e>
 8005eda:	4922      	ldr	r1, [pc, #136]	; (8005f64 <UART_AdvFeatureConfig+0x1b0>)
 8005edc:	480e      	ldr	r0, [pc, #56]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005ede:	f001 f91c 	bl	800711a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005ee6:	6853      	ldr	r3, [r2, #4]
 8005ee8:	402b      	ands	r3, r5
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ef0:	061b      	lsls	r3, r3, #24
 8005ef2:	d50d      	bpl.n	8005f10 <UART_AdvFeatureConfig+0x15c>
 8005ef4:	4d1c      	ldr	r5, [pc, #112]	; (8005f68 <UART_AdvFeatureConfig+0x1b4>)
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005ef6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ef8:	422b      	tst	r3, r5
 8005efa:	d003      	beq.n	8005f04 <UART_AdvFeatureConfig+0x150>
 8005efc:	491b      	ldr	r1, [pc, #108]	; (8005f6c <UART_AdvFeatureConfig+0x1b8>)
 8005efe:	4806      	ldr	r0, [pc, #24]	; (8005f18 <UART_AdvFeatureConfig+0x164>)
 8005f00:	f001 f90b 	bl	800711a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f08:	6853      	ldr	r3, [r2, #4]
 8005f0a:	402b      	ands	r3, r5
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	6053      	str	r3, [r2, #4]
}
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	00000b9a 	.word	0x00000b9a
 8005f18:	0800a4c7 	.word	0x0800a4c7
 8005f1c:	fffdffff 	.word	0xfffdffff
 8005f20:	00000b9f 	.word	0x00000b9f
 8005f24:	fffeffff 	.word	0xfffeffff
 8005f28:	00000ba6 	.word	0x00000ba6
 8005f2c:	fffbffff 	.word	0xfffbffff
 8005f30:	00000bad 	.word	0x00000bad
 8005f34:	ffff7fff 	.word	0xffff7fff
 8005f38:	00000bb4 	.word	0x00000bb4
 8005f3c:	ffffefff 	.word	0xffffefff
 8005f40:	00000bbb 	.word	0x00000bbb
 8005f44:	ffffdfff 	.word	0xffffdfff
 8005f48:	00000bc2 	.word	0x00000bc2
 8005f4c:	40013800 	.word	0x40013800
 8005f50:	40004400 	.word	0x40004400
 8005f54:	00000bc9 	.word	0x00000bc9
 8005f58:	ffefffff 	.word	0xffefffff
 8005f5c:	00000bca 	.word	0x00000bca
 8005f60:	ff9fffff 	.word	0xff9fffff
 8005f64:	00000bcf 	.word	0x00000bcf
 8005f68:	fff7ffff 	.word	0xfff7ffff
 8005f6c:	00000bd7 	.word	0x00000bd7

08005f70 <UART_WaitOnFlagUntilTimeout>:
{
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	0004      	movs	r4, r0
 8005f74:	000e      	movs	r6, r1
 8005f76:	0015      	movs	r5, r2
 8005f78:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	69d3      	ldr	r3, [r2, #28]
 8005f7e:	4033      	ands	r3, r6
 8005f80:	1b9b      	subs	r3, r3, r6
 8005f82:	4259      	negs	r1, r3
 8005f84:	414b      	adcs	r3, r1
 8005f86:	42ab      	cmp	r3, r5
 8005f88:	d001      	beq.n	8005f8e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e01b      	b.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	9b06      	ldr	r3, [sp, #24]
 8005f90:	3301      	adds	r3, #1
 8005f92:	d0f3      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f94:	f7fd f95c 	bl	8003250 <HAL_GetTick>
 8005f98:	9b06      	ldr	r3, [sp, #24]
 8005f9a:	1bc0      	subs	r0, r0, r7
 8005f9c:	4283      	cmp	r3, r0
 8005f9e:	d301      	bcc.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x34>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1ea      	bne.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	4908      	ldr	r1, [pc, #32]	; (8005fc8 <UART_WaitOnFlagUntilTimeout+0x58>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8005faa:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fac:	400a      	ands	r2, r1
 8005fae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	31a3      	adds	r1, #163	; 0xa3
 8005fb4:	31ff      	adds	r1, #255	; 0xff
 8005fb6:	438a      	bics	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005fba:	2320      	movs	r3, #32
 8005fbc:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	3470      	adds	r4, #112	; 0x70
 8005fc4:	7023      	strb	r3, [r4, #0]
}
 8005fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc8:	fffffe5f 	.word	0xfffffe5f

08005fcc <HAL_UART_Transmit>:
{
 8005fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd2:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8005fd4:	0004      	movs	r4, r0
 8005fd6:	000d      	movs	r5, r1
 8005fd8:	0017      	movs	r7, r2
    return HAL_BUSY;
 8005fda:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d149      	bne.n	8006074 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8005fe0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d046      	beq.n	8006074 <HAL_UART_Transmit+0xa8>
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	d044      	beq.n	8006074 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	68a2      	ldr	r2, [r4, #8]
 8005fee:	015b      	lsls	r3, r3, #5
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d104      	bne.n	8005ffe <HAL_UART_Transmit+0x32>
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8005ffa:	4201      	tst	r1, r0
 8005ffc:	d13a      	bne.n	8006074 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8005ffe:	0023      	movs	r3, r4
 8006000:	3370      	adds	r3, #112	; 0x70
 8006002:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8006004:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006006:	2a01      	cmp	r2, #1
 8006008:	d034      	beq.n	8006074 <HAL_UART_Transmit+0xa8>
 800600a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600c:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800600e:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006010:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006012:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006014:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8006016:	f7fd f91b 	bl	8003250 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800601a:	0023      	movs	r3, r4
 800601c:	3350      	adds	r3, #80	; 0x50
 800601e:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8006020:	3302      	adds	r3, #2
 8006022:	9303      	str	r3, [sp, #12]
 8006024:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800602a:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602c:	015b      	lsls	r3, r3, #5
 800602e:	429a      	cmp	r2, r3
 8006030:	d104      	bne.n	800603c <HAL_UART_Transmit+0x70>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	42b3      	cmp	r3, r6
 8006036:	d101      	bne.n	800603c <HAL_UART_Transmit+0x70>
 8006038:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800603a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800603c:	0023      	movs	r3, r4
 800603e:	3352      	adds	r3, #82	; 0x52
 8006040:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006042:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8006044:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800604a:	2a00      	cmp	r2, #0
 800604c:	d10a      	bne.n	8006064 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800604e:	2140      	movs	r1, #64	; 0x40
 8006050:	0020      	movs	r0, r4
 8006052:	f7ff ff8d 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8006056:	2800      	cmp	r0, #0
 8006058:	d10b      	bne.n	8006072 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 800605a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800605c:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800605e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8006060:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8006062:	e007      	b.n	8006074 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006064:	2200      	movs	r2, #0
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	0020      	movs	r0, r4
 800606a:	f7ff ff81 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 800606e:	2800      	cmp	r0, #0
 8006070:	d002      	beq.n	8006078 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8006072:	2003      	movs	r0, #3
}
 8006074:	b007      	add	sp, #28
 8006076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006078:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800607a:	2d00      	cmp	r5, #0
 800607c:	d10b      	bne.n	8006096 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800607e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8006080:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006082:	05db      	lsls	r3, r3, #23
 8006084:	0ddb      	lsrs	r3, r3, #23
 8006086:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006088:	9b03      	ldr	r3, [sp, #12]
 800608a:	9a03      	ldr	r2, [sp, #12]
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	3b01      	subs	r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	8013      	strh	r3, [r2, #0]
 8006094:	e7d2      	b.n	800603c <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006096:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8006098:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800609a:	6293      	str	r3, [r2, #40]	; 0x28
 800609c:	e7f4      	b.n	8006088 <HAL_UART_Transmit+0xbc>
	...

080060a0 <HAL_UART_Receive>:
{
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	b087      	sub	sp, #28
 80060a4:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80060a6:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80060a8:	0004      	movs	r4, r0
 80060aa:	000d      	movs	r5, r1
 80060ac:	0016      	movs	r6, r2
    return HAL_BUSY;
 80060ae:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d143      	bne.n	800613c <HAL_UART_Receive+0x9c>
      return  HAL_ERROR;
 80060b4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80060b6:	2900      	cmp	r1, #0
 80060b8:	d040      	beq.n	800613c <HAL_UART_Receive+0x9c>
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	d03e      	beq.n	800613c <HAL_UART_Receive+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060be:	2380      	movs	r3, #128	; 0x80
 80060c0:	68a2      	ldr	r2, [r4, #8]
 80060c2:	015b      	lsls	r3, r3, #5
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d104      	bne.n	80060d2 <HAL_UART_Receive+0x32>
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 80060ce:	4201      	tst	r1, r0
 80060d0:	d134      	bne.n	800613c <HAL_UART_Receive+0x9c>
    __HAL_LOCK(huart);
 80060d2:	0023      	movs	r3, r4
 80060d4:	3370      	adds	r3, #112	; 0x70
 80060d6:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80060d8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80060da:	2a01      	cmp	r2, #1
 80060dc:	d02e      	beq.n	800613c <HAL_UART_Receive+0x9c>
 80060de:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e0:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80060e2:	701a      	strb	r2, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060e4:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060e8:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80060ea:	f7fd f8b1 	bl	8003250 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80060ee:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80060f0:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 80060f2:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80060f4:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 80060f6:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80060f8:	3302      	adds	r3, #2
 80060fa:	9303      	str	r3, [sp, #12]
 80060fc:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80060fe:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8006100:	0149      	lsls	r1, r1, #5
 8006102:	3302      	adds	r3, #2
 8006104:	428a      	cmp	r2, r1
 8006106:	d11d      	bne.n	8006144 <HAL_UART_Receive+0xa4>
 8006108:	6921      	ldr	r1, [r4, #16]
 800610a:	42b9      	cmp	r1, r7
 800610c:	d118      	bne.n	8006140 <HAL_UART_Receive+0xa0>
 800610e:	4925      	ldr	r1, [pc, #148]	; (80061a4 <HAL_UART_Receive+0x104>)
 8006110:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8006112:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006114:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8006116:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006118:	015b      	lsls	r3, r3, #5
 800611a:	429a      	cmp	r2, r3
 800611c:	d104      	bne.n	8006128 <HAL_UART_Receive+0x88>
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	42b3      	cmp	r3, r6
 8006122:	d101      	bne.n	8006128 <HAL_UART_Receive+0x88>
 8006124:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8006126:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8006128:	0023      	movs	r3, r4
 800612a:	335a      	adds	r3, #90	; 0x5a
 800612c:	8818      	ldrh	r0, [r3, #0]
 800612e:	b280      	uxth	r0, r0
 8006130:	2800      	cmp	r0, #0
 8006132:	d119      	bne.n	8006168 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 8006134:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8006136:	3470      	adds	r4, #112	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 8006138:	60a3      	str	r3, [r4, #8]
    __HAL_UNLOCK(huart);
 800613a:	7020      	strb	r0, [r4, #0]
}
 800613c:	b007      	add	sp, #28
 800613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8006140:	21ff      	movs	r1, #255	; 0xff
 8006142:	e7e5      	b.n	8006110 <HAL_UART_Receive+0x70>
 8006144:	2a00      	cmp	r2, #0
 8006146:	d104      	bne.n	8006152 <HAL_UART_Receive+0xb2>
 8006148:	6921      	ldr	r1, [r4, #16]
 800614a:	2900      	cmp	r1, #0
 800614c:	d0f8      	beq.n	8006140 <HAL_UART_Receive+0xa0>
 800614e:	217f      	movs	r1, #127	; 0x7f
 8006150:	e7de      	b.n	8006110 <HAL_UART_Receive+0x70>
 8006152:	2180      	movs	r1, #128	; 0x80
 8006154:	0549      	lsls	r1, r1, #21
 8006156:	428a      	cmp	r2, r1
 8006158:	d104      	bne.n	8006164 <HAL_UART_Receive+0xc4>
 800615a:	6921      	ldr	r1, [r4, #16]
 800615c:	2900      	cmp	r1, #0
 800615e:	d0f6      	beq.n	800614e <HAL_UART_Receive+0xae>
 8006160:	213f      	movs	r1, #63	; 0x3f
 8006162:	e7d5      	b.n	8006110 <HAL_UART_Receive+0x70>
 8006164:	801f      	strh	r7, [r3, #0]
 8006166:	e7d4      	b.n	8006112 <HAL_UART_Receive+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006168:	9b05      	ldr	r3, [sp, #20]
 800616a:	2200      	movs	r2, #0
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2120      	movs	r1, #32
 8006170:	9b04      	ldr	r3, [sp, #16]
 8006172:	0020      	movs	r0, r4
 8006174:	f7ff fefc 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8006178:	2800      	cmp	r0, #0
 800617a:	d110      	bne.n	800619e <HAL_UART_Receive+0xfe>
 800617c:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8006182:	2d00      	cmp	r5, #0
 8006184:	d108      	bne.n	8006198 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006186:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8006188:	3602      	adds	r6, #2
      huart->RxXferCount--;
 800618a:	9b03      	ldr	r3, [sp, #12]
 800618c:	9a03      	ldr	r2, [sp, #12]
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	3b01      	subs	r3, #1
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]
 8006196:	e7c7      	b.n	8006128 <HAL_UART_Receive+0x88>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006198:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800619a:	3501      	adds	r5, #1
 800619c:	e7f5      	b.n	800618a <HAL_UART_Receive+0xea>
        return HAL_TIMEOUT;
 800619e:	2003      	movs	r0, #3
 80061a0:	e7cc      	b.n	800613c <HAL_UART_Receive+0x9c>
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	000001ff 	.word	0x000001ff

080061a8 <UART_CheckIdleState>:
{
 80061a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061aa:	2600      	movs	r6, #0
{
 80061ac:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ae:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80061b0:	f7fd f84e 	bl	8003250 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80061b6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	071b      	lsls	r3, r3, #28
 80061bc:	d415      	bmi.n	80061ea <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	075b      	lsls	r3, r3, #29
 80061c4:	d50a      	bpl.n	80061dc <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c6:	2180      	movs	r1, #128	; 0x80
 80061c8:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <UART_CheckIdleState+0x5c>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	03c9      	lsls	r1, r1, #15
 80061d0:	002b      	movs	r3, r5
 80061d2:	0020      	movs	r0, r4
 80061d4:	f7ff fecc 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d111      	bne.n	8006200 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80061dc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80061de:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80061e0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80061e2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80061e4:	3470      	adds	r4, #112	; 0x70
 80061e6:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80061e8:	e00b      	b.n	8006202 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061ea:	2180      	movs	r1, #128	; 0x80
 80061ec:	4b05      	ldr	r3, [pc, #20]	; (8006204 <UART_CheckIdleState+0x5c>)
 80061ee:	0032      	movs	r2, r6
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	0389      	lsls	r1, r1, #14
 80061f4:	0003      	movs	r3, r0
 80061f6:	0020      	movs	r0, r4
 80061f8:	f7ff feba 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d0de      	beq.n	80061be <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8006200:	2003      	movs	r0, #3
}
 8006202:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006204:	01ffffff 	.word	0x01ffffff

08006208 <HAL_UART_Init>:
{
 8006208:	b510      	push	{r4, lr}
 800620a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800620c:	d101      	bne.n	8006212 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800620e:	2001      	movs	r0, #1
}
 8006210:	bd10      	pop	{r4, pc}
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006212:	6981      	ldr	r1, [r0, #24]
 8006214:	6803      	ldr	r3, [r0, #0]
 8006216:	4a29      	ldr	r2, [pc, #164]	; (80062bc <HAL_UART_Init+0xb4>)
 8006218:	2900      	cmp	r1, #0
 800621a:	d03e      	beq.n	800629a <HAL_UART_Init+0x92>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800621c:	4293      	cmp	r3, r2
 800621e:	d010      	beq.n	8006242 <HAL_UART_Init+0x3a>
 8006220:	4a27      	ldr	r2, [pc, #156]	; (80062c0 <HAL_UART_Init+0xb8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00d      	beq.n	8006242 <HAL_UART_Init+0x3a>
 8006226:	4a27      	ldr	r2, [pc, #156]	; (80062c4 <HAL_UART_Init+0xbc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00a      	beq.n	8006242 <HAL_UART_Init+0x3a>
 800622c:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <HAL_UART_Init+0xc0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d007      	beq.n	8006242 <HAL_UART_Init+0x3a>
 8006232:	4a26      	ldr	r2, [pc, #152]	; (80062cc <HAL_UART_Init+0xc4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_UART_Init+0x3a>
 8006238:	2130      	movs	r1, #48	; 0x30
 800623a:	31ff      	adds	r1, #255	; 0xff
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800623c:	4824      	ldr	r0, [pc, #144]	; (80062d0 <HAL_UART_Init+0xc8>)
 800623e:	f000 ff6c 	bl	800711a <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006242:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006244:	2b00      	cmp	r3, #0
 8006246:	d105      	bne.n	8006254 <HAL_UART_Init+0x4c>
    huart->Lock = HAL_UNLOCKED;
 8006248:	0022      	movs	r2, r4
 800624a:	3270      	adds	r2, #112	; 0x70
 800624c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800624e:	0020      	movs	r0, r4
 8006250:	f001 fb14 	bl	800787c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006254:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006256:	2101      	movs	r1, #1
 8006258:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800625a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800625c:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800625e:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006260:	438b      	bics	r3, r1
 8006262:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006264:	f7ff fc02 	bl	8005a6c <UART_SetConfig>
 8006268:	2801      	cmp	r0, #1
 800626a:	d0d0      	beq.n	800620e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800626c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_UART_Init+0x70>
    UART_AdvFeatureConfig(huart);
 8006272:	0020      	movs	r0, r4
 8006274:	f7ff fd9e 	bl	8005db4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	4916      	ldr	r1, [pc, #88]	; (80062d4 <HAL_UART_Init+0xcc>)
 800627c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800627e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006280:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006282:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006284:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	438a      	bics	r2, r1
 800628a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800628c:	2201      	movs	r2, #1
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006294:	f7ff ff88 	bl	80061a8 <UART_CheckIdleState>
 8006298:	e7ba      	b.n	8006210 <HAL_UART_Init+0x8>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800629a:	4293      	cmp	r3, r2
 800629c:	d0d1      	beq.n	8006242 <HAL_UART_Init+0x3a>
 800629e:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <HAL_UART_Init+0xb8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d0ce      	beq.n	8006242 <HAL_UART_Init+0x3a>
 80062a4:	4a07      	ldr	r2, [pc, #28]	; (80062c4 <HAL_UART_Init+0xbc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d0cb      	beq.n	8006242 <HAL_UART_Init+0x3a>
 80062aa:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <HAL_UART_Init+0xc0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d0c8      	beq.n	8006242 <HAL_UART_Init+0x3a>
 80062b0:	4a06      	ldr	r2, [pc, #24]	; (80062cc <HAL_UART_Init+0xc4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d0c5      	beq.n	8006242 <HAL_UART_Init+0x3a>
 80062b6:	219a      	movs	r1, #154	; 0x9a
 80062b8:	0049      	lsls	r1, r1, #1
 80062ba:	e7bf      	b.n	800623c <HAL_UART_Init+0x34>
 80062bc:	40013800 	.word	0x40013800
 80062c0:	40004400 	.word	0x40004400
 80062c4:	40004c00 	.word	0x40004c00
 80062c8:	40005000 	.word	0x40005000
 80062cc:	40004800 	.word	0x40004800
 80062d0:	0800a4c7 	.word	0x0800a4c7
 80062d4:	ffffb7ff 	.word	0xffffb7ff

080062d8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062d8:	4770      	bx	lr

080062da <find_between>:

//########################## ENCODER AUXILIAR GPS ###############################


void find_between(const char *first, const char *last, char *buff,
		char *buff_return) {
 80062da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062dc:	000c      	movs	r4, r1
 80062de:	0007      	movs	r7, r0
	//const char *last = "*";
	//const char *buff = _gps;
	char *target = NULL;
	char *start, *end;
	start = strstr(buff, first);
 80062e0:	0001      	movs	r1, r0
 80062e2:	0010      	movs	r0, r2
		char *buff_return) {
 80062e4:	001e      	movs	r6, r3
	start = strstr(buff, first);
 80062e6:	f001 fd57 	bl	8007d98 <strstr>
	end = strstr(start, last);
 80062ea:	0021      	movs	r1, r4
	start = strstr(buff, first);
 80062ec:	0005      	movs	r5, r0
	end = strstr(start, last);
 80062ee:	f001 fd53 	bl	8007d98 <strstr>
 80062f2:	0004      	movs	r4, r0

	if (start) {
		start += strlen(first);
 80062f4:	0038      	movs	r0, r7
 80062f6:	f7f9 ff07 	bl	8000108 <strlen>
		if (end) {
 80062fa:	2c00      	cmp	r4, #0
 80062fc:	d00b      	beq.n	8006316 <find_between+0x3c>
		start += strlen(first);
 80062fe:	182d      	adds	r5, r5, r0
			target = (char *) malloc(end - start + 1);
 8006300:	1b67      	subs	r7, r4, r5
 8006302:	1c78      	adds	r0, r7, #1
 8006304:	f001 fc60 	bl	8007bc8 <malloc>
			memcpy(target, start, end - start);
 8006308:	003a      	movs	r2, r7
 800630a:	0029      	movs	r1, r5
			target = (char *) malloc(end - start + 1);
 800630c:	0004      	movs	r4, r0
			memcpy(target, start, end - start);
 800630e:	f001 fc6f 	bl	8007bf0 <memcpy>
			target[end - start] = '\0';
 8006312:	2300      	movs	r3, #0
 8006314:	55e3      	strb	r3, [r4, r7]
		}
	}
	strcpy(buff_return, target);
 8006316:	0021      	movs	r1, r4
 8006318:	0030      	movs	r0, r6
 800631a:	f001 fd35 	bl	8007d88 <strcpy>
	free(target);
 800631e:	0020      	movs	r0, r4
 8006320:	f001 fc5c 	bl	8007bdc <free>
}
 8006324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006328 <HAL_UART_RxCpltCallback>:
	for (uint8_t ii = 0; ii < bufferSize; ii++) {
		pbuffer[ii] = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006328:	b570      	push	{r4, r5, r6, lr}
	UartReady = SET;
 800632a:	2401      	movs	r4, #1
 800632c:	4a10      	ldr	r2, [pc, #64]	; (8006370 <HAL_UART_RxCpltCallback+0x48>)
	if (huart->Instance == LPUART1) {
 800632e:	6803      	ldr	r3, [r0, #0]
 8006330:	4910      	ldr	r1, [pc, #64]	; (8006374 <HAL_UART_RxCpltCallback+0x4c>)
	UartReady = SET;
 8006332:	7014      	strb	r4, [r2, #0]
	if (huart->Instance == LPUART1) {
 8006334:	428b      	cmp	r3, r1
 8006336:	d10c      	bne.n	8006352 <HAL_UART_RxCpltCallback+0x2a>
		UartReady = SET;
		/* Transmit one byte with 100 ms timeout */
		HAL_UART_Transmit_IT(&huart5, &byte, 1);
 8006338:	4d0f      	ldr	r5, [pc, #60]	; (8006378 <HAL_UART_RxCpltCallback+0x50>)
		UartReady = SET;
 800633a:	7014      	strb	r4, [r2, #0]
		HAL_UART_Transmit_IT(&huart5, &byte, 1);
 800633c:	0029      	movs	r1, r5
 800633e:	0022      	movs	r2, r4
 8006340:	480e      	ldr	r0, [pc, #56]	; (800637c <HAL_UART_RxCpltCallback+0x54>)
 8006342:	f7ff f9e9 	bl	8005718 <HAL_UART_Transmit_IT>

		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(&hlpuart1, &byte, 1);
 8006346:	0022      	movs	r2, r4
 8006348:	0029      	movs	r1, r5
 800634a:	480d      	ldr	r0, [pc, #52]	; (8006380 <HAL_UART_RxCpltCallback+0x58>)

		/* Transmit one byte with 100 ms timeout */
		HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*) &byteGSM, bytesToReceive);

		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(&huart5, (uint8_t*) &byteGSM, bytesToReceive);
 800634c:	f7ff fa22 	bl	8005794 <HAL_UART_Receive_IT>

	}

}
 8006350:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART5) {
 8006352:	4a0c      	ldr	r2, [pc, #48]	; (8006384 <HAL_UART_RxCpltCallback+0x5c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d1fb      	bne.n	8006350 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*) &byteGSM, bytesToReceive);
 8006358:	4d0b      	ldr	r5, [pc, #44]	; (8006388 <HAL_UART_RxCpltCallback+0x60>)
 800635a:	4c0c      	ldr	r4, [pc, #48]	; (800638c <HAL_UART_RxCpltCallback+0x64>)
 800635c:	882a      	ldrh	r2, [r5, #0]
 800635e:	0021      	movs	r1, r4
 8006360:	4807      	ldr	r0, [pc, #28]	; (8006380 <HAL_UART_RxCpltCallback+0x58>)
 8006362:	f7ff f9d9 	bl	8005718 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart5, (uint8_t*) &byteGSM, bytesToReceive);
 8006366:	682a      	ldr	r2, [r5, #0]
 8006368:	0021      	movs	r1, r4
 800636a:	b292      	uxth	r2, r2
 800636c:	4803      	ldr	r0, [pc, #12]	; (800637c <HAL_UART_RxCpltCallback+0x54>)
 800636e:	e7ed      	b.n	800634c <HAL_UART_RxCpltCallback+0x24>
 8006370:	200002ac 	.word	0x200002ac
 8006374:	40004800 	.word	0x40004800
 8006378:	2000092c 	.word	0x2000092c
 800637c:	200006b8 	.word	0x200006b8
 8006380:	20000444 	.word	0x20000444
 8006384:	40005000 	.word	0x40005000
 8006388:	20000000 	.word	0x20000000
 800638c:	20000738 	.word	0x20000738

08006390 <fn_init_gps>:
	 st_data_sensor_e.lat_value = 0;
	 st_data_sensor_e.log_value = 0;
	 st_data_sensor_previwes_e.log_value = 0;
	 st_data_sensor_previwes_e.lat_value = 0;*/
	//fn_get_gps();
	GPS_ON
 8006390:	2180      	movs	r1, #128	; 0x80
 8006392:	20a0      	movs	r0, #160	; 0xa0
void fn_init_gps() {
 8006394:	b510      	push	{r4, lr}
	GPS_ON
 8006396:	2201      	movs	r2, #1
 8006398:	0109      	lsls	r1, r1, #4
 800639a:	05c0      	lsls	r0, r0, #23
 800639c:	f7fd feb6 	bl	800410c <HAL_GPIO_WritePin>
	st_gps_data_current.altitude = 0;
 80063a0:	2200      	movs	r2, #0
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <fn_init_gps+0x28>)
 80063a4:	619a      	str	r2, [r3, #24]
	st_gps_data_current.hour = 0;
 80063a6:	605a      	str	r2, [r3, #4]
	st_gps_data_current.latitude = 0;
 80063a8:	611a      	str	r2, [r3, #16]
	st_gps_data_current.longitude = 0;
 80063aa:	615a      	str	r2, [r3, #20]
	st_gps_data_current.minute = 0;
 80063ac:	609a      	str	r2, [r3, #8]
	st_gps_data_current.numSV = 0;
 80063ae:	61da      	str	r2, [r3, #28]
	st_gps_data_current.quality = 0;
 80063b0:	601a      	str	r2, [r3, #0]
	st_gps_data_current.second = 0;
 80063b2:	60da      	str	r2, [r3, #12]
	st_gps_data_current.speed = 0;
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bd10      	pop	{r4, pc}
 80063b8:	200002b0 	.word	0x200002b0

080063bc <fn_get_gps>:

void fn_get_gps() {

	st_gps_data_previous.altitude = st_gps_data_current.altitude;
 80063bc:	4a81      	ldr	r2, [pc, #516]	; (80065c4 <fn_get_gps+0x208>)
 80063be:	4b82      	ldr	r3, [pc, #520]	; (80065c8 <fn_get_gps+0x20c>)
 80063c0:	6991      	ldr	r1, [r2, #24]
void fn_get_gps() {
 80063c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	st_gps_data_previous.altitude = st_gps_data_current.altitude;
 80063c4:	6199      	str	r1, [r3, #24]
	st_gps_data_previous.hour = st_gps_data_current.hour;
 80063c6:	6851      	ldr	r1, [r2, #4]
void fn_get_gps() {
 80063c8:	4c80      	ldr	r4, [pc, #512]	; (80065cc <fn_get_gps+0x210>)
	st_gps_data_previous.hour = st_gps_data_current.hour;
 80063ca:	6059      	str	r1, [r3, #4]
	st_gps_data_previous.latitude = st_gps_data_current.latitude;
 80063cc:	6911      	ldr	r1, [r2, #16]
void fn_get_gps() {
 80063ce:	44a5      	add	sp, r4
	st_gps_data_previous.latitude = st_gps_data_current.latitude;
 80063d0:	6119      	str	r1, [r3, #16]
	st_gps_data_previous.longitude = st_gps_data_current.longitude;
 80063d2:	6951      	ldr	r1, [r2, #20]
	st_gps_data_previous.speed = st_gps_data_current.speed;

	//***************GPS VARIABLES**********************************
	float data_latitude, data_longitude, data_altitude;
	int data_qualidade, data_numSV;
	char buffer_gps[1024] = "";
 80063d4:	2400      	movs	r4, #0
	st_gps_data_previous.longitude = st_gps_data_current.longitude;
 80063d6:	6159      	str	r1, [r3, #20]
	st_gps_data_previous.minute = st_gps_data_current.minute;
 80063d8:	6891      	ldr	r1, [r2, #8]
	char buffer_gps[1024] = "";
 80063da:	a82b      	add	r0, sp, #172	; 0xac
	st_gps_data_previous.minute = st_gps_data_current.minute;
 80063dc:	6099      	str	r1, [r3, #8]
	st_gps_data_previous.numSV = st_gps_data_current.numSV;
 80063de:	69d1      	ldr	r1, [r2, #28]
	char buffer_gps[1024] = "";
 80063e0:	942a      	str	r4, [sp, #168]	; 0xa8
	st_gps_data_previous.numSV = st_gps_data_current.numSV;
 80063e2:	61d9      	str	r1, [r3, #28]
	st_gps_data_previous.quality = st_gps_data_current.quality;
 80063e4:	6811      	ldr	r1, [r2, #0]
 80063e6:	6019      	str	r1, [r3, #0]
	st_gps_data_previous.second = st_gps_data_current.second;
 80063e8:	68d1      	ldr	r1, [r2, #12]
	st_gps_data_previous.speed = st_gps_data_current.speed;
 80063ea:	6a12      	ldr	r2, [r2, #32]
	st_gps_data_previous.second = st_gps_data_current.second;
 80063ec:	60d9      	str	r1, [r3, #12]
	st_gps_data_previous.speed = st_gps_data_current.speed;
 80063ee:	621a      	str	r2, [r3, #32]
	char buffer_gps[1024] = "";
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	0021      	movs	r1, r4
 80063f4:	0092      	lsls	r2, r2, #2
 80063f6:	f001 fc04 	bl	8007c02 <memset>
	char aux_buff_gps[74] = "";
 80063fa:	2246      	movs	r2, #70	; 0x46
 80063fc:	0021      	movs	r1, r4
 80063fe:	a818      	add	r0, sp, #96	; 0x60
 8006400:	9417      	str	r4, [sp, #92]	; 0x5c
 8006402:	f001 fbfe 	bl	8007c02 <memset>
	} aux;

	//st_data_sensor_previwes_e.lat_value = st_data_sensor_e.lat_value;
	//st_data_sensor_previwes_e.log_value = st_data_sensor_e.log_value;

	HAL_UART_Init(&hlpuart1);
 8006406:	4d72      	ldr	r5, [pc, #456]	; (80065d0 <fn_get_gps+0x214>)
 8006408:	0028      	movs	r0, r5
 800640a:	f7ff fefd 	bl	8006208 <HAL_UART_Init>
	HAL_UART_Receive(&hlpuart1, (uint8_t*) buffer_gps, 1024, 2000);
 800640e:	23fa      	movs	r3, #250	; 0xfa
 8006410:	2280      	movs	r2, #128	; 0x80
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	00d2      	lsls	r2, r2, #3
 8006416:	a92a      	add	r1, sp, #168	; 0xa8
 8006418:	0028      	movs	r0, r5
 800641a:	f7ff fe41 	bl	80060a0 <HAL_UART_Receive>
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) buffer_gps, 1024, 2000);
 800641e:	23fa      	movs	r3, #250	; 0xfa
 8006420:	2280      	movs	r2, #128	; 0x80
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	00d2      	lsls	r2, r2, #3
 8006426:	a92a      	add	r1, sp, #168	; 0xa8
 8006428:	0028      	movs	r0, r5
 800642a:	f7ff fdcf 	bl	8005fcc <HAL_UART_Transmit>
	 *   7  	* sogk      * 	km/h  	* 	numeric    	* 	0.008 	*   Speed over ground	*
	 ****************************************************************************************
	 $xxGGA,time,lat,NS,lon,EW,quality,numSV,HDOP,alt,altUnit,sep,sepUnit,diffAge,diffStation*cs<CR><LF>
	 Example:
	 $GPGGA,092725.00,4717.11399,N,00833.91590,E,1,08,1.01,499.6,M,48.0,M,,*5B*/
	find_between("GGA,", "\n", buffer_gps, aux_buff_gps);
 800642e:	ab17      	add	r3, sp, #92	; 0x5c
 8006430:	aa2a      	add	r2, sp, #168	; 0xa8
 8006432:	4968      	ldr	r1, [pc, #416]	; (80065d4 <fn_get_gps+0x218>)
 8006434:	4868      	ldr	r0, [pc, #416]	; (80065d8 <fn_get_gps+0x21c>)
 8006436:	f7ff ff50 	bl	80062da <find_between>
	fn_fprint(aux_buff_gps);
 800643a:	a817      	add	r0, sp, #92	; 0x5c
 800643c:	f000 fc54 	bl	8006ce8 <fn_fprint>
	fn_fprint(".\r\n");
 8006440:	4866      	ldr	r0, [pc, #408]	; (80065dc <fn_get_gps+0x220>)
 8006442:	f000 fc51 	bl	8006ce8 <fn_fprint>
	if (strlen(aux_buff_gps) > 30) {
 8006446:	a817      	add	r0, sp, #92	; 0x5c
 8006448:	f7f9 fe5e 	bl	8000108 <strlen>
 800644c:	281e      	cmp	r0, #30
 800644e:	d800      	bhi.n	8006452 <fn_get_gps+0x96>
 8006450:	e0ad      	b.n	80065ae <fn_get_gps+0x1f2>
		uint8_t c = 0;
		char* token;
		token = strtok(aux_buff_gps, ",");
 8006452:	4d63      	ldr	r5, [pc, #396]	; (80065e0 <fn_get_gps+0x224>)
 8006454:	a817      	add	r0, sp, #92	; 0x5c
 8006456:	0029      	movs	r1, r5
				strcpy(aux.alt, token);
			}
			if (c == 9)
				token = NULL;
			c++;
			token = strtok(NULL, ",");
 8006458:	f002 fae8 	bl	8008a2c <strtok>
 800645c:	1e01      	subs	r1, r0, #0
		while (token != NULL) {
 800645e:	d140      	bne.n	80064e2 <fn_get_gps+0x126>
		}

		hora = atoi(aux.hra);              // hora (hh.mm.ss)
 8006460:	a80f      	add	r0, sp, #60	; 0x3c
 8006462:	f001 fb81 	bl	8007b68 <atoi>
 8006466:	0006      	movs	r6, r0
		data_latitude = atof(aux.lat);      // latitude
 8006468:	a809      	add	r0, sp, #36	; 0x24
 800646a:	f001 fb78 	bl	8007b5e <atof>
 800646e:	f7fc fe07 	bl	8003080 <__aeabi_d2f>
 8006472:	9001      	str	r0, [sp, #4]
		data_longitude = atof(aux.lon);     // longitude
 8006474:	a80c      	add	r0, sp, #48	; 0x30
 8006476:	f001 fb72 	bl	8007b5e <atof>
 800647a:	9002      	str	r0, [sp, #8]
 800647c:	9103      	str	r1, [sp, #12]
		data_altitude = atof(aux.alt);
 800647e:	2032      	movs	r0, #50	; 0x32
 8006480:	ab08      	add	r3, sp, #32
 8006482:	18c0      	adds	r0, r0, r3
 8006484:	f001 fb6b 	bl	8007b5e <atof>
 8006488:	9004      	str	r0, [sp, #16]
 800648a:	9105      	str	r1, [sp, #20]
		data_numSV = atoi(aux.numSV);
 800648c:	a812      	add	r0, sp, #72	; 0x48
 800648e:	f001 fb6b 	bl	8007b68 <atoi>
 8006492:	9006      	str	r0, [sp, #24]
		data_qualidade = atoi(aux.quality);
 8006494:	a814      	add	r0, sp, #80	; 0x50
 8006496:	f001 fb67 	bl	8007b68 <atoi>
		st_gps_data_current.hour = hora / 10000;
 800649a:	4952      	ldr	r1, [pc, #328]	; (80065e4 <fn_get_gps+0x228>)
		data_qualidade = atoi(aux.quality);
 800649c:	9007      	str	r0, [sp, #28]
		st_gps_data_current.hour = hora / 10000;
 800649e:	0030      	movs	r0, r6
 80064a0:	f7f9 fe4e 	bl	8000140 <__udivsi3>
 80064a4:	4c47      	ldr	r4, [pc, #284]	; (80065c4 <fn_get_gps+0x208>)
 80064a6:	0005      	movs	r5, r0
 80064a8:	6060      	str	r0, [r4, #4]
 80064aa:	494e      	ldr	r1, [pc, #312]	; (80065e4 <fn_get_gps+0x228>)
 80064ac:	0030      	movs	r0, r6
 80064ae:	f7f9 fecd 	bl	800024c <__aeabi_uidivmod>
 80064b2:	000f      	movs	r7, r1
		st_gps_data_current.minute = (hora - (st_gps_data_current.hour * 10000))
				/ 100;
 80064b4:	2164      	movs	r1, #100	; 0x64
 80064b6:	0038      	movs	r0, r7
 80064b8:	f7f9 fe42 	bl	8000140 <__udivsi3>
		st_gps_data_current.second = (hora
 80064bc:	2164      	movs	r1, #100	; 0x64
		st_gps_data_current.minute = (hora - (st_gps_data_current.hour * 10000))
 80064be:	60a0      	str	r0, [r4, #8]
		st_gps_data_current.second = (hora
 80064c0:	0038      	movs	r0, r7
 80064c2:	f7f9 fec3 	bl	800024c <__aeabi_uidivmod>
 80064c6:	60e1      	str	r1, [r4, #12]
				- ((st_gps_data_current.hour * 10000)
						+ (st_gps_data_current.minute * 100)));
		if (hora != 0) {
 80064c8:	2e00      	cmp	r6, #0
 80064ca:	d02d      	beq.n	8006528 <fn_get_gps+0x16c>
			switch (st_gps_data_current.hour) {
 80064cc:	2d01      	cmp	r5, #1
 80064ce:	d029      	beq.n	8006524 <fn_get_gps+0x168>
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	d100      	bne.n	80064d6 <fn_get_gps+0x11a>
 80064d4:	e06e      	b.n	80065b4 <fn_get_gps+0x1f8>
			case 2:
				st_gps_data_current.hour = 23;
 80064d6:	2317      	movs	r3, #23
			switch (st_gps_data_current.hour) {
 80064d8:	2d02      	cmp	r5, #2
 80064da:	d024      	beq.n	8006526 <fn_get_gps+0x16a>
				break;
			case 0:
				st_gps_data_current.hour = 21;
				break;
			default:
				st_gps_data_current.hour -= 3;
 80064dc:	3d03      	subs	r5, #3
 80064de:	6065      	str	r5, [r4, #4]
				break;
 80064e0:	e022      	b.n	8006528 <fn_get_gps+0x16c>
				strcpy(aux.hra, token);
 80064e2:	a80f      	add	r0, sp, #60	; 0x3c
			if (c == 0) {
 80064e4:	2c00      	cmp	r4, #0
 80064e6:	d016      	beq.n	8006516 <fn_get_gps+0x15a>
				strcpy(aux.lat, token);
 80064e8:	a809      	add	r0, sp, #36	; 0x24
			if (c == 1) {
 80064ea:	2c01      	cmp	r4, #1
 80064ec:	d013      	beq.n	8006516 <fn_get_gps+0x15a>
				strcpy(aux.NS, token);
 80064ee:	2026      	movs	r0, #38	; 0x26
			if (c == 2) {
 80064f0:	2c02      	cmp	r4, #2
 80064f2:	d00e      	beq.n	8006512 <fn_get_gps+0x156>
				strcpy(aux.lon, token);
 80064f4:	a80c      	add	r0, sp, #48	; 0x30
			if (c == 3) {
 80064f6:	2c03      	cmp	r4, #3
 80064f8:	d00d      	beq.n	8006516 <fn_get_gps+0x15a>
				strcpy(aux.EW, token);
 80064fa:	2027      	movs	r0, #39	; 0x27
			if (c == 4)
 80064fc:	2c04      	cmp	r4, #4
 80064fe:	d008      	beq.n	8006512 <fn_get_gps+0x156>
				strcpy(aux.quality, token);
 8006500:	a814      	add	r0, sp, #80	; 0x50
			if (c == 5) {
 8006502:	2c05      	cmp	r4, #5
 8006504:	d007      	beq.n	8006516 <fn_get_gps+0x15a>
				strcpy(aux.numSV, token);
 8006506:	a812      	add	r0, sp, #72	; 0x48
			if (c == 6) {
 8006508:	2c06      	cmp	r4, #6
 800650a:	d004      	beq.n	8006516 <fn_get_gps+0x15a>
			if (c == 8) {
 800650c:	2c08      	cmp	r4, #8
 800650e:	d104      	bne.n	800651a <fn_get_gps+0x15e>
				strcpy(aux.alt, token);
 8006510:	2032      	movs	r0, #50	; 0x32
 8006512:	ab08      	add	r3, sp, #32
 8006514:	18c0      	adds	r0, r0, r3
 8006516:	f001 fc37 	bl	8007d88 <strcpy>
			c++;
 800651a:	3401      	adds	r4, #1
 800651c:	b2e4      	uxtb	r4, r4
			token = strtok(NULL, ",");
 800651e:	0029      	movs	r1, r5
 8006520:	2000      	movs	r0, #0
 8006522:	e799      	b.n	8006458 <fn_get_gps+0x9c>
				st_gps_data_current.hour = 22;
 8006524:	2316      	movs	r3, #22
 8006526:	6063      	str	r3, [r4, #4]
			}
		}

		if ((data_latitude != 0) && (data_longitude != 0)) {
 8006528:	2100      	movs	r1, #0
 800652a:	9801      	ldr	r0, [sp, #4]
 800652c:	f7f9 ffc8 	bl	80004c0 <__aeabi_fcmpeq>
 8006530:	2800      	cmp	r0, #0
 8006532:	d141      	bne.n	80065b8 <fn_get_gps+0x1fc>
		data_longitude = atof(aux.lon);     // longitude
 8006534:	9802      	ldr	r0, [sp, #8]
 8006536:	9903      	ldr	r1, [sp, #12]
 8006538:	f7fc fda2 	bl	8003080 <__aeabi_d2f>
		if ((data_latitude != 0) && (data_longitude != 0)) {
 800653c:	2100      	movs	r1, #0
		data_longitude = atof(aux.lon);     // longitude
 800653e:	1c06      	adds	r6, r0, #0
		if ((data_latitude != 0) && (data_longitude != 0)) {
 8006540:	f7f9 ffbe 	bl	80004c0 <__aeabi_fcmpeq>
 8006544:	1e05      	subs	r5, r0, #0
 8006546:	d137      	bne.n	80065b8 <fn_get_gps+0x1fc>
			//st_flags.gps = true;
			data_latitude /= 100;
			data_longitude /= 100;
 8006548:	4927      	ldr	r1, [pc, #156]	; (80065e8 <fn_get_gps+0x22c>)
 800654a:	1c30      	adds	r0, r6, #0
 800654c:	f7fa fa8e 	bl	8000a6c <__aeabi_fdiv>
 8006550:	1c07      	adds	r7, r0, #0
			uint32_t lat_graus = (uint32_t) data_latitude;
			uint32_t lon_graus = (uint32_t) data_longitude;
 8006552:	f7fa f803 	bl	800055c <__aeabi_f2uiz>
 8006556:	0006      	movs	r6, r0
			uint32_t lat_min = (data_latitude - lat_graus) * 100;
			uint32_t lon_min = (data_longitude - lon_graus) * 100;
 8006558:	f7fa ffa4 	bl	80014a4 <__aeabi_ui2f>
 800655c:	1c01      	adds	r1, r0, #0
 800655e:	1c38      	adds	r0, r7, #0
 8006560:	f7fa fd94 	bl	800108c <__aeabi_fsub>
 8006564:	4920      	ldr	r1, [pc, #128]	; (80065e8 <fn_get_gps+0x22c>)
 8006566:	f7fa fc71 	bl	8000e4c <__aeabi_fmul>
 800656a:	f7f9 fff7 	bl	800055c <__aeabi_f2uiz>
			data_latitude = lat_graus + (lat_min / 60);
			data_longitude = lon_graus + (lon_min / 60);
 800656e:	213c      	movs	r1, #60	; 0x3c
 8006570:	f7f9 fde6 	bl	8000140 <__udivsi3>
 8006574:	1980      	adds	r0, r0, r6
 8006576:	f7fa ff95 	bl	80014a4 <__aeabi_ui2f>
			data_latitude = 100000 * data_latitude;
			data_longitude = 100000 * data_longitude;
 800657a:	491c      	ldr	r1, [pc, #112]	; (80065ec <fn_get_gps+0x230>)
 800657c:	f7fa fc66 	bl	8000e4c <__aeabi_fmul>
			st_gps_data_current.longitude = data_latitude;
			st_gps_data_current.longitude = data_longitude;
 8006580:	f7f9 ffec 	bl	800055c <__aeabi_f2uiz>
 8006584:	6160      	str	r0, [r4, #20]
		data_altitude = atof(aux.alt);
 8006586:	9804      	ldr	r0, [sp, #16]
 8006588:	9905      	ldr	r1, [sp, #20]
 800658a:	f7fc fd79 	bl	8003080 <__aeabi_d2f>
			st_gps_data_current.altitude = (uint32_t) data_altitude * 10;
 800658e:	f7f9 ffe5 	bl	800055c <__aeabi_f2uiz>
 8006592:	230a      	movs	r3, #10
 8006594:	4358      	muls	r0, r3
			st_gps_data_current.quality = (uint32_t) data_qualidade;
			st_gps_data_current.numSV = (uint32_t) data_numSV;
			GPS_OFF
 8006596:	2180      	movs	r1, #128	; 0x80
			st_gps_data_current.altitude = (uint32_t) data_altitude * 10;
 8006598:	61a0      	str	r0, [r4, #24]
			GPS_OFF
 800659a:	20a0      	movs	r0, #160	; 0xa0
			st_gps_data_current.quality = (uint32_t) data_qualidade;
 800659c:	9b07      	ldr	r3, [sp, #28]
			GPS_OFF
 800659e:	002a      	movs	r2, r5
			st_gps_data_current.quality = (uint32_t) data_qualidade;
 80065a0:	6023      	str	r3, [r4, #0]
			st_gps_data_current.numSV = (uint32_t) data_numSV;
 80065a2:	9b06      	ldr	r3, [sp, #24]
			GPS_OFF
 80065a4:	0109      	lsls	r1, r1, #4
 80065a6:	05c0      	lsls	r0, r0, #23
			st_gps_data_current.numSV = (uint32_t) data_numSV;
 80065a8:	61e3      	str	r3, [r4, #28]
			GPS_OFF
 80065aa:	f7fd fdaf 	bl	800410c <HAL_GPIO_WritePin>
			st_gps_data_current.quality = 0;
			st_gps_data_current.numSV = 0;
		}

	}
}
 80065ae:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <fn_get_gps+0x234>)
 80065b0:	449d      	add	sp, r3
 80065b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				st_gps_data_current.hour = 21;
 80065b4:	2315      	movs	r3, #21
 80065b6:	e7b6      	b.n	8006526 <fn_get_gps+0x16a>
			st_gps_data_current.longitude = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	6163      	str	r3, [r4, #20]
			st_gps_data_current.altitude = 0;
 80065bc:	61a3      	str	r3, [r4, #24]
			st_gps_data_current.quality = 0;
 80065be:	6023      	str	r3, [r4, #0]
			st_gps_data_current.numSV = 0;
 80065c0:	61e3      	str	r3, [r4, #28]
}
 80065c2:	e7f4      	b.n	80065ae <fn_get_gps+0x1f2>
 80065c4:	200002b0 	.word	0x200002b0
 80065c8:	200002d8 	.word	0x200002d8
 80065cc:	fffffb54 	.word	0xfffffb54
 80065d0:	20000444 	.word	0x20000444
 80065d4:	0800a507 	.word	0x0800a507
 80065d8:	0800a500 	.word	0x0800a500
 80065dc:	0800a505 	.word	0x0800a505
 80065e0:	0800a503 	.word	0x0800a503
 80065e4:	00002710 	.word	0x00002710
 80065e8:	42c80000 	.word	0x42c80000
 80065ec:	47c35000 	.word	0x47c35000
 80065f0:	000004ac 	.word	0x000004ac

080065f4 <platform_write>:
static float acceleration_mg[3];
static float magnetic_mG[3];
static uint8_t whoamI, rst;


int32_t platform_write(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len) {
 80065f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065f6:	0014      	movs	r4, r2
	uint32_t i2c_add = (uint32_t) handle;

	HAL_I2C_Mem_Write(&hi2c1, i2c_add, Reg,
 80065f8:	b28a      	uxth	r2, r1
 80065fa:	b281      	uxth	r1, r0
 80065fc:	20fa      	movs	r0, #250	; 0xfa
 80065fe:	0080      	lsls	r0, r0, #2
 8006600:	9002      	str	r0, [sp, #8]
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	9400      	str	r4, [sp, #0]
 8006606:	2301      	movs	r3, #1
 8006608:	4802      	ldr	r0, [pc, #8]	; (8006614 <platform_write+0x20>)
 800660a:	f7fd fff3 	bl	80045f4 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
	return 0;
}
 800660e:	2000      	movs	r0, #0
 8006610:	b004      	add	sp, #16
 8006612:	bd10      	pop	{r4, pc}
 8006614:	20000930 	.word	0x20000930

08006618 <platform_read>:

int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len) {
 8006618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800661a:	0014      	movs	r4, r2
	uint32_t i2c_add = (uint32_t) handle;

	HAL_I2C_Mem_Read(&hi2c1, (uint8_t) i2c_add, Reg,
 800661c:	b28a      	uxth	r2, r1
 800661e:	b2c1      	uxtb	r1, r0
 8006620:	20fa      	movs	r0, #250	; 0xfa
 8006622:	0080      	lsls	r0, r0, #2
 8006624:	9002      	str	r0, [sp, #8]
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	9400      	str	r4, [sp, #0]
 800662a:	2301      	movs	r3, #1
 800662c:	4802      	ldr	r0, [pc, #8]	; (8006638 <platform_read+0x20>)
 800662e:	f7fe f8a9 	bl	8004784 <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
	return 0;
}
 8006632:	2000      	movs	r0, #0
 8006634:	b004      	add	sp, #16
 8006636:	bd10      	pop	{r4, pc}
 8006638:	20000930 	.word	0x20000930

0800663c <lsm303ah_read_reg>:
 * @param  len   number of consecutive register to read
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t lsm303ah_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
		uint16_t len) {
 800663c:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->read_reg(ctx->handle, reg, data, len);
 800663e:	6844      	ldr	r4, [r0, #4]
 8006640:	6880      	ldr	r0, [r0, #8]
 8006642:	47a0      	blx	r4
	return ret;
}
 8006644:	bd10      	pop	{r4, pc}

08006646 <lsm303ah_write_reg>:
 * @param  len   number of consecutive register to write
 * @retval       interface status (MANDATORY: return 0 -> no Error)
 *
 */
int32_t lsm303ah_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
		uint16_t len) {
 8006646:	b510      	push	{r4, lr}
	int32_t ret;
	ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006648:	6804      	ldr	r4, [r0, #0]
 800664a:	6880      	ldr	r0, [r0, #8]
 800664c:	47a0      	blx	r4
	return ret;
}
 800664e:	bd10      	pop	{r4, pc}

08006650 <lsm303ah_xl_block_data_update_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of bdu in reg CTRL1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006650:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_ctrl1_a_t ctrl1_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 8006652:	ac01      	add	r4, sp, #4
int32_t lsm303ah_xl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006654:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 8006656:	2301      	movs	r3, #1
 8006658:	0022      	movs	r2, r4
 800665a:	2120      	movs	r1, #32
int32_t lsm303ah_xl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 800665c:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 800665e:	f7ff ffed 	bl	800663c <lsm303ah_read_reg>
	if (ret == 0) {
 8006662:	2800      	cmp	r0, #0
 8006664:	d10a      	bne.n	800667c <lsm303ah_xl_block_data_update_set+0x2c>
		ctrl1_a.bdu = val;
 8006666:	2301      	movs	r3, #1
 8006668:	7821      	ldrb	r1, [r4, #0]
 800666a:	401e      	ands	r6, r3
 800666c:	4399      	bics	r1, r3
 800666e:	4331      	orrs	r1, r6
 8006670:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 8006672:	0022      	movs	r2, r4
 8006674:	2120      	movs	r1, #32
 8006676:	0028      	movs	r0, r5
 8006678:	f7ff ffe5 	bl	8006646 <lsm303ah_write_reg>
	}

	return ret;
}
 800667c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800667e <lsm303ah_mg_block_data_update_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param val     Change the values of bdu in reg CFG_REG_C
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 800667e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_c_m_t cfg_reg_c_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_C_M, (uint8_t*) &cfg_reg_c_m,
 8006680:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006682:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_C_M, (uint8_t*) &cfg_reg_c_m,
 8006684:	2301      	movs	r3, #1
 8006686:	0022      	movs	r2, r4
 8006688:	2162      	movs	r1, #98	; 0x62
int32_t lsm303ah_mg_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val) {
 800668a:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_C_M, (uint8_t*) &cfg_reg_c_m,
 800668c:	f7ff ffd6 	bl	800663c <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 8006690:	2800      	cmp	r0, #0
 8006692:	d10c      	bne.n	80066ae <lsm303ah_mg_block_data_update_set+0x30>
		cfg_reg_c_m.bdu = val;
 8006694:	2301      	movs	r3, #1
 8006696:	2210      	movs	r2, #16
 8006698:	7821      	ldrb	r1, [r4, #0]
 800669a:	401e      	ands	r6, r3
 800669c:	4391      	bics	r1, r2
 800669e:	0136      	lsls	r6, r6, #4
 80066a0:	4331      	orrs	r1, r6
 80066a2:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_C_M,
 80066a4:	0022      	movs	r2, r4
 80066a6:	2162      	movs	r1, #98	; 0x62
 80066a8:	0028      	movs	r0, r5
 80066aa:	f7ff ffcc 	bl	8006646 <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_c_m, 1);
	}

	return ret;
}
 80066ae:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080066b0 <lsm303ah_xl_full_scale_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of fs in reg CTRL1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_full_scale_set(stmdev_ctx_t *ctx, lsm303ah_xl_fs_t val) {
 80066b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_ctrl1_a_t ctrl1_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80066b2:	ac01      	add	r4, sp, #4
int32_t lsm303ah_xl_full_scale_set(stmdev_ctx_t *ctx, lsm303ah_xl_fs_t val) {
 80066b4:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80066b6:	2301      	movs	r3, #1
 80066b8:	0022      	movs	r2, r4
 80066ba:	2120      	movs	r1, #32
int32_t lsm303ah_xl_full_scale_set(stmdev_ctx_t *ctx, lsm303ah_xl_fs_t val) {
 80066bc:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80066be:	f7ff ffbd 	bl	800663c <lsm303ah_read_reg>
	if (ret == 0) {
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d10d      	bne.n	80066e2 <lsm303ah_xl_full_scale_set+0x32>
		ctrl1_a.fs = (uint8_t) val;
 80066c6:	2103      	movs	r1, #3
 80066c8:	230c      	movs	r3, #12
 80066ca:	400e      	ands	r6, r1
 80066cc:	7821      	ldrb	r1, [r4, #0]
 80066ce:	00b6      	lsls	r6, r6, #2
 80066d0:	4399      	bics	r1, r3
 80066d2:	4331      	orrs	r1, r6
 80066d4:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80066d6:	3b0b      	subs	r3, #11
 80066d8:	0022      	movs	r2, r4
 80066da:	2120      	movs	r1, #32
 80066dc:	0028      	movs	r0, r5
 80066de:	f7ff ffb2 	bl	8006646 <lsm303ah_write_reg>
	}

	return ret;
}
 80066e2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080066e4 <lsm303ah_xl_data_rate_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of odr in reg CTRL1
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_xl_odr_t val) {
 80066e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_ctrl1_a_t ctrl1_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80066e6:	ac01      	add	r4, sp, #4
int32_t lsm303ah_xl_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_xl_odr_t val) {
 80066e8:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80066ea:	2301      	movs	r3, #1
 80066ec:	0022      	movs	r2, r4
 80066ee:	2120      	movs	r1, #32
int32_t lsm303ah_xl_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_xl_odr_t val) {
 80066f0:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 80066f2:	f7ff ffa3 	bl	800663c <lsm303ah_read_reg>
	if (ret == 0) {
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d111      	bne.n	800671e <lsm303ah_xl_data_rate_set+0x3a>
		ctrl1_a.odr = (uint8_t) val & 0x0FU;
 80066fa:	220f      	movs	r2, #15
 80066fc:	7821      	ldrb	r1, [r4, #0]
 80066fe:	0133      	lsls	r3, r6, #4
 8006700:	4011      	ands	r1, r2
 8006702:	4319      	orrs	r1, r3
		ctrl1_a.hf_odr = ((uint8_t) val & 0x10U) >> 4;
 8006704:	2301      	movs	r3, #1
 8006706:	0936      	lsrs	r6, r6, #4
 8006708:	401e      	ands	r6, r3
 800670a:	409e      	lsls	r6, r3
 800670c:	32ee      	adds	r2, #238	; 0xee
 800670e:	4011      	ands	r1, r2
 8006710:	4331      	orrs	r1, r6
 8006712:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CTRL1_A, (uint8_t*) &ctrl1_a, 1);
 8006714:	0022      	movs	r2, r4
 8006716:	2120      	movs	r1, #32
 8006718:	0028      	movs	r0, r5
 800671a:	f7ff ff94 	bl	8006646 <lsm303ah_write_reg>
	}

	return ret;
}
 800671e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08006720 <lsm303ah_xl_status_reg_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Get registers STATUS.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_status_reg_get(stmdev_ctx_t *ctx, lsm303ah_status_a_t *val) {
 8006720:	b510      	push	{r4, lr}
 8006722:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_STATUS_A, (uint8_t*) val, 1);
 8006724:	2301      	movs	r3, #1
 8006726:	2127      	movs	r1, #39	; 0x27
 8006728:	f7ff ff88 	bl	800663c <lsm303ah_read_reg>
	return ret;
}
 800672c:	bd10      	pop	{r4, pc}

0800672e <lsm303ah_mg_status_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Get registers STATUS_REG.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_status_get(stmdev_ctx_t *ctx, lsm303ah_status_reg_m_t *val) {
 800672e:	b510      	push	{r4, lr}
 8006730:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_STATUS_REG_M, (uint8_t*) val, 1);
 8006732:	2301      	movs	r3, #1
 8006734:	2167      	movs	r1, #103	; 0x67
 8006736:	f7ff ff81 	bl	800663c <lsm303ah_read_reg>
	return ret;
}
 800673a:	bd10      	pop	{r4, pc}

0800673c <lsm303ah_mg_operating_mode_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of md in reg CFG_REG_A
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_operating_mode_set(stmdev_ctx_t *ctx, lsm303ah_mg_md_t val) {
 800673c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 800673e:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_operating_mode_set(stmdev_ctx_t *ctx, lsm303ah_mg_md_t val) {
 8006740:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 8006742:	2301      	movs	r3, #1
 8006744:	0022      	movs	r2, r4
 8006746:	2160      	movs	r1, #96	; 0x60
int32_t lsm303ah_mg_operating_mode_set(stmdev_ctx_t *ctx, lsm303ah_mg_md_t val) {
 8006748:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 800674a:	f7ff ff77 	bl	800663c <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 800674e:	2800      	cmp	r0, #0
 8006750:	d10b      	bne.n	800676a <lsm303ah_mg_operating_mode_set+0x2e>
		cfg_reg_a_m.md = (uint8_t) val;
 8006752:	2303      	movs	r3, #3
 8006754:	7821      	ldrb	r1, [r4, #0]
 8006756:	401e      	ands	r6, r3
 8006758:	4399      	bics	r1, r3
 800675a:	4331      	orrs	r1, r6
 800675c:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_A_M,
 800675e:	3b02      	subs	r3, #2
 8006760:	0022      	movs	r2, r4
 8006762:	2160      	movs	r1, #96	; 0x60
 8006764:	0028      	movs	r0, r5
 8006766:	f7ff ff6e 	bl	8006646 <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_a_m, 1);
	}

	return ret;
}
 800676a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800676c <lsm303ah_mg_data_rate_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of odr in reg CFG_REG_A
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_mg_odr_t val) {
 800676c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 800676e:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_mg_odr_t val) {
 8006770:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 8006772:	2301      	movs	r3, #1
 8006774:	0022      	movs	r2, r4
 8006776:	2160      	movs	r1, #96	; 0x60
int32_t lsm303ah_mg_data_rate_set(stmdev_ctx_t *ctx, lsm303ah_mg_odr_t val) {
 8006778:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 800677a:	f7ff ff5f 	bl	800663c <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 800677e:	2800      	cmp	r0, #0
 8006780:	d10d      	bne.n	800679e <lsm303ah_mg_data_rate_set+0x32>
		cfg_reg_a_m.odr = (uint8_t) val;
 8006782:	2103      	movs	r1, #3
 8006784:	230c      	movs	r3, #12
 8006786:	400e      	ands	r6, r1
 8006788:	7821      	ldrb	r1, [r4, #0]
 800678a:	00b6      	lsls	r6, r6, #2
 800678c:	4399      	bics	r1, r3
 800678e:	4331      	orrs	r1, r6
 8006790:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_A_M,
 8006792:	3b0b      	subs	r3, #11
 8006794:	0022      	movs	r2, r4
 8006796:	2160      	movs	r1, #96	; 0x60
 8006798:	0028      	movs	r0, r5
 800679a:	f7ff ff54 	bl	8006646 <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_a_m, 1);
	}

	return ret;
}
 800679e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080067a0 <lsm303ah_mg_offset_temp_comp_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of comp_temp_en in reg CFG_REG_A
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val) {
 80067a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80067a2:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val) {
 80067a4:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80067a6:	2301      	movs	r3, #1
 80067a8:	0022      	movs	r2, r4
 80067aa:	2160      	movs	r1, #96	; 0x60
int32_t lsm303ah_mg_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val) {
 80067ac:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 80067ae:	f7ff ff45 	bl	800663c <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d10b      	bne.n	80067ce <lsm303ah_mg_offset_temp_comp_set+0x2e>
		cfg_reg_a_m.comp_temp_en = val;
 80067b6:	237f      	movs	r3, #127	; 0x7f
 80067b8:	7821      	ldrb	r1, [r4, #0]
 80067ba:	01f6      	lsls	r6, r6, #7
 80067bc:	4019      	ands	r1, r3
 80067be:	4331      	orrs	r1, r6
 80067c0:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_A_M,
 80067c2:	3b7e      	subs	r3, #126	; 0x7e
 80067c4:	0022      	movs	r2, r4
 80067c6:	2160      	movs	r1, #96	; 0x60
 80067c8:	0028      	movs	r0, r5
 80067ca:	f7ff ff3c 	bl	8006646 <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_a_m, 1);
	}

	return ret;
}
 80067ce:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080067d0 <lsm303ah_mg_set_rst_mode_set>:
 * @param  val    Change the values of set_rst in reg CFG_REG_B
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_set_rst_mode_set(stmdev_ctx_t *ctx,
		lsm303ah_mg_set_rst_t val) {
 80067d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_b_m_t cfg_reg_b_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_B_M, (uint8_t*) &cfg_reg_b_m,
 80067d2:	ac01      	add	r4, sp, #4
		lsm303ah_mg_set_rst_t val) {
 80067d4:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_B_M, (uint8_t*) &cfg_reg_b_m,
 80067d6:	2301      	movs	r3, #1
 80067d8:	0022      	movs	r2, r4
 80067da:	2161      	movs	r1, #97	; 0x61
		lsm303ah_mg_set_rst_t val) {
 80067dc:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_B_M, (uint8_t*) &cfg_reg_b_m,
 80067de:	f7ff ff2d 	bl	800663c <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d10d      	bne.n	8006802 <lsm303ah_mg_set_rst_mode_set+0x32>
		cfg_reg_b_m.set_rst = (uint8_t) val;
 80067e6:	2103      	movs	r1, #3
 80067e8:	2306      	movs	r3, #6
 80067ea:	400e      	ands	r6, r1
 80067ec:	7821      	ldrb	r1, [r4, #0]
 80067ee:	0076      	lsls	r6, r6, #1
 80067f0:	4399      	bics	r1, r3
 80067f2:	4331      	orrs	r1, r6
 80067f4:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_B_M,
 80067f6:	3b05      	subs	r3, #5
 80067f8:	0022      	movs	r2, r4
 80067fa:	2161      	movs	r1, #97	; 0x61
 80067fc:	0028      	movs	r0, r5
 80067fe:	f7ff ff22 	bl	8006646 <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_b_m, 1);
	}

	return ret;
}
 8006802:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08006804 <lsm303ah_acceleration_raw_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  buff   buffer that stores data read.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff) {
 8006804:	b510      	push	{r4, lr}
 8006806:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_OUT_X_L_A, buff, 6);
 8006808:	2306      	movs	r3, #6
 800680a:	2128      	movs	r1, #40	; 0x28
 800680c:	f7ff ff16 	bl	800663c <lsm303ah_read_reg>
	return ret;
}
 8006810:	bd10      	pop	{r4, pc}

08006812 <lsm303ah_magnetic_raw_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  buff   buffer that stores data read.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff) {
 8006812:	b510      	push	{r4, lr}
 8006814:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_OUTX_L_REG_M, buff, 6);
 8006816:	2306      	movs	r3, #6
 8006818:	2168      	movs	r1, #104	; 0x68
 800681a:	f7ff ff0f 	bl	800663c <lsm303ah_read_reg>
	return ret;
}
 800681e:	bd10      	pop	{r4, pc}

08006820 <fn_get_lsm303ah>:
void fn_get_lsm303ah() {
 8006820:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev_ctx_xl.read_reg = platform_read;
 8006822:	4b9a      	ldr	r3, [pc, #616]	; (8006a8c <fn_get_lsm303ah+0x26c>)
void fn_get_lsm303ah() {
 8006824:	b08b      	sub	sp, #44	; 0x2c
	dev_ctx_xl.handle = (void*) LSM303AH_I2C_ADD_XL;
 8006826:	213b      	movs	r1, #59	; 0x3b
	dev_ctx_xl.read_reg = platform_read;
 8006828:	9305      	str	r3, [sp, #20]
	dev_ctx_mg.read_reg = platform_read;
 800682a:	9308      	str	r3, [sp, #32]
	dev_ctx_mg.handle = (void*) LSM303AH_I2C_ADD_MG;
 800682c:	233d      	movs	r3, #61	; 0x3d
	dev_ctx_xl.write_reg = platform_write;
 800682e:	4a98      	ldr	r2, [pc, #608]	; (8006a90 <fn_get_lsm303ah+0x270>)
	lsm303ah_xl_status_reg_get(&dev_ctx_xl, &reg.status_a);
 8006830:	ad03      	add	r5, sp, #12
	dev_ctx_xl.handle = (void*) LSM303AH_I2C_ADD_XL;
 8006832:	9106      	str	r1, [sp, #24]
	lsm303ah_xl_status_reg_get(&dev_ctx_xl, &reg.status_a);
 8006834:	a804      	add	r0, sp, #16
 8006836:	0029      	movs	r1, r5
	dev_ctx_mg.handle = (void*) LSM303AH_I2C_ADD_MG;
 8006838:	9309      	str	r3, [sp, #36]	; 0x24
	dev_ctx_xl.write_reg = platform_write;
 800683a:	9204      	str	r2, [sp, #16]
	dev_ctx_mg.write_reg = platform_write;
 800683c:	9207      	str	r2, [sp, #28]
	lsm303ah_xl_status_reg_get(&dev_ctx_xl, &reg.status_a);
 800683e:	f7ff ff6f 	bl	8006720 <lsm303ah_xl_status_reg_get>
	if (reg.status_a.drdy) {
 8006842:	782b      	ldrb	r3, [r5, #0]
 8006844:	4f93      	ldr	r7, [pc, #588]	; (8006a94 <fn_get_lsm303ah+0x274>)
 8006846:	07db      	lsls	r3, r3, #31
 8006848:	d521      	bpl.n	800688e <fn_get_lsm303ah+0x6e>
		memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
 800684a:	4c93      	ldr	r4, [pc, #588]	; (8006a98 <fn_get_lsm303ah+0x278>)
 800684c:	2206      	movs	r2, #6
 800684e:	2100      	movs	r1, #0
 8006850:	0020      	movs	r0, r4
 8006852:	f001 f9d6 	bl	8007c02 <memset>
		lsm303ah_acceleration_raw_get(&dev_ctx_xl, data_raw_acceleration.u8bit);
 8006856:	0021      	movs	r1, r4
 8006858:	a804      	add	r0, sp, #16
 800685a:	f7ff ffd3 	bl	8006804 <lsm303ah_acceleration_raw_get>
	return ((float_t) lsb * 0.061f);
 800685e:	2300      	movs	r3, #0
 8006860:	5ee0      	ldrsh	r0, [r4, r3]
 8006862:	f7fa fdcf 	bl	8001404 <__aeabi_i2f>
 8006866:	498d      	ldr	r1, [pc, #564]	; (8006a9c <fn_get_lsm303ah+0x27c>)
 8006868:	f7fa faf0 	bl	8000e4c <__aeabi_fmul>
		acceleration_mg[0] = lsm303ah_from_fs2g_to_mg(
 800686c:	6038      	str	r0, [r7, #0]
	return ((float_t) lsb * 0.061f);
 800686e:	2302      	movs	r3, #2
 8006870:	5ee0      	ldrsh	r0, [r4, r3]
 8006872:	f7fa fdc7 	bl	8001404 <__aeabi_i2f>
 8006876:	4989      	ldr	r1, [pc, #548]	; (8006a9c <fn_get_lsm303ah+0x27c>)
 8006878:	f7fa fae8 	bl	8000e4c <__aeabi_fmul>
		acceleration_mg[1] = lsm303ah_from_fs2g_to_mg(
 800687c:	6078      	str	r0, [r7, #4]
	return ((float_t) lsb * 0.061f);
 800687e:	2304      	movs	r3, #4
 8006880:	5ee0      	ldrsh	r0, [r4, r3]
 8006882:	f7fa fdbf 	bl	8001404 <__aeabi_i2f>
 8006886:	4985      	ldr	r1, [pc, #532]	; (8006a9c <fn_get_lsm303ah+0x27c>)
 8006888:	f7fa fae0 	bl	8000e4c <__aeabi_fmul>
		acceleration_mg[2] = lsm303ah_from_fs2g_to_mg(
 800688c:	60b8      	str	r0, [r7, #8]
	lsm303ah_mg_status_get(&dev_ctx_mg, &reg.status_reg_m);
 800688e:	0029      	movs	r1, r5
 8006890:	a807      	add	r0, sp, #28
 8006892:	f7ff ff4c 	bl	800672e <lsm303ah_mg_status_get>
	if (reg.status_reg_m.zyxda) {
 8006896:	782b      	ldrb	r3, [r5, #0]
 8006898:	4d81      	ldr	r5, [pc, #516]	; (8006aa0 <fn_get_lsm303ah+0x280>)
 800689a:	071b      	lsls	r3, r3, #28
 800689c:	d524      	bpl.n	80068e8 <fn_get_lsm303ah+0xc8>
		memset(data_raw_magnetic.u8bit, 0x00, 3 * sizeof(int16_t));
 800689e:	4c81      	ldr	r4, [pc, #516]	; (8006aa4 <fn_get_lsm303ah+0x284>)
 80068a0:	2206      	movs	r2, #6
 80068a2:	2100      	movs	r1, #0
 80068a4:	0020      	movs	r0, r4
 80068a6:	f001 f9ac 	bl	8007c02 <memset>
		lsm303ah_magnetic_raw_get(&dev_ctx_mg, data_raw_magnetic.u8bit);
 80068aa:	0021      	movs	r1, r4
 80068ac:	a807      	add	r0, sp, #28
 80068ae:	f7ff ffb0 	bl	8006812 <lsm303ah_magnetic_raw_get>
	return ((float_t) lsb * 1.5f);
 80068b2:	2300      	movs	r3, #0
 80068b4:	5ee0      	ldrsh	r0, [r4, r3]
 80068b6:	f7fa fda5 	bl	8001404 <__aeabi_i2f>
 80068ba:	21ff      	movs	r1, #255	; 0xff
 80068bc:	0589      	lsls	r1, r1, #22
 80068be:	f7fa fac5 	bl	8000e4c <__aeabi_fmul>
		magnetic_mG[0] = lsm303ah_from_lsb_to_mgauss(
 80068c2:	6028      	str	r0, [r5, #0]
	return ((float_t) lsb * 1.5f);
 80068c4:	2302      	movs	r3, #2
 80068c6:	5ee0      	ldrsh	r0, [r4, r3]
 80068c8:	f7fa fd9c 	bl	8001404 <__aeabi_i2f>
 80068cc:	21ff      	movs	r1, #255	; 0xff
 80068ce:	0589      	lsls	r1, r1, #22
 80068d0:	f7fa fabc 	bl	8000e4c <__aeabi_fmul>
		magnetic_mG[1] = lsm303ah_from_lsb_to_mgauss(
 80068d4:	6068      	str	r0, [r5, #4]
	return ((float_t) lsb * 1.5f);
 80068d6:	2304      	movs	r3, #4
 80068d8:	5ee0      	ldrsh	r0, [r4, r3]
 80068da:	f7fa fd93 	bl	8001404 <__aeabi_i2f>
 80068de:	21ff      	movs	r1, #255	; 0xff
 80068e0:	0589      	lsls	r1, r1, #22
 80068e2:	f7fa fab3 	bl	8000e4c <__aeabi_fmul>
		magnetic_mG[2] = lsm303ah_from_lsb_to_mgauss(
 80068e6:	60a8      	str	r0, [r5, #8]
	st_accelerometer.a_x = acceleration_mg[0];
 80068e8:	6838      	ldr	r0, [r7, #0]
 80068ea:	f7fa fd6b 	bl	80013c4 <__aeabi_f2iz>
 80068ee:	4c6e      	ldr	r4, [pc, #440]	; (8006aa8 <fn_get_lsm303ah+0x288>)
 80068f0:	b206      	sxth	r6, r0
 80068f2:	8026      	strh	r6, [r4, #0]
	st_accelerometer.a_y = acceleration_mg[1];
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fa fd65 	bl	80013c4 <__aeabi_f2iz>
 80068fa:	b203      	sxth	r3, r0
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	466b      	mov	r3, sp
 8006900:	881b      	ldrh	r3, [r3, #0]
	st_accelerometer.a_z = acceleration_mg[2];
 8006902:	68b8      	ldr	r0, [r7, #8]
	st_accelerometer.a_y = acceleration_mg[1];
 8006904:	8063      	strh	r3, [r4, #2]
	st_accelerometer.a_z = acceleration_mg[2];
 8006906:	f7fa fd5d 	bl	80013c4 <__aeabi_f2iz>
 800690a:	b200      	sxth	r0, r0
 800690c:	80a0      	strh	r0, [r4, #4]
	st_accelerometer.pitch_y = (atan2(st_accelerometer.a_y, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z)) * 180.0) / M_PI; //angulo eixo y
 800690e:	4376      	muls	r6, r6
 8006910:	4340      	muls	r0, r0
 8006912:	1830      	adds	r0, r6, r0
 8006914:	f7fc fb3a 	bl	8002f8c <__aeabi_i2d>
 8006918:	f003 f8de 	bl	8009ad8 <sqrt>
 800691c:	0006      	movs	r6, r0
 800691e:	000f      	movs	r7, r1
 8006920:	9800      	ldr	r0, [sp, #0]
 8006922:	f7fc fb33 	bl	8002f8c <__aeabi_i2d>
 8006926:	0032      	movs	r2, r6
 8006928:	003b      	movs	r3, r7
 800692a:	f003 f8d1 	bl	8009ad0 <atan2>
 800692e:	2200      	movs	r2, #0
 8006930:	4b5e      	ldr	r3, [pc, #376]	; (8006aac <fn_get_lsm303ah+0x28c>)
 8006932:	f7fb fd41 	bl	80023b8 <__aeabi_dmul>
 8006936:	4a5e      	ldr	r2, [pc, #376]	; (8006ab0 <fn_get_lsm303ah+0x290>)
 8006938:	4b5e      	ldr	r3, [pc, #376]	; (8006ab4 <fn_get_lsm303ah+0x294>)
 800693a:	f7fb f909 	bl	8001b50 <__aeabi_ddiv>
 800693e:	f7fc faf1 	bl	8002f24 <__aeabi_d2iz>
 8006942:	80e0      	strh	r0, [r4, #6]
	st_accelerometer.pitch = (atan2(st_accelerometer.a_x, sqrt(st_accelerometer.a_y * st_accelerometer.a_y + st_accelerometer.a_z * st_accelerometer.a_z)) * 180.0) / M_PI; // angulo eixo x
 8006944:	2300      	movs	r3, #0
 8006946:	5ee0      	ldrsh	r0, [r4, r3]
 8006948:	f7fc fb20 	bl	8002f8c <__aeabi_i2d>
 800694c:	0006      	movs	r6, r0
 800694e:	2302      	movs	r3, #2
 8006950:	5ee0      	ldrsh	r0, [r4, r3]
 8006952:	2204      	movs	r2, #4
 8006954:	5ea3      	ldrsh	r3, [r4, r2]
 8006956:	4340      	muls	r0, r0
 8006958:	435b      	muls	r3, r3
 800695a:	18c0      	adds	r0, r0, r3
 800695c:	000f      	movs	r7, r1
 800695e:	f7fc fb15 	bl	8002f8c <__aeabi_i2d>
 8006962:	f003 f8b9 	bl	8009ad8 <sqrt>
 8006966:	0002      	movs	r2, r0
 8006968:	000b      	movs	r3, r1
 800696a:	0030      	movs	r0, r6
 800696c:	0039      	movs	r1, r7
 800696e:	f003 f8af 	bl	8009ad0 <atan2>
 8006972:	2200      	movs	r2, #0
 8006974:	4b4d      	ldr	r3, [pc, #308]	; (8006aac <fn_get_lsm303ah+0x28c>)
 8006976:	f7fb fd1f 	bl	80023b8 <__aeabi_dmul>
 800697a:	4b4e      	ldr	r3, [pc, #312]	; (8006ab4 <fn_get_lsm303ah+0x294>)
 800697c:	4a4c      	ldr	r2, [pc, #304]	; (8006ab0 <fn_get_lsm303ah+0x290>)
 800697e:	f7fb f8e7 	bl	8001b50 <__aeabi_ddiv>
 8006982:	f7fc facf 	bl	8002f24 <__aeabi_d2iz>
 8006986:	8120      	strh	r0, [r4, #8]
	st_accelerometer.roll = (atan2(st_accelerometer.a_y,st_accelerometer.a_z) * 180.0) / M_PI;
 8006988:	2304      	movs	r3, #4
 800698a:	5ee0      	ldrsh	r0, [r4, r3]
 800698c:	f7fc fafe 	bl	8002f8c <__aeabi_i2d>
 8006990:	0006      	movs	r6, r0
 8006992:	000f      	movs	r7, r1
 8006994:	2302      	movs	r3, #2
 8006996:	5ee0      	ldrsh	r0, [r4, r3]
 8006998:	f7fc faf8 	bl	8002f8c <__aeabi_i2d>
 800699c:	0032      	movs	r2, r6
 800699e:	003b      	movs	r3, r7
 80069a0:	f003 f896 	bl	8009ad0 <atan2>
 80069a4:	2200      	movs	r2, #0
 80069a6:	4b41      	ldr	r3, [pc, #260]	; (8006aac <fn_get_lsm303ah+0x28c>)
 80069a8:	f7fb fd06 	bl	80023b8 <__aeabi_dmul>
 80069ac:	4b41      	ldr	r3, [pc, #260]	; (8006ab4 <fn_get_lsm303ah+0x294>)
 80069ae:	4a40      	ldr	r2, [pc, #256]	; (8006ab0 <fn_get_lsm303ah+0x290>)
 80069b0:	f7fb f8ce 	bl	8001b50 <__aeabi_ddiv>
 80069b4:	f7fc fab6 	bl	8002f24 <__aeabi_d2iz>
 80069b8:	8160      	strh	r0, [r4, #10]
	st_accelerometer.roll_x = (atan2(st_accelerometer.a_x, st_accelerometer.a_z) * 180.0) / M_PI;
 80069ba:	2304      	movs	r3, #4
 80069bc:	5ee0      	ldrsh	r0, [r4, r3]
 80069be:	f7fc fae5 	bl	8002f8c <__aeabi_i2d>
 80069c2:	0006      	movs	r6, r0
 80069c4:	000f      	movs	r7, r1
 80069c6:	2300      	movs	r3, #0
 80069c8:	5ee0      	ldrsh	r0, [r4, r3]
 80069ca:	f7fc fadf 	bl	8002f8c <__aeabi_i2d>
 80069ce:	0032      	movs	r2, r6
 80069d0:	003b      	movs	r3, r7
 80069d2:	f003 f87d 	bl	8009ad0 <atan2>
 80069d6:	2200      	movs	r2, #0
 80069d8:	4b34      	ldr	r3, [pc, #208]	; (8006aac <fn_get_lsm303ah+0x28c>)
 80069da:	f7fb fced 	bl	80023b8 <__aeabi_dmul>
 80069de:	4a34      	ldr	r2, [pc, #208]	; (8006ab0 <fn_get_lsm303ah+0x290>)
 80069e0:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <fn_get_lsm303ah+0x294>)
 80069e2:	f7fb f8b5 	bl	8001b50 <__aeabi_ddiv>
 80069e6:	f7fc fa9d 	bl	8002f24 <__aeabi_d2iz>
	st_accelerometer.yaw = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 80069ea:	2304      	movs	r3, #4
 80069ec:	5ee6      	ldrsh	r6, [r4, r3]
	st_accelerometer.roll_x = (atan2(st_accelerometer.a_x, st_accelerometer.a_z) * 180.0) / M_PI;
 80069ee:	81a0      	strh	r0, [r4, #12]
	st_accelerometer.yaw = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 80069f0:	2300      	movs	r3, #0
 80069f2:	5ee0      	ldrsh	r0, [r4, r3]
 80069f4:	0033      	movs	r3, r6
 80069f6:	4340      	muls	r0, r0
 80069f8:	4373      	muls	r3, r6
 80069fa:	18c0      	adds	r0, r0, r3
 80069fc:	f7fc fac6 	bl	8002f8c <__aeabi_i2d>
 8006a00:	f003 f86a 	bl	8009ad8 <sqrt>
 8006a04:	9000      	str	r0, [sp, #0]
 8006a06:	9101      	str	r1, [sp, #4]
 8006a08:	0030      	movs	r0, r6
 8006a0a:	f7fc fabf 	bl	8002f8c <__aeabi_i2d>
 8006a0e:	9a00      	ldr	r2, [sp, #0]
 8006a10:	9b01      	ldr	r3, [sp, #4]
 8006a12:	f003 f85d 	bl	8009ad0 <atan2>
 8006a16:	2200      	movs	r2, #0
 8006a18:	4b24      	ldr	r3, [pc, #144]	; (8006aac <fn_get_lsm303ah+0x28c>)
 8006a1a:	f7fb fccd 	bl	80023b8 <__aeabi_dmul>
 8006a1e:	4a24      	ldr	r2, [pc, #144]	; (8006ab0 <fn_get_lsm303ah+0x290>)
 8006a20:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <fn_get_lsm303ah+0x294>)
 8006a22:	f7fb f895 	bl	8001b50 <__aeabi_ddiv>
 8006a26:	f7fc fa7d 	bl	8002f24 <__aeabi_d2iz>
	st_accelerometer.yaw_y = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 8006a2a:	2304      	movs	r3, #4
 8006a2c:	5ee6      	ldrsh	r6, [r4, r3]
	st_accelerometer.yaw = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 8006a2e:	81e0      	strh	r0, [r4, #14]
	st_accelerometer.yaw_y = 180 * (atan2(st_accelerometer.a_z, sqrt(st_accelerometer.a_x * st_accelerometer.a_x + st_accelerometer.a_z * st_accelerometer.a_z))) / M_PI;
 8006a30:	2300      	movs	r3, #0
 8006a32:	5ee0      	ldrsh	r0, [r4, r3]
 8006a34:	0033      	movs	r3, r6
 8006a36:	4340      	muls	r0, r0
 8006a38:	4373      	muls	r3, r6
 8006a3a:	18c0      	adds	r0, r0, r3
 8006a3c:	f7fc faa6 	bl	8002f8c <__aeabi_i2d>
 8006a40:	f003 f84a 	bl	8009ad8 <sqrt>
 8006a44:	9000      	str	r0, [sp, #0]
 8006a46:	9101      	str	r1, [sp, #4]
 8006a48:	0030      	movs	r0, r6
 8006a4a:	f7fc fa9f 	bl	8002f8c <__aeabi_i2d>
 8006a4e:	9a00      	ldr	r2, [sp, #0]
 8006a50:	9b01      	ldr	r3, [sp, #4]
 8006a52:	f003 f83d 	bl	8009ad0 <atan2>
 8006a56:	2200      	movs	r2, #0
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <fn_get_lsm303ah+0x28c>)
 8006a5a:	f7fb fcad 	bl	80023b8 <__aeabi_dmul>
 8006a5e:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <fn_get_lsm303ah+0x290>)
 8006a60:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <fn_get_lsm303ah+0x294>)
 8006a62:	f7fb f875 	bl	8001b50 <__aeabi_ddiv>
 8006a66:	f7fc fa5d 	bl	8002f24 <__aeabi_d2iz>
 8006a6a:	8220      	strh	r0, [r4, #16]
	st_magnetometer.m_x = magnetic_mG[0];
 8006a6c:	6828      	ldr	r0, [r5, #0]
 8006a6e:	f7fa fca9 	bl	80013c4 <__aeabi_f2iz>
 8006a72:	4c11      	ldr	r4, [pc, #68]	; (8006ab8 <fn_get_lsm303ah+0x298>)
 8006a74:	8020      	strh	r0, [r4, #0]
	st_magnetometer.m_y = magnetic_mG[1];
 8006a76:	6868      	ldr	r0, [r5, #4]
 8006a78:	f7fa fca4 	bl	80013c4 <__aeabi_f2iz>
 8006a7c:	8060      	strh	r0, [r4, #2]
	st_magnetometer.m_z = magnetic_mG[2];
 8006a7e:	68a8      	ldr	r0, [r5, #8]
 8006a80:	f7fa fca0 	bl	80013c4 <__aeabi_f2iz>
 8006a84:	80a0      	strh	r0, [r4, #4]
}
 8006a86:	b00b      	add	sp, #44	; 0x2c
 8006a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	08006619 	.word	0x08006619
 8006a90:	080065f5 	.word	0x080065f5
 8006a94:	200001f8 	.word	0x200001f8
 8006a98:	20000204 	.word	0x20000204
 8006a9c:	3d79db23 	.word	0x3d79db23
 8006aa0:	20000210 	.word	0x20000210
 8006aa4:	2000020a 	.word	0x2000020a
 8006aa8:	2000037c 	.word	0x2000037c
 8006aac:	40668000 	.word	0x40668000
 8006ab0:	54442d18 	.word	0x54442d18
 8006ab4:	400921fb 	.word	0x400921fb
 8006ab8:	2000042c 	.word	0x2000042c

08006abc <lsm303ah_xl_device_id_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  buff   buffer that stores data read.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff) {
 8006abc:	b510      	push	{r4, lr}
 8006abe:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_WHO_AM_I_A, buff, 1);
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	210f      	movs	r1, #15
 8006ac4:	f7ff fdba 	bl	800663c <lsm303ah_read_reg>
	return ret;
}
 8006ac8:	bd10      	pop	{r4, pc}

08006aca <lsm303ah_mg_device_id_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  buff   buffer that stores data read.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff) {
 8006aca:	b510      	push	{r4, lr}
 8006acc:	000a      	movs	r2, r1
	int32_t ret;
	ret = lsm303ah_read_reg(ctx, LSM303AH_WHO_AM_I_M, buff, 1);
 8006ace:	2301      	movs	r3, #1
 8006ad0:	214f      	movs	r1, #79	; 0x4f
 8006ad2:	f7ff fdb3 	bl	800663c <lsm303ah_read_reg>
	return ret;
}
 8006ad6:	bd10      	pop	{r4, pc}

08006ad8 <lsm303ah_xl_reset_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of soft_reset in reg CTRL2
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_ctrl2_a_t ctrl2_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8006ada:	ac01      	add	r4, sp, #4
int32_t lsm303ah_xl_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006adc:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8006ade:	2301      	movs	r3, #1
 8006ae0:	0022      	movs	r2, r4
 8006ae2:	2121      	movs	r1, #33	; 0x21
int32_t lsm303ah_xl_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006ae4:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8006ae6:	f7ff fda9 	bl	800663c <lsm303ah_read_reg>
	if (ret == 0) {
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d10c      	bne.n	8006b08 <lsm303ah_xl_reset_set+0x30>
		ctrl2_a.soft_reset = val;
 8006aee:	2301      	movs	r3, #1
 8006af0:	2240      	movs	r2, #64	; 0x40
 8006af2:	7821      	ldrb	r1, [r4, #0]
 8006af4:	401e      	ands	r6, r3
 8006af6:	4391      	bics	r1, r2
 8006af8:	01b6      	lsls	r6, r6, #6
 8006afa:	4331      	orrs	r1, r6
 8006afc:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8006afe:	0022      	movs	r2, r4
 8006b00:	2121      	movs	r1, #33	; 0x21
 8006b02:	0028      	movs	r0, r5
 8006b04:	f7ff fd9f 	bl	8006646 <lsm303ah_write_reg>
	}

	return ret;
}
 8006b08:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08006b0a <lsm303ah_xl_reset_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Get the values of soft_reset in reg CTRL2.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_xl_reset_get(stmdev_ctx_t *ctx, uint8_t *val) {
 8006b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b0c:	000c      	movs	r4, r1
	lsm303ah_ctrl2_a_t ctrl2_a;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CTRL2_A, (uint8_t*) &ctrl2_a, 1);
 8006b0e:	ad01      	add	r5, sp, #4
 8006b10:	002a      	movs	r2, r5
 8006b12:	2301      	movs	r3, #1
 8006b14:	2121      	movs	r1, #33	; 0x21
 8006b16:	f7ff fd91 	bl	800663c <lsm303ah_read_reg>
	*val = ctrl2_a.soft_reset;
 8006b1a:	782b      	ldrb	r3, [r5, #0]
 8006b1c:	065b      	lsls	r3, r3, #25
 8006b1e:	0fdb      	lsrs	r3, r3, #31
 8006b20:	7023      	strb	r3, [r4, #0]

	return ret;
}
 8006b22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08006b24 <lsm303ah_mg_reset_set>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Change the values of soft_rst in reg CFG_REG_A
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 8006b26:	ac01      	add	r4, sp, #4
int32_t lsm303ah_mg_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006b28:	000e      	movs	r6, r1
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	0022      	movs	r2, r4
 8006b2e:	2160      	movs	r1, #96	; 0x60
int32_t lsm303ah_mg_reset_set(stmdev_ctx_t *ctx, uint8_t val) {
 8006b30:	0005      	movs	r5, r0
	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 8006b32:	f7ff fd83 	bl	800663c <lsm303ah_read_reg>
			1);
	if (ret == 0) {
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d10c      	bne.n	8006b54 <lsm303ah_mg_reset_set+0x30>
		cfg_reg_a_m.soft_rst = val;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	7821      	ldrb	r1, [r4, #0]
 8006b40:	401e      	ands	r6, r3
 8006b42:	4391      	bics	r1, r2
 8006b44:	0176      	lsls	r6, r6, #5
 8006b46:	4331      	orrs	r1, r6
 8006b48:	7021      	strb	r1, [r4, #0]
		ret = lsm303ah_write_reg(ctx, LSM303AH_CFG_REG_A_M,
 8006b4a:	0022      	movs	r2, r4
 8006b4c:	2160      	movs	r1, #96	; 0x60
 8006b4e:	0028      	movs	r0, r5
 8006b50:	f7ff fd79 	bl	8006646 <lsm303ah_write_reg>
				(uint8_t*) &cfg_reg_a_m, 1);
	}

	return ret;
}
 8006b54:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08006b56 <lsm303ah_mg_reset_get>:
 * @param  ctx    read / write interface definitions.(ptr)
 * @param  val    Get the values of soft_rst in reg CFG_REG_A.(ptr)
 * @retval        Interface status (MANDATORY: return 0 -> no Error).
 *
 */
int32_t lsm303ah_mg_reset_get(stmdev_ctx_t *ctx, uint8_t *val) {
 8006b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b58:	000c      	movs	r4, r1
	lsm303ah_cfg_reg_a_m_t cfg_reg_a_m;
	int32_t ret;

	ret = lsm303ah_read_reg(ctx, LSM303AH_CFG_REG_A_M, (uint8_t*) &cfg_reg_a_m,
 8006b5a:	ad01      	add	r5, sp, #4
 8006b5c:	002a      	movs	r2, r5
 8006b5e:	2301      	movs	r3, #1
 8006b60:	2160      	movs	r1, #96	; 0x60
 8006b62:	f7ff fd6b 	bl	800663c <lsm303ah_read_reg>
			1);
	*val = cfg_reg_a_m.soft_rst;
 8006b66:	782b      	ldrb	r3, [r5, #0]
 8006b68:	069b      	lsls	r3, r3, #26
 8006b6a:	0fdb      	lsrs	r3, r3, #31
 8006b6c:	7023      	strb	r3, [r4, #0]

	return ret;
}
 8006b6e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08006b70 <fn_init_lsm303ah>:
void fn_init_lsm303ah() {
 8006b70:	b530      	push	{r4, r5, lr}
	dev_ctx_xl.read_reg = platform_read;
 8006b72:	4b2c      	ldr	r3, [pc, #176]	; (8006c24 <fn_init_lsm303ah+0xb4>)
void fn_init_lsm303ah() {
 8006b74:	b087      	sub	sp, #28
	dev_ctx_xl.handle = (void*) LSM303AH_I2C_ADD_XL;
 8006b76:	213b      	movs	r1, #59	; 0x3b
	dev_ctx_xl.read_reg = platform_read;
 8006b78:	9301      	str	r3, [sp, #4]
	dev_ctx_mg.read_reg = platform_read;
 8006b7a:	9304      	str	r3, [sp, #16]
	whoamI = 0;
 8006b7c:	2500      	movs	r5, #0
	dev_ctx_mg.handle = (void*) LSM303AH_I2C_ADD_MG;
 8006b7e:	233d      	movs	r3, #61	; 0x3d
	whoamI = 0;
 8006b80:	4c29      	ldr	r4, [pc, #164]	; (8006c28 <fn_init_lsm303ah+0xb8>)
	dev_ctx_xl.write_reg = platform_write;
 8006b82:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <fn_init_lsm303ah+0xbc>)
	dev_ctx_xl.handle = (void*) LSM303AH_I2C_ADD_XL;
 8006b84:	9102      	str	r1, [sp, #8]
	lsm303ah_xl_device_id_get(&dev_ctx_xl, &whoamI);
 8006b86:	4668      	mov	r0, sp
 8006b88:	0021      	movs	r1, r4
	dev_ctx_mg.handle = (void*) LSM303AH_I2C_ADD_MG;
 8006b8a:	9305      	str	r3, [sp, #20]
	dev_ctx_xl.write_reg = platform_write;
 8006b8c:	9200      	str	r2, [sp, #0]
	dev_ctx_mg.write_reg = platform_write;
 8006b8e:	9203      	str	r2, [sp, #12]
	whoamI = 0;
 8006b90:	7025      	strb	r5, [r4, #0]
	lsm303ah_xl_device_id_get(&dev_ctx_xl, &whoamI);
 8006b92:	f7ff ff93 	bl	8006abc <lsm303ah_xl_device_id_get>
	if (whoamI != LSM303AH_ID_XL)
 8006b96:	7823      	ldrb	r3, [r4, #0]
 8006b98:	2b43      	cmp	r3, #67	; 0x43
 8006b9a:	d000      	beq.n	8006b9e <fn_init_lsm303ah+0x2e>
 8006b9c:	e7fe      	b.n	8006b9c <fn_init_lsm303ah+0x2c>
	lsm303ah_mg_device_id_get(&dev_ctx_mg, &whoamI);
 8006b9e:	0021      	movs	r1, r4
 8006ba0:	a803      	add	r0, sp, #12
	whoamI = 0;
 8006ba2:	7025      	strb	r5, [r4, #0]
	lsm303ah_mg_device_id_get(&dev_ctx_mg, &whoamI);
 8006ba4:	f7ff ff91 	bl	8006aca <lsm303ah_mg_device_id_get>
	if (whoamI != LSM303AH_ID_MG)
 8006ba8:	7823      	ldrb	r3, [r4, #0]
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d000      	beq.n	8006bb0 <fn_init_lsm303ah+0x40>
 8006bae:	e7fe      	b.n	8006bae <fn_init_lsm303ah+0x3e>
	lsm303ah_xl_reset_set(&dev_ctx_xl, PROPERTY_ENABLE);
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4668      	mov	r0, sp
 8006bb4:	f7ff ff90 	bl	8006ad8 <lsm303ah_xl_reset_set>
		lsm303ah_xl_reset_get(&dev_ctx_xl, &rst);
 8006bb8:	4d1d      	ldr	r5, [pc, #116]	; (8006c30 <fn_init_lsm303ah+0xc0>)
 8006bba:	4668      	mov	r0, sp
 8006bbc:	0029      	movs	r1, r5
 8006bbe:	f7ff ffa4 	bl	8006b0a <lsm303ah_xl_reset_get>
	} while (rst);
 8006bc2:	782b      	ldrb	r3, [r5, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f7      	bne.n	8006bb8 <fn_init_lsm303ah+0x48>
	lsm303ah_mg_reset_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8006bc8:	2101      	movs	r1, #1
 8006bca:	a803      	add	r0, sp, #12
 8006bcc:	f7ff ffaa 	bl	8006b24 <lsm303ah_mg_reset_set>
		lsm303ah_mg_reset_get(&dev_ctx_mg, &rst);
 8006bd0:	0029      	movs	r1, r5
 8006bd2:	a803      	add	r0, sp, #12
 8006bd4:	f7ff ffbf 	bl	8006b56 <lsm303ah_mg_reset_get>
	} while (rst);
 8006bd8:	782c      	ldrb	r4, [r5, #0]
 8006bda:	2c00      	cmp	r4, #0
 8006bdc:	d1f8      	bne.n	8006bd0 <fn_init_lsm303ah+0x60>
	lsm303ah_xl_block_data_update_set(&dev_ctx_xl, PROPERTY_ENABLE);
 8006bde:	2101      	movs	r1, #1
 8006be0:	4668      	mov	r0, sp
 8006be2:	f7ff fd35 	bl	8006650 <lsm303ah_xl_block_data_update_set>
	lsm303ah_mg_block_data_update_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8006be6:	2101      	movs	r1, #1
 8006be8:	a803      	add	r0, sp, #12
 8006bea:	f7ff fd48 	bl	800667e <lsm303ah_mg_block_data_update_set>
	lsm303ah_xl_full_scale_set(&dev_ctx_xl, LSM303AH_XL_2g);
 8006bee:	0021      	movs	r1, r4
 8006bf0:	4668      	mov	r0, sp
 8006bf2:	f7ff fd5d 	bl	80066b0 <lsm303ah_xl_full_scale_set>
	lsm303ah_mg_set_rst_mode_set(&dev_ctx_mg,
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	a803      	add	r0, sp, #12
 8006bfa:	f7ff fde9 	bl	80067d0 <lsm303ah_mg_set_rst_mode_set>
	lsm303ah_mg_offset_temp_comp_set(&dev_ctx_mg, PROPERTY_ENABLE);
 8006bfe:	2101      	movs	r1, #1
 8006c00:	a803      	add	r0, sp, #12
 8006c02:	f7ff fdcd 	bl	80067a0 <lsm303ah_mg_offset_temp_comp_set>
	lsm303ah_xl_data_rate_set(&dev_ctx_xl, LSM303AH_XL_ODR_100Hz_LP);
 8006c06:	210c      	movs	r1, #12
 8006c08:	4668      	mov	r0, sp
 8006c0a:	f7ff fd6b 	bl	80066e4 <lsm303ah_xl_data_rate_set>
	lsm303ah_mg_data_rate_set(&dev_ctx_mg, LSM303AH_MG_ODR_10Hz);
 8006c0e:	0021      	movs	r1, r4
 8006c10:	a803      	add	r0, sp, #12
 8006c12:	f7ff fdab 	bl	800676c <lsm303ah_mg_data_rate_set>
	lsm303ah_mg_operating_mode_set(&dev_ctx_mg, LSM303AH_MG_CONTINUOUS_MODE);
 8006c16:	0021      	movs	r1, r4
 8006c18:	a803      	add	r0, sp, #12
 8006c1a:	f7ff fd8f 	bl	800673c <lsm303ah_mg_operating_mode_set>
}
 8006c1e:	b007      	add	sp, #28
 8006c20:	bd30      	pop	{r4, r5, pc}
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	08006619 	.word	0x08006619
 8006c28:	2000021d 	.word	0x2000021d
 8006c2c:	080065f5 	.word	0x080065f5
 8006c30:	2000021c 	.word	0x2000021c

08006c34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006c34:	b530      	push	{r4, r5, lr}
 8006c36:	b09d      	sub	sp, #116	; 0x74
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006c38:	2238      	movs	r2, #56	; 0x38
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	a80e      	add	r0, sp, #56	; 0x38
 8006c3e:	f000 ffe0 	bl	8007c02 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006c42:	2214      	movs	r2, #20
 8006c44:	2100      	movs	r1, #0
 8006c46:	4668      	mov	r0, sp
 8006c48:	f000 ffdb 	bl	8007c02 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8006c4c:	2224      	movs	r2, #36	; 0x24
 8006c4e:	2100      	movs	r1, #0
 8006c50:	a805      	add	r0, sp, #20
 8006c52:	f000 ffd6 	bl	8007c02 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c56:	4914      	ldr	r1, [pc, #80]	; (8006ca8 <SystemClock_Config+0x74>)
 8006c58:	4a14      	ldr	r2, [pc, #80]	; (8006cac <SystemClock_Config+0x78>)
 8006c5a:	680b      	ldr	r3, [r1, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8006c5c:	2400      	movs	r4, #0
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c5e:	401a      	ands	r2, r3
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	4313      	orrs	r3, r2
 8006c66:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006c68:	2310      	movs	r3, #16
 8006c6a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006c6c:	3b0f      	subs	r3, #15
 8006c6e:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8006c70:	23a0      	movs	r3, #160	; 0xa0
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006c72:	250f      	movs	r5, #15
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8006c74:	021b      	lsls	r3, r3, #8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006c76:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8006c78:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8006c7a:	9416      	str	r4, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006c7c:	9418      	str	r4, [sp, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006c7e:	f7fd ff13 	bl	8004aa8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8006c82:	0021      	movs	r1, r4
 8006c84:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006c86:	9500      	str	r5, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8006c88:	9401      	str	r4, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c8a:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006c8c:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c8e:	9404      	str	r4, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8006c90:	f7fe fa68 	bl	8005164 <HAL_RCC_ClockConfig>
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8006c94:	a805      	add	r0, sp, #20
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8006c96:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006c98:	9407      	str	r4, [sp, #28]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006c9a:	9408      	str	r4, [sp, #32]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006c9c:	9409      	str	r4, [sp, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006c9e:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8006ca0:	f7fe fba4 	bl	80053ec <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8006ca4:	b01d      	add	sp, #116	; 0x74
 8006ca6:	bd30      	pop	{r4, r5, pc}
 8006ca8:	40007000 	.word	0x40007000
 8006cac:	ffffe7ff 	.word	0xffffe7ff

08006cb0 <blink>:

}

/* USER CODE BEGIN 4 */

void blink(uint8_t times) {
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int var = 0; var < times; ++var) {
		LED_ON
 8006cb2:	2580      	movs	r5, #128	; 0x80
 8006cb4:	26a0      	movs	r6, #160	; 0xa0
void blink(uint8_t times) {
 8006cb6:	0007      	movs	r7, r0
	for (int var = 0; var < times; ++var) {
 8006cb8:	2400      	movs	r4, #0
		LED_ON
 8006cba:	006d      	lsls	r5, r5, #1
 8006cbc:	05f6      	lsls	r6, r6, #23
	for (int var = 0; var < times; ++var) {
 8006cbe:	42bc      	cmp	r4, r7
 8006cc0:	db00      	blt.n	8006cc4 <blink+0x14>
		HAL_Delay(25);
		LED_OFF
		HAL_Delay(25);
	}

}
 8006cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LED_ON
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	0029      	movs	r1, r5
 8006cc8:	0030      	movs	r0, r6
 8006cca:	f7fd fa1f 	bl	800410c <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8006cce:	2019      	movs	r0, #25
 8006cd0:	f7fc fac4 	bl	800325c <HAL_Delay>
		LED_OFF
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	0029      	movs	r1, r5
 8006cd8:	0030      	movs	r0, r6
 8006cda:	f7fd fa17 	bl	800410c <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8006cde:	2019      	movs	r0, #25
 8006ce0:	f7fc fabc 	bl	800325c <HAL_Delay>
	for (int var = 0; var < times; ++var) {
 8006ce4:	3401      	adds	r4, #1
 8006ce6:	e7ea      	b.n	8006cbe <blink+0xe>

08006ce8 <fn_fprint>:

void fn_fprint(char *data) {
 8006ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	0005      	movs	r5, r0
	int tamanho = strlen(data);
 8006cee:	f7f9 fa0b 	bl	8000108 <strlen>
	char new_command[tamanho];
 8006cf2:	466a      	mov	r2, sp
 8006cf4:	1dc3      	adds	r3, r0, #7
 8006cf6:	08db      	lsrs	r3, r3, #3
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	469d      	mov	sp, r3
	strcpy(new_command, data);
 8006cfe:	0029      	movs	r1, r5
	int tamanho = strlen(data);
 8006d00:	0004      	movs	r4, r0
	strcpy(new_command, data);
 8006d02:	4668      	mov	r0, sp
 8006d04:	f001 f840 	bl	8007d88 <strcpy>
 8006d08:	466e      	mov	r6, sp
	char new_com[1]; // (uint8_t*)new_command;
	for (int var = 0; var < tamanho; ++var) {
 8006d0a:	466d      	mov	r5, sp
 8006d0c:	1bab      	subs	r3, r5, r6
 8006d0e:	429c      	cmp	r4, r3
 8006d10:	dc01      	bgt.n	8006d16 <fn_fprint+0x2e>
		new_com[0] = new_command[var];
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
	}
}
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		new_com[0] = new_command[var];
 8006d16:	782b      	ldrb	r3, [r5, #0]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8006d18:	2201      	movs	r2, #1
		new_com[0] = new_command[var];
 8006d1a:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) new_com, 1, 10);
 8006d1c:	1d39      	adds	r1, r7, #4
 8006d1e:	230a      	movs	r3, #10
 8006d20:	4802      	ldr	r0, [pc, #8]	; (8006d2c <fn_fprint+0x44>)
 8006d22:	f7ff f953 	bl	8005fcc <HAL_UART_Transmit>
 8006d26:	3501      	adds	r5, #1
 8006d28:	e7f0      	b.n	8006d0c <fn_fprint+0x24>
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	20000444 	.word	0x20000444

08006d30 <main>:
int main(void) {
 8006d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d32:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8006d34:	f7fc fa70 	bl	8003218 <HAL_Init>
	SystemClock_Config();
 8006d38:	f7ff ff7c 	bl	8006c34 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8006d3c:	2214      	movs	r2, #20
 8006d3e:	2100      	movs	r1, #0
 8006d40:	a805      	add	r0, sp, #20
 8006d42:	f000 ff5e 	bl	8007c02 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8006d46:	2204      	movs	r2, #4
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8006d48:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8006d4a:	4da9      	ldr	r5, [pc, #676]	; (8006ff0 <main+0x2c0>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8006d4c:	2601      	movs	r6, #1
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8006d4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin,
 8006d50:	48a8      	ldr	r0, [pc, #672]	; (8006ff4 <main+0x2c4>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8006d52:	4313      	orrs	r3, r2
 8006d54:	62eb      	str	r3, [r5, #44]	; 0x2c
 8006d56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d58:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8006d60:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d62:	2703      	movs	r7, #3
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8006d64:	430a      	orrs	r2, r1
 8006d66:	62ea      	str	r2, [r5, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8006d68:	2202      	movs	r2, #2
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8006d6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d6c:	400b      	ands	r3, r1
 8006d6e:	9302      	str	r3, [sp, #8]
 8006d70:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8006d72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin,
 8006d74:	49a0      	ldr	r1, [pc, #640]	; (8006ff8 <main+0x2c8>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8006d76:	4333      	orrs	r3, r6
 8006d78:	62eb      	str	r3, [r5, #44]	; 0x2c
 8006d7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d7c:	4033      	ands	r3, r6
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8006d82:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d84:	4313      	orrs	r3, r2
 8006d86:	62eb      	str	r3, [r5, #44]	; 0x2c
 8006d88:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin,
 8006d8e:	0032      	movs	r2, r6
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8006d90:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOB, GPRS_RST_Pin | WISOL_WKP_Pin | WISOL_RST_Pin,
 8006d92:	f7fd f9bb 	bl	800410c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,
 8006d96:	219f      	movs	r1, #159	; 0x9f
 8006d98:	20a0      	movs	r0, #160	; 0xa0
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	0209      	lsls	r1, r1, #8
 8006d9e:	05c0      	lsls	r0, r0, #23
 8006da0:	f7fd f9b4 	bl	800410c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPRS_PWR_ON_GPIO_Port, GPRS_PWR_ON_Pin, GPIO_PIN_RESET);
 8006da4:	2200      	movs	r2, #0
 8006da6:	2120      	movs	r1, #32
 8006da8:	4892      	ldr	r0, [pc, #584]	; (8006ff4 <main+0x2c4>)
 8006daa:	f7fd f9af 	bl	800410c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8006dae:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8006db0:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8006db2:	019b      	lsls	r3, r3, #6
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8006db4:	4891      	ldr	r0, [pc, #580]	; (8006ffc <main+0x2cc>)
	GPIO_InitStruct.Pin = WISOL_LED_CPU_Pin;
 8006db6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006db8:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dba:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(WISOL_LED_CPU_GPIO_Port, &GPIO_InitStruct);
 8006dbc:	f7fd f870 	bl	8003ea0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8006dc0:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dc2:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8006dc4:	021b      	lsls	r3, r3, #8
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dc6:	488d      	ldr	r0, [pc, #564]	; (8006ffc <main+0x2cc>)
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8006dc8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dca:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dcc:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dce:	f7fd f867 	bl	8003ea0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006dd2:	a905      	add	r1, sp, #20
 8006dd4:	488a      	ldr	r0, [pc, #552]	; (8007000 <main+0x2d0>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8006dd6:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dd8:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dda:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006ddc:	f7fd f860 	bl	8003ea0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de0:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = HC_SR04_TRG_Pin | HC_SR04_PULSE_Pin;
 8006de2:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de4:	a905      	add	r1, sp, #20
 8006de6:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = HC_SR04_TRG_Pin | HC_SR04_PULSE_Pin;
 8006de8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dea:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dee:	f7fd f857 	bl	8003ea0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EXT_INT1_XL_Pin | EXT_INT_MAG_Pin | GPS_EXTI_Pin
 8006df2:	4b84      	ldr	r3, [pc, #528]	; (8007004 <main+0x2d4>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006df4:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = EXT_INT1_XL_Pin | EXT_INT_MAG_Pin | GPS_EXTI_Pin
 8006df6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006df8:	4b83      	ldr	r3, [pc, #524]	; (8007008 <main+0x2d8>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dfa:	487e      	ldr	r0, [pc, #504]	; (8006ff4 <main+0x2c4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006dfc:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfe:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e00:	f7fd f84e 	bl	8003ea0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPRS_RST_Pin;
 8006e04:	2304      	movs	r3, #4
	HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8006e06:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = GPRS_RST_Pin;
 8006e08:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8006e0a:	487a      	ldr	r0, [pc, #488]	; (8006ff4 <main+0x2c4>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006e0c:	330d      	adds	r3, #13
 8006e0e:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e10:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e12:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPRS_RST_GPIO_Port, &GPIO_InitStruct);
 8006e14:	f7fd f844 	bl	8003ea0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = WISOL_WKP_Pin | WISOL_RST_Pin | GPRS_PWR_ON_Pin;
 8006e18:	4b7c      	ldr	r3, [pc, #496]	; (800700c <main+0x2dc>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e1a:	a905      	add	r1, sp, #20
 8006e1c:	4875      	ldr	r0, [pc, #468]	; (8006ff4 <main+0x2c4>)
	GPIO_InitStruct.Pin = WISOL_WKP_Pin | WISOL_RST_Pin | GPRS_PWR_ON_Pin;
 8006e1e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e20:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e22:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e24:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e26:	f7fd f83b 	bl	8003ea0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8006e2a:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8006e2c:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8006e32:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e34:	3bfe      	subs	r3, #254	; 0xfe
	HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8006e36:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e38:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e3a:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e3c:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8006e3e:	f7fd f82f 	bl	8003ea0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin | EN_BLE_Pin
 8006e42:	239e      	movs	r3, #158	; 0x9e
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e44:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin | EN_BLE_Pin
 8006e46:	021b      	lsls	r3, r3, #8
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e48:	a905      	add	r1, sp, #20
 8006e4a:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = EN_US_Pin | EN_GPRS_Pin | EN_GPS_Pin | EN_BLE_Pin
 8006e4c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e4e:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e50:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e52:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e54:	f7fd f824 	bl	8003ea0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE()
 8006e58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006e5a:	0022      	movs	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8006e5c:	4333      	orrs	r3, r6
 8006e5e:	632b      	str	r3, [r5, #48]	; 0x30
 8006e60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006e62:	0021      	movs	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8006e64:	4033      	ands	r3, r6
 8006e66:	9300      	str	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006e68:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE()
 8006e6a:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006e6c:	f7fc fe2e 	bl	8003acc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006e70:	2009      	movs	r0, #9
 8006e72:	f7fc fe65 	bl	8003b40 <HAL_NVIC_EnableIRQ>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8006e76:	2208      	movs	r2, #8
 8006e78:	0021      	movs	r1, r4
 8006e7a:	a805      	add	r0, sp, #20
 8006e7c:	f000 fec1 	bl	8007c02 <memset>
	hadc.Instance = ADC1;
 8006e80:	4d63      	ldr	r5, [pc, #396]	; (8007010 <main+0x2e0>)
 8006e82:	4b64      	ldr	r3, [pc, #400]	; (8007014 <main+0x2e4>)
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8006e84:	0028      	movs	r0, r5
	hadc.Instance = ADC1;
 8006e86:	602b      	str	r3, [r5, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006e88:	23c0      	movs	r3, #192	; 0xc0
 8006e8a:	061b      	lsls	r3, r3, #24
 8006e8c:	606b      	str	r3, [r5, #4]
	hadc.Init.ContinuousConvMode = DISABLE;
 8006e8e:	19ab      	adds	r3, r5, r6
 8006e90:	77dc      	strb	r4, [r3, #31]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8006e92:	1cab      	adds	r3, r5, #2
 8006e94:	77dc      	strb	r4, [r3, #31]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e96:	23c2      	movs	r3, #194	; 0xc2
 8006e98:	33ff      	adds	r3, #255	; 0xff
 8006e9a:	626b      	str	r3, [r5, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8006e9c:	002b      	movs	r3, r5
 8006e9e:	332c      	adds	r3, #44	; 0x2c
 8006ea0:	701c      	strb	r4, [r3, #0]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006ea2:	2304      	movs	r3, #4
	hadc.Init.OversamplingMode = DISABLE;
 8006ea4:	63ec      	str	r4, [r5, #60]	; 0x3c
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006ea6:	616b      	str	r3, [r5, #20]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006ea8:	60ac      	str	r4, [r5, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006eaa:	63ac      	str	r4, [r5, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006eac:	612e      	str	r6, [r5, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006eae:	60ec      	str	r4, [r5, #12]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006eb0:	62ac      	str	r4, [r5, #40]	; 0x28
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006eb2:	632c      	str	r4, [r5, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8006eb4:	61ac      	str	r4, [r5, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006eb6:	636c      	str	r4, [r5, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006eb8:	61ec      	str	r4, [r5, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8006eba:	f7fc fa2d 	bl	8003318 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_4;
 8006ebe:	4b56      	ldr	r3, [pc, #344]	; (8007018 <main+0x2e8>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ec0:	a905      	add	r1, sp, #20
	sConfig.Channel = ADC_CHANNEL_4;
 8006ec2:	9305      	str	r3, [sp, #20]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006ec4:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ec6:	0028      	movs	r0, r5
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006ec8:	015b      	lsls	r3, r3, #5
 8006eca:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ecc:	f7fc fd32 	bl	8003934 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_5;
 8006ed0:	4b52      	ldr	r3, [pc, #328]	; (800701c <main+0x2ec>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ed2:	a905      	add	r1, sp, #20
 8006ed4:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 8006ed6:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ed8:	f7fc fd2c 	bl	8003934 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006edc:	4b50      	ldr	r3, [pc, #320]	; (8007020 <main+0x2f0>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ede:	a905      	add	r1, sp, #20
 8006ee0:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006ee2:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ee4:	f7fc fd26 	bl	8003934 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start_DMA(&hadc, value, 3);
 8006ee8:	003a      	movs	r2, r7
 8006eea:	494e      	ldr	r1, [pc, #312]	; (8007024 <main+0x2f4>)
 8006eec:	0028      	movs	r0, r5
 8006eee:	f7fc fbe3 	bl	80036b8 <HAL_ADC_Start_DMA>
	hi2c1.Instance = I2C1;
 8006ef2:	4d4d      	ldr	r5, [pc, #308]	; (8007028 <main+0x2f8>)
 8006ef4:	4b4d      	ldr	r3, [pc, #308]	; (800702c <main+0x2fc>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8006ef6:	0028      	movs	r0, r5
	hi2c1.Instance = I2C1;
 8006ef8:	602b      	str	r3, [r5, #0]
	hi2c1.Init.Timing = 0x00000708;
 8006efa:	23e1      	movs	r3, #225	; 0xe1
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	606b      	str	r3, [r5, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8006f00:	60ac      	str	r4, [r5, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f02:	60ee      	str	r6, [r5, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006f04:	612c      	str	r4, [r5, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8006f06:	616c      	str	r4, [r5, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006f08:	61ac      	str	r4, [r5, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f0a:	61ec      	str	r4, [r5, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f0c:	622c      	str	r4, [r5, #32]
	hlpuart1.Init.BaudRate = 9600;
 8006f0e:	2796      	movs	r7, #150	; 0x96
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8006f10:	f7fd fac0 	bl	8004494 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8006f14:	0021      	movs	r1, r4
 8006f16:	0028      	movs	r0, r5
 8006f18:	f7fd fd02 	bl	8004920 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8006f1c:	0028      	movs	r0, r5
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006f1e:	250c      	movs	r5, #12
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8006f20:	0021      	movs	r1, r4
 8006f22:	f7fd fd43 	bl	80049ac <HAL_I2CEx_ConfigDigitalFilter>
	hlpuart1.Instance = LPUART1;
 8006f26:	4842      	ldr	r0, [pc, #264]	; (8007030 <main+0x300>)
 8006f28:	4b42      	ldr	r3, [pc, #264]	; (8007034 <main+0x304>)
	hlpuart1.Init.BaudRate = 9600;
 8006f2a:	01bf      	lsls	r7, r7, #6
	hlpuart1.Instance = LPUART1;
 8006f2c:	6003      	str	r3, [r0, #0]
	hlpuart1.Init.BaudRate = 9600;
 8006f2e:	6047      	str	r7, [r0, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f30:	6084      	str	r4, [r0, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006f32:	60c4      	str	r4, [r0, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006f34:	6104      	str	r4, [r0, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006f36:	6145      	str	r5, [r0, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f38:	6184      	str	r4, [r0, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f3a:	6204      	str	r4, [r0, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f3c:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8006f3e:	f7ff f963 	bl	8006208 <HAL_UART_Init>
	huart1.Instance = USART1;
 8006f42:	483d      	ldr	r0, [pc, #244]	; (8007038 <main+0x308>)
 8006f44:	4b3d      	ldr	r3, [pc, #244]	; (800703c <main+0x30c>)
	huart1.Init.BaudRate = 9600;
 8006f46:	6047      	str	r7, [r0, #4]
	huart1.Instance = USART1;
 8006f48:	6003      	str	r3, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f4a:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006f4c:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8006f4e:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006f50:	6145      	str	r5, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f52:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f54:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f56:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f58:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8006f5a:	f7ff f955 	bl	8006208 <HAL_UART_Init>
	huart2.Instance = USART2;
 8006f5e:	4838      	ldr	r0, [pc, #224]	; (8007040 <main+0x310>)
 8006f60:	4b38      	ldr	r3, [pc, #224]	; (8007044 <main+0x314>)
	huart2.Init.BaudRate = 9600;
 8006f62:	6047      	str	r7, [r0, #4]
	huart2.Instance = USART2;
 8006f64:	6003      	str	r3, [r0, #0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006f66:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8006f68:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8006f6a:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8006f6c:	6145      	str	r5, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f6e:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f70:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f72:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f74:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8006f76:	f7ff f947 	bl	8006208 <HAL_UART_Init>
	huart4.Instance = USART4;
 8006f7a:	4833      	ldr	r0, [pc, #204]	; (8007048 <main+0x318>)
 8006f7c:	4b33      	ldr	r3, [pc, #204]	; (800704c <main+0x31c>)
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006f7e:	6084      	str	r4, [r0, #8]
	huart4.Instance = USART4;
 8006f80:	6003      	str	r3, [r0, #0]
	huart4.Init.BaudRate = 115200;
 8006f82:	23e1      	movs	r3, #225	; 0xe1
 8006f84:	025b      	lsls	r3, r3, #9
 8006f86:	6043      	str	r3, [r0, #4]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8006f88:	60c4      	str	r4, [r0, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8006f8a:	6104      	str	r4, [r0, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8006f8c:	6145      	str	r5, [r0, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f8e:	6184      	str	r4, [r0, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f90:	61c4      	str	r4, [r0, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f92:	6204      	str	r4, [r0, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f94:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8006f96:	f7ff f937 	bl	8006208 <HAL_UART_Init>
	huart5.Instance = USART5;
 8006f9a:	482d      	ldr	r0, [pc, #180]	; (8007050 <main+0x320>)
 8006f9c:	4b2d      	ldr	r3, [pc, #180]	; (8007054 <main+0x324>)
	huart5.Init.BaudRate = 9600;
 8006f9e:	6047      	str	r7, [r0, #4]
	huart5.Instance = USART5;
 8006fa0:	6003      	str	r3, [r0, #0]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006fa2:	6084      	str	r4, [r0, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8006fa4:	60c4      	str	r4, [r0, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8006fa6:	6104      	str	r4, [r0, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8006fa8:	6145      	str	r5, [r0, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006faa:	6184      	str	r4, [r0, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fac:	61c4      	str	r4, [r0, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fae:	6204      	str	r4, [r0, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fb0:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8006fb2:	f7ff f929 	bl	8006208 <HAL_UART_Init>
	blink(5);
 8006fb6:	2005      	movs	r0, #5
 8006fb8:	f7ff fe7a 	bl	8006cb0 <blink>
	LED_ON
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	20a0      	movs	r0, #160	; 0xa0
 8006fc0:	0022      	movs	r2, r4
 8006fc2:	0049      	lsls	r1, r1, #1
 8006fc4:	05c0      	lsls	r0, r0, #23
 8006fc6:	f7fd f8a1 	bl	800410c <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8006fca:	4823      	ldr	r0, [pc, #140]	; (8007058 <main+0x328>)
 8006fcc:	f7fc f946 	bl	800325c <HAL_Delay>
	fn_fprint("START PROGRAM\r\n");
 8006fd0:	4822      	ldr	r0, [pc, #136]	; (800705c <main+0x32c>)
 8006fd2:	f7ff fe89 	bl	8006ce8 <fn_fprint>
	LED_OFF
 8006fd6:	2180      	movs	r1, #128	; 0x80
 8006fd8:	20a0      	movs	r0, #160	; 0xa0
 8006fda:	0032      	movs	r2, r6
 8006fdc:	0049      	lsls	r1, r1, #1
 8006fde:	05c0      	lsls	r0, r0, #23
 8006fe0:	f7fd f894 	bl	800410c <HAL_GPIO_WritePin>
	fn_init_sensors();
 8006fe4:	f000 f92a 	bl	800723c <fn_init_sensors>
		fn_get_sensors_values();
 8006fe8:	f000 f9ec 	bl	80073c4 <fn_get_sensors_values>
 8006fec:	e7fc      	b.n	8006fe8 <main+0x2b8>
 8006fee:	46c0      	nop			; (mov r8, r8)
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	50000400 	.word	0x50000400
 8006ff8:	0000c004 	.word	0x0000c004
 8006ffc:	50000800 	.word	0x50000800
 8007000:	50001c00 	.word	0x50001c00
 8007004:	00003003 	.word	0x00003003
 8007008:	10110000 	.word	0x10110000
 800700c:	0000c020 	.word	0x0000c020
 8007010:	20000a44 	.word	0x20000a44
 8007014:	40012400 	.word	0x40012400
 8007018:	10000010 	.word	0x10000010
 800701c:	14000020 	.word	0x14000020
 8007020:	48040000 	.word	0x48040000
 8007024:	20000434 	.word	0x20000434
 8007028:	20000930 	.word	0x20000930
 800702c:	40005400 	.word	0x40005400
 8007030:	20000444 	.word	0x20000444
 8007034:	40004800 	.word	0x40004800
 8007038:	200002fc 	.word	0x200002fc
 800703c:	40013800 	.word	0x40013800
 8007040:	200003ac 	.word	0x200003ac
 8007044:	40004400 	.word	0x40004400
 8007048:	2000097c 	.word	0x2000097c
 800704c:	40004c00 	.word	0x40004c00
 8007050:	200006b8 	.word	0x200006b8
 8007054:	40005000 	.word	0x40005000
 8007058:	00000bb8 	.word	0x00000bb8
 800705c:	0800a509 	.word	0x0800a509

08007060 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	UartReady = SET;
 8007060:	2201      	movs	r2, #1
 8007062:	4b01      	ldr	r3, [pc, #4]	; (8007068 <HAL_UART_TxCpltCallback+0x8>)
 8007064:	701a      	strb	r2, [r3, #0]
}
 8007066:	4770      	bx	lr
 8007068:	200002ac 	.word	0x200002ac

0800706c <get_temp>:

float get_temp(uint32_t variable)   // function to read temp from the value
{
 800706c:	b510      	push	{r4, lr}
	return (((V25 - VSENSE * variable) / Avg_Slope) + 25);
 800706e:	f7fb ffcf 	bl	8003010 <__aeabi_ui2d>
 8007072:	4a0a      	ldr	r2, [pc, #40]	; (800709c <get_temp+0x30>)
 8007074:	4b0a      	ldr	r3, [pc, #40]	; (80070a0 <get_temp+0x34>)
 8007076:	f7fb f99f 	bl	80023b8 <__aeabi_dmul>
 800707a:	0002      	movs	r2, r0
 800707c:	000b      	movs	r3, r1
 800707e:	4809      	ldr	r0, [pc, #36]	; (80070a4 <get_temp+0x38>)
 8007080:	4909      	ldr	r1, [pc, #36]	; (80070a8 <get_temp+0x3c>)
 8007082:	f7fb fc19 	bl	80028b8 <__aeabi_dsub>
 8007086:	4a09      	ldr	r2, [pc, #36]	; (80070ac <get_temp+0x40>)
 8007088:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <get_temp+0x44>)
 800708a:	f7fa fd61 	bl	8001b50 <__aeabi_ddiv>
 800708e:	2200      	movs	r2, #0
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <get_temp+0x48>)
 8007092:	f7fa fa4d 	bl	8001530 <__aeabi_dadd>
 8007096:	f7fb fff3 	bl	8003080 <__aeabi_d2f>
}
 800709a:	bd10      	pop	{r4, pc}
 800709c:	66666666 	.word	0x66666666
 80070a0:	3f4a6666 	.word	0x3f4a6666
 80070a4:	ae147ae1 	.word	0xae147ae1
 80070a8:	3ff6e147 	.word	0x3ff6e147
 80070ac:	75f6fd22 	.word	0x75f6fd22
 80070b0:	3f719ce0 	.word	0x3f719ce0
 80070b4:	40390000 	.word	0x40390000

080070b8 <fn_get_stm32_temperature>:

void fn_get_stm32_temperature() {
 80070b8:	b510      	push	{r4, lr}
	HAL_ADC_Start_DMA(&hadc, value, 3);
 80070ba:	4c07      	ldr	r4, [pc, #28]	; (80070d8 <fn_get_stm32_temperature+0x20>)
 80070bc:	2203      	movs	r2, #3
 80070be:	0021      	movs	r1, r4
 80070c0:	4806      	ldr	r0, [pc, #24]	; (80070dc <fn_get_stm32_temperature+0x24>)
 80070c2:	f7fc faf9 	bl	80036b8 <HAL_ADC_Start_DMA>
	st_stm_adc_variables.temperature = get_temp(value[2]) / 10;
 80070c6:	68a0      	ldr	r0, [r4, #8]
 80070c8:	f7ff ffd0 	bl	800706c <get_temp>
 80070cc:	4904      	ldr	r1, [pc, #16]	; (80070e0 <fn_get_stm32_temperature+0x28>)
 80070ce:	f7f9 fccd 	bl	8000a6c <__aeabi_fdiv>
 80070d2:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <fn_get_stm32_temperature+0x2c>)
 80070d4:	6018      	str	r0, [r3, #0]
}
 80070d6:	bd10      	pop	{r4, pc}
 80070d8:	20000434 	.word	0x20000434
 80070dc:	20000a44 	.word	0x20000a44
 80070e0:	41200000 	.word	0x41200000
 80070e4:	200002a4 	.word	0x200002a4

080070e8 <fn_get_stm32_volts>:

void fn_get_stm32_volts() {
 80070e8:	b510      	push	{r4, lr}
	HAL_ADC_Start_DMA(&hadc, value, 3);
 80070ea:	4c07      	ldr	r4, [pc, #28]	; (8007108 <fn_get_stm32_volts+0x20>)
 80070ec:	2203      	movs	r2, #3
 80070ee:	0021      	movs	r1, r4
 80070f0:	4806      	ldr	r0, [pc, #24]	; (800710c <fn_get_stm32_volts+0x24>)
 80070f2:	f7fc fae1 	bl	80036b8 <HAL_ADC_Start_DMA>
	st_stm_adc_variables.battery = value[0];
 80070f6:	6820      	ldr	r0, [r4, #0]
 80070f8:	f7fa f9d4 	bl	80014a4 <__aeabi_ui2f>
	st_stm_adc_variables.battery /= 1000;
 80070fc:	4904      	ldr	r1, [pc, #16]	; (8007110 <fn_get_stm32_volts+0x28>)
 80070fe:	f7f9 fcb5 	bl	8000a6c <__aeabi_fdiv>
 8007102:	4b04      	ldr	r3, [pc, #16]	; (8007114 <fn_get_stm32_volts+0x2c>)
 8007104:	6058      	str	r0, [r3, #4]
}
 8007106:	bd10      	pop	{r4, pc}
 8007108:	20000434 	.word	0x20000434
 800710c:	20000a44 	.word	0x20000a44
 8007110:	447a0000 	.word	0x447a0000
 8007114:	200002a4 	.word	0x200002a4

08007118 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8007118:	4770      	bx	lr

0800711a <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800711a:	4770      	bx	lr

0800711c <insertionSort>:
	US_OFF
	return (distance);

}

void insertionSort(float vetor[], int tamanhoVetor) {
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int escolhido, j;

	for (int i = 1; i < tamanhoVetor; i++) {
 800711e:	2701      	movs	r7, #1
void insertionSort(float vetor[], int tamanhoVetor) {
 8007120:	b087      	sub	sp, #28
 8007122:	9003      	str	r0, [sp, #12]
 8007124:	9104      	str	r1, [sp, #16]
 8007126:	1d05      	adds	r5, r0, #4
	for (int i = 1; i < tamanhoVetor; i++) {
 8007128:	9b04      	ldr	r3, [sp, #16]
 800712a:	429f      	cmp	r7, r3
 800712c:	db01      	blt.n	8007132 <insertionSort+0x16>
			j--;
		}

		vetor[j + 1] = escolhido;
	}
}
 800712e:	b007      	add	sp, #28
 8007130:	bdf0      	pop	{r4, r5, r6, r7, pc}
		escolhido = vetor[i];
 8007132:	6828      	ldr	r0, [r5, #0]
 8007134:	f7fa f946 	bl	80013c4 <__aeabi_f2iz>
		while ((j >= 0) && (vetor[j] > escolhido)) {
 8007138:	002e      	movs	r6, r5
		escolhido = vetor[i];
 800713a:	9001      	str	r0, [sp, #4]
 800713c:	1e7c      	subs	r4, r7, #1
		while ((j >= 0) && (vetor[j] > escolhido)) {
 800713e:	1c63      	adds	r3, r4, #1
 8007140:	d109      	bne.n	8007156 <insertionSort+0x3a>
		vetor[j + 1] = escolhido;
 8007142:	9801      	ldr	r0, [sp, #4]
 8007144:	f7fa f95e 	bl	8001404 <__aeabi_i2f>
 8007148:	3401      	adds	r4, #1
 800714a:	9b03      	ldr	r3, [sp, #12]
 800714c:	00a4      	lsls	r4, r4, #2
 800714e:	50e0      	str	r0, [r4, r3]
	for (int i = 1; i < tamanhoVetor; i++) {
 8007150:	3701      	adds	r7, #1
 8007152:	3504      	adds	r5, #4
 8007154:	e7e8      	b.n	8007128 <insertionSort+0xc>
		while ((j >= 0) && (vetor[j] > escolhido)) {
 8007156:	1f33      	subs	r3, r6, #4
 8007158:	9305      	str	r3, [sp, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	9801      	ldr	r0, [sp, #4]
 800715e:	9302      	str	r3, [sp, #8]
 8007160:	f7fa f950 	bl	8001404 <__aeabi_i2f>
 8007164:	1c01      	adds	r1, r0, #0
 8007166:	9802      	ldr	r0, [sp, #8]
 8007168:	f7f9 f9c4 	bl	80004f4 <__aeabi_fcmpgt>
 800716c:	2800      	cmp	r0, #0
 800716e:	d0e8      	beq.n	8007142 <insertionSort+0x26>
			vetor[j + 1] = vetor[j];
 8007170:	9b02      	ldr	r3, [sp, #8]
			j--;
 8007172:	3c01      	subs	r4, #1
			vetor[j + 1] = vetor[j];
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	9e05      	ldr	r6, [sp, #20]
 8007178:	e7e1      	b.n	800713e <insertionSort+0x22>
	...

0800717c <fn_get_sen031x>:
	US_ON
 800717c:	2180      	movs	r1, #128	; 0x80
 800717e:	20a0      	movs	r0, #160	; 0xa0
int fn_get_sen031x() {
 8007180:	b5f0      	push	{r4, r5, r6, r7, lr}
	US_ON
 8007182:	2201      	movs	r2, #1
int fn_get_sen031x() {
 8007184:	b0e7      	sub	sp, #412	; 0x19c
	US_ON
 8007186:	0089      	lsls	r1, r1, #2
 8007188:	05c0      	lsls	r0, r0, #23
 800718a:	f7fc ffbf 	bl	800410c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800718e:	20fa      	movs	r0, #250	; 0xfa
	uint8_t Rx_data[5] = { };
 8007190:	2400      	movs	r4, #0
	HAL_Delay(1000);
 8007192:	0080      	lsls	r0, r0, #2
 8007194:	f7fc f862 	bl	800325c <HAL_Delay>
	for (int i = 0; i < 100; i++) {
 8007198:	26c8      	movs	r6, #200	; 0xc8
	uint8_t Rx_data[5] = { };
 800719a:	2205      	movs	r2, #5
 800719c:	2100      	movs	r1, #0
 800719e:	4668      	mov	r0, sp
 80071a0:	f000 fd2f 	bl	8007c02 <memset>
	int distance = 0;
 80071a4:	0025      	movs	r5, r4
	for (int i = 0; i < 100; i++) {
 80071a6:	0076      	lsls	r6, r6, #1
		HAL_UART_Receive_IT(&huart2,Rx_data, 5);
 80071a8:	2205      	movs	r2, #5
 80071aa:	4669      	mov	r1, sp
 80071ac:	4821      	ldr	r0, [pc, #132]	; (8007234 <fn_get_sen031x+0xb8>)
 80071ae:	f7fe faf1 	bl	8005794 <HAL_UART_Receive_IT>
		HAL_Delay(50);
 80071b2:	2032      	movs	r0, #50	; 0x32
 80071b4:	f7fc f852 	bl	800325c <HAL_Delay>
 80071b8:	2301      	movs	r3, #1
 80071ba:	001f      	movs	r7, r3
 80071bc:	446f      	add	r7, sp
			if (Rx_data[var] == 0xff) {
 80071be:	1e7a      	subs	r2, r7, #1
 80071c0:	7812      	ldrb	r2, [r2, #0]
 80071c2:	2aff      	cmp	r2, #255	; 0xff
 80071c4:	d10a      	bne.n	80071dc <fn_get_sen031x+0x60>
				data_h = Rx_data[var + 1];
 80071c6:	466a      	mov	r2, sp
 80071c8:	5cd1      	ldrb	r1, [r2, r3]
				data_l = Rx_data[var + 2];
 80071ca:	7878      	ldrb	r0, [r7, #1]
				soma = (header + data_h + data_l) & 0xFF;
 80071cc:	1e4a      	subs	r2, r1, #1
 80071ce:	1882      	adds	r2, r0, r2
				if (soma == sum) {
 80071d0:	78bf      	ldrb	r7, [r7, #2]
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	4297      	cmp	r7, r2
 80071d6:	d101      	bne.n	80071dc <fn_get_sen031x+0x60>
					distance = (data_h << 8) + data_l;
 80071d8:	020d      	lsls	r5, r1, #8
 80071da:	182d      	adds	r5, r5, r0
 80071dc:	3301      	adds	r3, #1
		for (int var = 0; var < 5; var++) {
 80071de:	2b06      	cmp	r3, #6
 80071e0:	d1eb      	bne.n	80071ba <fn_get_sen031x+0x3e>
		array_us[i] = distance / 10;
 80071e2:	210a      	movs	r1, #10
 80071e4:	0028      	movs	r0, r5
 80071e6:	f7f9 f835 	bl	8000254 <__divsi3>
 80071ea:	f7fa f90b 	bl	8001404 <__aeabi_i2f>
 80071ee:	af02      	add	r7, sp, #8
 80071f0:	51e0      	str	r0, [r4, r7]
 80071f2:	3404      	adds	r4, #4
	for (int i = 0; i < 100; i++) {
 80071f4:	42b4      	cmp	r4, r6
 80071f6:	d1d7      	bne.n	80071a8 <fn_get_sen031x+0x2c>
	insertionSort(array_us, 100);
 80071f8:	2164      	movs	r1, #100	; 0x64
 80071fa:	0038      	movs	r0, r7
 80071fc:	f7ff ff8e 	bl	800711c <insertionSort>
	for (int i = 10; i < 90; i++) {
 8007200:	240a      	movs	r4, #10
	float array_us[100], us_buffer = 0;
 8007202:	2500      	movs	r5, #0
		us_buffer += array_us[i];
 8007204:	00a3      	lsls	r3, r4, #2
 8007206:	1c28      	adds	r0, r5, #0
 8007208:	58f9      	ldr	r1, [r7, r3]
 800720a:	f7f9 fa9d 	bl	8000748 <__aeabi_fadd>
	for (int i = 10; i < 90; i++) {
 800720e:	3401      	adds	r4, #1
		us_buffer += array_us[i];
 8007210:	1c05      	adds	r5, r0, #0
	for (int i = 10; i < 90; i++) {
 8007212:	2c5a      	cmp	r4, #90	; 0x5a
 8007214:	d1f6      	bne.n	8007204 <fn_get_sen031x+0x88>
	US_OFF
 8007216:	2180      	movs	r1, #128	; 0x80
 8007218:	20a0      	movs	r0, #160	; 0xa0
 800721a:	2200      	movs	r2, #0
 800721c:	0089      	lsls	r1, r1, #2
 800721e:	05c0      	lsls	r0, r0, #23
 8007220:	f7fc ff74 	bl	800410c <HAL_GPIO_WritePin>
	distance = us_buffer / 80;
 8007224:	4904      	ldr	r1, [pc, #16]	; (8007238 <fn_get_sen031x+0xbc>)
 8007226:	1c28      	adds	r0, r5, #0
 8007228:	f7f9 fc20 	bl	8000a6c <__aeabi_fdiv>
 800722c:	f7fa f8ca 	bl	80013c4 <__aeabi_f2iz>
}
 8007230:	b067      	add	sp, #412	; 0x19c
 8007232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007234:	200003ac 	.word	0x200003ac
 8007238:	42a00000 	.word	0x42a00000

0800723c <fn_init_sensors>:
 *      Author: oscar
 */

#include "sensors.h"

void fn_init_sensors() {
 800723c:	b510      	push	{r4, lr}
	fn_init_lsm303ah();
 800723e:	f7ff fc97 	bl	8006b70 <fn_init_lsm303ah>
	fn_info_sigfox();
 8007242:	f000 fa07 	bl	8007654 <fn_info_sigfox>
	fn_init_gps();
 8007246:	f7ff f8a3 	bl	8006390 <fn_init_gps>
	st_data_sensor_e.angle = 0;
 800724a:	2200      	movs	r2, #0
	st_data_sensor_e.battery = 0;
	st_data_sensor_e.distance = 0;
	st_data_sensor_e.latitude = 0;
	st_data_sensor_e.longitude = 0;
	st_data_sensor_e.referenceVol = 200;
 800724c:	21c8      	movs	r1, #200	; 0xc8
	st_data_sensor_e.angle = 0;
 800724e:	4b04      	ldr	r3, [pc, #16]	; (8007260 <fn_init_sensors+0x24>)
 8007250:	601a      	str	r2, [r3, #0]
	st_data_sensor_e.battery = 0;
 8007252:	605a      	str	r2, [r3, #4]
	st_data_sensor_e.distance = 0;
 8007254:	609a      	str	r2, [r3, #8]
	st_data_sensor_e.latitude = 0;
 8007256:	611a      	str	r2, [r3, #16]
	st_data_sensor_e.longitude = 0;
 8007258:	615a      	str	r2, [r3, #20]
	st_data_sensor_e.referenceVol = 200;
 800725a:	6199      	str	r1, [r3, #24]
	st_data_sensor_e.temperature = 0;
 800725c:	60da      	str	r2, [r3, #12]
}
 800725e:	bd10      	pop	{r4, pc}
 8007260:	20000250 	.word	0x20000250

08007264 <fn_get_angle_value>:
	 fn_get_temperature_value();
	 fn_get_battery_value();

}

void fn_get_angle_value() {
 8007264:	b510      	push	{r4, lr}
	fn_get_lsm303ah();
 8007266:	f7ff fadb 	bl	8006820 <fn_get_lsm303ah>
	if (st_accelerometer.pitch < 0)
 800726a:	4a06      	ldr	r2, [pc, #24]	; (8007284 <fn_get_angle_value+0x20>)
 800726c:	2108      	movs	r1, #8
 800726e:	5e53      	ldrsh	r3, [r2, r1]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da01      	bge.n	8007278 <fn_get_angle_value+0x14>
		st_accelerometer.pitch *= (-1);
 8007274:	425b      	negs	r3, r3
 8007276:	8113      	strh	r3, [r2, #8]
	st_data_sensor_e.angle = st_accelerometer.pitch;
 8007278:	2308      	movs	r3, #8
 800727a:	5ed2      	ldrsh	r2, [r2, r3]
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <fn_get_angle_value+0x24>)
 800727e:	601a      	str	r2, [r3, #0]
}
 8007280:	bd10      	pop	{r4, pc}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	2000037c 	.word	0x2000037c
 8007288:	20000250 	.word	0x20000250

0800728c <fn_get_volume_value>:

void fn_get_volume_value() {
 800728c:	b510      	push	{r4, lr}
	st_data_sensor_e.distance = fn_get_sen031x();
 800728e:	f7ff ff75 	bl	800717c <fn_get_sen031x>
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <fn_get_volume_value+0x1c>)

	if (st_data_sensor_e.distance < st_data_sensor_e.referenceVol) {
 8007294:	699a      	ldr	r2, [r3, #24]
	st_data_sensor_e.distance = fn_get_sen031x();
 8007296:	6098      	str	r0, [r3, #8]
	if (st_data_sensor_e.distance < st_data_sensor_e.referenceVol) {
 8007298:	4290      	cmp	r0, r2
 800729a:	d202      	bcs.n	80072a2 <fn_get_volume_value+0x16>
		st_data_sensor_e.volume = 10;
 800729c:	220a      	movs	r2, #10
	} else if (st_data_sensor_e.distance >= st_data_sensor_e.referenceVol) {
		st_data_sensor_e.volume = 0;
 800729e:	61da      	str	r2, [r3, #28]
		vol_perc /= 10;
		vol_perc = round(vol_perc);
		int test = (uint32_t) (vol_perc);
		st_data_sensor_e.volume = test;
	}
}
 80072a0:	bd10      	pop	{r4, pc}
		st_data_sensor_e.volume = 0;
 80072a2:	2200      	movs	r2, #0
 80072a4:	e7fb      	b.n	800729e <fn_get_volume_value+0x12>
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	20000250 	.word	0x20000250

080072ac <fn_get_latitude_value>:
	fn_get_latitude_value();

}

void fn_get_latitude_value() {
	st_data_sensor_e.latitude = st_gps_data_current.latitude;
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <fn_get_latitude_value+0xc>)
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	4b02      	ldr	r3, [pc, #8]	; (80072bc <fn_get_latitude_value+0x10>)
 80072b2:	611a      	str	r2, [r3, #16]
}
 80072b4:	4770      	bx	lr
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	200002b0 	.word	0x200002b0
 80072bc:	20000250 	.word	0x20000250

080072c0 <fn_get_longitude_value>:

void fn_get_longitude_value() {
	st_data_sensor_e.longitude = st_gps_data_previous.longitude;
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <fn_get_longitude_value+0xc>)
 80072c2:	695a      	ldr	r2, [r3, #20]
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <fn_get_longitude_value+0x10>)
 80072c6:	615a      	str	r2, [r3, #20]
}
 80072c8:	4770      	bx	lr
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	200002d8 	.word	0x200002d8
 80072d0:	20000250 	.word	0x20000250

080072d4 <fn_get_lat_lon_values>:
{
 80072d4:	b510      	push	{r4, lr}
	fn_get_gps();
 80072d6:	f7ff f871 	bl	80063bc <fn_get_gps>
	fn_get_longitude_value();
 80072da:	f7ff fff1 	bl	80072c0 <fn_get_longitude_value>
	fn_get_latitude_value();
 80072de:	f7ff ffe5 	bl	80072ac <fn_get_latitude_value>
}
 80072e2:	bd10      	pop	{r4, pc}

080072e4 <fn_get_temperature_value>:

void fn_get_temperature_value() {
	SIGFOX_ON
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	20a0      	movs	r0, #160	; 0xa0
void fn_get_temperature_value() {
 80072e8:	b570      	push	{r4, r5, r6, lr}
	SIGFOX_ON
 80072ea:	2201      	movs	r2, #1
 80072ec:	0209      	lsls	r1, r1, #8
 80072ee:	05c0      	lsls	r0, r0, #23
 80072f0:	f7fc ff0c 	bl	800410c <HAL_GPIO_WritePin>
	fn_init_sigfox();
 80072f4:	f000 f886 	bl	8007404 <fn_init_sigfox>
	fn_get_stm32_temperature();
 80072f8:	f7ff fede 	bl	80070b8 <fn_get_stm32_temperature>
	fn_get_temperature_sigfox();
 80072fc:	f000 f97e 	bl	80075fc <fn_get_temperature_sigfox>
	SIGFOX_OFF
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	20a0      	movs	r0, #160	; 0xa0
 8007304:	2200      	movs	r2, #0
 8007306:	0209      	lsls	r1, r1, #8
 8007308:	05c0      	lsls	r0, r0, #23
 800730a:	f7fc feff 	bl	800410c <HAL_GPIO_WritePin>
	if (st_stm_adc_variables.temperature != 0 && int_temp_sigfox != 0) {
 800730e:	4b11      	ldr	r3, [pc, #68]	; (8007354 <fn_get_temperature_value+0x70>)
 8007310:	2100      	movs	r1, #0
 8007312:	681c      	ldr	r4, [r3, #0]
 8007314:	1c20      	adds	r0, r4, #0
 8007316:	f7f9 f8d3 	bl	80004c0 <__aeabi_fcmpeq>
 800731a:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <fn_get_temperature_value+0x74>)
 800731c:	2800      	cmp	r0, #0
 800731e:	d110      	bne.n	8007342 <fn_get_temperature_value+0x5e>
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	4d0e      	ldr	r5, [pc, #56]	; (800735c <fn_get_temperature_value+0x78>)
 8007324:	2800      	cmp	r0, #0
 8007326:	d012      	beq.n	800734e <fn_get_temperature_value+0x6a>
		st_data_sensor_e.temperature = (st_stm_adc_variables.temperature
				+ int_temp_sigfox)/2;
 8007328:	f7fa f86c 	bl	8001404 <__aeabi_i2f>
 800732c:	1c21      	adds	r1, r4, #0
 800732e:	f7f9 fa0b 	bl	8000748 <__aeabi_fadd>
 8007332:	21fc      	movs	r1, #252	; 0xfc
 8007334:	0589      	lsls	r1, r1, #22
 8007336:	f7f9 fd89 	bl	8000e4c <__aeabi_fmul>
	}else 	if (st_stm_adc_variables.temperature == 0 && int_temp_sigfox != 0) {
		st_data_sensor_e.temperature =  int_temp_sigfox;
	}else 	if (st_stm_adc_variables.temperature != 0 && int_temp_sigfox == 0) {
		st_data_sensor_e.temperature =  st_stm_adc_variables.temperature;
 800733a:	f7f9 f90f 	bl	800055c <__aeabi_f2uiz>
 800733e:	60e8      	str	r0, [r5, #12]
	}
}
 8007340:	e004      	b.n	800734c <fn_get_temperature_value+0x68>
	}else 	if (st_stm_adc_variables.temperature == 0 && int_temp_sigfox != 0) {
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <fn_get_temperature_value+0x68>
		st_data_sensor_e.temperature =  int_temp_sigfox;
 8007348:	4a04      	ldr	r2, [pc, #16]	; (800735c <fn_get_temperature_value+0x78>)
 800734a:	60d3      	str	r3, [r2, #12]
}
 800734c:	bd70      	pop	{r4, r5, r6, pc}
		st_data_sensor_e.temperature =  st_stm_adc_variables.temperature;
 800734e:	1c20      	adds	r0, r4, #0
 8007350:	e7f3      	b.n	800733a <fn_get_temperature_value+0x56>
 8007352:	46c0      	nop			; (mov r8, r8)
 8007354:	200002a4 	.word	0x200002a4
 8007358:	200002d4 	.word	0x200002d4
 800735c:	20000250 	.word	0x20000250

08007360 <fn_get_battery_value>:

void fn_get_battery_value() {
	SIGFOX_ON
 8007360:	2180      	movs	r1, #128	; 0x80
 8007362:	20a0      	movs	r0, #160	; 0xa0
void fn_get_battery_value() {
 8007364:	b570      	push	{r4, r5, r6, lr}
	SIGFOX_ON
 8007366:	2201      	movs	r2, #1
 8007368:	0209      	lsls	r1, r1, #8
 800736a:	05c0      	lsls	r0, r0, #23
 800736c:	f7fc fece 	bl	800410c <HAL_GPIO_WritePin>
	fn_init_sigfox();
 8007370:	f000 f848 	bl	8007404 <fn_init_sigfox>
	fn_get_stm32_volts();
 8007374:	f7ff feb8 	bl	80070e8 <fn_get_stm32_volts>
	fn_get_volt_sigfox();
 8007378:	f000 f90e 	bl	8007598 <fn_get_volt_sigfox>
	SIGFOX_OFF
 800737c:	2180      	movs	r1, #128	; 0x80
 800737e:	20a0      	movs	r0, #160	; 0xa0
 8007380:	2200      	movs	r2, #0
 8007382:	0209      	lsls	r1, r1, #8
 8007384:	05c0      	lsls	r0, r0, #23
 8007386:	f7fc fec1 	bl	800410c <HAL_GPIO_WritePin>

	if(st_stm_adc_variables.battery==0)
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <fn_get_battery_value+0x54>)
 800738c:	2100      	movs	r1, #0
 800738e:	685d      	ldr	r5, [r3, #4]
 8007390:	1c28      	adds	r0, r5, #0
 8007392:	f7f9 f895 	bl	80004c0 <__aeabi_fcmpeq>
 8007396:	4c08      	ldr	r4, [pc, #32]	; (80073b8 <fn_get_battery_value+0x58>)
 8007398:	2800      	cmp	r0, #0
 800739a:	d003      	beq.n	80073a4 <fn_get_battery_value+0x44>
	{
		st_data_sensor_e.battery = int_volt_sigfox;
 800739c:	4b07      	ldr	r3, [pc, #28]	; (80073bc <fn_get_battery_value+0x5c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6063      	str	r3, [r4, #4]
	}else{
		st_data_sensor_e.battery = (st_stm_adc_variables.battery*10);
	}

}
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
		st_data_sensor_e.battery = (st_stm_adc_variables.battery*10);
 80073a4:	4906      	ldr	r1, [pc, #24]	; (80073c0 <fn_get_battery_value+0x60>)
 80073a6:	1c28      	adds	r0, r5, #0
 80073a8:	f7f9 fd50 	bl	8000e4c <__aeabi_fmul>
 80073ac:	f7f9 f8d6 	bl	800055c <__aeabi_f2uiz>
 80073b0:	6060      	str	r0, [r4, #4]
}
 80073b2:	e7f6      	b.n	80073a2 <fn_get_battery_value+0x42>
 80073b4:	200002a4 	.word	0x200002a4
 80073b8:	20000250 	.word	0x20000250
 80073bc:	20000390 	.word	0x20000390
 80073c0:	41200000 	.word	0x41200000

080073c4 <fn_get_sensors_values>:
	st_data_sensor_previwes_e.angle = st_data_sensor_e.angle;
 80073c4:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <fn_get_sensors_values+0x38>)
 80073c6:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <fn_get_sensors_values+0x3c>)
 80073c8:	6811      	ldr	r1, [r2, #0]
void fn_get_sensors_values() {
 80073ca:	b510      	push	{r4, lr}
	st_data_sensor_previwes_e.angle = st_data_sensor_e.angle;
 80073cc:	6019      	str	r1, [r3, #0]
	st_data_sensor_previwes_e.battery = st_data_sensor_e.battery;
 80073ce:	6851      	ldr	r1, [r2, #4]
 80073d0:	6059      	str	r1, [r3, #4]
	st_data_sensor_previwes_e.distance = st_data_sensor_e.distance;
 80073d2:	6891      	ldr	r1, [r2, #8]
 80073d4:	6099      	str	r1, [r3, #8]
	st_data_sensor_previwes_e.latitude = st_data_sensor_e.latitude;
 80073d6:	6911      	ldr	r1, [r2, #16]
 80073d8:	6119      	str	r1, [r3, #16]
	st_data_sensor_previwes_e.longitude = st_data_sensor_e.longitude;
 80073da:	6951      	ldr	r1, [r2, #20]
 80073dc:	6159      	str	r1, [r3, #20]
	st_data_sensor_previwes_e.referenceVol = st_data_sensor_e.referenceVol;
 80073de:	6991      	ldr	r1, [r2, #24]
	st_data_sensor_previwes_e.temperature = st_data_sensor_e.temperature;
 80073e0:	68d2      	ldr	r2, [r2, #12]
	st_data_sensor_previwes_e.referenceVol = st_data_sensor_e.referenceVol;
 80073e2:	6199      	str	r1, [r3, #24]
	st_data_sensor_previwes_e.temperature = st_data_sensor_e.temperature;
 80073e4:	60da      	str	r2, [r3, #12]
	 fn_get_angle_value();
 80073e6:	f7ff ff3d 	bl	8007264 <fn_get_angle_value>
	 fn_get_volume_value();
 80073ea:	f7ff ff4f 	bl	800728c <fn_get_volume_value>
	 fn_get_lat_lon_values();
 80073ee:	f7ff ff71 	bl	80072d4 <fn_get_lat_lon_values>
	 fn_get_temperature_value();
 80073f2:	f7ff ff77 	bl	80072e4 <fn_get_temperature_value>
	 fn_get_battery_value();
 80073f6:	f7ff ffb3 	bl	8007360 <fn_get_battery_value>
}
 80073fa:	bd10      	pop	{r4, pc}
 80073fc:	20000250 	.word	0x20000250
 8007400:	20000230 	.word	0x20000230

08007404 <fn_init_sigfox>:
/*
 fn_init_sigfox
 funcao de configuracoes para a rede sigfox na regiao 2 e 4 alem da possibilidade de utilizar na dongle com downlink
 parta tal deve-se definir a DONGLE_KEY
 */
void fn_init_sigfox() {
 8007404:	b513      	push	{r0, r1, r4, lr}
	char ok[4];
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$P=0\r\n", 8, 100);
 8007406:	4c26      	ldr	r4, [pc, #152]	; (80074a0 <fn_init_sigfox+0x9c>)
 8007408:	2364      	movs	r3, #100	; 0x64
 800740a:	2208      	movs	r2, #8
 800740c:	4925      	ldr	r1, [pc, #148]	; (80074a4 <fn_init_sigfox+0xa0>)
 800740e:	0020      	movs	r0, r4
 8007410:	f7fe fddc 	bl	8005fcc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8007414:	a901      	add	r1, sp, #4
 8007416:	2364      	movs	r3, #100	; 0x64
 8007418:	2204      	movs	r2, #4
 800741a:	0020      	movs	r0, r4
 800741c:	f7fe fe40 	bl	80060a0 <HAL_UART_Receive>
	HAL_Delay(10);
 8007420:	200a      	movs	r0, #10
 8007422:	f7fb ff1b 	bl	800325c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$DR=905200000\r\n", 17, 100);
 8007426:	2364      	movs	r3, #100	; 0x64
 8007428:	2211      	movs	r2, #17
 800742a:	491f      	ldr	r1, [pc, #124]	; (80074a8 <fn_init_sigfox+0xa4>)
 800742c:	0020      	movs	r0, r4
 800742e:	f7fe fdcd 	bl	8005fcc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8007432:	a901      	add	r1, sp, #4
 8007434:	2364      	movs	r3, #100	; 0x64
 8007436:	2204      	movs	r2, #4
 8007438:	0020      	movs	r0, r4
 800743a:	f7fe fe31 	bl	80060a0 <HAL_UART_Receive>
	HAL_Delay(10);
 800743e:	200a      	movs	r0, #10
 8007440:	f7fb ff0c 	bl	800325c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$IF=902200000\r\n", 17, 100);
 8007444:	2364      	movs	r3, #100	; 0x64
 8007446:	2211      	movs	r2, #17
 8007448:	4918      	ldr	r1, [pc, #96]	; (80074ac <fn_init_sigfox+0xa8>)
 800744a:	0020      	movs	r0, r4
 800744c:	f7fe fdbe 	bl	8005fcc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 8007450:	a901      	add	r1, sp, #4
 8007452:	2364      	movs	r3, #100	; 0x64
 8007454:	2204      	movs	r2, #4
 8007456:	0020      	movs	r0, r4
 8007458:	f7fe fe22 	bl	80060a0 <HAL_UART_Receive>
	HAL_Delay(10);
 800745c:	200a      	movs	r0, #10
 800745e:	f7fb fefd 	bl	800325c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$WR\r\n", 7, 100);
 8007462:	2364      	movs	r3, #100	; 0x64
 8007464:	2207      	movs	r2, #7
 8007466:	4912      	ldr	r1, [pc, #72]	; (80074b0 <fn_init_sigfox+0xac>)
 8007468:	0020      	movs	r0, r4
 800746a:	f7fe fdaf 	bl	8005fcc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 800746e:	a901      	add	r1, sp, #4
 8007470:	2364      	movs	r3, #100	; 0x64
 8007472:	2204      	movs	r2, #4
 8007474:	0020      	movs	r0, r4
 8007476:	f7fe fe13 	bl	80060a0 <HAL_UART_Receive>
	HAL_Delay(10);
 800747a:	200a      	movs	r0, #10
 800747c:	f7fb feee 	bl	800325c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT$RC\r\n", 7, 100);
 8007480:	2364      	movs	r3, #100	; 0x64
 8007482:	2207      	movs	r2, #7
 8007484:	490b      	ldr	r1, [pc, #44]	; (80074b4 <fn_init_sigfox+0xb0>)
 8007486:	0020      	movs	r0, r4
 8007488:	f7fe fda0 	bl	8005fcc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) ok, 4, 100);
 800748c:	2364      	movs	r3, #100	; 0x64
 800748e:	2204      	movs	r2, #4
 8007490:	a901      	add	r1, sp, #4
 8007492:	0020      	movs	r0, r4
 8007494:	f7fe fe04 	bl	80060a0 <HAL_UART_Receive>
	HAL_Delay(10);
 8007498:	200a      	movs	r0, #10
 800749a:	f7fb fedf 	bl	800325c <HAL_Delay>
	HAL_UART_Transmit_IT(&huart1,(uint8_t*)"ATS410=1\r\n",11);//ATS410=1 private key ; ATS410=0 public key
	//HAL_UART_Receive_IT(&huart1,(uint8_t*)ok,4,10);
	HAL_Delay(500);
#endif

}
 800749e:	bd13      	pop	{r0, r1, r4, pc}
 80074a0:	200002fc 	.word	0x200002fc
 80074a4:	0800a55e 	.word	0x0800a55e
 80074a8:	0800a567 	.word	0x0800a567
 80074ac:	0800a579 	.word	0x0800a579
 80074b0:	0800a58b 	.word	0x0800a58b
 80074b4:	0800a593 	.word	0x0800a593

080074b8 <fn_get_id_sigfox>:

//pegar id
void fn_get_id_sigfox() {
 80074b8:	b530      	push	{r4, r5, lr}
 80074ba:	b085      	sub	sp, #20

	char command[9] = "AT$I=10\r\n";
 80074bc:	2209      	movs	r2, #9
 80074be:	4910      	ldr	r1, [pc, #64]	; (8007500 <fn_get_id_sigfox+0x48>)
 80074c0:	a801      	add	r0, sp, #4
 80074c2:	f000 fb95 	bl	8007bf0 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 9);
 80074c6:	4d0f      	ldr	r5, [pc, #60]	; (8007504 <fn_get_id_sigfox+0x4c>)
 80074c8:	2209      	movs	r2, #9
 80074ca:	a901      	add	r1, sp, #4
 80074cc:	0028      	movs	r0, r5
 80074ce:	f7fe f923 	bl	8005718 <HAL_UART_Transmit_IT>
	while (UartReady != SET) {
 80074d2:	4c0d      	ldr	r4, [pc, #52]	; (8007508 <fn_get_id_sigfox+0x50>)
 80074d4:	7823      	ldrb	r3, [r4, #0]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d1fc      	bne.n	80074d4 <fn_get_id_sigfox+0x1c>
	}
	//Reset transmission flag
	UartReady = RESET;
 80074da:	2300      	movs	r3, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.id, 10);
 80074dc:	220a      	movs	r2, #10
 80074de:	490b      	ldr	r1, [pc, #44]	; (800750c <fn_get_id_sigfox+0x54>)
 80074e0:	0028      	movs	r0, r5
	UartReady = RESET;
 80074e2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.id, 10);
 80074e4:	f7fe f956 	bl	8005794 <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 80074e8:	7823      	ldrb	r3, [r4, #0]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d103      	bne.n	80074f6 <fn_get_id_sigfox+0x3e>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 80074ee:	2300      	movs	r3, #0
 80074f0:	7023      	strb	r3, [r4, #0]

}
 80074f2:	b005      	add	sp, #20
 80074f4:	bd30      	pop	{r4, r5, pc}
		blink(2);
 80074f6:	2002      	movs	r0, #2
 80074f8:	f7ff fbda 	bl	8006cb0 <blink>
 80074fc:	e7f4      	b.n	80074e8 <fn_get_id_sigfox+0x30>
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	0800a188 	.word	0x0800a188
 8007504:	200002fc 	.word	0x200002fc
 8007508:	200002ac 	.word	0x200002ac
 800750c:	20000274 	.word	0x20000274

08007510 <fn_get_pac_sigfox>:

//pegar pac
void fn_get_pac_sigfox() {
 8007510:	b530      	push	{r4, r5, lr}

	char command[9] = "AT$I=11\r\n";
 8007512:	4911      	ldr	r1, [pc, #68]	; (8007558 <fn_get_pac_sigfox+0x48>)
void fn_get_pac_sigfox() {
 8007514:	b085      	sub	sp, #20
	char command[9] = "AT$I=11\r\n";
 8007516:	2209      	movs	r2, #9
 8007518:	310a      	adds	r1, #10
 800751a:	a801      	add	r0, sp, #4
 800751c:	f000 fb68 	bl	8007bf0 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 9);
 8007520:	4d0e      	ldr	r5, [pc, #56]	; (800755c <fn_get_pac_sigfox+0x4c>)
 8007522:	2209      	movs	r2, #9
 8007524:	a901      	add	r1, sp, #4
 8007526:	0028      	movs	r0, r5
 8007528:	f7fe f8f6 	bl	8005718 <HAL_UART_Transmit_IT>
	while (UartReady != SET) {
 800752c:	4c0c      	ldr	r4, [pc, #48]	; (8007560 <fn_get_pac_sigfox+0x50>)
 800752e:	7823      	ldrb	r3, [r4, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d1fc      	bne.n	800752e <fn_get_pac_sigfox+0x1e>
	}
	//Reset transmission flag
	UartReady = RESET;
 8007534:	2300      	movs	r3, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.pac, 18);
 8007536:	2212      	movs	r2, #18
 8007538:	490a      	ldr	r1, [pc, #40]	; (8007564 <fn_get_pac_sigfox+0x54>)
 800753a:	0028      	movs	r0, r5
	UartReady = RESET;
 800753c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.pac, 18);
 800753e:	f7fe f929 	bl	8005794 <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 8007542:	7823      	ldrb	r3, [r4, #0]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d103      	bne.n	8007550 <fn_get_pac_sigfox+0x40>
		blink(2);
	}
	//Reset transmission flag8
	UartReady = RESET;
 8007548:	2300      	movs	r3, #0
 800754a:	7023      	strb	r3, [r4, #0]
}
 800754c:	b005      	add	sp, #20
 800754e:	bd30      	pop	{r4, r5, pc}
		blink(2);
 8007550:	2002      	movs	r0, #2
 8007552:	f7ff fbad 	bl	8006cb0 <blink>
 8007556:	e7f4      	b.n	8007542 <fn_get_pac_sigfox+0x32>
 8007558:	0800a188 	.word	0x0800a188
 800755c:	200002fc 	.word	0x200002fc
 8007560:	200002ac 	.word	0x200002ac
 8007564:	2000027e 	.word	0x2000027e

08007568 <fn_at_sigfox>:

//dumy command
void fn_at_sigfox() {
 8007568:	b513      	push	{r0, r1, r4, lr}

	char command[4] = "AT\r\n";
 800756a:	4b08      	ldr	r3, [pc, #32]	; (800758c <fn_at_sigfox+0x24>)
	//int at = 0;
	HAL_UART_Transmit(&huart1, (uint8_t*) command, 4, 100);
 800756c:	4c08      	ldr	r4, [pc, #32]	; (8007590 <fn_at_sigfox+0x28>)
	char command[4] = "AT\r\n";
 800756e:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) command, 4, 100);
 8007570:	a901      	add	r1, sp, #4
 8007572:	2364      	movs	r3, #100	; 0x64
 8007574:	2204      	movs	r2, #4
 8007576:	0020      	movs	r0, r4
 8007578:	f7fe fd28 	bl	8005fcc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*) st_sigfox_parameters.at, 4, 100);
 800757c:	2364      	movs	r3, #100	; 0x64
 800757e:	2204      	movs	r2, #4
 8007580:	4904      	ldr	r1, [pc, #16]	; (8007594 <fn_at_sigfox+0x2c>)
 8007582:	0020      	movs	r0, r4
 8007584:	f7fe fd8c 	bl	80060a0 <HAL_UART_Receive>
	 && st_sigfox_parameters.at[1] == 85) {
	 at = 1;
	 }
	 return at;*/

}
 8007588:	bd13      	pop	{r0, r1, r4, pc}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	0a0d5441 	.word	0x0a0d5441
 8007590:	200002fc 	.word	0x200002fc
 8007594:	2000029d 	.word	0x2000029d

08007598 <fn_get_volt_sigfox>:

//pegar a tensao no modulo sigfox
void fn_get_volt_sigfox() {
 8007598:	b537      	push	{r0, r1, r2, r4, r5, lr}

	char command[7] = "AT$V?\r\n";
 800759a:	4913      	ldr	r1, [pc, #76]	; (80075e8 <fn_get_volt_sigfox+0x50>)
 800759c:	2207      	movs	r2, #7
 800759e:	3114      	adds	r1, #20
 80075a0:	4668      	mov	r0, sp
 80075a2:	f000 fb25 	bl	8007bf0 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 7);
 80075a6:	4d11      	ldr	r5, [pc, #68]	; (80075ec <fn_get_volt_sigfox+0x54>)
 80075a8:	2207      	movs	r2, #7
 80075aa:	4669      	mov	r1, sp
 80075ac:	0028      	movs	r0, r5
 80075ae:	f7fe f8b3 	bl	8005718 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.volts, 6);
 80075b2:	4c0f      	ldr	r4, [pc, #60]	; (80075f0 <fn_get_volt_sigfox+0x58>)
 80075b4:	2206      	movs	r2, #6
 80075b6:	0021      	movs	r1, r4
 80075b8:	0028      	movs	r0, r5
 80075ba:	f7fe f8eb 	bl	8005794 <HAL_UART_Receive_IT>
	while (UartReady != SET) {
 80075be:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <fn_get_volt_sigfox+0x5c>)
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	2a01      	cmp	r2, #1
 80075c4:	d10b      	bne.n	80075de <fn_get_volt_sigfox+0x46>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 80075c6:	2200      	movs	r2, #0

	int_volt_sigfox = atoi(st_sigfox_parameters.volts);
 80075c8:	0020      	movs	r0, r4
	UartReady = RESET;
 80075ca:	701a      	strb	r2, [r3, #0]
	int_volt_sigfox = atoi(st_sigfox_parameters.volts);
 80075cc:	f000 facc 	bl	8007b68 <atoi>
	int_volt_sigfox/=1000;
 80075d0:	21fa      	movs	r1, #250	; 0xfa
 80075d2:	0089      	lsls	r1, r1, #2
 80075d4:	f7f8 fe3e 	bl	8000254 <__divsi3>
 80075d8:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <fn_get_volt_sigfox+0x60>)
 80075da:	6018      	str	r0, [r3, #0]
}
 80075dc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		blink(2);
 80075de:	2002      	movs	r0, #2
 80075e0:	f7ff fb66 	bl	8006cb0 <blink>
 80075e4:	e7eb      	b.n	80075be <fn_get_volt_sigfox+0x26>
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	0800a188 	.word	0x0800a188
 80075ec:	200002fc 	.word	0x200002fc
 80075f0:	20000297 	.word	0x20000297
 80075f4:	200002ac 	.word	0x200002ac
 80075f8:	20000390 	.word	0x20000390

080075fc <fn_get_temperature_sigfox>:

//pegar a temperatura no mudulo sigfox
void fn_get_temperature_sigfox() {
 80075fc:	b537      	push	{r0, r1, r2, r4, r5, lr}

	char command[8] = "AT$T?\r\n";
 80075fe:	2208      	movs	r2, #8
 8007600:	490f      	ldr	r1, [pc, #60]	; (8007640 <fn_get_temperature_sigfox+0x44>)
 8007602:	4668      	mov	r0, sp
 8007604:	f000 faf4 	bl	8007bf0 <memcpy>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) command, 8);
 8007608:	4d0e      	ldr	r5, [pc, #56]	; (8007644 <fn_get_temperature_sigfox+0x48>)
 800760a:	2208      	movs	r2, #8
 800760c:	4669      	mov	r1, sp
 800760e:	0028      	movs	r0, r5
 8007610:	f7fe f882 	bl	8005718 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) st_sigfox_parameters.temperature,
 8007614:	4c0c      	ldr	r4, [pc, #48]	; (8007648 <fn_get_temperature_sigfox+0x4c>)
 8007616:	2207      	movs	r2, #7
 8007618:	0021      	movs	r1, r4
 800761a:	0028      	movs	r0, r5
 800761c:	f7fe f8ba 	bl	8005794 <HAL_UART_Receive_IT>
			7);
	while (UartReady != SET) {
 8007620:	4b0a      	ldr	r3, [pc, #40]	; (800764c <fn_get_temperature_sigfox+0x50>)
 8007622:	781a      	ldrb	r2, [r3, #0]
 8007624:	2a01      	cmp	r2, #1
 8007626:	d107      	bne.n	8007638 <fn_get_temperature_sigfox+0x3c>
		blink(2);
	}
	//Reset transmission flag
	UartReady = RESET;
 8007628:	2200      	movs	r2, #0

	int_temp_sigfox = atoi(st_sigfox_parameters.temperature);
 800762a:	0020      	movs	r0, r4
	UartReady = RESET;
 800762c:	701a      	strb	r2, [r3, #0]
	int_temp_sigfox = atoi(st_sigfox_parameters.temperature);
 800762e:	f000 fa9b 	bl	8007b68 <atoi>
 8007632:	4b07      	ldr	r3, [pc, #28]	; (8007650 <fn_get_temperature_sigfox+0x54>)
 8007634:	6018      	str	r0, [r3, #0]

}
 8007636:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		blink(2);
 8007638:	2002      	movs	r0, #2
 800763a:	f7ff fb39 	bl	8006cb0 <blink>
 800763e:	e7ef      	b.n	8007620 <fn_get_temperature_sigfox+0x24>
 8007640:	0800a519 	.word	0x0800a519
 8007644:	200002fc 	.word	0x200002fc
 8007648:	20000290 	.word	0x20000290
 800764c:	200002ac 	.word	0x200002ac
 8007650:	200002d4 	.word	0x200002d4

08007654 <fn_info_sigfox>:
	HAL_Delay(1000);
	SIGFOX_OFF
	fn_status_sigfox();
}

void fn_info_sigfox() {
 8007654:	b570      	push	{r4, r5, r6, lr}
	SIGFOX_ON
 8007656:	2580      	movs	r5, #128	; 0x80
 8007658:	24a0      	movs	r4, #160	; 0xa0
 800765a:	022d      	lsls	r5, r5, #8
 800765c:	05e4      	lsls	r4, r4, #23
 800765e:	0029      	movs	r1, r5
 8007660:	0020      	movs	r0, r4
 8007662:	2201      	movs	r2, #1
 8007664:	f7fc fd52 	bl	800410c <HAL_GPIO_WritePin>
	SIGFOX_RESET_ON
 8007668:	0029      	movs	r1, r5
 800766a:	2200      	movs	r2, #0
 800766c:	0020      	movs	r0, r4
 800766e:	f7fc fd4d 	bl	800410c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8007672:	200a      	movs	r0, #10
 8007674:	f7fb fdf2 	bl	800325c <HAL_Delay>
	SIGFOX_RESET_OFF
 8007678:	0029      	movs	r1, r5
 800767a:	2201      	movs	r2, #1
 800767c:	0020      	movs	r0, r4
 800767e:	f7fc fd45 	bl	800410c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8007682:	20fa      	movs	r0, #250	; 0xfa
 8007684:	0080      	lsls	r0, r0, #2
 8007686:	f7fb fde9 	bl	800325c <HAL_Delay>
	fn_at_sigfox();
 800768a:	f7ff ff6d 	bl	8007568 <fn_at_sigfox>
	HAL_Delay(100);
 800768e:	2064      	movs	r0, #100	; 0x64
 8007690:	f7fb fde4 	bl	800325c <HAL_Delay>
	fn_init_sigfox();
 8007694:	f7ff feb6 	bl	8007404 <fn_init_sigfox>
	HAL_Delay(100);
 8007698:	2064      	movs	r0, #100	; 0x64
 800769a:	f7fb fddf 	bl	800325c <HAL_Delay>
	fn_get_id_sigfox();
 800769e:	f7ff ff0b 	bl	80074b8 <fn_get_id_sigfox>
	fn_fprint("SIGFOX ID: ");
 80076a2:	4825      	ldr	r0, [pc, #148]	; (8007738 <fn_info_sigfox+0xe4>)
 80076a4:	f7ff fb20 	bl	8006ce8 <fn_fprint>
	fn_fprint(st_sigfox_parameters.id);
 80076a8:	4824      	ldr	r0, [pc, #144]	; (800773c <fn_info_sigfox+0xe8>)
 80076aa:	f7ff fb1d 	bl	8006ce8 <fn_fprint>
	fn_fprint("\r\n");
 80076ae:	4e24      	ldr	r6, [pc, #144]	; (8007740 <fn_info_sigfox+0xec>)
 80076b0:	0030      	movs	r0, r6
 80076b2:	f7ff fb19 	bl	8006ce8 <fn_fprint>
	HAL_Delay(100);
 80076b6:	2064      	movs	r0, #100	; 0x64
 80076b8:	f7fb fdd0 	bl	800325c <HAL_Delay>
	fn_get_pac_sigfox();
 80076bc:	f7ff ff28 	bl	8007510 <fn_get_pac_sigfox>
	fn_fprint("SIGFOX PAC: ");
 80076c0:	4820      	ldr	r0, [pc, #128]	; (8007744 <fn_info_sigfox+0xf0>)
 80076c2:	f7ff fb11 	bl	8006ce8 <fn_fprint>
	fn_fprint(st_sigfox_parameters.pac);
 80076c6:	4820      	ldr	r0, [pc, #128]	; (8007748 <fn_info_sigfox+0xf4>)
 80076c8:	f7ff fb0e 	bl	8006ce8 <fn_fprint>
	fn_fprint("\r\n");
 80076cc:	0030      	movs	r0, r6
 80076ce:	f7ff fb0b 	bl	8006ce8 <fn_fprint>
	HAL_Delay(100);
 80076d2:	2064      	movs	r0, #100	; 0x64
 80076d4:	f7fb fdc2 	bl	800325c <HAL_Delay>
	fn_get_temperature_sigfox();
 80076d8:	f7ff ff90 	bl	80075fc <fn_get_temperature_sigfox>
	fn_fprint("SIGFOX TEMPERATURE: ");
 80076dc:	481b      	ldr	r0, [pc, #108]	; (800774c <fn_info_sigfox+0xf8>)
 80076de:	f7ff fb03 	bl	8006ce8 <fn_fprint>
	fn_fprint(st_sigfox_parameters.temperature);
 80076e2:	481b      	ldr	r0, [pc, #108]	; (8007750 <fn_info_sigfox+0xfc>)
 80076e4:	f7ff fb00 	bl	8006ce8 <fn_fprint>
	fn_fprint("\r\n");
 80076e8:	0030      	movs	r0, r6
 80076ea:	f7ff fafd 	bl	8006ce8 <fn_fprint>
	SIGFOX_RESET_ON
 80076ee:	0029      	movs	r1, r5
 80076f0:	2200      	movs	r2, #0
 80076f2:	0020      	movs	r0, r4
 80076f4:	f7fc fd0a 	bl	800410c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80076f8:	200a      	movs	r0, #10
 80076fa:	f7fb fdaf 	bl	800325c <HAL_Delay>
	SIGFOX_RESET_OFF
 80076fe:	0029      	movs	r1, r5
 8007700:	2201      	movs	r2, #1
 8007702:	0020      	movs	r0, r4
 8007704:	f7fc fd02 	bl	800410c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007708:	2064      	movs	r0, #100	; 0x64
 800770a:	f7fb fda7 	bl	800325c <HAL_Delay>
	fn_get_volt_sigfox();
 800770e:	f7ff ff43 	bl	8007598 <fn_get_volt_sigfox>
	fn_fprint("SIGFOX VOLTS: ");
 8007712:	4810      	ldr	r0, [pc, #64]	; (8007754 <fn_info_sigfox+0x100>)
 8007714:	f7ff fae8 	bl	8006ce8 <fn_fprint>
	fn_fprint(st_sigfox_parameters.volts);
 8007718:	480f      	ldr	r0, [pc, #60]	; (8007758 <fn_info_sigfox+0x104>)
 800771a:	f7ff fae5 	bl	8006ce8 <fn_fprint>
	fn_fprint("\r\n");
 800771e:	0030      	movs	r0, r6
 8007720:	f7ff fae2 	bl	8006ce8 <fn_fprint>
	HAL_Delay(100);
 8007724:	2064      	movs	r0, #100	; 0x64
 8007726:	f7fb fd99 	bl	800325c <HAL_Delay>
	SIGFOX_OFF
 800772a:	0029      	movs	r1, r5
 800772c:	2200      	movs	r2, #0
 800772e:	0020      	movs	r0, r4
 8007730:	f7fc fcec 	bl	800410c <HAL_GPIO_WritePin>
}
 8007734:	bd70      	pop	{r4, r5, r6, pc}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	0800a521 	.word	0x0800a521
 800773c:	20000274 	.word	0x20000274
 8007740:	0800a506 	.word	0x0800a506
 8007744:	0800a52d 	.word	0x0800a52d
 8007748:	2000027e 	.word	0x2000027e
 800774c:	0800a53a 	.word	0x0800a53a
 8007750:	20000290 	.word	0x20000290
 8007754:	0800a54f 	.word	0x0800a54f
 8007758:	20000297 	.word	0x20000297

0800775c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800775c:	2201      	movs	r2, #1
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_MspInit+0x18>)
 8007760:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007762:	430a      	orrs	r2, r1
 8007764:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8007766:	2280      	movs	r2, #128	; 0x80
 8007768:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800776a:	0552      	lsls	r2, r2, #21
 800776c:	430a      	orrs	r2, r1
 800776e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007770:	4770      	bx	lr
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	40021000 	.word	0x40021000

08007778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007778:	b530      	push	{r4, r5, lr}
 800777a:	0005      	movs	r5, r0
 800777c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800777e:	2214      	movs	r2, #20
 8007780:	2100      	movs	r1, #0
 8007782:	a801      	add	r0, sp, #4
 8007784:	f000 fa3d 	bl	8007c02 <memset>
  if(hadc->Instance==ADC1)
 8007788:	4b1f      	ldr	r3, [pc, #124]	; (8007808 <HAL_ADC_MspInit+0x90>)
 800778a:	682a      	ldr	r2, [r5, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d138      	bne.n	8007802 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007790:	2280      	movs	r2, #128	; 0x80
 8007792:	4b1e      	ldr	r3, [pc, #120]	; (800780c <HAL_ADC_MspInit+0x94>)
 8007794:	0092      	lsls	r2, r2, #2
 8007796:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007798:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800779a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800779c:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 800779e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077a4:	430a      	orrs	r2, r1
 80077a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	400b      	ands	r3, r1
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 80077b0:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077b2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = V_BAT_FB_Pin|US_AN_Pin;
 80077b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077b6:	3b2d      	subs	r3, #45	; 0x2d
 80077b8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077ba:	f7fc fb71 	bl	8003ea0 <HAL_GPIO_Init>
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Request = DMA_REQUEST_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80077be:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80077c0:	4c13      	ldr	r4, [pc, #76]	; (8007810 <HAL_ADC_MspInit+0x98>)
 80077c2:	4b14      	ldr	r3, [pc, #80]	; (8007814 <HAL_ADC_MspInit+0x9c>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80077c4:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80077c6:	1892      	adds	r2, r2, r2
 80077c8:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80077ca:	2280      	movs	r2, #128	; 0x80
 80077cc:	0112      	lsls	r2, r2, #4
    hdma_adc.Instance = DMA1_Channel1;
 80077ce:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80077d0:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80077d2:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80077d4:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80077d6:	0020      	movs	r0, r4
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80077d8:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077da:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80077dc:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80077de:	61e2      	str	r2, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80077e0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80077e2:	f7fc f9d9 	bl	8003b98 <HAL_DMA_Init>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d001      	beq.n	80077ee <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80077ea:	f7ff fc95 	bl	8007118 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80077ee:	2200      	movs	r2, #0
 80077f0:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80077f2:	64ec      	str	r4, [r5, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80077f4:	0011      	movs	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80077f6:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80077f8:	f7fc f968 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80077fc:	200c      	movs	r0, #12
 80077fe:	f7fc f99f 	bl	8003b40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007802:	b007      	add	sp, #28
 8007804:	bd30      	pop	{r4, r5, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	40012400 	.word	0x40012400
 800780c:	40021000 	.word	0x40021000
 8007810:	200009fc 	.word	0x200009fc
 8007814:	40020008 	.word	0x40020008

08007818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007818:	b510      	push	{r4, lr}
 800781a:	0004      	movs	r4, r0
 800781c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800781e:	2214      	movs	r2, #20
 8007820:	2100      	movs	r1, #0
 8007822:	a801      	add	r0, sp, #4
 8007824:	f000 f9ed 	bl	8007c02 <memset>
  if(hi2c->Instance==I2C1)
 8007828:	4b11      	ldr	r3, [pc, #68]	; (8007870 <HAL_I2C_MspInit+0x58>)
 800782a:	6822      	ldr	r2, [r4, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d11c      	bne.n	800786a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007830:	2102      	movs	r1, #2
 8007832:	4c10      	ldr	r4, [pc, #64]	; (8007874 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007834:	4810      	ldr	r0, [pc, #64]	; (8007878 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007836:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007838:	430a      	orrs	r2, r1
 800783a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800783c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800783e:	400b      	ands	r3, r1
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007844:	23c0      	movs	r3, #192	; 0xc0
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800784a:	2312      	movs	r3, #18
 800784c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800784e:	3b11      	subs	r3, #17
 8007850:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007852:	185b      	adds	r3, r3, r1
 8007854:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007856:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007858:	3301      	adds	r3, #1
 800785a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800785c:	f7fc fb20 	bl	8003ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007860:	2380      	movs	r3, #128	; 0x80
 8007862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007864:	039b      	lsls	r3, r3, #14
 8007866:	4313      	orrs	r3, r2
 8007868:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800786a:	b006      	add	sp, #24
 800786c:	bd10      	pop	{r4, pc}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	40005400 	.word	0x40005400
 8007874:	40021000 	.word	0x40021000
 8007878:	50000400 	.word	0x50000400

0800787c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800787c:	b510      	push	{r4, lr}
 800787e:	0004      	movs	r4, r0
 8007880:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007882:	2214      	movs	r2, #20
 8007884:	2100      	movs	r1, #0
 8007886:	a805      	add	r0, sp, #20
 8007888:	f000 f9bb 	bl	8007c02 <memset>
  if(huart->Instance==LPUART1)
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	4a56      	ldr	r2, [pc, #344]	; (80079e8 <HAL_UART_MspInit+0x16c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d123      	bne.n	80078dc <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007894:	2280      	movs	r2, #128	; 0x80
 8007896:	4b55      	ldr	r3, [pc, #340]	; (80079ec <HAL_UART_MspInit+0x170>)
 8007898:	02d2      	lsls	r2, r2, #11
 800789a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800789c:	4854      	ldr	r0, [pc, #336]	; (80079f0 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800789e:	430a      	orrs	r2, r1
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078a2:	2202      	movs	r2, #2
 80078a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078a6:	4311      	orrs	r1, r2
 80078a8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078ac:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078ae:	4013      	ands	r3, r2
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PC_DEBUG_RX_Pin|GPS_TX_Pin;
 80078b4:	23c0      	movs	r3, #192	; 0xc0
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ba:	2303      	movs	r3, #3
 80078bc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 80078be:	3301      	adds	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 80078c2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c4:	f7fc faec 	bl	8003ea0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 80078c8:	2200      	movs	r2, #0
 80078ca:	201d      	movs	r0, #29
 80078cc:	0011      	movs	r1, r2
 80078ce:	f7fc f8fd 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 80078d2:	201d      	movs	r0, #29
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART5 interrupt Init */
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80078d4:	f7fc f934 	bl	8003b40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80078d8:	b00a      	add	sp, #40	; 0x28
 80078da:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 80078dc:	4a45      	ldr	r2, [pc, #276]	; (80079f4 <HAL_UART_MspInit+0x178>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d11d      	bne.n	800791e <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80078e2:	2280      	movs	r2, #128	; 0x80
 80078e4:	4b41      	ldr	r3, [pc, #260]	; (80079ec <HAL_UART_MspInit+0x170>)
 80078e6:	01d2      	lsls	r2, r2, #7
 80078e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078ea:	4841      	ldr	r0, [pc, #260]	; (80079f0 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80078ec:	430a      	orrs	r2, r1
 80078ee:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078f0:	2202      	movs	r2, #2
 80078f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078f4:	4311      	orrs	r1, r2
 80078f6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078fa:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078fc:	4013      	ands	r3, r2
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SFOX_RX_Pin|SFOX_TX_Pin;
 8007902:	23c0      	movs	r3, #192	; 0xc0
 8007904:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007906:	3bbd      	subs	r3, #189	; 0xbd
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007908:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800790a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800790c:	f7fc fac8 	bl	8003ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007910:	2200      	movs	r2, #0
 8007912:	201b      	movs	r0, #27
 8007914:	0011      	movs	r1, r2
 8007916:	f7fc f8d9 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800791a:	201b      	movs	r0, #27
 800791c:	e7da      	b.n	80078d4 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART2)
 800791e:	4a36      	ldr	r2, [pc, #216]	; (80079f8 <HAL_UART_MspInit+0x17c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d121      	bne.n	8007968 <HAL_UART_MspInit+0xec>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007924:	2280      	movs	r2, #128	; 0x80
 8007926:	4b31      	ldr	r3, [pc, #196]	; (80079ec <HAL_UART_MspInit+0x170>)
 8007928:	0292      	lsls	r2, r2, #10
 800792a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800792c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 800792e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007930:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007936:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007938:	430a      	orrs	r2, r1
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	400b      	ands	r3, r1
 8007940:	9302      	str	r3, [sp, #8]
 8007942:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = US_RX_Pin|US_TX_Pin;
 8007944:	230c      	movs	r3, #12
 8007946:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007948:	3b0a      	subs	r3, #10
 800794a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800794c:	185b      	adds	r3, r3, r1
 800794e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8007950:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007952:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8007954:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007956:	f7fc faa3 	bl	8003ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800795a:	2200      	movs	r2, #0
 800795c:	201c      	movs	r0, #28
 800795e:	0011      	movs	r1, r2
 8007960:	f7fc f8b4 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007964:	201c      	movs	r0, #28
 8007966:	e7b5      	b.n	80078d4 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART4)
 8007968:	4a24      	ldr	r2, [pc, #144]	; (80079fc <HAL_UART_MspInit+0x180>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d120      	bne.n	80079b0 <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART4_CLK_ENABLE();
 800796e:	2280      	movs	r2, #128	; 0x80
 8007970:	4b1e      	ldr	r3, [pc, #120]	; (80079ec <HAL_UART_MspInit+0x170>)
 8007972:	0312      	lsls	r2, r2, #12
 8007974:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007976:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART4_CLK_ENABLE();
 8007978:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800797a:	2101      	movs	r1, #1
    __HAL_RCC_USART4_CLK_ENABLE();
 800797c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007980:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007982:	430a      	orrs	r2, r1
 8007984:	62da      	str	r2, [r3, #44]	; 0x2c
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007988:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800798a:	400b      	ands	r3, r1
 800798c:	9303      	str	r3, [sp, #12]
 800798e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 8007990:	2303      	movs	r3, #3
 8007992:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007994:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8007996:	18db      	adds	r3, r3, r3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007998:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800799a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800799c:	a905      	add	r1, sp, #20
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800799e:	f7fc fa7f 	bl	8003ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80079a2:	2200      	movs	r2, #0
 80079a4:	200e      	movs	r0, #14
 80079a6:	0011      	movs	r1, r2
 80079a8:	f7fc f890 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80079ac:	200e      	movs	r0, #14
 80079ae:	e791      	b.n	80078d4 <HAL_UART_MspInit+0x58>
  else if(huart->Instance==USART5)
 80079b0:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <HAL_UART_MspInit+0x184>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d000      	beq.n	80079b8 <HAL_UART_MspInit+0x13c>
 80079b6:	e78f      	b.n	80078d8 <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART5_CLK_ENABLE();
 80079b8:	2280      	movs	r2, #128	; 0x80
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <HAL_UART_MspInit+0x170>)
 80079bc:	0352      	lsls	r2, r2, #13
 80079be:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079c0:	480b      	ldr	r0, [pc, #44]	; (80079f0 <HAL_UART_MspInit+0x174>)
    __HAL_RCC_USART5_CLK_ENABLE();
 80079c2:	430a      	orrs	r2, r1
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079c6:	2202      	movs	r2, #2
 80079c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079ca:	4311      	orrs	r1, r2
 80079cc:	62d9      	str	r1, [r3, #44]	; 0x2c
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079d0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079d2:	4013      	ands	r3, r2
 80079d4:	9304      	str	r3, [sp, #16]
 80079d6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPRS_RX_Pin|GPRS_TX_Pin;
 80079d8:	2318      	movs	r3, #24
 80079da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079dc:	3b15      	subs	r3, #21
 80079de:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80079e0:	3303      	adds	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e2:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80079e4:	9309      	str	r3, [sp, #36]	; 0x24
 80079e6:	e7da      	b.n	800799e <HAL_UART_MspInit+0x122>
 80079e8:	40004800 	.word	0x40004800
 80079ec:	40021000 	.word	0x40021000
 80079f0:	50000400 	.word	0x50000400
 80079f4:	40013800 	.word	0x40013800
 80079f8:	40004400 	.word	0x40004400
 80079fc:	40004c00 	.word	0x40004c00
 8007a00:	40005000 	.word	0x40005000

08007a04 <NMI_Handler>:
 8007a04:	4770      	bx	lr

08007a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a06:	e7fe      	b.n	8007a06 <HardFault_Handler>

08007a08 <SVC_Handler>:
 8007a08:	4770      	bx	lr

08007a0a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a0a:	4770      	bx	lr

08007a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a0e:	f7fb fc17 	bl	8003240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a12:	bd10      	pop	{r4, pc}

08007a14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007a14:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8007a16:	4802      	ldr	r0, [pc, #8]	; (8007a20 <DMA1_Channel1_IRQHandler+0xc>)
 8007a18:	f7fc f9f7 	bl	8003e0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	200009fc 	.word	0x200009fc

08007a24 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8007a24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8007a26:	4802      	ldr	r0, [pc, #8]	; (8007a30 <ADC1_COMP_IRQHandler+0xc>)
 8007a28:	f7fb feee 	bl	8003808 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	20000a44 	.word	0x20000a44

08007a34 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8007a34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007a36:	4803      	ldr	r0, [pc, #12]	; (8007a44 <USART4_5_IRQHandler+0x10>)
 8007a38:	f7fd ff70 	bl	800591c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8007a3c:	4802      	ldr	r0, [pc, #8]	; (8007a48 <USART4_5_IRQHandler+0x14>)
 8007a3e:	f7fd ff6d 	bl	800591c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8007a42:	bd10      	pop	{r4, pc}
 8007a44:	2000097c 	.word	0x2000097c
 8007a48:	200006b8 	.word	0x200006b8

08007a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007a4c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007a4e:	4802      	ldr	r0, [pc, #8]	; (8007a58 <USART1_IRQHandler+0xc>)
 8007a50:	f7fd ff64 	bl	800591c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007a54:	bd10      	pop	{r4, pc}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	200002fc 	.word	0x200002fc

08007a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007a5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007a5e:	4802      	ldr	r0, [pc, #8]	; (8007a68 <USART2_IRQHandler+0xc>)
 8007a60:	f7fd ff5c 	bl	800591c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	200003ac 	.word	0x200003ac

08007a6c <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8007a6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8007a6e:	4802      	ldr	r0, [pc, #8]	; (8007a78 <RNG_LPUART1_IRQHandler+0xc>)
 8007a70:	f7fd ff54 	bl	800591c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8007a74:	bd10      	pop	{r4, pc}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	20000444 	.word	0x20000444

08007a7c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <_sbrk+0x2c>)
{
 8007a7e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8007a80:	6819      	ldr	r1, [r3, #0]
{
 8007a82:	0002      	movs	r2, r0
	if (heap_end == 0)
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d101      	bne.n	8007a8c <_sbrk+0x10>
		heap_end = &end;
 8007a88:	4908      	ldr	r1, [pc, #32]	; (8007aac <_sbrk+0x30>)
 8007a8a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8007a8c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8007a8e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8007a90:	1882      	adds	r2, r0, r2
 8007a92:	428a      	cmp	r2, r1
 8007a94:	d906      	bls.n	8007aa4 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007a96:	f000 f86d 	bl	8007b74 <__errno>
 8007a9a:	230c      	movs	r3, #12
 8007a9c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8007aa2:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8007aa4:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8007aa6:	e7fc      	b.n	8007aa2 <_sbrk+0x26>
 8007aa8:	20000220 	.word	0x20000220
 8007aac:	20000aa4 	.word	0x20000aa4

08007ab0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8007ab0:	2280      	movs	r2, #128	; 0x80
 8007ab2:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <SystemInit+0x44>)
 8007ab4:	0052      	lsls	r2, r2, #1
 8007ab6:	6819      	ldr	r1, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	490e      	ldr	r1, [pc, #56]	; (8007af8 <SystemInit+0x48>)
 8007ac0:	400a      	ands	r2, r1
 8007ac2:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	490d      	ldr	r1, [pc, #52]	; (8007afc <SystemInit+0x4c>)
 8007ac8:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007aca:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8007acc:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	438a      	bics	r2, r1
 8007ad2:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	490a      	ldr	r1, [pc, #40]	; (8007b00 <SystemInit+0x50>)
 8007ad8:	400a      	ands	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	4909      	ldr	r1, [pc, #36]	; (8007b04 <SystemInit+0x54>)
 8007ae0:	400a      	ands	r2, r1
 8007ae2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <SystemInit+0x58>)
 8007aec:	0512      	lsls	r2, r2, #20
 8007aee:	609a      	str	r2, [r3, #8]
#endif
}
 8007af0:	4770      	bx	lr
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	40021000 	.word	0x40021000
 8007af8:	88ff400c 	.word	0x88ff400c
 8007afc:	fef6fff6 	.word	0xfef6fff6
 8007b00:	fffbffff 	.word	0xfffbffff
 8007b04:	ff02ffff 	.word	0xff02ffff
 8007b08:	e000ed00 	.word	0xe000ed00

08007b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007b0c:	480d      	ldr	r0, [pc, #52]	; (8007b44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8007b0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8007b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b12:	e003      	b.n	8007b1c <LoopCopyDataInit>

08007b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8007b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b1a:	3104      	adds	r1, #4

08007b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b1c:	480b      	ldr	r0, [pc, #44]	; (8007b4c <LoopForever+0xa>)
  ldr  r3, =_edata
 8007b1e:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b24:	d3f6      	bcc.n	8007b14 <CopyDataInit>
  ldr  r2, =_sbss
 8007b26:	4a0b      	ldr	r2, [pc, #44]	; (8007b54 <LoopForever+0x12>)
  b  LoopFillZerobss
 8007b28:	e002      	b.n	8007b30 <LoopFillZerobss>

08007b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8007b2a:	2300      	movs	r3, #0
  str  r3, [r2]
 8007b2c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b2e:	3204      	adds	r2, #4

08007b30 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007b30:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <LoopForever+0x16>)
  cmp  r2, r3
 8007b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b34:	d3f9      	bcc.n	8007b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007b36:	f7ff ffbb 	bl	8007ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b3a:	f000 f821 	bl	8007b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b3e:	f7ff f8f7 	bl	8006d30 <main>

08007b42 <LoopForever>:

LoopForever:
    b LoopForever
 8007b42:	e7fe      	b.n	8007b42 <LoopForever>
   ldr   r0, =_estack
 8007b44:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8007b48:	0800a880 	.word	0x0800a880
  ldr  r0, =_sdata
 8007b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b50:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007b54:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8007b58:	20000aa4 	.word	0x20000aa4

08007b5c <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b5c:	e7fe      	b.n	8007b5c <DMA1_Channel2_3_IRQHandler>

08007b5e <atof>:
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	2100      	movs	r1, #0
 8007b62:	f000 ff51 	bl	8008a08 <strtod>
 8007b66:	bd10      	pop	{r4, pc}

08007b68 <atoi>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	220a      	movs	r2, #10
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f001 f839 	bl	8008be4 <strtol>
 8007b72:	bd10      	pop	{r4, pc}

08007b74 <__errno>:
 8007b74:	4b01      	ldr	r3, [pc, #4]	; (8007b7c <__errno+0x8>)
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	4770      	bx	lr
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	20000008 	.word	0x20000008

08007b80 <__libc_init_array>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	2600      	movs	r6, #0
 8007b84:	4d0c      	ldr	r5, [pc, #48]	; (8007bb8 <__libc_init_array+0x38>)
 8007b86:	4c0d      	ldr	r4, [pc, #52]	; (8007bbc <__libc_init_array+0x3c>)
 8007b88:	1b64      	subs	r4, r4, r5
 8007b8a:	10a4      	asrs	r4, r4, #2
 8007b8c:	42a6      	cmp	r6, r4
 8007b8e:	d109      	bne.n	8007ba4 <__libc_init_array+0x24>
 8007b90:	2600      	movs	r6, #0
 8007b92:	f002 faeb 	bl	800a16c <_init>
 8007b96:	4d0a      	ldr	r5, [pc, #40]	; (8007bc0 <__libc_init_array+0x40>)
 8007b98:	4c0a      	ldr	r4, [pc, #40]	; (8007bc4 <__libc_init_array+0x44>)
 8007b9a:	1b64      	subs	r4, r4, r5
 8007b9c:	10a4      	asrs	r4, r4, #2
 8007b9e:	42a6      	cmp	r6, r4
 8007ba0:	d105      	bne.n	8007bae <__libc_init_array+0x2e>
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	00b3      	lsls	r3, r6, #2
 8007ba6:	58eb      	ldr	r3, [r5, r3]
 8007ba8:	4798      	blx	r3
 8007baa:	3601      	adds	r6, #1
 8007bac:	e7ee      	b.n	8007b8c <__libc_init_array+0xc>
 8007bae:	00b3      	lsls	r3, r6, #2
 8007bb0:	58eb      	ldr	r3, [r5, r3]
 8007bb2:	4798      	blx	r3
 8007bb4:	3601      	adds	r6, #1
 8007bb6:	e7f2      	b.n	8007b9e <__libc_init_array+0x1e>
 8007bb8:	0800a878 	.word	0x0800a878
 8007bbc:	0800a878 	.word	0x0800a878
 8007bc0:	0800a878 	.word	0x0800a878
 8007bc4:	0800a87c 	.word	0x0800a87c

08007bc8 <malloc>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	4b03      	ldr	r3, [pc, #12]	; (8007bd8 <malloc+0x10>)
 8007bcc:	0001      	movs	r1, r0
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	f000 f86a 	bl	8007ca8 <_malloc_r>
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	20000008 	.word	0x20000008

08007bdc <free>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	4b03      	ldr	r3, [pc, #12]	; (8007bec <free+0x10>)
 8007be0:	0001      	movs	r1, r0
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	f000 f816 	bl	8007c14 <_free_r>
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	20000008 	.word	0x20000008

08007bf0 <memcpy>:
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d100      	bne.n	8007bfa <memcpy+0xa>
 8007bf8:	bd10      	pop	{r4, pc}
 8007bfa:	5ccc      	ldrb	r4, [r1, r3]
 8007bfc:	54c4      	strb	r4, [r0, r3]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	e7f8      	b.n	8007bf4 <memcpy+0x4>

08007c02 <memset>:
 8007c02:	0003      	movs	r3, r0
 8007c04:	1882      	adds	r2, r0, r2
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d100      	bne.n	8007c0c <memset+0xa>
 8007c0a:	4770      	bx	lr
 8007c0c:	7019      	strb	r1, [r3, #0]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	e7f9      	b.n	8007c06 <memset+0x4>
	...

08007c14 <_free_r>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	0005      	movs	r5, r0
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	d010      	beq.n	8007c3e <_free_r+0x2a>
 8007c1c:	1f0c      	subs	r4, r1, #4
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da00      	bge.n	8007c26 <_free_r+0x12>
 8007c24:	18e4      	adds	r4, r4, r3
 8007c26:	0028      	movs	r0, r5
 8007c28:	f001 fb32 	bl	8009290 <__malloc_lock>
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <_free_r+0x90>)
 8007c2e:	6813      	ldr	r3, [r2, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d105      	bne.n	8007c40 <_free_r+0x2c>
 8007c34:	6063      	str	r3, [r4, #4]
 8007c36:	6014      	str	r4, [r2, #0]
 8007c38:	0028      	movs	r0, r5
 8007c3a:	f001 fb2a 	bl	8009292 <__malloc_unlock>
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	d909      	bls.n	8007c58 <_free_r+0x44>
 8007c44:	6821      	ldr	r1, [r4, #0]
 8007c46:	1860      	adds	r0, r4, r1
 8007c48:	4283      	cmp	r3, r0
 8007c4a:	d1f3      	bne.n	8007c34 <_free_r+0x20>
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	1841      	adds	r1, r0, r1
 8007c52:	6021      	str	r1, [r4, #0]
 8007c54:	e7ee      	b.n	8007c34 <_free_r+0x20>
 8007c56:	0013      	movs	r3, r2
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	d001      	beq.n	8007c62 <_free_r+0x4e>
 8007c5e:	42a2      	cmp	r2, r4
 8007c60:	d9f9      	bls.n	8007c56 <_free_r+0x42>
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	1858      	adds	r0, r3, r1
 8007c66:	42a0      	cmp	r0, r4
 8007c68:	d10b      	bne.n	8007c82 <_free_r+0x6e>
 8007c6a:	6820      	ldr	r0, [r4, #0]
 8007c6c:	1809      	adds	r1, r1, r0
 8007c6e:	1858      	adds	r0, r3, r1
 8007c70:	6019      	str	r1, [r3, #0]
 8007c72:	4282      	cmp	r2, r0
 8007c74:	d1e0      	bne.n	8007c38 <_free_r+0x24>
 8007c76:	6810      	ldr	r0, [r2, #0]
 8007c78:	6852      	ldr	r2, [r2, #4]
 8007c7a:	1841      	adds	r1, r0, r1
 8007c7c:	6019      	str	r1, [r3, #0]
 8007c7e:	605a      	str	r2, [r3, #4]
 8007c80:	e7da      	b.n	8007c38 <_free_r+0x24>
 8007c82:	42a0      	cmp	r0, r4
 8007c84:	d902      	bls.n	8007c8c <_free_r+0x78>
 8007c86:	230c      	movs	r3, #12
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	e7d5      	b.n	8007c38 <_free_r+0x24>
 8007c8c:	6821      	ldr	r1, [r4, #0]
 8007c8e:	1860      	adds	r0, r4, r1
 8007c90:	4282      	cmp	r2, r0
 8007c92:	d103      	bne.n	8007c9c <_free_r+0x88>
 8007c94:	6810      	ldr	r0, [r2, #0]
 8007c96:	6852      	ldr	r2, [r2, #4]
 8007c98:	1841      	adds	r1, r0, r1
 8007c9a:	6021      	str	r1, [r4, #0]
 8007c9c:	6062      	str	r2, [r4, #4]
 8007c9e:	605c      	str	r4, [r3, #4]
 8007ca0:	e7ca      	b.n	8007c38 <_free_r+0x24>
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	20000224 	.word	0x20000224

08007ca8 <_malloc_r>:
 8007ca8:	2303      	movs	r3, #3
 8007caa:	b570      	push	{r4, r5, r6, lr}
 8007cac:	1ccd      	adds	r5, r1, #3
 8007cae:	439d      	bics	r5, r3
 8007cb0:	3508      	adds	r5, #8
 8007cb2:	0006      	movs	r6, r0
 8007cb4:	2d0c      	cmp	r5, #12
 8007cb6:	d21e      	bcs.n	8007cf6 <_malloc_r+0x4e>
 8007cb8:	250c      	movs	r5, #12
 8007cba:	42a9      	cmp	r1, r5
 8007cbc:	d81d      	bhi.n	8007cfa <_malloc_r+0x52>
 8007cbe:	0030      	movs	r0, r6
 8007cc0:	f001 fae6 	bl	8009290 <__malloc_lock>
 8007cc4:	4a25      	ldr	r2, [pc, #148]	; (8007d5c <_malloc_r+0xb4>)
 8007cc6:	6814      	ldr	r4, [r2, #0]
 8007cc8:	0021      	movs	r1, r4
 8007cca:	2900      	cmp	r1, #0
 8007ccc:	d119      	bne.n	8007d02 <_malloc_r+0x5a>
 8007cce:	4c24      	ldr	r4, [pc, #144]	; (8007d60 <_malloc_r+0xb8>)
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d103      	bne.n	8007cde <_malloc_r+0x36>
 8007cd6:	0030      	movs	r0, r6
 8007cd8:	f000 f844 	bl	8007d64 <_sbrk_r>
 8007cdc:	6020      	str	r0, [r4, #0]
 8007cde:	0029      	movs	r1, r5
 8007ce0:	0030      	movs	r0, r6
 8007ce2:	f000 f83f 	bl	8007d64 <_sbrk_r>
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	d12c      	bne.n	8007d44 <_malloc_r+0x9c>
 8007cea:	230c      	movs	r3, #12
 8007cec:	0030      	movs	r0, r6
 8007cee:	6033      	str	r3, [r6, #0]
 8007cf0:	f001 facf 	bl	8009292 <__malloc_unlock>
 8007cf4:	e003      	b.n	8007cfe <_malloc_r+0x56>
 8007cf6:	2d00      	cmp	r5, #0
 8007cf8:	dadf      	bge.n	8007cba <_malloc_r+0x12>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	2000      	movs	r0, #0
 8007d00:	bd70      	pop	{r4, r5, r6, pc}
 8007d02:	680b      	ldr	r3, [r1, #0]
 8007d04:	1b5b      	subs	r3, r3, r5
 8007d06:	d41a      	bmi.n	8007d3e <_malloc_r+0x96>
 8007d08:	2b0b      	cmp	r3, #11
 8007d0a:	d903      	bls.n	8007d14 <_malloc_r+0x6c>
 8007d0c:	600b      	str	r3, [r1, #0]
 8007d0e:	18cc      	adds	r4, r1, r3
 8007d10:	6025      	str	r5, [r4, #0]
 8007d12:	e003      	b.n	8007d1c <_malloc_r+0x74>
 8007d14:	428c      	cmp	r4, r1
 8007d16:	d10e      	bne.n	8007d36 <_malloc_r+0x8e>
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	0030      	movs	r0, r6
 8007d1e:	f001 fab8 	bl	8009292 <__malloc_unlock>
 8007d22:	0020      	movs	r0, r4
 8007d24:	2207      	movs	r2, #7
 8007d26:	300b      	adds	r0, #11
 8007d28:	1d23      	adds	r3, r4, #4
 8007d2a:	4390      	bics	r0, r2
 8007d2c:	1ac3      	subs	r3, r0, r3
 8007d2e:	d0e7      	beq.n	8007d00 <_malloc_r+0x58>
 8007d30:	425a      	negs	r2, r3
 8007d32:	50e2      	str	r2, [r4, r3]
 8007d34:	e7e4      	b.n	8007d00 <_malloc_r+0x58>
 8007d36:	684b      	ldr	r3, [r1, #4]
 8007d38:	6063      	str	r3, [r4, #4]
 8007d3a:	000c      	movs	r4, r1
 8007d3c:	e7ee      	b.n	8007d1c <_malloc_r+0x74>
 8007d3e:	000c      	movs	r4, r1
 8007d40:	6849      	ldr	r1, [r1, #4]
 8007d42:	e7c2      	b.n	8007cca <_malloc_r+0x22>
 8007d44:	2303      	movs	r3, #3
 8007d46:	1cc4      	adds	r4, r0, #3
 8007d48:	439c      	bics	r4, r3
 8007d4a:	42a0      	cmp	r0, r4
 8007d4c:	d0e0      	beq.n	8007d10 <_malloc_r+0x68>
 8007d4e:	1a21      	subs	r1, r4, r0
 8007d50:	0030      	movs	r0, r6
 8007d52:	f000 f807 	bl	8007d64 <_sbrk_r>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	d1da      	bne.n	8007d10 <_malloc_r+0x68>
 8007d5a:	e7c6      	b.n	8007cea <_malloc_r+0x42>
 8007d5c:	20000224 	.word	0x20000224
 8007d60:	20000228 	.word	0x20000228

08007d64 <_sbrk_r>:
 8007d64:	2300      	movs	r3, #0
 8007d66:	b570      	push	{r4, r5, r6, lr}
 8007d68:	4c06      	ldr	r4, [pc, #24]	; (8007d84 <_sbrk_r+0x20>)
 8007d6a:	0005      	movs	r5, r0
 8007d6c:	0008      	movs	r0, r1
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	f7ff fe84 	bl	8007a7c <_sbrk>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d103      	bne.n	8007d80 <_sbrk_r+0x1c>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d000      	beq.n	8007d80 <_sbrk_r+0x1c>
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	bd70      	pop	{r4, r5, r6, pc}
 8007d82:	46c0      	nop			; (mov r8, r8)
 8007d84:	20000aa0 	.word	0x20000aa0

08007d88 <strcpy>:
 8007d88:	1c03      	adds	r3, r0, #0
 8007d8a:	780a      	ldrb	r2, [r1, #0]
 8007d8c:	3101      	adds	r1, #1
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	3301      	adds	r3, #1
 8007d92:	2a00      	cmp	r2, #0
 8007d94:	d1f9      	bne.n	8007d8a <strcpy+0x2>
 8007d96:	4770      	bx	lr

08007d98 <strstr>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	0002      	movs	r2, r0
 8007d9c:	7800      	ldrb	r0, [r0, #0]
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d104      	bne.n	8007dac <strstr+0x14>
 8007da2:	7809      	ldrb	r1, [r1, #0]
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d00d      	beq.n	8007dc4 <strstr+0x2c>
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	3201      	adds	r2, #1
 8007dac:	7810      	ldrb	r0, [r2, #0]
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d0fa      	beq.n	8007da8 <strstr+0x10>
 8007db2:	2300      	movs	r3, #0
 8007db4:	5cc8      	ldrb	r0, [r1, r3]
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d004      	beq.n	8007dc4 <strstr+0x2c>
 8007dba:	5cd4      	ldrb	r4, [r2, r3]
 8007dbc:	4284      	cmp	r4, r0
 8007dbe:	d1f4      	bne.n	8007daa <strstr+0x12>
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	e7f7      	b.n	8007db4 <strstr+0x1c>
 8007dc4:	0010      	movs	r0, r2
 8007dc6:	e7ef      	b.n	8007da8 <strstr+0x10>

08007dc8 <sulp>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	0016      	movs	r6, r2
 8007dcc:	000d      	movs	r5, r1
 8007dce:	f001 fd2f 	bl	8009830 <__ulp>
 8007dd2:	2e00      	cmp	r6, #0
 8007dd4:	d00d      	beq.n	8007df2 <sulp+0x2a>
 8007dd6:	236b      	movs	r3, #107	; 0x6b
 8007dd8:	006a      	lsls	r2, r5, #1
 8007dda:	0d52      	lsrs	r2, r2, #21
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	dd07      	ble.n	8007df2 <sulp+0x2a>
 8007de2:	2400      	movs	r4, #0
 8007de4:	4a03      	ldr	r2, [pc, #12]	; (8007df4 <sulp+0x2c>)
 8007de6:	051b      	lsls	r3, r3, #20
 8007de8:	189d      	adds	r5, r3, r2
 8007dea:	002b      	movs	r3, r5
 8007dec:	0022      	movs	r2, r4
 8007dee:	f7fa fae3 	bl	80023b8 <__aeabi_dmul>
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	3ff00000 	.word	0x3ff00000

08007df8 <_strtod_l>:
 8007df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfa:	b0a5      	sub	sp, #148	; 0x94
 8007dfc:	9307      	str	r3, [sp, #28]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9004      	str	r0, [sp, #16]
 8007e02:	9807      	ldr	r0, [sp, #28]
 8007e04:	9320      	str	r3, [sp, #128]	; 0x80
 8007e06:	9106      	str	r1, [sp, #24]
 8007e08:	921a      	str	r2, [sp, #104]	; 0x68
 8007e0a:	f001 fa2d 	bl	8009268 <__localeconv_l>
 8007e0e:	0005      	movs	r5, r0
 8007e10:	6800      	ldr	r0, [r0, #0]
 8007e12:	f7f8 f979 	bl	8000108 <strlen>
 8007e16:	2600      	movs	r6, #0
 8007e18:	2700      	movs	r7, #0
 8007e1a:	9b06      	ldr	r3, [sp, #24]
 8007e1c:	9005      	str	r0, [sp, #20]
 8007e1e:	931f      	str	r3, [sp, #124]	; 0x7c
 8007e20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	2a0d      	cmp	r2, #13
 8007e26:	d839      	bhi.n	8007e9c <_strtod_l+0xa4>
 8007e28:	2a09      	cmp	r2, #9
 8007e2a:	d23d      	bcs.n	8007ea8 <_strtod_l+0xb0>
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	d044      	beq.n	8007eba <_strtod_l+0xc2>
 8007e30:	2300      	movs	r3, #0
 8007e32:	9312      	str	r3, [sp, #72]	; 0x48
 8007e34:	2200      	movs	r2, #0
 8007e36:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8007e38:	920c      	str	r2, [sp, #48]	; 0x30
 8007e3a:	7823      	ldrb	r3, [r4, #0]
 8007e3c:	2b30      	cmp	r3, #48	; 0x30
 8007e3e:	d000      	beq.n	8007e42 <_strtod_l+0x4a>
 8007e40:	e07e      	b.n	8007f40 <_strtod_l+0x148>
 8007e42:	7863      	ldrb	r3, [r4, #1]
 8007e44:	2b58      	cmp	r3, #88	; 0x58
 8007e46:	d002      	beq.n	8007e4e <_strtod_l+0x56>
 8007e48:	2b78      	cmp	r3, #120	; 0x78
 8007e4a:	d000      	beq.n	8007e4e <_strtod_l+0x56>
 8007e4c:	e06e      	b.n	8007f2c <_strtod_l+0x134>
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	4ab7      	ldr	r2, [pc, #732]	; (8008130 <_strtod_l+0x338>)
 8007e52:	9302      	str	r3, [sp, #8]
 8007e54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e56:	a91f      	add	r1, sp, #124	; 0x7c
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	ab20      	add	r3, sp, #128	; 0x80
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	9804      	ldr	r0, [sp, #16]
 8007e60:	ab21      	add	r3, sp, #132	; 0x84
 8007e62:	f000 ff1a 	bl	8008c9a <__gethex>
 8007e66:	2507      	movs	r5, #7
 8007e68:	9005      	str	r0, [sp, #20]
 8007e6a:	4005      	ands	r5, r0
 8007e6c:	d005      	beq.n	8007e7a <_strtod_l+0x82>
 8007e6e:	2d06      	cmp	r5, #6
 8007e70:	d12f      	bne.n	8007ed2 <_strtod_l+0xda>
 8007e72:	2300      	movs	r3, #0
 8007e74:	3401      	adds	r4, #1
 8007e76:	941f      	str	r4, [sp, #124]	; 0x7c
 8007e78:	9312      	str	r3, [sp, #72]	; 0x48
 8007e7a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <_strtod_l+0x8e>
 8007e80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01d      	beq.n	8007ec8 <_strtod_l+0xd0>
 8007e8c:	2380      	movs	r3, #128	; 0x80
 8007e8e:	0032      	movs	r2, r6
 8007e90:	061b      	lsls	r3, r3, #24
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	0010      	movs	r0, r2
 8007e96:	0019      	movs	r1, r3
 8007e98:	b025      	add	sp, #148	; 0x94
 8007e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9c:	2a2b      	cmp	r2, #43	; 0x2b
 8007e9e:	d005      	beq.n	8007eac <_strtod_l+0xb4>
 8007ea0:	2a2d      	cmp	r2, #45	; 0x2d
 8007ea2:	d014      	beq.n	8007ece <_strtod_l+0xd6>
 8007ea4:	2a20      	cmp	r2, #32
 8007ea6:	d1c3      	bne.n	8007e30 <_strtod_l+0x38>
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	e7b8      	b.n	8007e1e <_strtod_l+0x26>
 8007eac:	2200      	movs	r2, #0
 8007eae:	9212      	str	r2, [sp, #72]	; 0x48
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	921f      	str	r2, [sp, #124]	; 0x7c
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1bc      	bne.n	8007e34 <_strtod_l+0x3c>
 8007eba:	9b06      	ldr	r3, [sp, #24]
 8007ebc:	931f      	str	r3, [sp, #124]	; 0x7c
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	9312      	str	r3, [sp, #72]	; 0x48
 8007ec2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1db      	bne.n	8007e80 <_strtod_l+0x88>
 8007ec8:	0032      	movs	r2, r6
 8007eca:	003b      	movs	r3, r7
 8007ecc:	e7e2      	b.n	8007e94 <_strtod_l+0x9c>
 8007ece:	2201      	movs	r2, #1
 8007ed0:	e7ed      	b.n	8007eae <_strtod_l+0xb6>
 8007ed2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	d007      	beq.n	8007ee8 <_strtod_l+0xf0>
 8007ed8:	2135      	movs	r1, #53	; 0x35
 8007eda:	a822      	add	r0, sp, #136	; 0x88
 8007edc:	f001 fd95 	bl	8009a0a <__copybits>
 8007ee0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007ee2:	9804      	ldr	r0, [sp, #16]
 8007ee4:	f001 fa0e 	bl	8009304 <_Bfree>
 8007ee8:	1e68      	subs	r0, r5, #1
 8007eea:	2804      	cmp	r0, #4
 8007eec:	d806      	bhi.n	8007efc <_strtod_l+0x104>
 8007eee:	f7f8 f913 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007ef2:	030c      	.short	0x030c
 8007ef4:	1917      	.short	0x1917
 8007ef6:	0c          	.byte	0x0c
 8007ef7:	00          	.byte	0x00
 8007ef8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007efa:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007efc:	9b05      	ldr	r3, [sp, #20]
 8007efe:	071b      	lsls	r3, r3, #28
 8007f00:	d5bb      	bpl.n	8007e7a <_strtod_l+0x82>
 8007f02:	2380      	movs	r3, #128	; 0x80
 8007f04:	061b      	lsls	r3, r3, #24
 8007f06:	431f      	orrs	r7, r3
 8007f08:	e7b7      	b.n	8007e7a <_strtod_l+0x82>
 8007f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f0c:	4a89      	ldr	r2, [pc, #548]	; (8008134 <_strtod_l+0x33c>)
 8007f0e:	498a      	ldr	r1, [pc, #552]	; (8008138 <_strtod_l+0x340>)
 8007f10:	401a      	ands	r2, r3
 8007f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f14:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007f16:	185b      	adds	r3, r3, r1
 8007f18:	051b      	lsls	r3, r3, #20
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	0017      	movs	r7, r2
 8007f1e:	e7ed      	b.n	8007efc <_strtod_l+0x104>
 8007f20:	4f86      	ldr	r7, [pc, #536]	; (800813c <_strtod_l+0x344>)
 8007f22:	e7eb      	b.n	8007efc <_strtod_l+0x104>
 8007f24:	2601      	movs	r6, #1
 8007f26:	4f86      	ldr	r7, [pc, #536]	; (8008140 <_strtod_l+0x348>)
 8007f28:	4276      	negs	r6, r6
 8007f2a:	e7e7      	b.n	8007efc <_strtod_l+0x104>
 8007f2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	921f      	str	r2, [sp, #124]	; 0x7c
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b30      	cmp	r3, #48	; 0x30
 8007f36:	d0f9      	beq.n	8007f2c <_strtod_l+0x134>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d09e      	beq.n	8007e7a <_strtod_l+0x82>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f42:	220a      	movs	r2, #10
 8007f44:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f46:	2300      	movs	r3, #0
 8007f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f4c:	9308      	str	r3, [sp, #32]
 8007f4e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007f50:	7804      	ldrb	r4, [r0, #0]
 8007f52:	0023      	movs	r3, r4
 8007f54:	3b30      	subs	r3, #48	; 0x30
 8007f56:	b2d9      	uxtb	r1, r3
 8007f58:	2909      	cmp	r1, #9
 8007f5a:	d926      	bls.n	8007faa <_strtod_l+0x1b2>
 8007f5c:	9a05      	ldr	r2, [sp, #20]
 8007f5e:	6829      	ldr	r1, [r5, #0]
 8007f60:	f001 fd99 	bl	8009a96 <strncmp>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d032      	beq.n	8007fce <_strtod_l+0x1d6>
 8007f68:	2000      	movs	r0, #0
 8007f6a:	0023      	movs	r3, r4
 8007f6c:	4684      	mov	ip, r0
 8007f6e:	9a08      	ldr	r2, [sp, #32]
 8007f70:	9007      	str	r0, [sp, #28]
 8007f72:	9205      	str	r2, [sp, #20]
 8007f74:	2220      	movs	r2, #32
 8007f76:	0019      	movs	r1, r3
 8007f78:	4391      	bics	r1, r2
 8007f7a:	000a      	movs	r2, r1
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	2a45      	cmp	r2, #69	; 0x45
 8007f80:	d000      	beq.n	8007f84 <_strtod_l+0x18c>
 8007f82:	e0a8      	b.n	80080d6 <_strtod_l+0x2de>
 8007f84:	9b05      	ldr	r3, [sp, #20]
 8007f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f88:	4303      	orrs	r3, r0
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	428b      	cmp	r3, r1
 8007f8e:	d094      	beq.n	8007eba <_strtod_l+0xc2>
 8007f90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f92:	9306      	str	r3, [sp, #24]
 8007f94:	3301      	adds	r3, #1
 8007f96:	931f      	str	r3, [sp, #124]	; 0x7c
 8007f98:	9b06      	ldr	r3, [sp, #24]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2b2b      	cmp	r3, #43	; 0x2b
 8007f9e:	d072      	beq.n	8008086 <_strtod_l+0x28e>
 8007fa0:	000c      	movs	r4, r1
 8007fa2:	2b2d      	cmp	r3, #45	; 0x2d
 8007fa4:	d175      	bne.n	8008092 <_strtod_l+0x29a>
 8007fa6:	2401      	movs	r4, #1
 8007fa8:	e06e      	b.n	8008088 <_strtod_l+0x290>
 8007faa:	9908      	ldr	r1, [sp, #32]
 8007fac:	2908      	cmp	r1, #8
 8007fae:	dc09      	bgt.n	8007fc4 <_strtod_l+0x1cc>
 8007fb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fb2:	4351      	muls	r1, r2
 8007fb4:	185b      	adds	r3, r3, r1
 8007fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb8:	9b08      	ldr	r3, [sp, #32]
 8007fba:	3001      	adds	r0, #1
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	9308      	str	r3, [sp, #32]
 8007fc0:	901f      	str	r0, [sp, #124]	; 0x7c
 8007fc2:	e7c4      	b.n	8007f4e <_strtod_l+0x156>
 8007fc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fc6:	4351      	muls	r1, r2
 8007fc8:	185b      	adds	r3, r3, r1
 8007fca:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fcc:	e7f4      	b.n	8007fb8 <_strtod_l+0x1c0>
 8007fce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007fd0:	9b05      	ldr	r3, [sp, #20]
 8007fd2:	4694      	mov	ip, r2
 8007fd4:	9a08      	ldr	r2, [sp, #32]
 8007fd6:	4463      	add	r3, ip
 8007fd8:	931f      	str	r3, [sp, #124]	; 0x7c
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2a00      	cmp	r2, #0
 8007fde:	d149      	bne.n	8008074 <_strtod_l+0x27c>
 8007fe0:	0010      	movs	r0, r2
 8007fe2:	2b30      	cmp	r3, #48	; 0x30
 8007fe4:	d028      	beq.n	8008038 <_strtod_l+0x240>
 8007fe6:	001a      	movs	r2, r3
 8007fe8:	3a31      	subs	r2, #49	; 0x31
 8007fea:	2a08      	cmp	r2, #8
 8007fec:	d846      	bhi.n	800807c <_strtod_l+0x284>
 8007fee:	4684      	mov	ip, r0
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007ff4:	9005      	str	r0, [sp, #20]
 8007ff6:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ff8:	3b30      	subs	r3, #48	; 0x30
 8007ffa:	1c42      	adds	r2, r0, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00f      	beq.n	8008020 <_strtod_l+0x228>
 8008000:	210a      	movs	r1, #10
 8008002:	4494      	add	ip, r2
 8008004:	9a05      	ldr	r2, [sp, #20]
 8008006:	1810      	adds	r0, r2, r0
 8008008:	4282      	cmp	r2, r0
 800800a:	d11b      	bne.n	8008044 <_strtod_l+0x24c>
 800800c:	1c51      	adds	r1, r2, #1
 800800e:	9105      	str	r1, [sp, #20]
 8008010:	2a08      	cmp	r2, #8
 8008012:	dc25      	bgt.n	8008060 <_strtod_l+0x268>
 8008014:	220a      	movs	r2, #10
 8008016:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008018:	434a      	muls	r2, r1
 800801a:	189b      	adds	r3, r3, r2
 800801c:	2200      	movs	r2, #0
 800801e:	930a      	str	r3, [sp, #40]	; 0x28
 8008020:	0010      	movs	r0, r2
 8008022:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008024:	1c59      	adds	r1, r3, #1
 8008026:	911f      	str	r1, [sp, #124]	; 0x7c
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	001a      	movs	r2, r3
 800802c:	3a30      	subs	r2, #48	; 0x30
 800802e:	2a09      	cmp	r2, #9
 8008030:	d9e2      	bls.n	8007ff8 <_strtod_l+0x200>
 8008032:	2201      	movs	r2, #1
 8008034:	9207      	str	r2, [sp, #28]
 8008036:	e79d      	b.n	8007f74 <_strtod_l+0x17c>
 8008038:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800803a:	3001      	adds	r0, #1
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008040:	785b      	ldrb	r3, [r3, #1]
 8008042:	e7ce      	b.n	8007fe2 <_strtod_l+0x1ea>
 8008044:	3201      	adds	r2, #1
 8008046:	1e54      	subs	r4, r2, #1
 8008048:	2c08      	cmp	r4, #8
 800804a:	dc03      	bgt.n	8008054 <_strtod_l+0x25c>
 800804c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800804e:	434c      	muls	r4, r1
 8008050:	940a      	str	r4, [sp, #40]	; 0x28
 8008052:	e7d9      	b.n	8008008 <_strtod_l+0x210>
 8008054:	2a10      	cmp	r2, #16
 8008056:	dcd7      	bgt.n	8008008 <_strtod_l+0x210>
 8008058:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800805a:	434c      	muls	r4, r1
 800805c:	940b      	str	r4, [sp, #44]	; 0x2c
 800805e:	e7d3      	b.n	8008008 <_strtod_l+0x210>
 8008060:	9905      	ldr	r1, [sp, #20]
 8008062:	2200      	movs	r2, #0
 8008064:	2910      	cmp	r1, #16
 8008066:	dcdb      	bgt.n	8008020 <_strtod_l+0x228>
 8008068:	210a      	movs	r1, #10
 800806a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800806c:	4341      	muls	r1, r0
 800806e:	185b      	adds	r3, r3, r1
 8008070:	930b      	str	r3, [sp, #44]	; 0x2c
 8008072:	e7d5      	b.n	8008020 <_strtod_l+0x228>
 8008074:	9a08      	ldr	r2, [sp, #32]
 8008076:	4684      	mov	ip, r0
 8008078:	9205      	str	r2, [sp, #20]
 800807a:	e7d6      	b.n	800802a <_strtod_l+0x232>
 800807c:	2200      	movs	r2, #0
 800807e:	4694      	mov	ip, r2
 8008080:	9205      	str	r2, [sp, #20]
 8008082:	3201      	adds	r2, #1
 8008084:	e7d6      	b.n	8008034 <_strtod_l+0x23c>
 8008086:	000c      	movs	r4, r1
 8008088:	9b06      	ldr	r3, [sp, #24]
 800808a:	3302      	adds	r3, #2
 800808c:	931f      	str	r3, [sp, #124]	; 0x7c
 800808e:	9b06      	ldr	r3, [sp, #24]
 8008090:	789b      	ldrb	r3, [r3, #2]
 8008092:	001a      	movs	r2, r3
 8008094:	3a30      	subs	r2, #48	; 0x30
 8008096:	2a09      	cmp	r2, #9
 8008098:	d861      	bhi.n	800815e <_strtod_l+0x366>
 800809a:	2b30      	cmp	r3, #48	; 0x30
 800809c:	d042      	beq.n	8008124 <_strtod_l+0x32c>
 800809e:	001a      	movs	r2, r3
 80080a0:	3a31      	subs	r2, #49	; 0x31
 80080a2:	2100      	movs	r1, #0
 80080a4:	2a08      	cmp	r2, #8
 80080a6:	d816      	bhi.n	80080d6 <_strtod_l+0x2de>
 80080a8:	3b30      	subs	r3, #48	; 0x30
 80080aa:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80080ac:	930e      	str	r3, [sp, #56]	; 0x38
 80080ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080b0:	1c59      	adds	r1, r3, #1
 80080b2:	911f      	str	r1, [sp, #124]	; 0x7c
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	001a      	movs	r2, r3
 80080b8:	3a30      	subs	r2, #48	; 0x30
 80080ba:	2a09      	cmp	r2, #9
 80080bc:	d948      	bls.n	8008150 <_strtod_l+0x358>
 80080be:	1b4a      	subs	r2, r1, r5
 80080c0:	4d20      	ldr	r5, [pc, #128]	; (8008144 <_strtod_l+0x34c>)
 80080c2:	0029      	movs	r1, r5
 80080c4:	2a08      	cmp	r2, #8
 80080c6:	dc03      	bgt.n	80080d0 <_strtod_l+0x2d8>
 80080c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80080ca:	42a9      	cmp	r1, r5
 80080cc:	dd00      	ble.n	80080d0 <_strtod_l+0x2d8>
 80080ce:	0029      	movs	r1, r5
 80080d0:	2c00      	cmp	r4, #0
 80080d2:	d000      	beq.n	80080d6 <_strtod_l+0x2de>
 80080d4:	4249      	negs	r1, r1
 80080d6:	9a05      	ldr	r2, [sp, #20]
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d163      	bne.n	80081a4 <_strtod_l+0x3ac>
 80080dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080de:	4310      	orrs	r0, r2
 80080e0:	d000      	beq.n	80080e4 <_strtod_l+0x2ec>
 80080e2:	e6ca      	b.n	8007e7a <_strtod_l+0x82>
 80080e4:	9a07      	ldr	r2, [sp, #28]
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	d000      	beq.n	80080ec <_strtod_l+0x2f4>
 80080ea:	e6e6      	b.n	8007eba <_strtod_l+0xc2>
 80080ec:	2b4e      	cmp	r3, #78	; 0x4e
 80080ee:	d03f      	beq.n	8008170 <_strtod_l+0x378>
 80080f0:	dc39      	bgt.n	8008166 <_strtod_l+0x36e>
 80080f2:	2b49      	cmp	r3, #73	; 0x49
 80080f4:	d000      	beq.n	80080f8 <_strtod_l+0x300>
 80080f6:	e6e0      	b.n	8007eba <_strtod_l+0xc2>
 80080f8:	4913      	ldr	r1, [pc, #76]	; (8008148 <_strtod_l+0x350>)
 80080fa:	a81f      	add	r0, sp, #124	; 0x7c
 80080fc:	f001 f806 	bl	800910c <__match>
 8008100:	2800      	cmp	r0, #0
 8008102:	d100      	bne.n	8008106 <_strtod_l+0x30e>
 8008104:	e6d9      	b.n	8007eba <_strtod_l+0xc2>
 8008106:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008108:	4910      	ldr	r1, [pc, #64]	; (800814c <_strtod_l+0x354>)
 800810a:	3b01      	subs	r3, #1
 800810c:	a81f      	add	r0, sp, #124	; 0x7c
 800810e:	931f      	str	r3, [sp, #124]	; 0x7c
 8008110:	f000 fffc 	bl	800910c <__match>
 8008114:	2800      	cmp	r0, #0
 8008116:	d102      	bne.n	800811e <_strtod_l+0x326>
 8008118:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800811a:	3301      	adds	r3, #1
 800811c:	931f      	str	r3, [sp, #124]	; 0x7c
 800811e:	4f07      	ldr	r7, [pc, #28]	; (800813c <_strtod_l+0x344>)
 8008120:	2600      	movs	r6, #0
 8008122:	e6aa      	b.n	8007e7a <_strtod_l+0x82>
 8008124:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	921f      	str	r2, [sp, #124]	; 0x7c
 800812a:	785b      	ldrb	r3, [r3, #1]
 800812c:	e7b5      	b.n	800809a <_strtod_l+0x2a2>
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	0800a5c8 	.word	0x0800a5c8
 8008134:	ffefffff 	.word	0xffefffff
 8008138:	00000433 	.word	0x00000433
 800813c:	7ff00000 	.word	0x7ff00000
 8008140:	7fffffff 	.word	0x7fffffff
 8008144:	00004e1f 	.word	0x00004e1f
 8008148:	0800a5bc 	.word	0x0800a5bc
 800814c:	0800a5bf 	.word	0x0800a5bf
 8008150:	220a      	movs	r2, #10
 8008152:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008154:	434a      	muls	r2, r1
 8008156:	18d2      	adds	r2, r2, r3
 8008158:	3a30      	subs	r2, #48	; 0x30
 800815a:	920e      	str	r2, [sp, #56]	; 0x38
 800815c:	e7a7      	b.n	80080ae <_strtod_l+0x2b6>
 800815e:	9a06      	ldr	r2, [sp, #24]
 8008160:	2100      	movs	r1, #0
 8008162:	921f      	str	r2, [sp, #124]	; 0x7c
 8008164:	e7b7      	b.n	80080d6 <_strtod_l+0x2de>
 8008166:	2b69      	cmp	r3, #105	; 0x69
 8008168:	d0c6      	beq.n	80080f8 <_strtod_l+0x300>
 800816a:	2b6e      	cmp	r3, #110	; 0x6e
 800816c:	d000      	beq.n	8008170 <_strtod_l+0x378>
 800816e:	e6a4      	b.n	8007eba <_strtod_l+0xc2>
 8008170:	498b      	ldr	r1, [pc, #556]	; (80083a0 <_strtod_l+0x5a8>)
 8008172:	a81f      	add	r0, sp, #124	; 0x7c
 8008174:	f000 ffca 	bl	800910c <__match>
 8008178:	2800      	cmp	r0, #0
 800817a:	d100      	bne.n	800817e <_strtod_l+0x386>
 800817c:	e69d      	b.n	8007eba <_strtod_l+0xc2>
 800817e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b28      	cmp	r3, #40	; 0x28
 8008184:	d10c      	bne.n	80081a0 <_strtod_l+0x3a8>
 8008186:	aa22      	add	r2, sp, #136	; 0x88
 8008188:	4986      	ldr	r1, [pc, #536]	; (80083a4 <_strtod_l+0x5ac>)
 800818a:	a81f      	add	r0, sp, #124	; 0x7c
 800818c:	f000 ffd2 	bl	8009134 <__hexnan>
 8008190:	2805      	cmp	r0, #5
 8008192:	d105      	bne.n	80081a0 <_strtod_l+0x3a8>
 8008194:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008196:	4a84      	ldr	r2, [pc, #528]	; (80083a8 <_strtod_l+0x5b0>)
 8008198:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800819a:	431a      	orrs	r2, r3
 800819c:	0017      	movs	r7, r2
 800819e:	e66c      	b.n	8007e7a <_strtod_l+0x82>
 80081a0:	4f82      	ldr	r7, [pc, #520]	; (80083ac <_strtod_l+0x5b4>)
 80081a2:	e7bd      	b.n	8008120 <_strtod_l+0x328>
 80081a4:	4663      	mov	r3, ip
 80081a6:	1acb      	subs	r3, r1, r3
 80081a8:	9307      	str	r3, [sp, #28]
 80081aa:	9b08      	ldr	r3, [sp, #32]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <_strtod_l+0x3bc>
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	9308      	str	r3, [sp, #32]
 80081b4:	9c05      	ldr	r4, [sp, #20]
 80081b6:	2c10      	cmp	r4, #16
 80081b8:	dd00      	ble.n	80081bc <_strtod_l+0x3c4>
 80081ba:	2410      	movs	r4, #16
 80081bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80081be:	f7fa ff27 	bl	8003010 <__aeabi_ui2d>
 80081c2:	0006      	movs	r6, r0
 80081c4:	000f      	movs	r7, r1
 80081c6:	2c09      	cmp	r4, #9
 80081c8:	dd15      	ble.n	80081f6 <_strtod_l+0x3fe>
 80081ca:	0022      	movs	r2, r4
 80081cc:	4b78      	ldr	r3, [pc, #480]	; (80083b0 <_strtod_l+0x5b8>)
 80081ce:	3a09      	subs	r2, #9
 80081d0:	00d2      	lsls	r2, r2, #3
 80081d2:	189b      	adds	r3, r3, r2
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f7fa f8ee 	bl	80023b8 <__aeabi_dmul>
 80081dc:	0006      	movs	r6, r0
 80081de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80081e0:	000f      	movs	r7, r1
 80081e2:	f7fa ff15 	bl	8003010 <__aeabi_ui2d>
 80081e6:	0002      	movs	r2, r0
 80081e8:	000b      	movs	r3, r1
 80081ea:	0030      	movs	r0, r6
 80081ec:	0039      	movs	r1, r7
 80081ee:	f7f9 f99f 	bl	8001530 <__aeabi_dadd>
 80081f2:	0006      	movs	r6, r0
 80081f4:	000f      	movs	r7, r1
 80081f6:	9b05      	ldr	r3, [sp, #20]
 80081f8:	2b0f      	cmp	r3, #15
 80081fa:	dc39      	bgt.n	8008270 <_strtod_l+0x478>
 80081fc:	9b07      	ldr	r3, [sp, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d100      	bne.n	8008204 <_strtod_l+0x40c>
 8008202:	e63a      	b.n	8007e7a <_strtod_l+0x82>
 8008204:	dd26      	ble.n	8008254 <_strtod_l+0x45c>
 8008206:	2b16      	cmp	r3, #22
 8008208:	dc0b      	bgt.n	8008222 <_strtod_l+0x42a>
 800820a:	4969      	ldr	r1, [pc, #420]	; (80083b0 <_strtod_l+0x5b8>)
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	18c9      	adds	r1, r1, r3
 8008210:	0032      	movs	r2, r6
 8008212:	6808      	ldr	r0, [r1, #0]
 8008214:	6849      	ldr	r1, [r1, #4]
 8008216:	003b      	movs	r3, r7
 8008218:	f7fa f8ce 	bl	80023b8 <__aeabi_dmul>
 800821c:	0006      	movs	r6, r0
 800821e:	000f      	movs	r7, r1
 8008220:	e62b      	b.n	8007e7a <_strtod_l+0x82>
 8008222:	2325      	movs	r3, #37	; 0x25
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	9a07      	ldr	r2, [sp, #28]
 800822a:	429a      	cmp	r2, r3
 800822c:	dc20      	bgt.n	8008270 <_strtod_l+0x478>
 800822e:	240f      	movs	r4, #15
 8008230:	9b05      	ldr	r3, [sp, #20]
 8008232:	4d5f      	ldr	r5, [pc, #380]	; (80083b0 <_strtod_l+0x5b8>)
 8008234:	1ae4      	subs	r4, r4, r3
 8008236:	00e1      	lsls	r1, r4, #3
 8008238:	1869      	adds	r1, r5, r1
 800823a:	0032      	movs	r2, r6
 800823c:	6808      	ldr	r0, [r1, #0]
 800823e:	6849      	ldr	r1, [r1, #4]
 8008240:	003b      	movs	r3, r7
 8008242:	f7fa f8b9 	bl	80023b8 <__aeabi_dmul>
 8008246:	9b07      	ldr	r3, [sp, #28]
 8008248:	1b1c      	subs	r4, r3, r4
 800824a:	00e4      	lsls	r4, r4, #3
 800824c:	192c      	adds	r4, r5, r4
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	6863      	ldr	r3, [r4, #4]
 8008252:	e7e1      	b.n	8008218 <_strtod_l+0x420>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	3316      	adds	r3, #22
 8008258:	db0a      	blt.n	8008270 <_strtod_l+0x478>
 800825a:	9b07      	ldr	r3, [sp, #28]
 800825c:	0030      	movs	r0, r6
 800825e:	00da      	lsls	r2, r3, #3
 8008260:	4b53      	ldr	r3, [pc, #332]	; (80083b0 <_strtod_l+0x5b8>)
 8008262:	0039      	movs	r1, r7
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f7f9 fc71 	bl	8001b50 <__aeabi_ddiv>
 800826e:	e7d5      	b.n	800821c <_strtod_l+0x424>
 8008270:	9b05      	ldr	r3, [sp, #20]
 8008272:	1b1c      	subs	r4, r3, r4
 8008274:	9b07      	ldr	r3, [sp, #28]
 8008276:	18e4      	adds	r4, r4, r3
 8008278:	2c00      	cmp	r4, #0
 800827a:	dd6e      	ble.n	800835a <_strtod_l+0x562>
 800827c:	230f      	movs	r3, #15
 800827e:	4023      	ands	r3, r4
 8008280:	d00a      	beq.n	8008298 <_strtod_l+0x4a0>
 8008282:	494b      	ldr	r1, [pc, #300]	; (80083b0 <_strtod_l+0x5b8>)
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	18c9      	adds	r1, r1, r3
 8008288:	0032      	movs	r2, r6
 800828a:	6808      	ldr	r0, [r1, #0]
 800828c:	6849      	ldr	r1, [r1, #4]
 800828e:	003b      	movs	r3, r7
 8008290:	f7fa f892 	bl	80023b8 <__aeabi_dmul>
 8008294:	0006      	movs	r6, r0
 8008296:	000f      	movs	r7, r1
 8008298:	230f      	movs	r3, #15
 800829a:	439c      	bics	r4, r3
 800829c:	d048      	beq.n	8008330 <_strtod_l+0x538>
 800829e:	3326      	adds	r3, #38	; 0x26
 80082a0:	33ff      	adds	r3, #255	; 0xff
 80082a2:	429c      	cmp	r4, r3
 80082a4:	dd21      	ble.n	80082ea <_strtod_l+0x4f2>
 80082a6:	2400      	movs	r4, #0
 80082a8:	9405      	str	r4, [sp, #20]
 80082aa:	940a      	str	r4, [sp, #40]	; 0x28
 80082ac:	9407      	str	r4, [sp, #28]
 80082ae:	2322      	movs	r3, #34	; 0x22
 80082b0:	2600      	movs	r6, #0
 80082b2:	9a04      	ldr	r2, [sp, #16]
 80082b4:	4f3c      	ldr	r7, [pc, #240]	; (80083a8 <_strtod_l+0x5b0>)
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ba:	42b3      	cmp	r3, r6
 80082bc:	d100      	bne.n	80082c0 <_strtod_l+0x4c8>
 80082be:	e5dc      	b.n	8007e7a <_strtod_l+0x82>
 80082c0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80082c2:	9804      	ldr	r0, [sp, #16]
 80082c4:	f001 f81e 	bl	8009304 <_Bfree>
 80082c8:	9907      	ldr	r1, [sp, #28]
 80082ca:	9804      	ldr	r0, [sp, #16]
 80082cc:	f001 f81a 	bl	8009304 <_Bfree>
 80082d0:	9905      	ldr	r1, [sp, #20]
 80082d2:	9804      	ldr	r0, [sp, #16]
 80082d4:	f001 f816 	bl	8009304 <_Bfree>
 80082d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082da:	9804      	ldr	r0, [sp, #16]
 80082dc:	f001 f812 	bl	8009304 <_Bfree>
 80082e0:	0021      	movs	r1, r4
 80082e2:	9804      	ldr	r0, [sp, #16]
 80082e4:	f001 f80e 	bl	8009304 <_Bfree>
 80082e8:	e5c7      	b.n	8007e7a <_strtod_l+0x82>
 80082ea:	2300      	movs	r3, #0
 80082ec:	0030      	movs	r0, r6
 80082ee:	0039      	movs	r1, r7
 80082f0:	001d      	movs	r5, r3
 80082f2:	1124      	asrs	r4, r4, #4
 80082f4:	2c01      	cmp	r4, #1
 80082f6:	dc1e      	bgt.n	8008336 <_strtod_l+0x53e>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <_strtod_l+0x508>
 80082fc:	0006      	movs	r6, r0
 80082fe:	000f      	movs	r7, r1
 8008300:	4b2c      	ldr	r3, [pc, #176]	; (80083b4 <_strtod_l+0x5bc>)
 8008302:	00ed      	lsls	r5, r5, #3
 8008304:	18ff      	adds	r7, r7, r3
 8008306:	4b2c      	ldr	r3, [pc, #176]	; (80083b8 <_strtod_l+0x5c0>)
 8008308:	0032      	movs	r2, r6
 800830a:	195d      	adds	r5, r3, r5
 800830c:	6828      	ldr	r0, [r5, #0]
 800830e:	6869      	ldr	r1, [r5, #4]
 8008310:	003b      	movs	r3, r7
 8008312:	f7fa f851 	bl	80023b8 <__aeabi_dmul>
 8008316:	4b24      	ldr	r3, [pc, #144]	; (80083a8 <_strtod_l+0x5b0>)
 8008318:	000f      	movs	r7, r1
 800831a:	400b      	ands	r3, r1
 800831c:	4927      	ldr	r1, [pc, #156]	; (80083bc <_strtod_l+0x5c4>)
 800831e:	0006      	movs	r6, r0
 8008320:	428b      	cmp	r3, r1
 8008322:	d8c0      	bhi.n	80082a6 <_strtod_l+0x4ae>
 8008324:	4926      	ldr	r1, [pc, #152]	; (80083c0 <_strtod_l+0x5c8>)
 8008326:	428b      	cmp	r3, r1
 8008328:	d913      	bls.n	8008352 <_strtod_l+0x55a>
 800832a:	2601      	movs	r6, #1
 800832c:	4f25      	ldr	r7, [pc, #148]	; (80083c4 <_strtod_l+0x5cc>)
 800832e:	4276      	negs	r6, r6
 8008330:	2300      	movs	r3, #0
 8008332:	9306      	str	r3, [sp, #24]
 8008334:	e074      	b.n	8008420 <_strtod_l+0x628>
 8008336:	2201      	movs	r2, #1
 8008338:	4214      	tst	r4, r2
 800833a:	d007      	beq.n	800834c <_strtod_l+0x554>
 800833c:	4a1e      	ldr	r2, [pc, #120]	; (80083b8 <_strtod_l+0x5c0>)
 800833e:	00eb      	lsls	r3, r5, #3
 8008340:	189b      	adds	r3, r3, r2
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f7fa f837 	bl	80023b8 <__aeabi_dmul>
 800834a:	2301      	movs	r3, #1
 800834c:	3501      	adds	r5, #1
 800834e:	1064      	asrs	r4, r4, #1
 8008350:	e7d0      	b.n	80082f4 <_strtod_l+0x4fc>
 8008352:	23d4      	movs	r3, #212	; 0xd4
 8008354:	049b      	lsls	r3, r3, #18
 8008356:	18ff      	adds	r7, r7, r3
 8008358:	e7ea      	b.n	8008330 <_strtod_l+0x538>
 800835a:	2c00      	cmp	r4, #0
 800835c:	d0e8      	beq.n	8008330 <_strtod_l+0x538>
 800835e:	230f      	movs	r3, #15
 8008360:	4264      	negs	r4, r4
 8008362:	4023      	ands	r3, r4
 8008364:	d00a      	beq.n	800837c <_strtod_l+0x584>
 8008366:	4a12      	ldr	r2, [pc, #72]	; (80083b0 <_strtod_l+0x5b8>)
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	18d3      	adds	r3, r2, r3
 800836c:	0030      	movs	r0, r6
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	0039      	movs	r1, r7
 8008374:	f7f9 fbec 	bl	8001b50 <__aeabi_ddiv>
 8008378:	0006      	movs	r6, r0
 800837a:	000f      	movs	r7, r1
 800837c:	1124      	asrs	r4, r4, #4
 800837e:	d0d7      	beq.n	8008330 <_strtod_l+0x538>
 8008380:	2c1f      	cmp	r4, #31
 8008382:	dd21      	ble.n	80083c8 <_strtod_l+0x5d0>
 8008384:	2400      	movs	r4, #0
 8008386:	9405      	str	r4, [sp, #20]
 8008388:	940a      	str	r4, [sp, #40]	; 0x28
 800838a:	9407      	str	r4, [sp, #28]
 800838c:	2322      	movs	r3, #34	; 0x22
 800838e:	9a04      	ldr	r2, [sp, #16]
 8008390:	2600      	movs	r6, #0
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008396:	2700      	movs	r7, #0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d191      	bne.n	80082c0 <_strtod_l+0x4c8>
 800839c:	e56d      	b.n	8007e7a <_strtod_l+0x82>
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	0800a5c5 	.word	0x0800a5c5
 80083a4:	0800a5dc 	.word	0x0800a5dc
 80083a8:	7ff00000 	.word	0x7ff00000
 80083ac:	fff80000 	.word	0xfff80000
 80083b0:	0800a650 	.word	0x0800a650
 80083b4:	fcb00000 	.word	0xfcb00000
 80083b8:	0800a628 	.word	0x0800a628
 80083bc:	7ca00000 	.word	0x7ca00000
 80083c0:	7c900000 	.word	0x7c900000
 80083c4:	7fefffff 	.word	0x7fefffff
 80083c8:	2310      	movs	r3, #16
 80083ca:	4023      	ands	r3, r4
 80083cc:	9306      	str	r3, [sp, #24]
 80083ce:	d001      	beq.n	80083d4 <_strtod_l+0x5dc>
 80083d0:	236a      	movs	r3, #106	; 0x6a
 80083d2:	9306      	str	r3, [sp, #24]
 80083d4:	0030      	movs	r0, r6
 80083d6:	0039      	movs	r1, r7
 80083d8:	2300      	movs	r3, #0
 80083da:	4dca      	ldr	r5, [pc, #808]	; (8008704 <_strtod_l+0x90c>)
 80083dc:	2c00      	cmp	r4, #0
 80083de:	dd00      	ble.n	80083e2 <_strtod_l+0x5ea>
 80083e0:	e103      	b.n	80085ea <_strtod_l+0x7f2>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <_strtod_l+0x5f2>
 80083e6:	0006      	movs	r6, r0
 80083e8:	000f      	movs	r7, r1
 80083ea:	9b06      	ldr	r3, [sp, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00f      	beq.n	8008410 <_strtod_l+0x618>
 80083f0:	236b      	movs	r3, #107	; 0x6b
 80083f2:	0079      	lsls	r1, r7, #1
 80083f4:	0d49      	lsrs	r1, r1, #21
 80083f6:	003a      	movs	r2, r7
 80083f8:	1a5b      	subs	r3, r3, r1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dd08      	ble.n	8008410 <_strtod_l+0x618>
 80083fe:	2b1f      	cmp	r3, #31
 8008400:	dc00      	bgt.n	8008404 <_strtod_l+0x60c>
 8008402:	e104      	b.n	800860e <_strtod_l+0x816>
 8008404:	2600      	movs	r6, #0
 8008406:	2b34      	cmp	r3, #52	; 0x34
 8008408:	dc00      	bgt.n	800840c <_strtod_l+0x614>
 800840a:	e0f9      	b.n	8008600 <_strtod_l+0x808>
 800840c:	27dc      	movs	r7, #220	; 0xdc
 800840e:	04bf      	lsls	r7, r7, #18
 8008410:	2200      	movs	r2, #0
 8008412:	2300      	movs	r3, #0
 8008414:	0030      	movs	r0, r6
 8008416:	0039      	movs	r1, r7
 8008418:	f7f8 f818 	bl	800044c <__aeabi_dcmpeq>
 800841c:	2800      	cmp	r0, #0
 800841e:	d1b1      	bne.n	8008384 <_strtod_l+0x58c>
 8008420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008422:	9a08      	ldr	r2, [sp, #32]
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008428:	9b05      	ldr	r3, [sp, #20]
 800842a:	9804      	ldr	r0, [sp, #16]
 800842c:	f000 ffbf 	bl	80093ae <__s2b>
 8008430:	900a      	str	r0, [sp, #40]	; 0x28
 8008432:	2800      	cmp	r0, #0
 8008434:	d100      	bne.n	8008438 <_strtod_l+0x640>
 8008436:	e736      	b.n	80082a6 <_strtod_l+0x4ae>
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	2400      	movs	r4, #0
 800843c:	17da      	asrs	r2, r3, #31
 800843e:	425b      	negs	r3, r3
 8008440:	401a      	ands	r2, r3
 8008442:	9b07      	ldr	r3, [sp, #28]
 8008444:	9215      	str	r2, [sp, #84]	; 0x54
 8008446:	43db      	mvns	r3, r3
 8008448:	9a07      	ldr	r2, [sp, #28]
 800844a:	17db      	asrs	r3, r3, #31
 800844c:	401a      	ands	r2, r3
 800844e:	9213      	str	r2, [sp, #76]	; 0x4c
 8008450:	9405      	str	r4, [sp, #20]
 8008452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008454:	9804      	ldr	r0, [sp, #16]
 8008456:	6859      	ldr	r1, [r3, #4]
 8008458:	f000 ff1c 	bl	8009294 <_Balloc>
 800845c:	9007      	str	r0, [sp, #28]
 800845e:	2800      	cmp	r0, #0
 8008460:	d100      	bne.n	8008464 <_strtod_l+0x66c>
 8008462:	e724      	b.n	80082ae <_strtod_l+0x4b6>
 8008464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008466:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	310c      	adds	r1, #12
 800846c:	1c9a      	adds	r2, r3, #2
 800846e:	0092      	lsls	r2, r2, #2
 8008470:	300c      	adds	r0, #12
 8008472:	9308      	str	r3, [sp, #32]
 8008474:	f7ff fbbc 	bl	8007bf0 <memcpy>
 8008478:	ab22      	add	r3, sp, #136	; 0x88
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	ab21      	add	r3, sp, #132	; 0x84
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	0032      	movs	r2, r6
 8008482:	003b      	movs	r3, r7
 8008484:	9804      	ldr	r0, [sp, #16]
 8008486:	960e      	str	r6, [sp, #56]	; 0x38
 8008488:	970f      	str	r7, [sp, #60]	; 0x3c
 800848a:	f001 fa43 	bl	8009914 <__d2b>
 800848e:	9020      	str	r0, [sp, #128]	; 0x80
 8008490:	2800      	cmp	r0, #0
 8008492:	d100      	bne.n	8008496 <_strtod_l+0x69e>
 8008494:	e70b      	b.n	80082ae <_strtod_l+0x4b6>
 8008496:	2101      	movs	r1, #1
 8008498:	9804      	ldr	r0, [sp, #16]
 800849a:	f001 f810 	bl	80094be <__i2b>
 800849e:	9005      	str	r0, [sp, #20]
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d100      	bne.n	80084a6 <_strtod_l+0x6ae>
 80084a4:	e703      	b.n	80082ae <_strtod_l+0x4b6>
 80084a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	da00      	bge.n	80084ae <_strtod_l+0x6b6>
 80084ac:	e0b4      	b.n	8008618 <_strtod_l+0x820>
 80084ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084b0:	18d5      	adds	r5, r2, r3
 80084b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084b4:	4694      	mov	ip, r2
 80084b6:	9906      	ldr	r1, [sp, #24]
 80084b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084ba:	1a5b      	subs	r3, r3, r1
 80084bc:	2136      	movs	r1, #54	; 0x36
 80084be:	189b      	adds	r3, r3, r2
 80084c0:	1a8a      	subs	r2, r1, r2
 80084c2:	4991      	ldr	r1, [pc, #580]	; (8008708 <_strtod_l+0x910>)
 80084c4:	3b01      	subs	r3, #1
 80084c6:	2001      	movs	r0, #1
 80084c8:	428b      	cmp	r3, r1
 80084ca:	db00      	blt.n	80084ce <_strtod_l+0x6d6>
 80084cc:	e0b0      	b.n	8008630 <_strtod_l+0x838>
 80084ce:	1ac9      	subs	r1, r1, r3
 80084d0:	1a52      	subs	r2, r2, r1
 80084d2:	291f      	cmp	r1, #31
 80084d4:	dd00      	ble.n	80084d8 <_strtod_l+0x6e0>
 80084d6:	e0a4      	b.n	8008622 <_strtod_l+0x82a>
 80084d8:	4088      	lsls	r0, r1
 80084da:	2300      	movs	r3, #0
 80084dc:	9014      	str	r0, [sp, #80]	; 0x50
 80084de:	930c      	str	r3, [sp, #48]	; 0x30
 80084e0:	18ab      	adds	r3, r5, r2
 80084e2:	9308      	str	r3, [sp, #32]
 80084e4:	0013      	movs	r3, r2
 80084e6:	9a06      	ldr	r2, [sp, #24]
 80084e8:	4463      	add	r3, ip
 80084ea:	18d3      	adds	r3, r2, r3
 80084ec:	9a08      	ldr	r2, [sp, #32]
 80084ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f0:	002b      	movs	r3, r5
 80084f2:	4295      	cmp	r5, r2
 80084f4:	dd00      	ble.n	80084f8 <_strtod_l+0x700>
 80084f6:	0013      	movs	r3, r2
 80084f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084fa:	4293      	cmp	r3, r2
 80084fc:	dd00      	ble.n	8008500 <_strtod_l+0x708>
 80084fe:	0013      	movs	r3, r2
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd06      	ble.n	8008512 <_strtod_l+0x71a>
 8008504:	9a08      	ldr	r2, [sp, #32]
 8008506:	1aed      	subs	r5, r5, r3
 8008508:	1ad2      	subs	r2, r2, r3
 800850a:	9208      	str	r2, [sp, #32]
 800850c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	920b      	str	r2, [sp, #44]	; 0x2c
 8008512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008514:	2b00      	cmp	r3, #0
 8008516:	d017      	beq.n	8008548 <_strtod_l+0x750>
 8008518:	001a      	movs	r2, r3
 800851a:	9905      	ldr	r1, [sp, #20]
 800851c:	9804      	ldr	r0, [sp, #16]
 800851e:	f001 f867 	bl	80095f0 <__pow5mult>
 8008522:	9005      	str	r0, [sp, #20]
 8008524:	2800      	cmp	r0, #0
 8008526:	d100      	bne.n	800852a <_strtod_l+0x732>
 8008528:	e6c1      	b.n	80082ae <_strtod_l+0x4b6>
 800852a:	0001      	movs	r1, r0
 800852c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800852e:	9804      	ldr	r0, [sp, #16]
 8008530:	f000 ffce 	bl	80094d0 <__multiply>
 8008534:	901b      	str	r0, [sp, #108]	; 0x6c
 8008536:	2800      	cmp	r0, #0
 8008538:	d100      	bne.n	800853c <_strtod_l+0x744>
 800853a:	e6b8      	b.n	80082ae <_strtod_l+0x4b6>
 800853c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800853e:	9804      	ldr	r0, [sp, #16]
 8008540:	f000 fee0 	bl	8009304 <_Bfree>
 8008544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008546:	9320      	str	r3, [sp, #128]	; 0x80
 8008548:	9b08      	ldr	r3, [sp, #32]
 800854a:	2b00      	cmp	r3, #0
 800854c:	dc73      	bgt.n	8008636 <_strtod_l+0x83e>
 800854e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d179      	bne.n	8008648 <_strtod_l+0x850>
 8008554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008556:	2b00      	cmp	r3, #0
 8008558:	dd08      	ble.n	800856c <_strtod_l+0x774>
 800855a:	001a      	movs	r2, r3
 800855c:	9907      	ldr	r1, [sp, #28]
 800855e:	9804      	ldr	r0, [sp, #16]
 8008560:	f001 f898 	bl	8009694 <__lshift>
 8008564:	9007      	str	r0, [sp, #28]
 8008566:	2800      	cmp	r0, #0
 8008568:	d100      	bne.n	800856c <_strtod_l+0x774>
 800856a:	e6a0      	b.n	80082ae <_strtod_l+0x4b6>
 800856c:	2d00      	cmp	r5, #0
 800856e:	dd08      	ble.n	8008582 <_strtod_l+0x78a>
 8008570:	002a      	movs	r2, r5
 8008572:	9905      	ldr	r1, [sp, #20]
 8008574:	9804      	ldr	r0, [sp, #16]
 8008576:	f001 f88d 	bl	8009694 <__lshift>
 800857a:	9005      	str	r0, [sp, #20]
 800857c:	2800      	cmp	r0, #0
 800857e:	d100      	bne.n	8008582 <_strtod_l+0x78a>
 8008580:	e695      	b.n	80082ae <_strtod_l+0x4b6>
 8008582:	9a07      	ldr	r2, [sp, #28]
 8008584:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008586:	9804      	ldr	r0, [sp, #16]
 8008588:	f001 f8ee 	bl	8009768 <__mdiff>
 800858c:	1e04      	subs	r4, r0, #0
 800858e:	d100      	bne.n	8008592 <_strtod_l+0x79a>
 8008590:	e68d      	b.n	80082ae <_strtod_l+0x4b6>
 8008592:	2500      	movs	r5, #0
 8008594:	68c3      	ldr	r3, [r0, #12]
 8008596:	9905      	ldr	r1, [sp, #20]
 8008598:	60c5      	str	r5, [r0, #12]
 800859a:	930b      	str	r3, [sp, #44]	; 0x2c
 800859c:	f001 f8cb 	bl	8009736 <__mcmp>
 80085a0:	42a8      	cmp	r0, r5
 80085a2:	da5b      	bge.n	800865c <_strtod_l+0x864>
 80085a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a6:	42ab      	cmp	r3, r5
 80085a8:	d11b      	bne.n	80085e2 <_strtod_l+0x7ea>
 80085aa:	42ae      	cmp	r6, r5
 80085ac:	d119      	bne.n	80085e2 <_strtod_l+0x7ea>
 80085ae:	033b      	lsls	r3, r7, #12
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	d116      	bne.n	80085e2 <_strtod_l+0x7ea>
 80085b4:	22d6      	movs	r2, #214	; 0xd6
 80085b6:	4b55      	ldr	r3, [pc, #340]	; (800870c <_strtod_l+0x914>)
 80085b8:	04d2      	lsls	r2, r2, #19
 80085ba:	403b      	ands	r3, r7
 80085bc:	4293      	cmp	r3, r2
 80085be:	d910      	bls.n	80085e2 <_strtod_l+0x7ea>
 80085c0:	6963      	ldr	r3, [r4, #20]
 80085c2:	42ab      	cmp	r3, r5
 80085c4:	d102      	bne.n	80085cc <_strtod_l+0x7d4>
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	dd0a      	ble.n	80085e2 <_strtod_l+0x7ea>
 80085cc:	0021      	movs	r1, r4
 80085ce:	2201      	movs	r2, #1
 80085d0:	9804      	ldr	r0, [sp, #16]
 80085d2:	f001 f85f 	bl	8009694 <__lshift>
 80085d6:	9905      	ldr	r1, [sp, #20]
 80085d8:	0004      	movs	r4, r0
 80085da:	f001 f8ac 	bl	8009736 <__mcmp>
 80085de:	2800      	cmp	r0, #0
 80085e0:	dc6c      	bgt.n	80086bc <_strtod_l+0x8c4>
 80085e2:	9b06      	ldr	r3, [sp, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d178      	bne.n	80086da <_strtod_l+0x8e2>
 80085e8:	e66a      	b.n	80082c0 <_strtod_l+0x4c8>
 80085ea:	2201      	movs	r2, #1
 80085ec:	4214      	tst	r4, r2
 80085ee:	d004      	beq.n	80085fa <_strtod_l+0x802>
 80085f0:	682a      	ldr	r2, [r5, #0]
 80085f2:	686b      	ldr	r3, [r5, #4]
 80085f4:	f7f9 fee0 	bl	80023b8 <__aeabi_dmul>
 80085f8:	2301      	movs	r3, #1
 80085fa:	1064      	asrs	r4, r4, #1
 80085fc:	3508      	adds	r5, #8
 80085fe:	e6ed      	b.n	80083dc <_strtod_l+0x5e4>
 8008600:	2101      	movs	r1, #1
 8008602:	3b20      	subs	r3, #32
 8008604:	4249      	negs	r1, r1
 8008606:	4099      	lsls	r1, r3
 8008608:	400a      	ands	r2, r1
 800860a:	0017      	movs	r7, r2
 800860c:	e700      	b.n	8008410 <_strtod_l+0x618>
 800860e:	2201      	movs	r2, #1
 8008610:	4252      	negs	r2, r2
 8008612:	409a      	lsls	r2, r3
 8008614:	4016      	ands	r6, r2
 8008616:	e6fb      	b.n	8008410 <_strtod_l+0x618>
 8008618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800861a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800861c:	1ad2      	subs	r2, r2, r3
 800861e:	4694      	mov	ip, r2
 8008620:	e749      	b.n	80084b6 <_strtod_l+0x6be>
 8008622:	493b      	ldr	r1, [pc, #236]	; (8008710 <_strtod_l+0x918>)
 8008624:	1acb      	subs	r3, r1, r3
 8008626:	0001      	movs	r1, r0
 8008628:	4099      	lsls	r1, r3
 800862a:	910c      	str	r1, [sp, #48]	; 0x30
 800862c:	9014      	str	r0, [sp, #80]	; 0x50
 800862e:	e757      	b.n	80084e0 <_strtod_l+0x6e8>
 8008630:	2300      	movs	r3, #0
 8008632:	930c      	str	r3, [sp, #48]	; 0x30
 8008634:	e7fa      	b.n	800862c <_strtod_l+0x834>
 8008636:	9a08      	ldr	r2, [sp, #32]
 8008638:	9920      	ldr	r1, [sp, #128]	; 0x80
 800863a:	9804      	ldr	r0, [sp, #16]
 800863c:	f001 f82a 	bl	8009694 <__lshift>
 8008640:	9020      	str	r0, [sp, #128]	; 0x80
 8008642:	2800      	cmp	r0, #0
 8008644:	d183      	bne.n	800854e <_strtod_l+0x756>
 8008646:	e632      	b.n	80082ae <_strtod_l+0x4b6>
 8008648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800864a:	9907      	ldr	r1, [sp, #28]
 800864c:	9804      	ldr	r0, [sp, #16]
 800864e:	f000 ffcf 	bl	80095f0 <__pow5mult>
 8008652:	9007      	str	r0, [sp, #28]
 8008654:	2800      	cmp	r0, #0
 8008656:	d000      	beq.n	800865a <_strtod_l+0x862>
 8008658:	e77c      	b.n	8008554 <_strtod_l+0x75c>
 800865a:	e628      	b.n	80082ae <_strtod_l+0x4b6>
 800865c:	2800      	cmp	r0, #0
 800865e:	d000      	beq.n	8008662 <_strtod_l+0x86a>
 8008660:	e095      	b.n	800878e <_strtod_l+0x996>
 8008662:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008664:	033b      	lsls	r3, r7, #12
 8008666:	2a00      	cmp	r2, #0
 8008668:	d024      	beq.n	80086b4 <_strtod_l+0x8bc>
 800866a:	492a      	ldr	r1, [pc, #168]	; (8008714 <_strtod_l+0x91c>)
 800866c:	003a      	movs	r2, r7
 800866e:	0b1b      	lsrs	r3, r3, #12
 8008670:	428b      	cmp	r3, r1
 8008672:	d15e      	bne.n	8008732 <_strtod_l+0x93a>
 8008674:	9b06      	ldr	r3, [sp, #24]
 8008676:	3801      	subs	r0, #1
 8008678:	46b4      	mov	ip, r6
 800867a:	0001      	movs	r1, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00a      	beq.n	8008696 <_strtod_l+0x89e>
 8008680:	25d4      	movs	r5, #212	; 0xd4
 8008682:	4b22      	ldr	r3, [pc, #136]	; (800870c <_strtod_l+0x914>)
 8008684:	04ed      	lsls	r5, r5, #19
 8008686:	403b      	ands	r3, r7
 8008688:	42ab      	cmp	r3, r5
 800868a:	d804      	bhi.n	8008696 <_strtod_l+0x89e>
 800868c:	316c      	adds	r1, #108	; 0x6c
 800868e:	0d1b      	lsrs	r3, r3, #20
 8008690:	1acb      	subs	r3, r1, r3
 8008692:	0001      	movs	r1, r0
 8008694:	4099      	lsls	r1, r3
 8008696:	4561      	cmp	r1, ip
 8008698:	d14b      	bne.n	8008732 <_strtod_l+0x93a>
 800869a:	4b1f      	ldr	r3, [pc, #124]	; (8008718 <_strtod_l+0x920>)
 800869c:	429a      	cmp	r2, r3
 800869e:	d102      	bne.n	80086a6 <_strtod_l+0x8ae>
 80086a0:	1c4b      	adds	r3, r1, #1
 80086a2:	d100      	bne.n	80086a6 <_strtod_l+0x8ae>
 80086a4:	e603      	b.n	80082ae <_strtod_l+0x4b6>
 80086a6:	4b19      	ldr	r3, [pc, #100]	; (800870c <_strtod_l+0x914>)
 80086a8:	2600      	movs	r6, #0
 80086aa:	401a      	ands	r2, r3
 80086ac:	2380      	movs	r3, #128	; 0x80
 80086ae:	035b      	lsls	r3, r3, #13
 80086b0:	18d7      	adds	r7, r2, r3
 80086b2:	e796      	b.n	80085e2 <_strtod_l+0x7ea>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d13c      	bne.n	8008732 <_strtod_l+0x93a>
 80086b8:	2e00      	cmp	r6, #0
 80086ba:	d13a      	bne.n	8008732 <_strtod_l+0x93a>
 80086bc:	9a06      	ldr	r2, [sp, #24]
 80086be:	4b13      	ldr	r3, [pc, #76]	; (800870c <_strtod_l+0x914>)
 80086c0:	2a00      	cmp	r2, #0
 80086c2:	d02d      	beq.n	8008720 <_strtod_l+0x928>
 80086c4:	001a      	movs	r2, r3
 80086c6:	21d6      	movs	r1, #214	; 0xd6
 80086c8:	403a      	ands	r2, r7
 80086ca:	04c9      	lsls	r1, r1, #19
 80086cc:	428a      	cmp	r2, r1
 80086ce:	dc27      	bgt.n	8008720 <_strtod_l+0x928>
 80086d0:	23dc      	movs	r3, #220	; 0xdc
 80086d2:	049b      	lsls	r3, r3, #18
 80086d4:	429a      	cmp	r2, r3
 80086d6:	dc00      	bgt.n	80086da <_strtod_l+0x8e2>
 80086d8:	e658      	b.n	800838c <_strtod_l+0x594>
 80086da:	4b10      	ldr	r3, [pc, #64]	; (800871c <_strtod_l+0x924>)
 80086dc:	0030      	movs	r0, r6
 80086de:	9311      	str	r3, [sp, #68]	; 0x44
 80086e0:	2300      	movs	r3, #0
 80086e2:	9310      	str	r3, [sp, #64]	; 0x40
 80086e4:	0039      	movs	r1, r7
 80086e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086ea:	f7f9 fe65 	bl	80023b8 <__aeabi_dmul>
 80086ee:	0006      	movs	r6, r0
 80086f0:	1e0f      	subs	r7, r1, #0
 80086f2:	d000      	beq.n	80086f6 <_strtod_l+0x8fe>
 80086f4:	e5e4      	b.n	80082c0 <_strtod_l+0x4c8>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d000      	beq.n	80086fc <_strtod_l+0x904>
 80086fa:	e5e1      	b.n	80082c0 <_strtod_l+0x4c8>
 80086fc:	2322      	movs	r3, #34	; 0x22
 80086fe:	9a04      	ldr	r2, [sp, #16]
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	e5dd      	b.n	80082c0 <_strtod_l+0x4c8>
 8008704:	0800a5f0 	.word	0x0800a5f0
 8008708:	fffffc02 	.word	0xfffffc02
 800870c:	7ff00000 	.word	0x7ff00000
 8008710:	fffffbe2 	.word	0xfffffbe2
 8008714:	000fffff 	.word	0x000fffff
 8008718:	7fefffff 	.word	0x7fefffff
 800871c:	39500000 	.word	0x39500000
 8008720:	2601      	movs	r6, #1
 8008722:	4aa9      	ldr	r2, [pc, #676]	; (80089c8 <_strtod_l+0xbd0>)
 8008724:	403b      	ands	r3, r7
 8008726:	189b      	adds	r3, r3, r2
 8008728:	4aa8      	ldr	r2, [pc, #672]	; (80089cc <_strtod_l+0xbd4>)
 800872a:	4276      	negs	r6, r6
 800872c:	431a      	orrs	r2, r3
 800872e:	0017      	movs	r7, r2
 8008730:	e757      	b.n	80085e2 <_strtod_l+0x7ea>
 8008732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008734:	2b00      	cmp	r3, #0
 8008736:	d013      	beq.n	8008760 <_strtod_l+0x968>
 8008738:	423b      	tst	r3, r7
 800873a:	d100      	bne.n	800873e <_strtod_l+0x946>
 800873c:	e751      	b.n	80085e2 <_strtod_l+0x7ea>
 800873e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008740:	9a06      	ldr	r2, [sp, #24]
 8008742:	0030      	movs	r0, r6
 8008744:	0039      	movs	r1, r7
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00f      	beq.n	800876a <_strtod_l+0x972>
 800874a:	f7ff fb3d 	bl	8007dc8 <sulp>
 800874e:	0002      	movs	r2, r0
 8008750:	000b      	movs	r3, r1
 8008752:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008754:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008756:	f7f8 feeb 	bl	8001530 <__aeabi_dadd>
 800875a:	0006      	movs	r6, r0
 800875c:	000f      	movs	r7, r1
 800875e:	e740      	b.n	80085e2 <_strtod_l+0x7ea>
 8008760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008762:	4233      	tst	r3, r6
 8008764:	d100      	bne.n	8008768 <_strtod_l+0x970>
 8008766:	e73c      	b.n	80085e2 <_strtod_l+0x7ea>
 8008768:	e7e9      	b.n	800873e <_strtod_l+0x946>
 800876a:	f7ff fb2d 	bl	8007dc8 <sulp>
 800876e:	0002      	movs	r2, r0
 8008770:	000b      	movs	r3, r1
 8008772:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008774:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008776:	f7fa f89f 	bl	80028b8 <__aeabi_dsub>
 800877a:	2200      	movs	r2, #0
 800877c:	2300      	movs	r3, #0
 800877e:	0006      	movs	r6, r0
 8008780:	000f      	movs	r7, r1
 8008782:	f7f7 fe63 	bl	800044c <__aeabi_dcmpeq>
 8008786:	2800      	cmp	r0, #0
 8008788:	d000      	beq.n	800878c <_strtod_l+0x994>
 800878a:	e5ff      	b.n	800838c <_strtod_l+0x594>
 800878c:	e729      	b.n	80085e2 <_strtod_l+0x7ea>
 800878e:	9905      	ldr	r1, [sp, #20]
 8008790:	0020      	movs	r0, r4
 8008792:	f001 f913 	bl	80099bc <__ratio>
 8008796:	2380      	movs	r3, #128	; 0x80
 8008798:	2200      	movs	r2, #0
 800879a:	05db      	lsls	r3, r3, #23
 800879c:	9008      	str	r0, [sp, #32]
 800879e:	9109      	str	r1, [sp, #36]	; 0x24
 80087a0:	f7f7 fe64 	bl	800046c <__aeabi_dcmple>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d075      	beq.n	8008894 <_strtod_l+0xa9c>
 80087a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d043      	beq.n	8008836 <_strtod_l+0xa3e>
 80087ae:	2200      	movs	r2, #0
 80087b0:	4b87      	ldr	r3, [pc, #540]	; (80089d0 <_strtod_l+0xbd8>)
 80087b2:	920c      	str	r2, [sp, #48]	; 0x30
 80087b4:	930d      	str	r3, [sp, #52]	; 0x34
 80087b6:	4b86      	ldr	r3, [pc, #536]	; (80089d0 <_strtod_l+0xbd8>)
 80087b8:	9308      	str	r3, [sp, #32]
 80087ba:	4b86      	ldr	r3, [pc, #536]	; (80089d4 <_strtod_l+0xbdc>)
 80087bc:	403b      	ands	r3, r7
 80087be:	9314      	str	r3, [sp, #80]	; 0x50
 80087c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087c2:	4b85      	ldr	r3, [pc, #532]	; (80089d8 <_strtod_l+0xbe0>)
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d000      	beq.n	80087ca <_strtod_l+0x9d2>
 80087c8:	e0b1      	b.n	800892e <_strtod_l+0xb36>
 80087ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ce:	9210      	str	r2, [sp, #64]	; 0x40
 80087d0:	9311      	str	r3, [sp, #68]	; 0x44
 80087d2:	4b82      	ldr	r3, [pc, #520]	; (80089dc <_strtod_l+0xbe4>)
 80087d4:	0030      	movs	r0, r6
 80087d6:	18ff      	adds	r7, r7, r3
 80087d8:	0039      	movs	r1, r7
 80087da:	f001 f829 	bl	8009830 <__ulp>
 80087de:	0002      	movs	r2, r0
 80087e0:	000b      	movs	r3, r1
 80087e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80087e6:	f7f9 fde7 	bl	80023b8 <__aeabi_dmul>
 80087ea:	0032      	movs	r2, r6
 80087ec:	003b      	movs	r3, r7
 80087ee:	f7f8 fe9f 	bl	8001530 <__aeabi_dadd>
 80087f2:	4a78      	ldr	r2, [pc, #480]	; (80089d4 <_strtod_l+0xbdc>)
 80087f4:	4b7a      	ldr	r3, [pc, #488]	; (80089e0 <_strtod_l+0xbe8>)
 80087f6:	0006      	movs	r6, r0
 80087f8:	400a      	ands	r2, r1
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d962      	bls.n	80088c4 <_strtod_l+0xacc>
 80087fe:	4b79      	ldr	r3, [pc, #484]	; (80089e4 <_strtod_l+0xbec>)
 8008800:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008802:	429a      	cmp	r2, r3
 8008804:	d103      	bne.n	800880e <_strtod_l+0xa16>
 8008806:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008808:	3301      	adds	r3, #1
 800880a:	d100      	bne.n	800880e <_strtod_l+0xa16>
 800880c:	e54f      	b.n	80082ae <_strtod_l+0x4b6>
 800880e:	2601      	movs	r6, #1
 8008810:	4f74      	ldr	r7, [pc, #464]	; (80089e4 <_strtod_l+0xbec>)
 8008812:	4276      	negs	r6, r6
 8008814:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008816:	9804      	ldr	r0, [sp, #16]
 8008818:	f000 fd74 	bl	8009304 <_Bfree>
 800881c:	9907      	ldr	r1, [sp, #28]
 800881e:	9804      	ldr	r0, [sp, #16]
 8008820:	f000 fd70 	bl	8009304 <_Bfree>
 8008824:	9905      	ldr	r1, [sp, #20]
 8008826:	9804      	ldr	r0, [sp, #16]
 8008828:	f000 fd6c 	bl	8009304 <_Bfree>
 800882c:	0021      	movs	r1, r4
 800882e:	9804      	ldr	r0, [sp, #16]
 8008830:	f000 fd68 	bl	8009304 <_Bfree>
 8008834:	e60d      	b.n	8008452 <_strtod_l+0x65a>
 8008836:	2e00      	cmp	r6, #0
 8008838:	d11d      	bne.n	8008876 <_strtod_l+0xa7e>
 800883a:	033b      	lsls	r3, r7, #12
 800883c:	d120      	bne.n	8008880 <_strtod_l+0xa88>
 800883e:	9808      	ldr	r0, [sp, #32]
 8008840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008842:	2200      	movs	r2, #0
 8008844:	4b62      	ldr	r3, [pc, #392]	; (80089d0 <_strtod_l+0xbd8>)
 8008846:	f7f7 fe07 	bl	8000458 <__aeabi_dcmplt>
 800884a:	2800      	cmp	r0, #0
 800884c:	d11e      	bne.n	800888c <_strtod_l+0xa94>
 800884e:	9808      	ldr	r0, [sp, #32]
 8008850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008852:	2200      	movs	r2, #0
 8008854:	4b64      	ldr	r3, [pc, #400]	; (80089e8 <_strtod_l+0xbf0>)
 8008856:	f7f9 fdaf 	bl	80023b8 <__aeabi_dmul>
 800885a:	0005      	movs	r5, r0
 800885c:	9108      	str	r1, [sp, #32]
 800885e:	2280      	movs	r2, #128	; 0x80
 8008860:	0612      	lsls	r2, r2, #24
 8008862:	4694      	mov	ip, r2
 8008864:	9b08      	ldr	r3, [sp, #32]
 8008866:	951c      	str	r5, [sp, #112]	; 0x70
 8008868:	4463      	add	r3, ip
 800886a:	931d      	str	r3, [sp, #116]	; 0x74
 800886c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800886e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008870:	920c      	str	r2, [sp, #48]	; 0x30
 8008872:	930d      	str	r3, [sp, #52]	; 0x34
 8008874:	e7a1      	b.n	80087ba <_strtod_l+0x9c2>
 8008876:	2e01      	cmp	r6, #1
 8008878:	d102      	bne.n	8008880 <_strtod_l+0xa88>
 800887a:	2f00      	cmp	r7, #0
 800887c:	d100      	bne.n	8008880 <_strtod_l+0xa88>
 800887e:	e585      	b.n	800838c <_strtod_l+0x594>
 8008880:	2200      	movs	r2, #0
 8008882:	4b5a      	ldr	r3, [pc, #360]	; (80089ec <_strtod_l+0xbf4>)
 8008884:	2500      	movs	r5, #0
 8008886:	920c      	str	r2, [sp, #48]	; 0x30
 8008888:	930d      	str	r3, [sp, #52]	; 0x34
 800888a:	e794      	b.n	80087b6 <_strtod_l+0x9be>
 800888c:	4b56      	ldr	r3, [pc, #344]	; (80089e8 <_strtod_l+0xbf0>)
 800888e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008890:	9308      	str	r3, [sp, #32]
 8008892:	e7e4      	b.n	800885e <_strtod_l+0xa66>
 8008894:	4b54      	ldr	r3, [pc, #336]	; (80089e8 <_strtod_l+0xbf0>)
 8008896:	9808      	ldr	r0, [sp, #32]
 8008898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889a:	2200      	movs	r2, #0
 800889c:	f7f9 fd8c 	bl	80023b8 <__aeabi_dmul>
 80088a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a2:	0005      	movs	r5, r0
 80088a4:	9108      	str	r1, [sp, #32]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d107      	bne.n	80088ba <_strtod_l+0xac2>
 80088aa:	2380      	movs	r3, #128	; 0x80
 80088ac:	061b      	lsls	r3, r3, #24
 80088ae:	18cb      	adds	r3, r1, r3
 80088b0:	9016      	str	r0, [sp, #88]	; 0x58
 80088b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80088b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80088b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088b8:	e7da      	b.n	8008870 <_strtod_l+0xa78>
 80088ba:	0002      	movs	r2, r0
 80088bc:	9b08      	ldr	r3, [sp, #32]
 80088be:	9216      	str	r2, [sp, #88]	; 0x58
 80088c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80088c2:	e7f7      	b.n	80088b4 <_strtod_l+0xabc>
 80088c4:	23d4      	movs	r3, #212	; 0xd4
 80088c6:	049b      	lsls	r3, r3, #18
 80088c8:	18cf      	adds	r7, r1, r3
 80088ca:	9b06      	ldr	r3, [sp, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1a1      	bne.n	8008814 <_strtod_l+0xa1c>
 80088d0:	4b40      	ldr	r3, [pc, #256]	; (80089d4 <_strtod_l+0xbdc>)
 80088d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088d4:	970c      	str	r7, [sp, #48]	; 0x30
 80088d6:	403b      	ands	r3, r7
 80088d8:	429a      	cmp	r2, r3
 80088da:	d19b      	bne.n	8008814 <_strtod_l+0xa1c>
 80088dc:	9908      	ldr	r1, [sp, #32]
 80088de:	0028      	movs	r0, r5
 80088e0:	f7fa fb20 	bl	8002f24 <__aeabi_d2iz>
 80088e4:	f7fa fb52 	bl	8002f8c <__aeabi_i2d>
 80088e8:	000b      	movs	r3, r1
 80088ea:	0002      	movs	r2, r0
 80088ec:	9908      	ldr	r1, [sp, #32]
 80088ee:	0028      	movs	r0, r5
 80088f0:	f7f9 ffe2 	bl	80028b8 <__aeabi_dsub>
 80088f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088f6:	9008      	str	r0, [sp, #32]
 80088f8:	9109      	str	r1, [sp, #36]	; 0x24
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d104      	bne.n	8008908 <_strtod_l+0xb10>
 80088fe:	2e00      	cmp	r6, #0
 8008900:	d102      	bne.n	8008908 <_strtod_l+0xb10>
 8008902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008904:	031b      	lsls	r3, r3, #12
 8008906:	d058      	beq.n	80089ba <_strtod_l+0xbc2>
 8008908:	9808      	ldr	r0, [sp, #32]
 800890a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800890c:	4a38      	ldr	r2, [pc, #224]	; (80089f0 <_strtod_l+0xbf8>)
 800890e:	4b39      	ldr	r3, [pc, #228]	; (80089f4 <_strtod_l+0xbfc>)
 8008910:	f7f7 fda2 	bl	8000458 <__aeabi_dcmplt>
 8008914:	2800      	cmp	r0, #0
 8008916:	d000      	beq.n	800891a <_strtod_l+0xb22>
 8008918:	e4d2      	b.n	80082c0 <_strtod_l+0x4c8>
 800891a:	9808      	ldr	r0, [sp, #32]
 800891c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800891e:	4a36      	ldr	r2, [pc, #216]	; (80089f8 <_strtod_l+0xc00>)
 8008920:	4b31      	ldr	r3, [pc, #196]	; (80089e8 <_strtod_l+0xbf0>)
 8008922:	f7f7 fdad 	bl	8000480 <__aeabi_dcmpgt>
 8008926:	2800      	cmp	r0, #0
 8008928:	d100      	bne.n	800892c <_strtod_l+0xb34>
 800892a:	e773      	b.n	8008814 <_strtod_l+0xa1c>
 800892c:	e4c8      	b.n	80082c0 <_strtod_l+0x4c8>
 800892e:	9b06      	ldr	r3, [sp, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d02a      	beq.n	800898a <_strtod_l+0xb92>
 8008934:	23d4      	movs	r3, #212	; 0xd4
 8008936:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008938:	04db      	lsls	r3, r3, #19
 800893a:	429a      	cmp	r2, r3
 800893c:	d825      	bhi.n	800898a <_strtod_l+0xb92>
 800893e:	4a2f      	ldr	r2, [pc, #188]	; (80089fc <_strtod_l+0xc04>)
 8008940:	4b2f      	ldr	r3, [pc, #188]	; (8008a00 <_strtod_l+0xc08>)
 8008942:	0028      	movs	r0, r5
 8008944:	9908      	ldr	r1, [sp, #32]
 8008946:	f7f7 fd91 	bl	800046c <__aeabi_dcmple>
 800894a:	2800      	cmp	r0, #0
 800894c:	d016      	beq.n	800897c <_strtod_l+0xb84>
 800894e:	0028      	movs	r0, r5
 8008950:	9908      	ldr	r1, [sp, #32]
 8008952:	f7f7 fe1b 	bl	800058c <__aeabi_d2uiz>
 8008956:	2800      	cmp	r0, #0
 8008958:	d100      	bne.n	800895c <_strtod_l+0xb64>
 800895a:	3001      	adds	r0, #1
 800895c:	f7fa fb58 	bl	8003010 <__aeabi_ui2d>
 8008960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008962:	0005      	movs	r5, r0
 8008964:	9108      	str	r1, [sp, #32]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d122      	bne.n	80089b0 <_strtod_l+0xbb8>
 800896a:	2380      	movs	r3, #128	; 0x80
 800896c:	061b      	lsls	r3, r3, #24
 800896e:	18cb      	adds	r3, r1, r3
 8008970:	9018      	str	r0, [sp, #96]	; 0x60
 8008972:	9319      	str	r3, [sp, #100]	; 0x64
 8008974:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008976:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008978:	920c      	str	r2, [sp, #48]	; 0x30
 800897a:	930d      	str	r3, [sp, #52]	; 0x34
 800897c:	22d6      	movs	r2, #214	; 0xd6
 800897e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008980:	04d2      	lsls	r2, r2, #19
 8008982:	189b      	adds	r3, r3, r2
 8008984:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	930d      	str	r3, [sp, #52]	; 0x34
 800898a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800898c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800898e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008990:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008992:	f000 ff4d 	bl	8009830 <__ulp>
 8008996:	0002      	movs	r2, r0
 8008998:	000b      	movs	r3, r1
 800899a:	0030      	movs	r0, r6
 800899c:	0039      	movs	r1, r7
 800899e:	f7f9 fd0b 	bl	80023b8 <__aeabi_dmul>
 80089a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089a6:	f7f8 fdc3 	bl	8001530 <__aeabi_dadd>
 80089aa:	0006      	movs	r6, r0
 80089ac:	000f      	movs	r7, r1
 80089ae:	e78c      	b.n	80088ca <_strtod_l+0xad2>
 80089b0:	0002      	movs	r2, r0
 80089b2:	9b08      	ldr	r3, [sp, #32]
 80089b4:	9218      	str	r2, [sp, #96]	; 0x60
 80089b6:	9319      	str	r3, [sp, #100]	; 0x64
 80089b8:	e7dc      	b.n	8008974 <_strtod_l+0xb7c>
 80089ba:	4a0d      	ldr	r2, [pc, #52]	; (80089f0 <_strtod_l+0xbf8>)
 80089bc:	4b11      	ldr	r3, [pc, #68]	; (8008a04 <_strtod_l+0xc0c>)
 80089be:	9808      	ldr	r0, [sp, #32]
 80089c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089c2:	f7f7 fd49 	bl	8000458 <__aeabi_dcmplt>
 80089c6:	e7ae      	b.n	8008926 <_strtod_l+0xb2e>
 80089c8:	fff00000 	.word	0xfff00000
 80089cc:	000fffff 	.word	0x000fffff
 80089d0:	3ff00000 	.word	0x3ff00000
 80089d4:	7ff00000 	.word	0x7ff00000
 80089d8:	7fe00000 	.word	0x7fe00000
 80089dc:	fcb00000 	.word	0xfcb00000
 80089e0:	7c9fffff 	.word	0x7c9fffff
 80089e4:	7fefffff 	.word	0x7fefffff
 80089e8:	3fe00000 	.word	0x3fe00000
 80089ec:	bff00000 	.word	0xbff00000
 80089f0:	94a03595 	.word	0x94a03595
 80089f4:	3fdfffff 	.word	0x3fdfffff
 80089f8:	35afe535 	.word	0x35afe535
 80089fc:	ffc00000 	.word	0xffc00000
 8008a00:	41dfffff 	.word	0x41dfffff
 8008a04:	3fcfffff 	.word	0x3fcfffff

08008a08 <strtod>:
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <strtod+0x1c>)
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	0004      	movs	r4, r0
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	000a      	movs	r2, r1
 8008a12:	6a03      	ldr	r3, [r0, #32]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d100      	bne.n	8008a1a <strtod+0x12>
 8008a18:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <strtod+0x20>)
 8008a1a:	0021      	movs	r1, r4
 8008a1c:	f7ff f9ec 	bl	8007df8 <_strtod_l>
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	46c0      	nop			; (mov r8, r8)
 8008a24:	20000008 	.word	0x20000008
 8008a28:	2000006c 	.word	0x2000006c

08008a2c <strtok>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <strtok+0x4c>)
 8008a30:	0006      	movs	r6, r0
 8008a32:	681d      	ldr	r5, [r3, #0]
 8008a34:	000f      	movs	r7, r1
 8008a36:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008a38:	2c00      	cmp	r4, #0
 8008a3a:	d116      	bne.n	8008a6a <strtok+0x3e>
 8008a3c:	2050      	movs	r0, #80	; 0x50
 8008a3e:	f7ff f8c3 	bl	8007bc8 <malloc>
 8008a42:	65a8      	str	r0, [r5, #88]	; 0x58
 8008a44:	6004      	str	r4, [r0, #0]
 8008a46:	6044      	str	r4, [r0, #4]
 8008a48:	6084      	str	r4, [r0, #8]
 8008a4a:	60c4      	str	r4, [r0, #12]
 8008a4c:	6104      	str	r4, [r0, #16]
 8008a4e:	6144      	str	r4, [r0, #20]
 8008a50:	6184      	str	r4, [r0, #24]
 8008a52:	6284      	str	r4, [r0, #40]	; 0x28
 8008a54:	62c4      	str	r4, [r0, #44]	; 0x2c
 8008a56:	6304      	str	r4, [r0, #48]	; 0x30
 8008a58:	6344      	str	r4, [r0, #52]	; 0x34
 8008a5a:	6384      	str	r4, [r0, #56]	; 0x38
 8008a5c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8008a5e:	6404      	str	r4, [r0, #64]	; 0x40
 8008a60:	6444      	str	r4, [r0, #68]	; 0x44
 8008a62:	6484      	str	r4, [r0, #72]	; 0x48
 8008a64:	64c4      	str	r4, [r0, #76]	; 0x4c
 8008a66:	7704      	strb	r4, [r0, #28]
 8008a68:	6244      	str	r4, [r0, #36]	; 0x24
 8008a6a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008a6c:	0039      	movs	r1, r7
 8008a6e:	0030      	movs	r0, r6
 8008a70:	2301      	movs	r3, #1
 8008a72:	f000 f803 	bl	8008a7c <__strtok_r>
 8008a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a78:	20000008 	.word	0x20000008

08008a7c <__strtok_r>:
 8008a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d104      	bne.n	8008a8c <__strtok_r+0x10>
 8008a82:	6810      	ldr	r0, [r2, #0]
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d101      	bne.n	8008a8c <__strtok_r+0x10>
 8008a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a8a:	0020      	movs	r0, r4
 8008a8c:	000e      	movs	r6, r1
 8008a8e:	7805      	ldrb	r5, [r0, #0]
 8008a90:	1c44      	adds	r4, r0, #1
 8008a92:	7837      	ldrb	r7, [r6, #0]
 8008a94:	2f00      	cmp	r7, #0
 8008a96:	d104      	bne.n	8008aa2 <__strtok_r+0x26>
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	d110      	bne.n	8008abe <__strtok_r+0x42>
 8008a9c:	6015      	str	r5, [r2, #0]
 8008a9e:	0028      	movs	r0, r5
 8008aa0:	e7f2      	b.n	8008a88 <__strtok_r+0xc>
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	42bd      	cmp	r5, r7
 8008aa6:	d1f4      	bne.n	8008a92 <__strtok_r+0x16>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1ee      	bne.n	8008a8a <__strtok_r+0xe>
 8008aac:	6014      	str	r4, [r2, #0]
 8008aae:	7003      	strb	r3, [r0, #0]
 8008ab0:	e7ea      	b.n	8008a88 <__strtok_r+0xc>
 8008ab2:	0033      	movs	r3, r6
 8008ab4:	e00e      	b.n	8008ad4 <__strtok_r+0x58>
 8008ab6:	3501      	adds	r5, #1
 8008ab8:	001c      	movs	r4, r3
 8008aba:	2f00      	cmp	r7, #0
 8008abc:	d102      	bne.n	8008ac4 <__strtok_r+0x48>
 8008abe:	000d      	movs	r5, r1
 8008ac0:	7826      	ldrb	r6, [r4, #0]
 8008ac2:	1c63      	adds	r3, r4, #1
 8008ac4:	782f      	ldrb	r7, [r5, #0]
 8008ac6:	42be      	cmp	r6, r7
 8008ac8:	d1f5      	bne.n	8008ab6 <__strtok_r+0x3a>
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	d0f1      	beq.n	8008ab2 <__strtok_r+0x36>
 8008ace:	2400      	movs	r4, #0
 8008ad0:	1e59      	subs	r1, r3, #1
 8008ad2:	700c      	strb	r4, [r1, #0]
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	e7d7      	b.n	8008a88 <__strtok_r+0xc>

08008ad8 <_strtol_l.isra.0>:
 8008ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ada:	001f      	movs	r7, r3
 8008adc:	000e      	movs	r6, r1
 8008ade:	b087      	sub	sp, #28
 8008ae0:	9005      	str	r0, [sp, #20]
 8008ae2:	9103      	str	r1, [sp, #12]
 8008ae4:	9202      	str	r2, [sp, #8]
 8008ae6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ae8:	7834      	ldrb	r4, [r6, #0]
 8008aea:	f000 fbba 	bl	8009262 <__locale_ctype_ptr_l>
 8008aee:	2208      	movs	r2, #8
 8008af0:	1900      	adds	r0, r0, r4
 8008af2:	7843      	ldrb	r3, [r0, #1]
 8008af4:	1c75      	adds	r5, r6, #1
 8008af6:	4013      	ands	r3, r2
 8008af8:	d10c      	bne.n	8008b14 <_strtol_l.isra.0+0x3c>
 8008afa:	2c2d      	cmp	r4, #45	; 0x2d
 8008afc:	d10c      	bne.n	8008b18 <_strtol_l.isra.0+0x40>
 8008afe:	3301      	adds	r3, #1
 8008b00:	782c      	ldrb	r4, [r5, #0]
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	1cb5      	adds	r5, r6, #2
 8008b06:	2f00      	cmp	r7, #0
 8008b08:	d00c      	beq.n	8008b24 <_strtol_l.isra.0+0x4c>
 8008b0a:	2f10      	cmp	r7, #16
 8008b0c:	d114      	bne.n	8008b38 <_strtol_l.isra.0+0x60>
 8008b0e:	2c30      	cmp	r4, #48	; 0x30
 8008b10:	d00a      	beq.n	8008b28 <_strtol_l.isra.0+0x50>
 8008b12:	e011      	b.n	8008b38 <_strtol_l.isra.0+0x60>
 8008b14:	002e      	movs	r6, r5
 8008b16:	e7e6      	b.n	8008ae6 <_strtol_l.isra.0+0xe>
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	2c2b      	cmp	r4, #43	; 0x2b
 8008b1c:	d1f3      	bne.n	8008b06 <_strtol_l.isra.0+0x2e>
 8008b1e:	782c      	ldrb	r4, [r5, #0]
 8008b20:	1cb5      	adds	r5, r6, #2
 8008b22:	e7f0      	b.n	8008b06 <_strtol_l.isra.0+0x2e>
 8008b24:	2c30      	cmp	r4, #48	; 0x30
 8008b26:	d12f      	bne.n	8008b88 <_strtol_l.isra.0+0xb0>
 8008b28:	2220      	movs	r2, #32
 8008b2a:	782b      	ldrb	r3, [r5, #0]
 8008b2c:	4393      	bics	r3, r2
 8008b2e:	2b58      	cmp	r3, #88	; 0x58
 8008b30:	d151      	bne.n	8008bd6 <_strtol_l.isra.0+0xfe>
 8008b32:	2710      	movs	r7, #16
 8008b34:	786c      	ldrb	r4, [r5, #1]
 8008b36:	3502      	adds	r5, #2
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	4a29      	ldr	r2, [pc, #164]	; (8008be0 <_strtol_l.isra.0+0x108>)
 8008b3c:	0039      	movs	r1, r7
 8008b3e:	189e      	adds	r6, r3, r2
 8008b40:	0030      	movs	r0, r6
 8008b42:	f7f7 fb83 	bl	800024c <__aeabi_uidivmod>
 8008b46:	0030      	movs	r0, r6
 8008b48:	9104      	str	r1, [sp, #16]
 8008b4a:	0039      	movs	r1, r7
 8008b4c:	f7f7 faf8 	bl	8000140 <__udivsi3>
 8008b50:	2101      	movs	r1, #1
 8008b52:	2300      	movs	r3, #0
 8008b54:	4249      	negs	r1, r1
 8008b56:	0002      	movs	r2, r0
 8008b58:	468c      	mov	ip, r1
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	0021      	movs	r1, r4
 8008b5e:	3930      	subs	r1, #48	; 0x30
 8008b60:	2909      	cmp	r1, #9
 8008b62:	d813      	bhi.n	8008b8c <_strtol_l.isra.0+0xb4>
 8008b64:	000c      	movs	r4, r1
 8008b66:	42a7      	cmp	r7, r4
 8008b68:	dd1c      	ble.n	8008ba4 <_strtol_l.isra.0+0xcc>
 8008b6a:	1c59      	adds	r1, r3, #1
 8008b6c:	d009      	beq.n	8008b82 <_strtol_l.isra.0+0xaa>
 8008b6e:	4663      	mov	r3, ip
 8008b70:	4282      	cmp	r2, r0
 8008b72:	d306      	bcc.n	8008b82 <_strtol_l.isra.0+0xaa>
 8008b74:	d102      	bne.n	8008b7c <_strtol_l.isra.0+0xa4>
 8008b76:	9904      	ldr	r1, [sp, #16]
 8008b78:	42a1      	cmp	r1, r4
 8008b7a:	db02      	blt.n	8008b82 <_strtol_l.isra.0+0xaa>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4378      	muls	r0, r7
 8008b80:	1820      	adds	r0, r4, r0
 8008b82:	782c      	ldrb	r4, [r5, #0]
 8008b84:	3501      	adds	r5, #1
 8008b86:	e7e9      	b.n	8008b5c <_strtol_l.isra.0+0x84>
 8008b88:	270a      	movs	r7, #10
 8008b8a:	e7d5      	b.n	8008b38 <_strtol_l.isra.0+0x60>
 8008b8c:	0021      	movs	r1, r4
 8008b8e:	3941      	subs	r1, #65	; 0x41
 8008b90:	2919      	cmp	r1, #25
 8008b92:	d801      	bhi.n	8008b98 <_strtol_l.isra.0+0xc0>
 8008b94:	3c37      	subs	r4, #55	; 0x37
 8008b96:	e7e6      	b.n	8008b66 <_strtol_l.isra.0+0x8e>
 8008b98:	0021      	movs	r1, r4
 8008b9a:	3961      	subs	r1, #97	; 0x61
 8008b9c:	2919      	cmp	r1, #25
 8008b9e:	d801      	bhi.n	8008ba4 <_strtol_l.isra.0+0xcc>
 8008ba0:	3c57      	subs	r4, #87	; 0x57
 8008ba2:	e7e0      	b.n	8008b66 <_strtol_l.isra.0+0x8e>
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	d108      	bne.n	8008bba <_strtol_l.isra.0+0xe2>
 8008ba8:	9a05      	ldr	r2, [sp, #20]
 8008baa:	3323      	adds	r3, #35	; 0x23
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	9b02      	ldr	r3, [sp, #8]
 8008bb0:	0030      	movs	r0, r6
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10b      	bne.n	8008bce <_strtol_l.isra.0+0xf6>
 8008bb6:	b007      	add	sp, #28
 8008bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bba:	9a01      	ldr	r2, [sp, #4]
 8008bbc:	2a00      	cmp	r2, #0
 8008bbe:	d000      	beq.n	8008bc2 <_strtol_l.isra.0+0xea>
 8008bc0:	4240      	negs	r0, r0
 8008bc2:	9a02      	ldr	r2, [sp, #8]
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	d0f6      	beq.n	8008bb6 <_strtol_l.isra.0+0xde>
 8008bc8:	9a03      	ldr	r2, [sp, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d000      	beq.n	8008bd0 <_strtol_l.isra.0+0xf8>
 8008bce:	1e6a      	subs	r2, r5, #1
 8008bd0:	9b02      	ldr	r3, [sp, #8]
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	e7ef      	b.n	8008bb6 <_strtol_l.isra.0+0xde>
 8008bd6:	2430      	movs	r4, #48	; 0x30
 8008bd8:	2f00      	cmp	r7, #0
 8008bda:	d1ad      	bne.n	8008b38 <_strtol_l.isra.0+0x60>
 8008bdc:	3708      	adds	r7, #8
 8008bde:	e7ab      	b.n	8008b38 <_strtol_l.isra.0+0x60>
 8008be0:	7fffffff 	.word	0x7fffffff

08008be4 <strtol>:
 8008be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008be6:	0013      	movs	r3, r2
 8008be8:	4a06      	ldr	r2, [pc, #24]	; (8008c04 <strtol+0x20>)
 8008bea:	0005      	movs	r5, r0
 8008bec:	6810      	ldr	r0, [r2, #0]
 8008bee:	6a04      	ldr	r4, [r0, #32]
 8008bf0:	2c00      	cmp	r4, #0
 8008bf2:	d100      	bne.n	8008bf6 <strtol+0x12>
 8008bf4:	4c04      	ldr	r4, [pc, #16]	; (8008c08 <strtol+0x24>)
 8008bf6:	000a      	movs	r2, r1
 8008bf8:	9400      	str	r4, [sp, #0]
 8008bfa:	0029      	movs	r1, r5
 8008bfc:	f7ff ff6c 	bl	8008ad8 <_strtol_l.isra.0>
 8008c00:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	20000008 	.word	0x20000008
 8008c08:	2000006c 	.word	0x2000006c

08008c0c <rshift>:
 8008c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c0e:	0006      	movs	r6, r0
 8008c10:	6905      	ldr	r5, [r0, #16]
 8008c12:	3614      	adds	r6, #20
 8008c14:	114b      	asrs	r3, r1, #5
 8008c16:	0034      	movs	r4, r6
 8008c18:	42ab      	cmp	r3, r5
 8008c1a:	da1a      	bge.n	8008c52 <rshift+0x46>
 8008c1c:	221f      	movs	r2, #31
 8008c1e:	00ad      	lsls	r5, r5, #2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	1975      	adds	r5, r6, r5
 8008c24:	18f3      	adds	r3, r6, r3
 8008c26:	4011      	ands	r1, r2
 8008c28:	d107      	bne.n	8008c3a <rshift+0x2e>
 8008c2a:	001a      	movs	r2, r3
 8008c2c:	0033      	movs	r3, r6
 8008c2e:	001c      	movs	r4, r3
 8008c30:	4295      	cmp	r5, r2
 8008c32:	d90e      	bls.n	8008c52 <rshift+0x46>
 8008c34:	ca02      	ldmia	r2!, {r1}
 8008c36:	c302      	stmia	r3!, {r1}
 8008c38:	e7f9      	b.n	8008c2e <rshift+0x22>
 8008c3a:	cb04      	ldmia	r3!, {r2}
 8008c3c:	2720      	movs	r7, #32
 8008c3e:	40ca      	lsrs	r2, r1
 8008c40:	46b4      	mov	ip, r6
 8008c42:	1a7f      	subs	r7, r7, r1
 8008c44:	4664      	mov	r4, ip
 8008c46:	429d      	cmp	r5, r3
 8008c48:	d809      	bhi.n	8008c5e <rshift+0x52>
 8008c4a:	6022      	str	r2, [r4, #0]
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	d000      	beq.n	8008c52 <rshift+0x46>
 8008c50:	3404      	adds	r4, #4
 8008c52:	1ba3      	subs	r3, r4, r6
 8008c54:	109b      	asrs	r3, r3, #2
 8008c56:	6103      	str	r3, [r0, #16]
 8008c58:	d100      	bne.n	8008c5c <rshift+0x50>
 8008c5a:	6143      	str	r3, [r0, #20]
 8008c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c5e:	681c      	ldr	r4, [r3, #0]
 8008c60:	40bc      	lsls	r4, r7
 8008c62:	4322      	orrs	r2, r4
 8008c64:	4664      	mov	r4, ip
 8008c66:	c404      	stmia	r4!, {r2}
 8008c68:	cb04      	ldmia	r3!, {r2}
 8008c6a:	46a4      	mov	ip, r4
 8008c6c:	40ca      	lsrs	r2, r1
 8008c6e:	e7e9      	b.n	8008c44 <rshift+0x38>

08008c70 <__hexdig_fun>:
 8008c70:	0003      	movs	r3, r0
 8008c72:	3b30      	subs	r3, #48	; 0x30
 8008c74:	2b09      	cmp	r3, #9
 8008c76:	d803      	bhi.n	8008c80 <__hexdig_fun+0x10>
 8008c78:	3820      	subs	r0, #32
 8008c7a:	b2c3      	uxtb	r3, r0
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	4770      	bx	lr
 8008c80:	0003      	movs	r3, r0
 8008c82:	3b61      	subs	r3, #97	; 0x61
 8008c84:	2b05      	cmp	r3, #5
 8008c86:	d801      	bhi.n	8008c8c <__hexdig_fun+0x1c>
 8008c88:	3847      	subs	r0, #71	; 0x47
 8008c8a:	e7f6      	b.n	8008c7a <__hexdig_fun+0xa>
 8008c8c:	0002      	movs	r2, r0
 8008c8e:	3a41      	subs	r2, #65	; 0x41
 8008c90:	2300      	movs	r3, #0
 8008c92:	2a05      	cmp	r2, #5
 8008c94:	d8f2      	bhi.n	8008c7c <__hexdig_fun+0xc>
 8008c96:	3827      	subs	r0, #39	; 0x27
 8008c98:	e7ef      	b.n	8008c7a <__hexdig_fun+0xa>

08008c9a <__gethex>:
 8008c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c9c:	b08d      	sub	sp, #52	; 0x34
 8008c9e:	9005      	str	r0, [sp, #20]
 8008ca0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008ca2:	9109      	str	r1, [sp, #36]	; 0x24
 8008ca4:	9202      	str	r2, [sp, #8]
 8008ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ca8:	f000 fade 	bl	8009268 <__localeconv_l>
 8008cac:	6803      	ldr	r3, [r0, #0]
 8008cae:	0018      	movs	r0, r3
 8008cb0:	9307      	str	r3, [sp, #28]
 8008cb2:	f7f7 fa29 	bl	8000108 <strlen>
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	9b07      	ldr	r3, [sp, #28]
 8008cba:	4252      	negs	r2, r2
 8008cbc:	181b      	adds	r3, r3, r0
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	9004      	str	r0, [sp, #16]
 8008cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc8:	6819      	ldr	r1, [r3, #0]
 8008cca:	1c8b      	adds	r3, r1, #2
 8008ccc:	1a52      	subs	r2, r2, r1
 8008cce:	18d1      	adds	r1, r2, r3
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	9108      	str	r1, [sp, #32]
 8008cd4:	9901      	ldr	r1, [sp, #4]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	7808      	ldrb	r0, [r1, #0]
 8008cda:	2830      	cmp	r0, #48	; 0x30
 8008cdc:	d0f7      	beq.n	8008cce <__gethex+0x34>
 8008cde:	f7ff ffc7 	bl	8008c70 <__hexdig_fun>
 8008ce2:	1e07      	subs	r7, r0, #0
 8008ce4:	d000      	beq.n	8008ce8 <__gethex+0x4e>
 8008ce6:	e06b      	b.n	8008dc0 <__gethex+0x126>
 8008ce8:	9a04      	ldr	r2, [sp, #16]
 8008cea:	9907      	ldr	r1, [sp, #28]
 8008cec:	9801      	ldr	r0, [sp, #4]
 8008cee:	f000 fed2 	bl	8009a96 <strncmp>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d000      	beq.n	8008cf8 <__gethex+0x5e>
 8008cf6:	e06b      	b.n	8008dd0 <__gethex+0x136>
 8008cf8:	9b01      	ldr	r3, [sp, #4]
 8008cfa:	9a04      	ldr	r2, [sp, #16]
 8008cfc:	189c      	adds	r4, r3, r2
 8008cfe:	7820      	ldrb	r0, [r4, #0]
 8008d00:	f7ff ffb6 	bl	8008c70 <__hexdig_fun>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d067      	beq.n	8008dd8 <__gethex+0x13e>
 8008d08:	9401      	str	r4, [sp, #4]
 8008d0a:	9b01      	ldr	r3, [sp, #4]
 8008d0c:	7818      	ldrb	r0, [r3, #0]
 8008d0e:	2830      	cmp	r0, #48	; 0x30
 8008d10:	d052      	beq.n	8008db8 <__gethex+0x11e>
 8008d12:	f7ff ffad 	bl	8008c70 <__hexdig_fun>
 8008d16:	4243      	negs	r3, r0
 8008d18:	4143      	adcs	r3, r0
 8008d1a:	9303      	str	r3, [sp, #12]
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	0026      	movs	r6, r4
 8008d20:	9308      	str	r3, [sp, #32]
 8008d22:	9c01      	ldr	r4, [sp, #4]
 8008d24:	7820      	ldrb	r0, [r4, #0]
 8008d26:	f7ff ffa3 	bl	8008c70 <__hexdig_fun>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d14c      	bne.n	8008dc8 <__gethex+0x12e>
 8008d2e:	9a04      	ldr	r2, [sp, #16]
 8008d30:	9907      	ldr	r1, [sp, #28]
 8008d32:	0020      	movs	r0, r4
 8008d34:	f000 feaf 	bl	8009a96 <strncmp>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d109      	bne.n	8008d50 <__gethex+0xb6>
 8008d3c:	2e00      	cmp	r6, #0
 8008d3e:	d109      	bne.n	8008d54 <__gethex+0xba>
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	18e4      	adds	r4, r4, r3
 8008d44:	0026      	movs	r6, r4
 8008d46:	7820      	ldrb	r0, [r4, #0]
 8008d48:	f7ff ff92 	bl	8008c70 <__hexdig_fun>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d13d      	bne.n	8008dcc <__gethex+0x132>
 8008d50:	1e37      	subs	r7, r6, #0
 8008d52:	d001      	beq.n	8008d58 <__gethex+0xbe>
 8008d54:	1b37      	subs	r7, r6, r4
 8008d56:	00bf      	lsls	r7, r7, #2
 8008d58:	7823      	ldrb	r3, [r4, #0]
 8008d5a:	2b50      	cmp	r3, #80	; 0x50
 8008d5c:	d001      	beq.n	8008d62 <__gethex+0xc8>
 8008d5e:	2b70      	cmp	r3, #112	; 0x70
 8008d60:	d147      	bne.n	8008df2 <__gethex+0x158>
 8008d62:	7863      	ldrb	r3, [r4, #1]
 8008d64:	2b2b      	cmp	r3, #43	; 0x2b
 8008d66:	d03d      	beq.n	8008de4 <__gethex+0x14a>
 8008d68:	2b2d      	cmp	r3, #45	; 0x2d
 8008d6a:	d037      	beq.n	8008ddc <__gethex+0x142>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	1c66      	adds	r6, r4, #1
 8008d70:	9306      	str	r3, [sp, #24]
 8008d72:	7830      	ldrb	r0, [r6, #0]
 8008d74:	f7ff ff7c 	bl	8008c70 <__hexdig_fun>
 8008d78:	1e43      	subs	r3, r0, #1
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b18      	cmp	r3, #24
 8008d7e:	d838      	bhi.n	8008df2 <__gethex+0x158>
 8008d80:	3810      	subs	r0, #16
 8008d82:	0005      	movs	r5, r0
 8008d84:	3601      	adds	r6, #1
 8008d86:	7830      	ldrb	r0, [r6, #0]
 8008d88:	f7ff ff72 	bl	8008c70 <__hexdig_fun>
 8008d8c:	1e43      	subs	r3, r0, #1
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b18      	cmp	r3, #24
 8008d92:	d929      	bls.n	8008de8 <__gethex+0x14e>
 8008d94:	9b06      	ldr	r3, [sp, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d000      	beq.n	8008d9c <__gethex+0x102>
 8008d9a:	426d      	negs	r5, r5
 8008d9c:	197f      	adds	r7, r7, r5
 8008d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da0:	601e      	str	r6, [r3, #0]
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d026      	beq.n	8008df6 <__gethex+0x15c>
 8008da8:	2600      	movs	r6, #0
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	42b3      	cmp	r3, r6
 8008dae:	d100      	bne.n	8008db2 <__gethex+0x118>
 8008db0:	3606      	adds	r6, #6
 8008db2:	0030      	movs	r0, r6
 8008db4:	b00d      	add	sp, #52	; 0x34
 8008db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db8:	9b01      	ldr	r3, [sp, #4]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	e7a4      	b.n	8008d0a <__gethex+0x70>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9303      	str	r3, [sp, #12]
 8008dc4:	001e      	movs	r6, r3
 8008dc6:	e7ac      	b.n	8008d22 <__gethex+0x88>
 8008dc8:	3401      	adds	r4, #1
 8008dca:	e7ab      	b.n	8008d24 <__gethex+0x8a>
 8008dcc:	3401      	adds	r4, #1
 8008dce:	e7ba      	b.n	8008d46 <__gethex+0xac>
 8008dd0:	9c01      	ldr	r4, [sp, #4]
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	9303      	str	r3, [sp, #12]
 8008dd6:	e7bf      	b.n	8008d58 <__gethex+0xbe>
 8008dd8:	0007      	movs	r7, r0
 8008dda:	e7fa      	b.n	8008dd2 <__gethex+0x138>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	9306      	str	r3, [sp, #24]
 8008de0:	1ca6      	adds	r6, r4, #2
 8008de2:	e7c6      	b.n	8008d72 <__gethex+0xd8>
 8008de4:	2300      	movs	r3, #0
 8008de6:	e7fa      	b.n	8008dde <__gethex+0x144>
 8008de8:	230a      	movs	r3, #10
 8008dea:	435d      	muls	r5, r3
 8008dec:	182d      	adds	r5, r5, r0
 8008dee:	3d10      	subs	r5, #16
 8008df0:	e7c8      	b.n	8008d84 <__gethex+0xea>
 8008df2:	0026      	movs	r6, r4
 8008df4:	e7d3      	b.n	8008d9e <__gethex+0x104>
 8008df6:	9b01      	ldr	r3, [sp, #4]
 8008df8:	9903      	ldr	r1, [sp, #12]
 8008dfa:	1ae3      	subs	r3, r4, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	2b07      	cmp	r3, #7
 8008e00:	dc47      	bgt.n	8008e92 <__gethex+0x1f8>
 8008e02:	9805      	ldr	r0, [sp, #20]
 8008e04:	f000 fa46 	bl	8009294 <_Balloc>
 8008e08:	0003      	movs	r3, r0
 8008e0a:	3314      	adds	r3, #20
 8008e0c:	9303      	str	r3, [sp, #12]
 8008e0e:	9308      	str	r3, [sp, #32]
 8008e10:	2300      	movs	r3, #0
 8008e12:	0005      	movs	r5, r0
 8008e14:	001e      	movs	r6, r3
 8008e16:	9306      	str	r3, [sp, #24]
 8008e18:	9b01      	ldr	r3, [sp, #4]
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	d33c      	bcc.n	8008e98 <__gethex+0x1fe>
 8008e1e:	9c08      	ldr	r4, [sp, #32]
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	c440      	stmia	r4!, {r6}
 8008e24:	1ae4      	subs	r4, r4, r3
 8008e26:	10a4      	asrs	r4, r4, #2
 8008e28:	612c      	str	r4, [r5, #16]
 8008e2a:	0030      	movs	r0, r6
 8008e2c:	f000 fafe 	bl	800942c <__hi0bits>
 8008e30:	9b02      	ldr	r3, [sp, #8]
 8008e32:	0164      	lsls	r4, r4, #5
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	1a26      	subs	r6, r4, r0
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	429e      	cmp	r6, r3
 8008e3c:	dd5f      	ble.n	8008efe <__gethex+0x264>
 8008e3e:	1af6      	subs	r6, r6, r3
 8008e40:	0031      	movs	r1, r6
 8008e42:	0028      	movs	r0, r5
 8008e44:	f000 fdf7 	bl	8009a36 <__any_on>
 8008e48:	1e04      	subs	r4, r0, #0
 8008e4a:	d00f      	beq.n	8008e6c <__gethex+0x1d2>
 8008e4c:	2401      	movs	r4, #1
 8008e4e:	211f      	movs	r1, #31
 8008e50:	0020      	movs	r0, r4
 8008e52:	1e73      	subs	r3, r6, #1
 8008e54:	4019      	ands	r1, r3
 8008e56:	4088      	lsls	r0, r1
 8008e58:	0001      	movs	r1, r0
 8008e5a:	115a      	asrs	r2, r3, #5
 8008e5c:	9803      	ldr	r0, [sp, #12]
 8008e5e:	0092      	lsls	r2, r2, #2
 8008e60:	5812      	ldr	r2, [r2, r0]
 8008e62:	420a      	tst	r2, r1
 8008e64:	d002      	beq.n	8008e6c <__gethex+0x1d2>
 8008e66:	42a3      	cmp	r3, r4
 8008e68:	dc41      	bgt.n	8008eee <__gethex+0x254>
 8008e6a:	2402      	movs	r4, #2
 8008e6c:	0031      	movs	r1, r6
 8008e6e:	0028      	movs	r0, r5
 8008e70:	f7ff fecc 	bl	8008c0c <rshift>
 8008e74:	19bf      	adds	r7, r7, r6
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	429f      	cmp	r7, r3
 8008e7e:	dd4e      	ble.n	8008f1e <__gethex+0x284>
 8008e80:	0029      	movs	r1, r5
 8008e82:	9805      	ldr	r0, [sp, #20]
 8008e84:	f000 fa3e 	bl	8009304 <_Bfree>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e8c:	26a3      	movs	r6, #163	; 0xa3
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	e78f      	b.n	8008db2 <__gethex+0x118>
 8008e92:	3101      	adds	r1, #1
 8008e94:	105b      	asrs	r3, r3, #1
 8008e96:	e7b2      	b.n	8008dfe <__gethex+0x164>
 8008e98:	1e63      	subs	r3, r4, #1
 8008e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d015      	beq.n	8008ed0 <__gethex+0x236>
 8008ea4:	9b06      	ldr	r3, [sp, #24]
 8008ea6:	2b20      	cmp	r3, #32
 8008ea8:	d105      	bne.n	8008eb6 <__gethex+0x21c>
 8008eaa:	9b08      	ldr	r3, [sp, #32]
 8008eac:	601e      	str	r6, [r3, #0]
 8008eae:	2600      	movs	r6, #0
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	9308      	str	r3, [sp, #32]
 8008eb4:	9606      	str	r6, [sp, #24]
 8008eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb8:	7818      	ldrb	r0, [r3, #0]
 8008eba:	f7ff fed9 	bl	8008c70 <__hexdig_fun>
 8008ebe:	230f      	movs	r3, #15
 8008ec0:	4018      	ands	r0, r3
 8008ec2:	9b06      	ldr	r3, [sp, #24]
 8008ec4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008ec6:	4098      	lsls	r0, r3
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4306      	orrs	r6, r0
 8008ecc:	9306      	str	r3, [sp, #24]
 8008ece:	e7a3      	b.n	8008e18 <__gethex+0x17e>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	9a04      	ldr	r2, [sp, #16]
 8008ed4:	1a9c      	subs	r4, r3, r2
 8008ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed8:	191c      	adds	r4, r3, r4
 8008eda:	9b01      	ldr	r3, [sp, #4]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d8e1      	bhi.n	8008ea4 <__gethex+0x20a>
 8008ee0:	9907      	ldr	r1, [sp, #28]
 8008ee2:	0020      	movs	r0, r4
 8008ee4:	f000 fdd7 	bl	8009a96 <strncmp>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d095      	beq.n	8008e18 <__gethex+0x17e>
 8008eec:	e7da      	b.n	8008ea4 <__gethex+0x20a>
 8008eee:	1eb1      	subs	r1, r6, #2
 8008ef0:	0028      	movs	r0, r5
 8008ef2:	f000 fda0 	bl	8009a36 <__any_on>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0b7      	beq.n	8008e6a <__gethex+0x1d0>
 8008efa:	2403      	movs	r4, #3
 8008efc:	e7b6      	b.n	8008e6c <__gethex+0x1d2>
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	2400      	movs	r4, #0
 8008f02:	429e      	cmp	r6, r3
 8008f04:	dab7      	bge.n	8008e76 <__gethex+0x1dc>
 8008f06:	1b9e      	subs	r6, r3, r6
 8008f08:	0029      	movs	r1, r5
 8008f0a:	0032      	movs	r2, r6
 8008f0c:	9805      	ldr	r0, [sp, #20]
 8008f0e:	f000 fbc1 	bl	8009694 <__lshift>
 8008f12:	0003      	movs	r3, r0
 8008f14:	3314      	adds	r3, #20
 8008f16:	0005      	movs	r5, r0
 8008f18:	1bbf      	subs	r7, r7, r6
 8008f1a:	9303      	str	r3, [sp, #12]
 8008f1c:	e7ab      	b.n	8008e76 <__gethex+0x1dc>
 8008f1e:	9b02      	ldr	r3, [sp, #8]
 8008f20:	685e      	ldr	r6, [r3, #4]
 8008f22:	42b7      	cmp	r7, r6
 8008f24:	da6b      	bge.n	8008ffe <__gethex+0x364>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	1bf6      	subs	r6, r6, r7
 8008f2a:	42b3      	cmp	r3, r6
 8008f2c:	dc32      	bgt.n	8008f94 <__gethex+0x2fa>
 8008f2e:	9b02      	ldr	r3, [sp, #8]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d026      	beq.n	8008f84 <__gethex+0x2ea>
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d028      	beq.n	8008f8c <__gethex+0x2f2>
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d119      	bne.n	8008f72 <__gethex+0x2d8>
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	42b3      	cmp	r3, r6
 8008f42:	d116      	bne.n	8008f72 <__gethex+0x2d8>
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	dc0d      	bgt.n	8008f64 <__gethex+0x2ca>
 8008f48:	9b02      	ldr	r3, [sp, #8]
 8008f4a:	2662      	movs	r6, #98	; 0x62
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	9a01      	ldr	r2, [sp, #4]
 8008f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	2301      	movs	r3, #1
 8008f58:	9a03      	ldr	r2, [sp, #12]
 8008f5a:	612b      	str	r3, [r5, #16]
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f60:	601d      	str	r5, [r3, #0]
 8008f62:	e726      	b.n	8008db2 <__gethex+0x118>
 8008f64:	9901      	ldr	r1, [sp, #4]
 8008f66:	0028      	movs	r0, r5
 8008f68:	3901      	subs	r1, #1
 8008f6a:	f000 fd64 	bl	8009a36 <__any_on>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d1ea      	bne.n	8008f48 <__gethex+0x2ae>
 8008f72:	0029      	movs	r1, r5
 8008f74:	9805      	ldr	r0, [sp, #20]
 8008f76:	f000 f9c5 	bl	8009304 <_Bfree>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f7e:	2650      	movs	r6, #80	; 0x50
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	e716      	b.n	8008db2 <__gethex+0x118>
 8008f84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0de      	beq.n	8008f48 <__gethex+0x2ae>
 8008f8a:	e7f2      	b.n	8008f72 <__gethex+0x2d8>
 8008f8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1da      	bne.n	8008f48 <__gethex+0x2ae>
 8008f92:	e7ee      	b.n	8008f72 <__gethex+0x2d8>
 8008f94:	1e77      	subs	r7, r6, #1
 8008f96:	2c00      	cmp	r4, #0
 8008f98:	d12f      	bne.n	8008ffa <__gethex+0x360>
 8008f9a:	2f00      	cmp	r7, #0
 8008f9c:	d004      	beq.n	8008fa8 <__gethex+0x30e>
 8008f9e:	0039      	movs	r1, r7
 8008fa0:	0028      	movs	r0, r5
 8008fa2:	f000 fd48 	bl	8009a36 <__any_on>
 8008fa6:	0004      	movs	r4, r0
 8008fa8:	231f      	movs	r3, #31
 8008faa:	117a      	asrs	r2, r7, #5
 8008fac:	401f      	ands	r7, r3
 8008fae:	3b1e      	subs	r3, #30
 8008fb0:	40bb      	lsls	r3, r7
 8008fb2:	9903      	ldr	r1, [sp, #12]
 8008fb4:	0092      	lsls	r2, r2, #2
 8008fb6:	5852      	ldr	r2, [r2, r1]
 8008fb8:	421a      	tst	r2, r3
 8008fba:	d001      	beq.n	8008fc0 <__gethex+0x326>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	431c      	orrs	r4, r3
 8008fc0:	9b01      	ldr	r3, [sp, #4]
 8008fc2:	0031      	movs	r1, r6
 8008fc4:	1b9b      	subs	r3, r3, r6
 8008fc6:	2602      	movs	r6, #2
 8008fc8:	0028      	movs	r0, r5
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	f7ff fe1e 	bl	8008c0c <rshift>
 8008fd0:	9b02      	ldr	r3, [sp, #8]
 8008fd2:	685f      	ldr	r7, [r3, #4]
 8008fd4:	2c00      	cmp	r4, #0
 8008fd6:	d041      	beq.n	800905c <__gethex+0x3c2>
 8008fd8:	9b02      	ldr	r3, [sp, #8]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d010      	beq.n	8009002 <__gethex+0x368>
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d012      	beq.n	800900a <__gethex+0x370>
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d106      	bne.n	8008ff6 <__gethex+0x35c>
 8008fe8:	07a2      	lsls	r2, r4, #30
 8008fea:	d504      	bpl.n	8008ff6 <__gethex+0x35c>
 8008fec:	9a03      	ldr	r2, [sp, #12]
 8008fee:	6812      	ldr	r2, [r2, #0]
 8008ff0:	4314      	orrs	r4, r2
 8008ff2:	421c      	tst	r4, r3
 8008ff4:	d10c      	bne.n	8009010 <__gethex+0x376>
 8008ff6:	2310      	movs	r3, #16
 8008ff8:	e02f      	b.n	800905a <__gethex+0x3c0>
 8008ffa:	2401      	movs	r4, #1
 8008ffc:	e7d4      	b.n	8008fa8 <__gethex+0x30e>
 8008ffe:	2601      	movs	r6, #1
 8009000:	e7e8      	b.n	8008fd4 <__gethex+0x33a>
 8009002:	2301      	movs	r3, #1
 8009004:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	9313      	str	r3, [sp, #76]	; 0x4c
 800900a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f2      	beq.n	8008ff6 <__gethex+0x35c>
 8009010:	692c      	ldr	r4, [r5, #16]
 8009012:	00a3      	lsls	r3, r4, #2
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	002b      	movs	r3, r5
 8009018:	00a2      	lsls	r2, r4, #2
 800901a:	3314      	adds	r3, #20
 800901c:	1899      	adds	r1, r3, r2
 800901e:	2200      	movs	r2, #0
 8009020:	4694      	mov	ip, r2
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	1c50      	adds	r0, r2, #1
 8009026:	d01e      	beq.n	8009066 <__gethex+0x3cc>
 8009028:	3201      	adds	r2, #1
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	002b      	movs	r3, r5
 800902e:	3314      	adds	r3, #20
 8009030:	2e02      	cmp	r6, #2
 8009032:	d13b      	bne.n	80090ac <__gethex+0x412>
 8009034:	9a02      	ldr	r2, [sp, #8]
 8009036:	9901      	ldr	r1, [sp, #4]
 8009038:	6812      	ldr	r2, [r2, #0]
 800903a:	3a01      	subs	r2, #1
 800903c:	4291      	cmp	r1, r2
 800903e:	d10b      	bne.n	8009058 <__gethex+0x3be>
 8009040:	114a      	asrs	r2, r1, #5
 8009042:	211f      	movs	r1, #31
 8009044:	9801      	ldr	r0, [sp, #4]
 8009046:	0092      	lsls	r2, r2, #2
 8009048:	4001      	ands	r1, r0
 800904a:	2001      	movs	r0, #1
 800904c:	0004      	movs	r4, r0
 800904e:	408c      	lsls	r4, r1
 8009050:	58d3      	ldr	r3, [r2, r3]
 8009052:	4223      	tst	r3, r4
 8009054:	d000      	beq.n	8009058 <__gethex+0x3be>
 8009056:	2601      	movs	r6, #1
 8009058:	2320      	movs	r3, #32
 800905a:	431e      	orrs	r6, r3
 800905c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800905e:	601d      	str	r5, [r3, #0]
 8009060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009062:	601f      	str	r7, [r3, #0]
 8009064:	e6a5      	b.n	8008db2 <__gethex+0x118>
 8009066:	4662      	mov	r2, ip
 8009068:	c304      	stmia	r3!, {r2}
 800906a:	4299      	cmp	r1, r3
 800906c:	d8d9      	bhi.n	8009022 <__gethex+0x388>
 800906e:	68ab      	ldr	r3, [r5, #8]
 8009070:	429c      	cmp	r4, r3
 8009072:	db12      	blt.n	800909a <__gethex+0x400>
 8009074:	686b      	ldr	r3, [r5, #4]
 8009076:	9805      	ldr	r0, [sp, #20]
 8009078:	1c59      	adds	r1, r3, #1
 800907a:	f000 f90b 	bl	8009294 <_Balloc>
 800907e:	0029      	movs	r1, r5
 8009080:	692b      	ldr	r3, [r5, #16]
 8009082:	9003      	str	r0, [sp, #12]
 8009084:	1c9a      	adds	r2, r3, #2
 8009086:	0092      	lsls	r2, r2, #2
 8009088:	310c      	adds	r1, #12
 800908a:	300c      	adds	r0, #12
 800908c:	f7fe fdb0 	bl	8007bf0 <memcpy>
 8009090:	0029      	movs	r1, r5
 8009092:	9805      	ldr	r0, [sp, #20]
 8009094:	f000 f936 	bl	8009304 <_Bfree>
 8009098:	9d03      	ldr	r5, [sp, #12]
 800909a:	692b      	ldr	r3, [r5, #16]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	612a      	str	r2, [r5, #16]
 80090a0:	2201      	movs	r2, #1
 80090a2:	3304      	adds	r3, #4
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	18eb      	adds	r3, r5, r3
 80090a8:	605a      	str	r2, [r3, #4]
 80090aa:	e7bf      	b.n	800902c <__gethex+0x392>
 80090ac:	692a      	ldr	r2, [r5, #16]
 80090ae:	4294      	cmp	r4, r2
 80090b0:	da0a      	bge.n	80090c8 <__gethex+0x42e>
 80090b2:	2101      	movs	r1, #1
 80090b4:	0028      	movs	r0, r5
 80090b6:	f7ff fda9 	bl	8008c0c <rshift>
 80090ba:	9b02      	ldr	r3, [sp, #8]
 80090bc:	3701      	adds	r7, #1
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	429f      	cmp	r7, r3
 80090c2:	dd00      	ble.n	80090c6 <__gethex+0x42c>
 80090c4:	e6dc      	b.n	8008e80 <__gethex+0x1e6>
 80090c6:	e7c6      	b.n	8009056 <__gethex+0x3bc>
 80090c8:	241f      	movs	r4, #31
 80090ca:	9a01      	ldr	r2, [sp, #4]
 80090cc:	2601      	movs	r6, #1
 80090ce:	4022      	ands	r2, r4
 80090d0:	1e14      	subs	r4, r2, #0
 80090d2:	d0c1      	beq.n	8009058 <__gethex+0x3be>
 80090d4:	9a04      	ldr	r2, [sp, #16]
 80090d6:	189b      	adds	r3, r3, r2
 80090d8:	3b04      	subs	r3, #4
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	f000 f9a6 	bl	800942c <__hi0bits>
 80090e0:	2120      	movs	r1, #32
 80090e2:	1b0c      	subs	r4, r1, r4
 80090e4:	42a0      	cmp	r0, r4
 80090e6:	dbe4      	blt.n	80090b2 <__gethex+0x418>
 80090e8:	e7b6      	b.n	8009058 <__gethex+0x3be>

080090ea <L_shift>:
 80090ea:	2308      	movs	r3, #8
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	2520      	movs	r5, #32
 80090f0:	1a9a      	subs	r2, r3, r2
 80090f2:	0092      	lsls	r2, r2, #2
 80090f4:	1aad      	subs	r5, r5, r2
 80090f6:	6843      	ldr	r3, [r0, #4]
 80090f8:	6806      	ldr	r6, [r0, #0]
 80090fa:	001c      	movs	r4, r3
 80090fc:	40ac      	lsls	r4, r5
 80090fe:	40d3      	lsrs	r3, r2
 8009100:	4334      	orrs	r4, r6
 8009102:	c010      	stmia	r0!, {r4}
 8009104:	6003      	str	r3, [r0, #0]
 8009106:	4288      	cmp	r0, r1
 8009108:	d3f5      	bcc.n	80090f6 <L_shift+0xc>
 800910a:	bd70      	pop	{r4, r5, r6, pc}

0800910c <__match>:
 800910c:	b530      	push	{r4, r5, lr}
 800910e:	6803      	ldr	r3, [r0, #0]
 8009110:	780c      	ldrb	r4, [r1, #0]
 8009112:	3301      	adds	r3, #1
 8009114:	2c00      	cmp	r4, #0
 8009116:	d102      	bne.n	800911e <__match+0x12>
 8009118:	6003      	str	r3, [r0, #0]
 800911a:	2001      	movs	r0, #1
 800911c:	bd30      	pop	{r4, r5, pc}
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	0015      	movs	r5, r2
 8009122:	3d41      	subs	r5, #65	; 0x41
 8009124:	2d19      	cmp	r5, #25
 8009126:	d800      	bhi.n	800912a <__match+0x1e>
 8009128:	3220      	adds	r2, #32
 800912a:	3101      	adds	r1, #1
 800912c:	42a2      	cmp	r2, r4
 800912e:	d0ef      	beq.n	8009110 <__match+0x4>
 8009130:	2000      	movs	r0, #0
 8009132:	e7f3      	b.n	800911c <__match+0x10>

08009134 <__hexnan>:
 8009134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009136:	b08b      	sub	sp, #44	; 0x2c
 8009138:	9201      	str	r2, [sp, #4]
 800913a:	680a      	ldr	r2, [r1, #0]
 800913c:	9901      	ldr	r1, [sp, #4]
 800913e:	1153      	asrs	r3, r2, #5
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	18cb      	adds	r3, r1, r3
 8009144:	9303      	str	r3, [sp, #12]
 8009146:	231f      	movs	r3, #31
 8009148:	401a      	ands	r2, r3
 800914a:	9008      	str	r0, [sp, #32]
 800914c:	9206      	str	r2, [sp, #24]
 800914e:	d002      	beq.n	8009156 <__hexnan+0x22>
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	3304      	adds	r3, #4
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	2500      	movs	r5, #0
 800915a:	1f1e      	subs	r6, r3, #4
 800915c:	0037      	movs	r7, r6
 800915e:	0034      	movs	r4, r6
 8009160:	9b08      	ldr	r3, [sp, #32]
 8009162:	6035      	str	r5, [r6, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	9507      	str	r5, [sp, #28]
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	9502      	str	r5, [sp, #8]
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	3301      	adds	r3, #1
 8009170:	9309      	str	r3, [sp, #36]	; 0x24
 8009172:	9b04      	ldr	r3, [sp, #16]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	9305      	str	r3, [sp, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d028      	beq.n	80091ce <__hexnan+0x9a>
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	f7ff fd77 	bl	8008c70 <__hexdig_fun>
 8009182:	2800      	cmp	r0, #0
 8009184:	d145      	bne.n	8009212 <__hexnan+0xde>
 8009186:	9b05      	ldr	r3, [sp, #20]
 8009188:	2b20      	cmp	r3, #32
 800918a:	d819      	bhi.n	80091c0 <__hexnan+0x8c>
 800918c:	9b02      	ldr	r3, [sp, #8]
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	4293      	cmp	r3, r2
 8009192:	dd12      	ble.n	80091ba <__hexnan+0x86>
 8009194:	42bc      	cmp	r4, r7
 8009196:	d206      	bcs.n	80091a6 <__hexnan+0x72>
 8009198:	2d07      	cmp	r5, #7
 800919a:	dc04      	bgt.n	80091a6 <__hexnan+0x72>
 800919c:	002a      	movs	r2, r5
 800919e:	0039      	movs	r1, r7
 80091a0:	0020      	movs	r0, r4
 80091a2:	f7ff ffa2 	bl	80090ea <L_shift>
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	2508      	movs	r5, #8
 80091aa:	429c      	cmp	r4, r3
 80091ac:	d905      	bls.n	80091ba <__hexnan+0x86>
 80091ae:	1f27      	subs	r7, r4, #4
 80091b0:	2500      	movs	r5, #0
 80091b2:	003c      	movs	r4, r7
 80091b4:	9b02      	ldr	r3, [sp, #8]
 80091b6:	603d      	str	r5, [r7, #0]
 80091b8:	9307      	str	r3, [sp, #28]
 80091ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	e7d5      	b.n	800916c <__hexnan+0x38>
 80091c0:	9b05      	ldr	r3, [sp, #20]
 80091c2:	2b29      	cmp	r3, #41	; 0x29
 80091c4:	d14a      	bne.n	800925c <__hexnan+0x128>
 80091c6:	9b04      	ldr	r3, [sp, #16]
 80091c8:	9a08      	ldr	r2, [sp, #32]
 80091ca:	3302      	adds	r3, #2
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	9b02      	ldr	r3, [sp, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d043      	beq.n	800925c <__hexnan+0x128>
 80091d4:	42bc      	cmp	r4, r7
 80091d6:	d206      	bcs.n	80091e6 <__hexnan+0xb2>
 80091d8:	2d07      	cmp	r5, #7
 80091da:	dc04      	bgt.n	80091e6 <__hexnan+0xb2>
 80091dc:	002a      	movs	r2, r5
 80091de:	0039      	movs	r1, r7
 80091e0:	0020      	movs	r0, r4
 80091e2:	f7ff ff82 	bl	80090ea <L_shift>
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	429c      	cmp	r4, r3
 80091ea:	d926      	bls.n	800923a <__hexnan+0x106>
 80091ec:	cc04      	ldmia	r4!, {r2}
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	3304      	adds	r3, #4
 80091f2:	42a6      	cmp	r6, r4
 80091f4:	d2fa      	bcs.n	80091ec <__hexnan+0xb8>
 80091f6:	2200      	movs	r2, #0
 80091f8:	c304      	stmia	r3!, {r2}
 80091fa:	429e      	cmp	r6, r3
 80091fc:	d2fc      	bcs.n	80091f8 <__hexnan+0xc4>
 80091fe:	6833      	ldr	r3, [r6, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <__hexnan+0xda>
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	429e      	cmp	r6, r3
 8009208:	d126      	bne.n	8009258 <__hexnan+0x124>
 800920a:	2301      	movs	r3, #1
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	2005      	movs	r0, #5
 8009210:	e025      	b.n	800925e <__hexnan+0x12a>
 8009212:	9b02      	ldr	r3, [sp, #8]
 8009214:	3501      	adds	r5, #1
 8009216:	3301      	adds	r3, #1
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	2d08      	cmp	r5, #8
 800921c:	dd06      	ble.n	800922c <__hexnan+0xf8>
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	429c      	cmp	r4, r3
 8009222:	d9ca      	bls.n	80091ba <__hexnan+0x86>
 8009224:	2300      	movs	r3, #0
 8009226:	2501      	movs	r5, #1
 8009228:	3c04      	subs	r4, #4
 800922a:	6023      	str	r3, [r4, #0]
 800922c:	220f      	movs	r2, #15
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	4010      	ands	r0, r2
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	4318      	orrs	r0, r3
 8009236:	6020      	str	r0, [r4, #0]
 8009238:	e7bf      	b.n	80091ba <__hexnan+0x86>
 800923a:	9b06      	ldr	r3, [sp, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0de      	beq.n	80091fe <__hexnan+0xca>
 8009240:	2120      	movs	r1, #32
 8009242:	9a06      	ldr	r2, [sp, #24]
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	1a89      	subs	r1, r1, r2
 8009248:	2201      	movs	r2, #1
 800924a:	4252      	negs	r2, r2
 800924c:	40ca      	lsrs	r2, r1
 800924e:	3b04      	subs	r3, #4
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	400a      	ands	r2, r1
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	e7d2      	b.n	80091fe <__hexnan+0xca>
 8009258:	3e04      	subs	r6, #4
 800925a:	e7d0      	b.n	80091fe <__hexnan+0xca>
 800925c:	2004      	movs	r0, #4
 800925e:	b00b      	add	sp, #44	; 0x2c
 8009260:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009262 <__locale_ctype_ptr_l>:
 8009262:	30ec      	adds	r0, #236	; 0xec
 8009264:	6800      	ldr	r0, [r0, #0]
 8009266:	4770      	bx	lr

08009268 <__localeconv_l>:
 8009268:	30f0      	adds	r0, #240	; 0xf0
 800926a:	4770      	bx	lr

0800926c <__ascii_mbtowc>:
 800926c:	b082      	sub	sp, #8
 800926e:	2900      	cmp	r1, #0
 8009270:	d100      	bne.n	8009274 <__ascii_mbtowc+0x8>
 8009272:	a901      	add	r1, sp, #4
 8009274:	1e10      	subs	r0, r2, #0
 8009276:	d006      	beq.n	8009286 <__ascii_mbtowc+0x1a>
 8009278:	2b00      	cmp	r3, #0
 800927a:	d006      	beq.n	800928a <__ascii_mbtowc+0x1e>
 800927c:	7813      	ldrb	r3, [r2, #0]
 800927e:	600b      	str	r3, [r1, #0]
 8009280:	7810      	ldrb	r0, [r2, #0]
 8009282:	1e43      	subs	r3, r0, #1
 8009284:	4198      	sbcs	r0, r3
 8009286:	b002      	add	sp, #8
 8009288:	4770      	bx	lr
 800928a:	2002      	movs	r0, #2
 800928c:	4240      	negs	r0, r0
 800928e:	e7fa      	b.n	8009286 <__ascii_mbtowc+0x1a>

08009290 <__malloc_lock>:
 8009290:	4770      	bx	lr

08009292 <__malloc_unlock>:
 8009292:	4770      	bx	lr

08009294 <_Balloc>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009298:	0004      	movs	r4, r0
 800929a:	000d      	movs	r5, r1
 800929c:	2e00      	cmp	r6, #0
 800929e:	d107      	bne.n	80092b0 <_Balloc+0x1c>
 80092a0:	2010      	movs	r0, #16
 80092a2:	f7fe fc91 	bl	8007bc8 <malloc>
 80092a6:	6260      	str	r0, [r4, #36]	; 0x24
 80092a8:	6046      	str	r6, [r0, #4]
 80092aa:	6086      	str	r6, [r0, #8]
 80092ac:	6006      	str	r6, [r0, #0]
 80092ae:	60c6      	str	r6, [r0, #12]
 80092b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092b2:	68f3      	ldr	r3, [r6, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d013      	beq.n	80092e0 <_Balloc+0x4c>
 80092b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ba:	00aa      	lsls	r2, r5, #2
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	189b      	adds	r3, r3, r2
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d118      	bne.n	80092f8 <_Balloc+0x64>
 80092c6:	2101      	movs	r1, #1
 80092c8:	000e      	movs	r6, r1
 80092ca:	40ae      	lsls	r6, r5
 80092cc:	1d72      	adds	r2, r6, #5
 80092ce:	0092      	lsls	r2, r2, #2
 80092d0:	0020      	movs	r0, r4
 80092d2:	f000 fbd2 	bl	8009a7a <_calloc_r>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d00c      	beq.n	80092f4 <_Balloc+0x60>
 80092da:	6045      	str	r5, [r0, #4]
 80092dc:	6086      	str	r6, [r0, #8]
 80092de:	e00d      	b.n	80092fc <_Balloc+0x68>
 80092e0:	2221      	movs	r2, #33	; 0x21
 80092e2:	2104      	movs	r1, #4
 80092e4:	0020      	movs	r0, r4
 80092e6:	f000 fbc8 	bl	8009a7a <_calloc_r>
 80092ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ec:	60f0      	str	r0, [r6, #12]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e1      	bne.n	80092b8 <_Balloc+0x24>
 80092f4:	2000      	movs	r0, #0
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	6802      	ldr	r2, [r0, #0]
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	2300      	movs	r3, #0
 80092fe:	6103      	str	r3, [r0, #16]
 8009300:	60c3      	str	r3, [r0, #12]
 8009302:	e7f8      	b.n	80092f6 <_Balloc+0x62>

08009304 <_Bfree>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009308:	0006      	movs	r6, r0
 800930a:	000d      	movs	r5, r1
 800930c:	2c00      	cmp	r4, #0
 800930e:	d107      	bne.n	8009320 <_Bfree+0x1c>
 8009310:	2010      	movs	r0, #16
 8009312:	f7fe fc59 	bl	8007bc8 <malloc>
 8009316:	6270      	str	r0, [r6, #36]	; 0x24
 8009318:	6044      	str	r4, [r0, #4]
 800931a:	6084      	str	r4, [r0, #8]
 800931c:	6004      	str	r4, [r0, #0]
 800931e:	60c4      	str	r4, [r0, #12]
 8009320:	2d00      	cmp	r5, #0
 8009322:	d007      	beq.n	8009334 <_Bfree+0x30>
 8009324:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009326:	686a      	ldr	r2, [r5, #4]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	0092      	lsls	r2, r2, #2
 800932c:	189b      	adds	r3, r3, r2
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	601d      	str	r5, [r3, #0]
 8009334:	bd70      	pop	{r4, r5, r6, pc}

08009336 <__multadd>:
 8009336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009338:	001e      	movs	r6, r3
 800933a:	2314      	movs	r3, #20
 800933c:	469c      	mov	ip, r3
 800933e:	0007      	movs	r7, r0
 8009340:	000c      	movs	r4, r1
 8009342:	2000      	movs	r0, #0
 8009344:	690d      	ldr	r5, [r1, #16]
 8009346:	448c      	add	ip, r1
 8009348:	4663      	mov	r3, ip
 800934a:	8819      	ldrh	r1, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4351      	muls	r1, r2
 8009350:	0c1b      	lsrs	r3, r3, #16
 8009352:	4353      	muls	r3, r2
 8009354:	1989      	adds	r1, r1, r6
 8009356:	0c0e      	lsrs	r6, r1, #16
 8009358:	199b      	adds	r3, r3, r6
 800935a:	b289      	uxth	r1, r1
 800935c:	0c1e      	lsrs	r6, r3, #16
 800935e:	041b      	lsls	r3, r3, #16
 8009360:	185b      	adds	r3, r3, r1
 8009362:	4661      	mov	r1, ip
 8009364:	3001      	adds	r0, #1
 8009366:	c108      	stmia	r1!, {r3}
 8009368:	468c      	mov	ip, r1
 800936a:	4285      	cmp	r5, r0
 800936c:	dcec      	bgt.n	8009348 <__multadd+0x12>
 800936e:	2e00      	cmp	r6, #0
 8009370:	d01b      	beq.n	80093aa <__multadd+0x74>
 8009372:	68a3      	ldr	r3, [r4, #8]
 8009374:	429d      	cmp	r5, r3
 8009376:	db12      	blt.n	800939e <__multadd+0x68>
 8009378:	6863      	ldr	r3, [r4, #4]
 800937a:	0038      	movs	r0, r7
 800937c:	1c59      	adds	r1, r3, #1
 800937e:	f7ff ff89 	bl	8009294 <_Balloc>
 8009382:	0021      	movs	r1, r4
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	9001      	str	r0, [sp, #4]
 8009388:	1c9a      	adds	r2, r3, #2
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	310c      	adds	r1, #12
 800938e:	300c      	adds	r0, #12
 8009390:	f7fe fc2e 	bl	8007bf0 <memcpy>
 8009394:	0021      	movs	r1, r4
 8009396:	0038      	movs	r0, r7
 8009398:	f7ff ffb4 	bl	8009304 <_Bfree>
 800939c:	9c01      	ldr	r4, [sp, #4]
 800939e:	1d2b      	adds	r3, r5, #4
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	18e3      	adds	r3, r4, r3
 80093a4:	3501      	adds	r5, #1
 80093a6:	605e      	str	r6, [r3, #4]
 80093a8:	6125      	str	r5, [r4, #16]
 80093aa:	0020      	movs	r0, r4
 80093ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080093ae <__s2b>:
 80093ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b0:	0006      	movs	r6, r0
 80093b2:	0018      	movs	r0, r3
 80093b4:	000c      	movs	r4, r1
 80093b6:	3008      	adds	r0, #8
 80093b8:	2109      	movs	r1, #9
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	0015      	movs	r5, r2
 80093be:	f7f6 ff49 	bl	8000254 <__divsi3>
 80093c2:	2301      	movs	r3, #1
 80093c4:	2100      	movs	r1, #0
 80093c6:	4283      	cmp	r3, r0
 80093c8:	db20      	blt.n	800940c <__s2b+0x5e>
 80093ca:	0030      	movs	r0, r6
 80093cc:	f7ff ff62 	bl	8009294 <_Balloc>
 80093d0:	9b08      	ldr	r3, [sp, #32]
 80093d2:	6143      	str	r3, [r0, #20]
 80093d4:	2301      	movs	r3, #1
 80093d6:	6103      	str	r3, [r0, #16]
 80093d8:	2d09      	cmp	r5, #9
 80093da:	dd1a      	ble.n	8009412 <__s2b+0x64>
 80093dc:	0023      	movs	r3, r4
 80093de:	3309      	adds	r3, #9
 80093e0:	001f      	movs	r7, r3
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	1964      	adds	r4, r4, r5
 80093e6:	783b      	ldrb	r3, [r7, #0]
 80093e8:	0001      	movs	r1, r0
 80093ea:	3b30      	subs	r3, #48	; 0x30
 80093ec:	220a      	movs	r2, #10
 80093ee:	0030      	movs	r0, r6
 80093f0:	3701      	adds	r7, #1
 80093f2:	f7ff ffa0 	bl	8009336 <__multadd>
 80093f6:	42a7      	cmp	r7, r4
 80093f8:	d1f5      	bne.n	80093e6 <__s2b+0x38>
 80093fa:	002c      	movs	r4, r5
 80093fc:	9b00      	ldr	r3, [sp, #0]
 80093fe:	3c08      	subs	r4, #8
 8009400:	191c      	adds	r4, r3, r4
 8009402:	002f      	movs	r7, r5
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	429f      	cmp	r7, r3
 8009408:	db06      	blt.n	8009418 <__s2b+0x6a>
 800940a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	3101      	adds	r1, #1
 8009410:	e7d9      	b.n	80093c6 <__s2b+0x18>
 8009412:	340a      	adds	r4, #10
 8009414:	2509      	movs	r5, #9
 8009416:	e7f4      	b.n	8009402 <__s2b+0x54>
 8009418:	1b63      	subs	r3, r4, r5
 800941a:	5ddb      	ldrb	r3, [r3, r7]
 800941c:	0001      	movs	r1, r0
 800941e:	3b30      	subs	r3, #48	; 0x30
 8009420:	220a      	movs	r2, #10
 8009422:	0030      	movs	r0, r6
 8009424:	f7ff ff87 	bl	8009336 <__multadd>
 8009428:	3701      	adds	r7, #1
 800942a:	e7eb      	b.n	8009404 <__s2b+0x56>

0800942c <__hi0bits>:
 800942c:	0003      	movs	r3, r0
 800942e:	0c02      	lsrs	r2, r0, #16
 8009430:	2000      	movs	r0, #0
 8009432:	4282      	cmp	r2, r0
 8009434:	d101      	bne.n	800943a <__hi0bits+0xe>
 8009436:	041b      	lsls	r3, r3, #16
 8009438:	3010      	adds	r0, #16
 800943a:	0e1a      	lsrs	r2, r3, #24
 800943c:	d101      	bne.n	8009442 <__hi0bits+0x16>
 800943e:	3008      	adds	r0, #8
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	0f1a      	lsrs	r2, r3, #28
 8009444:	d101      	bne.n	800944a <__hi0bits+0x1e>
 8009446:	3004      	adds	r0, #4
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	0f9a      	lsrs	r2, r3, #30
 800944c:	d101      	bne.n	8009452 <__hi0bits+0x26>
 800944e:	3002      	adds	r0, #2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	db03      	blt.n	800945e <__hi0bits+0x32>
 8009456:	3001      	adds	r0, #1
 8009458:	005b      	lsls	r3, r3, #1
 800945a:	d400      	bmi.n	800945e <__hi0bits+0x32>
 800945c:	2020      	movs	r0, #32
 800945e:	4770      	bx	lr

08009460 <__lo0bits>:
 8009460:	2207      	movs	r2, #7
 8009462:	6803      	ldr	r3, [r0, #0]
 8009464:	b510      	push	{r4, lr}
 8009466:	0001      	movs	r1, r0
 8009468:	401a      	ands	r2, r3
 800946a:	d00d      	beq.n	8009488 <__lo0bits+0x28>
 800946c:	2401      	movs	r4, #1
 800946e:	2000      	movs	r0, #0
 8009470:	4223      	tst	r3, r4
 8009472:	d105      	bne.n	8009480 <__lo0bits+0x20>
 8009474:	3002      	adds	r0, #2
 8009476:	4203      	tst	r3, r0
 8009478:	d003      	beq.n	8009482 <__lo0bits+0x22>
 800947a:	40e3      	lsrs	r3, r4
 800947c:	0020      	movs	r0, r4
 800947e:	600b      	str	r3, [r1, #0]
 8009480:	bd10      	pop	{r4, pc}
 8009482:	089b      	lsrs	r3, r3, #2
 8009484:	600b      	str	r3, [r1, #0]
 8009486:	e7fb      	b.n	8009480 <__lo0bits+0x20>
 8009488:	b29c      	uxth	r4, r3
 800948a:	0010      	movs	r0, r2
 800948c:	2c00      	cmp	r4, #0
 800948e:	d101      	bne.n	8009494 <__lo0bits+0x34>
 8009490:	2010      	movs	r0, #16
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	b2da      	uxtb	r2, r3
 8009496:	2a00      	cmp	r2, #0
 8009498:	d101      	bne.n	800949e <__lo0bits+0x3e>
 800949a:	3008      	adds	r0, #8
 800949c:	0a1b      	lsrs	r3, r3, #8
 800949e:	071a      	lsls	r2, r3, #28
 80094a0:	d101      	bne.n	80094a6 <__lo0bits+0x46>
 80094a2:	3004      	adds	r0, #4
 80094a4:	091b      	lsrs	r3, r3, #4
 80094a6:	079a      	lsls	r2, r3, #30
 80094a8:	d101      	bne.n	80094ae <__lo0bits+0x4e>
 80094aa:	3002      	adds	r0, #2
 80094ac:	089b      	lsrs	r3, r3, #2
 80094ae:	07da      	lsls	r2, r3, #31
 80094b0:	d4e8      	bmi.n	8009484 <__lo0bits+0x24>
 80094b2:	085b      	lsrs	r3, r3, #1
 80094b4:	d001      	beq.n	80094ba <__lo0bits+0x5a>
 80094b6:	3001      	adds	r0, #1
 80094b8:	e7e4      	b.n	8009484 <__lo0bits+0x24>
 80094ba:	2020      	movs	r0, #32
 80094bc:	e7e0      	b.n	8009480 <__lo0bits+0x20>

080094be <__i2b>:
 80094be:	b510      	push	{r4, lr}
 80094c0:	000c      	movs	r4, r1
 80094c2:	2101      	movs	r1, #1
 80094c4:	f7ff fee6 	bl	8009294 <_Balloc>
 80094c8:	2301      	movs	r3, #1
 80094ca:	6144      	str	r4, [r0, #20]
 80094cc:	6103      	str	r3, [r0, #16]
 80094ce:	bd10      	pop	{r4, pc}

080094d0 <__multiply>:
 80094d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094d2:	690b      	ldr	r3, [r1, #16]
 80094d4:	0015      	movs	r5, r2
 80094d6:	6912      	ldr	r2, [r2, #16]
 80094d8:	b089      	sub	sp, #36	; 0x24
 80094da:	000c      	movs	r4, r1
 80094dc:	4293      	cmp	r3, r2
 80094de:	da01      	bge.n	80094e4 <__multiply+0x14>
 80094e0:	002c      	movs	r4, r5
 80094e2:	000d      	movs	r5, r1
 80094e4:	6927      	ldr	r7, [r4, #16]
 80094e6:	692e      	ldr	r6, [r5, #16]
 80094e8:	68a2      	ldr	r2, [r4, #8]
 80094ea:	19bb      	adds	r3, r7, r6
 80094ec:	6861      	ldr	r1, [r4, #4]
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	4293      	cmp	r3, r2
 80094f2:	dd00      	ble.n	80094f6 <__multiply+0x26>
 80094f4:	3101      	adds	r1, #1
 80094f6:	f7ff fecd 	bl	8009294 <_Balloc>
 80094fa:	0003      	movs	r3, r0
 80094fc:	3314      	adds	r3, #20
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	9a00      	ldr	r2, [sp, #0]
 8009502:	19bb      	adds	r3, r7, r6
 8009504:	4694      	mov	ip, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	449c      	add	ip, r3
 800950a:	0013      	movs	r3, r2
 800950c:	2200      	movs	r2, #0
 800950e:	9004      	str	r0, [sp, #16]
 8009510:	4563      	cmp	r3, ip
 8009512:	d31c      	bcc.n	800954e <__multiply+0x7e>
 8009514:	002a      	movs	r2, r5
 8009516:	3414      	adds	r4, #20
 8009518:	00bf      	lsls	r7, r7, #2
 800951a:	19e3      	adds	r3, r4, r7
 800951c:	3214      	adds	r2, #20
 800951e:	00b6      	lsls	r6, r6, #2
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	1993      	adds	r3, r2, r6
 8009524:	9402      	str	r4, [sp, #8]
 8009526:	9306      	str	r3, [sp, #24]
 8009528:	9b06      	ldr	r3, [sp, #24]
 800952a:	429a      	cmp	r2, r3
 800952c:	d311      	bcc.n	8009552 <__multiply+0x82>
 800952e:	9b01      	ldr	r3, [sp, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	dd06      	ble.n	8009542 <__multiply+0x72>
 8009534:	2304      	movs	r3, #4
 8009536:	425b      	negs	r3, r3
 8009538:	449c      	add	ip, r3
 800953a:	4663      	mov	r3, ip
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d051      	beq.n	80095e6 <__multiply+0x116>
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	9a01      	ldr	r2, [sp, #4]
 8009546:	0018      	movs	r0, r3
 8009548:	611a      	str	r2, [r3, #16]
 800954a:	b009      	add	sp, #36	; 0x24
 800954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800954e:	c304      	stmia	r3!, {r2}
 8009550:	e7de      	b.n	8009510 <__multiply+0x40>
 8009552:	8814      	ldrh	r4, [r2, #0]
 8009554:	2c00      	cmp	r4, #0
 8009556:	d01e      	beq.n	8009596 <__multiply+0xc6>
 8009558:	2600      	movs	r6, #0
 800955a:	9d00      	ldr	r5, [sp, #0]
 800955c:	9f02      	ldr	r7, [sp, #8]
 800955e:	cf01      	ldmia	r7!, {r0}
 8009560:	9507      	str	r5, [sp, #28]
 8009562:	cd08      	ldmia	r5!, {r3}
 8009564:	9303      	str	r3, [sp, #12]
 8009566:	b283      	uxth	r3, r0
 8009568:	4363      	muls	r3, r4
 800956a:	0019      	movs	r1, r3
 800956c:	466b      	mov	r3, sp
 800956e:	0c00      	lsrs	r0, r0, #16
 8009570:	899b      	ldrh	r3, [r3, #12]
 8009572:	4360      	muls	r0, r4
 8009574:	18cb      	adds	r3, r1, r3
 8009576:	9903      	ldr	r1, [sp, #12]
 8009578:	199b      	adds	r3, r3, r6
 800957a:	0c09      	lsrs	r1, r1, #16
 800957c:	1841      	adds	r1, r0, r1
 800957e:	0c18      	lsrs	r0, r3, #16
 8009580:	1809      	adds	r1, r1, r0
 8009582:	0c0e      	lsrs	r6, r1, #16
 8009584:	b29b      	uxth	r3, r3
 8009586:	0409      	lsls	r1, r1, #16
 8009588:	430b      	orrs	r3, r1
 800958a:	9907      	ldr	r1, [sp, #28]
 800958c:	600b      	str	r3, [r1, #0]
 800958e:	9b05      	ldr	r3, [sp, #20]
 8009590:	42bb      	cmp	r3, r7
 8009592:	d8e4      	bhi.n	800955e <__multiply+0x8e>
 8009594:	602e      	str	r6, [r5, #0]
 8009596:	6813      	ldr	r3, [r2, #0]
 8009598:	0c1b      	lsrs	r3, r3, #16
 800959a:	9303      	str	r3, [sp, #12]
 800959c:	d01e      	beq.n	80095dc <__multiply+0x10c>
 800959e:	2600      	movs	r6, #0
 80095a0:	9b00      	ldr	r3, [sp, #0]
 80095a2:	9c02      	ldr	r4, [sp, #8]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	9800      	ldr	r0, [sp, #0]
 80095a8:	0007      	movs	r7, r0
 80095aa:	8821      	ldrh	r1, [r4, #0]
 80095ac:	9d03      	ldr	r5, [sp, #12]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	4369      	muls	r1, r5
 80095b2:	c820      	ldmia	r0!, {r5}
 80095b4:	0c2d      	lsrs	r5, r5, #16
 80095b6:	1949      	adds	r1, r1, r5
 80095b8:	198e      	adds	r6, r1, r6
 80095ba:	0431      	lsls	r1, r6, #16
 80095bc:	430b      	orrs	r3, r1
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	cc08      	ldmia	r4!, {r3}
 80095c2:	9903      	ldr	r1, [sp, #12]
 80095c4:	0c1b      	lsrs	r3, r3, #16
 80095c6:	434b      	muls	r3, r1
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	0c36      	lsrs	r6, r6, #16
 80095cc:	b289      	uxth	r1, r1
 80095ce:	185b      	adds	r3, r3, r1
 80095d0:	9905      	ldr	r1, [sp, #20]
 80095d2:	199b      	adds	r3, r3, r6
 80095d4:	0c1e      	lsrs	r6, r3, #16
 80095d6:	42a1      	cmp	r1, r4
 80095d8:	d8e6      	bhi.n	80095a8 <__multiply+0xd8>
 80095da:	6003      	str	r3, [r0, #0]
 80095dc:	9b00      	ldr	r3, [sp, #0]
 80095de:	3204      	adds	r2, #4
 80095e0:	3304      	adds	r3, #4
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	e7a0      	b.n	8009528 <__multiply+0x58>
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	9301      	str	r3, [sp, #4]
 80095ec:	e79f      	b.n	800952e <__multiply+0x5e>
	...

080095f0 <__pow5mult>:
 80095f0:	2303      	movs	r3, #3
 80095f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095f4:	4013      	ands	r3, r2
 80095f6:	0005      	movs	r5, r0
 80095f8:	000e      	movs	r6, r1
 80095fa:	0014      	movs	r4, r2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <__pow5mult+0x22>
 8009600:	4922      	ldr	r1, [pc, #136]	; (800968c <__pow5mult+0x9c>)
 8009602:	3b01      	subs	r3, #1
 8009604:	009a      	lsls	r2, r3, #2
 8009606:	5852      	ldr	r2, [r2, r1]
 8009608:	2300      	movs	r3, #0
 800960a:	0031      	movs	r1, r6
 800960c:	f7ff fe93 	bl	8009336 <__multadd>
 8009610:	0006      	movs	r6, r0
 8009612:	10a3      	asrs	r3, r4, #2
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	d036      	beq.n	8009686 <__pow5mult+0x96>
 8009618:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800961a:	2c00      	cmp	r4, #0
 800961c:	d107      	bne.n	800962e <__pow5mult+0x3e>
 800961e:	2010      	movs	r0, #16
 8009620:	f7fe fad2 	bl	8007bc8 <malloc>
 8009624:	6268      	str	r0, [r5, #36]	; 0x24
 8009626:	6044      	str	r4, [r0, #4]
 8009628:	6084      	str	r4, [r0, #8]
 800962a:	6004      	str	r4, [r0, #0]
 800962c:	60c4      	str	r4, [r0, #12]
 800962e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8009630:	68bc      	ldr	r4, [r7, #8]
 8009632:	2c00      	cmp	r4, #0
 8009634:	d107      	bne.n	8009646 <__pow5mult+0x56>
 8009636:	4916      	ldr	r1, [pc, #88]	; (8009690 <__pow5mult+0xa0>)
 8009638:	0028      	movs	r0, r5
 800963a:	f7ff ff40 	bl	80094be <__i2b>
 800963e:	2300      	movs	r3, #0
 8009640:	0004      	movs	r4, r0
 8009642:	60b8      	str	r0, [r7, #8]
 8009644:	6003      	str	r3, [r0, #0]
 8009646:	2201      	movs	r2, #1
 8009648:	9b01      	ldr	r3, [sp, #4]
 800964a:	4213      	tst	r3, r2
 800964c:	d00a      	beq.n	8009664 <__pow5mult+0x74>
 800964e:	0031      	movs	r1, r6
 8009650:	0022      	movs	r2, r4
 8009652:	0028      	movs	r0, r5
 8009654:	f7ff ff3c 	bl	80094d0 <__multiply>
 8009658:	0007      	movs	r7, r0
 800965a:	0031      	movs	r1, r6
 800965c:	0028      	movs	r0, r5
 800965e:	f7ff fe51 	bl	8009304 <_Bfree>
 8009662:	003e      	movs	r6, r7
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	105b      	asrs	r3, r3, #1
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	d00c      	beq.n	8009686 <__pow5mult+0x96>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	2800      	cmp	r0, #0
 8009670:	d107      	bne.n	8009682 <__pow5mult+0x92>
 8009672:	0022      	movs	r2, r4
 8009674:	0021      	movs	r1, r4
 8009676:	0028      	movs	r0, r5
 8009678:	f7ff ff2a 	bl	80094d0 <__multiply>
 800967c:	2300      	movs	r3, #0
 800967e:	6020      	str	r0, [r4, #0]
 8009680:	6003      	str	r3, [r0, #0]
 8009682:	0004      	movs	r4, r0
 8009684:	e7df      	b.n	8009646 <__pow5mult+0x56>
 8009686:	0030      	movs	r0, r6
 8009688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	0800a718 	.word	0x0800a718
 8009690:	00000271 	.word	0x00000271

08009694 <__lshift>:
 8009694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009696:	000d      	movs	r5, r1
 8009698:	0017      	movs	r7, r2
 800969a:	692b      	ldr	r3, [r5, #16]
 800969c:	1154      	asrs	r4, r2, #5
 800969e:	b085      	sub	sp, #20
 80096a0:	18e3      	adds	r3, r4, r3
 80096a2:	9302      	str	r3, [sp, #8]
 80096a4:	3301      	adds	r3, #1
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	6849      	ldr	r1, [r1, #4]
 80096aa:	68ab      	ldr	r3, [r5, #8]
 80096ac:	9003      	str	r0, [sp, #12]
 80096ae:	9a01      	ldr	r2, [sp, #4]
 80096b0:	4293      	cmp	r3, r2
 80096b2:	db34      	blt.n	800971e <__lshift+0x8a>
 80096b4:	9803      	ldr	r0, [sp, #12]
 80096b6:	f7ff fded 	bl	8009294 <_Balloc>
 80096ba:	2300      	movs	r3, #0
 80096bc:	0002      	movs	r2, r0
 80096be:	0006      	movs	r6, r0
 80096c0:	0019      	movs	r1, r3
 80096c2:	3214      	adds	r2, #20
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	db2d      	blt.n	8009724 <__lshift+0x90>
 80096c8:	43e3      	mvns	r3, r4
 80096ca:	17db      	asrs	r3, r3, #31
 80096cc:	401c      	ands	r4, r3
 80096ce:	002b      	movs	r3, r5
 80096d0:	211f      	movs	r1, #31
 80096d2:	00a4      	lsls	r4, r4, #2
 80096d4:	1914      	adds	r4, r2, r4
 80096d6:	692a      	ldr	r2, [r5, #16]
 80096d8:	3314      	adds	r3, #20
 80096da:	0092      	lsls	r2, r2, #2
 80096dc:	189a      	adds	r2, r3, r2
 80096de:	400f      	ands	r7, r1
 80096e0:	d024      	beq.n	800972c <__lshift+0x98>
 80096e2:	3101      	adds	r1, #1
 80096e4:	1bc9      	subs	r1, r1, r7
 80096e6:	468c      	mov	ip, r1
 80096e8:	2100      	movs	r1, #0
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	40b8      	lsls	r0, r7
 80096ee:	4301      	orrs	r1, r0
 80096f0:	4660      	mov	r0, ip
 80096f2:	6021      	str	r1, [r4, #0]
 80096f4:	cb02      	ldmia	r3!, {r1}
 80096f6:	3404      	adds	r4, #4
 80096f8:	40c1      	lsrs	r1, r0
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d8f5      	bhi.n	80096ea <__lshift+0x56>
 80096fe:	6021      	str	r1, [r4, #0]
 8009700:	2900      	cmp	r1, #0
 8009702:	d002      	beq.n	800970a <__lshift+0x76>
 8009704:	9b02      	ldr	r3, [sp, #8]
 8009706:	3302      	adds	r3, #2
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	9803      	ldr	r0, [sp, #12]
 800970e:	3b01      	subs	r3, #1
 8009710:	6133      	str	r3, [r6, #16]
 8009712:	0029      	movs	r1, r5
 8009714:	f7ff fdf6 	bl	8009304 <_Bfree>
 8009718:	0030      	movs	r0, r6
 800971a:	b005      	add	sp, #20
 800971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971e:	3101      	adds	r1, #1
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	e7c4      	b.n	80096ae <__lshift+0x1a>
 8009724:	0098      	lsls	r0, r3, #2
 8009726:	5011      	str	r1, [r2, r0]
 8009728:	3301      	adds	r3, #1
 800972a:	e7cb      	b.n	80096c4 <__lshift+0x30>
 800972c:	cb02      	ldmia	r3!, {r1}
 800972e:	c402      	stmia	r4!, {r1}
 8009730:	429a      	cmp	r2, r3
 8009732:	d8fb      	bhi.n	800972c <__lshift+0x98>
 8009734:	e7e9      	b.n	800970a <__lshift+0x76>

08009736 <__mcmp>:
 8009736:	690a      	ldr	r2, [r1, #16]
 8009738:	6903      	ldr	r3, [r0, #16]
 800973a:	b530      	push	{r4, r5, lr}
 800973c:	1a9b      	subs	r3, r3, r2
 800973e:	d10e      	bne.n	800975e <__mcmp+0x28>
 8009740:	0092      	lsls	r2, r2, #2
 8009742:	3014      	adds	r0, #20
 8009744:	3114      	adds	r1, #20
 8009746:	1884      	adds	r4, r0, r2
 8009748:	1889      	adds	r1, r1, r2
 800974a:	3c04      	subs	r4, #4
 800974c:	3904      	subs	r1, #4
 800974e:	6822      	ldr	r2, [r4, #0]
 8009750:	680d      	ldr	r5, [r1, #0]
 8009752:	42aa      	cmp	r2, r5
 8009754:	d005      	beq.n	8009762 <__mcmp+0x2c>
 8009756:	42aa      	cmp	r2, r5
 8009758:	4192      	sbcs	r2, r2
 800975a:	2301      	movs	r3, #1
 800975c:	4313      	orrs	r3, r2
 800975e:	0018      	movs	r0, r3
 8009760:	bd30      	pop	{r4, r5, pc}
 8009762:	42a0      	cmp	r0, r4
 8009764:	d3f1      	bcc.n	800974a <__mcmp+0x14>
 8009766:	e7fa      	b.n	800975e <__mcmp+0x28>

08009768 <__mdiff>:
 8009768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976a:	000d      	movs	r5, r1
 800976c:	b085      	sub	sp, #20
 800976e:	0007      	movs	r7, r0
 8009770:	0011      	movs	r1, r2
 8009772:	0028      	movs	r0, r5
 8009774:	0014      	movs	r4, r2
 8009776:	f7ff ffde 	bl	8009736 <__mcmp>
 800977a:	1e06      	subs	r6, r0, #0
 800977c:	d108      	bne.n	8009790 <__mdiff+0x28>
 800977e:	0001      	movs	r1, r0
 8009780:	0038      	movs	r0, r7
 8009782:	f7ff fd87 	bl	8009294 <_Balloc>
 8009786:	2301      	movs	r3, #1
 8009788:	6146      	str	r6, [r0, #20]
 800978a:	6103      	str	r3, [r0, #16]
 800978c:	b005      	add	sp, #20
 800978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009790:	2301      	movs	r3, #1
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	2800      	cmp	r0, #0
 8009796:	db04      	blt.n	80097a2 <__mdiff+0x3a>
 8009798:	0023      	movs	r3, r4
 800979a:	002c      	movs	r4, r5
 800979c:	001d      	movs	r5, r3
 800979e:	2300      	movs	r3, #0
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	6861      	ldr	r1, [r4, #4]
 80097a4:	0038      	movs	r0, r7
 80097a6:	f7ff fd75 	bl	8009294 <_Balloc>
 80097aa:	002f      	movs	r7, r5
 80097ac:	2200      	movs	r2, #0
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	6926      	ldr	r6, [r4, #16]
 80097b2:	60c3      	str	r3, [r0, #12]
 80097b4:	3414      	adds	r4, #20
 80097b6:	00b3      	lsls	r3, r6, #2
 80097b8:	18e3      	adds	r3, r4, r3
 80097ba:	9302      	str	r3, [sp, #8]
 80097bc:	692b      	ldr	r3, [r5, #16]
 80097be:	3714      	adds	r7, #20
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	18fb      	adds	r3, r7, r3
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	0003      	movs	r3, r0
 80097c8:	4694      	mov	ip, r2
 80097ca:	3314      	adds	r3, #20
 80097cc:	cc20      	ldmia	r4!, {r5}
 80097ce:	cf04      	ldmia	r7!, {r2}
 80097d0:	9201      	str	r2, [sp, #4]
 80097d2:	b2aa      	uxth	r2, r5
 80097d4:	4494      	add	ip, r2
 80097d6:	466a      	mov	r2, sp
 80097d8:	4661      	mov	r1, ip
 80097da:	8892      	ldrh	r2, [r2, #4]
 80097dc:	0c2d      	lsrs	r5, r5, #16
 80097de:	1a8a      	subs	r2, r1, r2
 80097e0:	9901      	ldr	r1, [sp, #4]
 80097e2:	0c09      	lsrs	r1, r1, #16
 80097e4:	1a69      	subs	r1, r5, r1
 80097e6:	1415      	asrs	r5, r2, #16
 80097e8:	1949      	adds	r1, r1, r5
 80097ea:	140d      	asrs	r5, r1, #16
 80097ec:	b292      	uxth	r2, r2
 80097ee:	0409      	lsls	r1, r1, #16
 80097f0:	430a      	orrs	r2, r1
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	9a03      	ldr	r2, [sp, #12]
 80097f6:	46ac      	mov	ip, r5
 80097f8:	3304      	adds	r3, #4
 80097fa:	42ba      	cmp	r2, r7
 80097fc:	d8e6      	bhi.n	80097cc <__mdiff+0x64>
 80097fe:	9902      	ldr	r1, [sp, #8]
 8009800:	001a      	movs	r2, r3
 8009802:	428c      	cmp	r4, r1
 8009804:	d305      	bcc.n	8009812 <__mdiff+0xaa>
 8009806:	3a04      	subs	r2, #4
 8009808:	6813      	ldr	r3, [r2, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00e      	beq.n	800982c <__mdiff+0xc4>
 800980e:	6106      	str	r6, [r0, #16]
 8009810:	e7bc      	b.n	800978c <__mdiff+0x24>
 8009812:	cc04      	ldmia	r4!, {r2}
 8009814:	b291      	uxth	r1, r2
 8009816:	4461      	add	r1, ip
 8009818:	140d      	asrs	r5, r1, #16
 800981a:	0c12      	lsrs	r2, r2, #16
 800981c:	1952      	adds	r2, r2, r5
 800981e:	1415      	asrs	r5, r2, #16
 8009820:	b289      	uxth	r1, r1
 8009822:	0412      	lsls	r2, r2, #16
 8009824:	430a      	orrs	r2, r1
 8009826:	46ac      	mov	ip, r5
 8009828:	c304      	stmia	r3!, {r2}
 800982a:	e7e8      	b.n	80097fe <__mdiff+0x96>
 800982c:	3e01      	subs	r6, #1
 800982e:	e7ea      	b.n	8009806 <__mdiff+0x9e>

08009830 <__ulp>:
 8009830:	000b      	movs	r3, r1
 8009832:	4910      	ldr	r1, [pc, #64]	; (8009874 <__ulp+0x44>)
 8009834:	b510      	push	{r4, lr}
 8009836:	4019      	ands	r1, r3
 8009838:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <__ulp+0x48>)
 800983a:	18c9      	adds	r1, r1, r3
 800983c:	2900      	cmp	r1, #0
 800983e:	dd04      	ble.n	800984a <__ulp+0x1a>
 8009840:	2200      	movs	r2, #0
 8009842:	000b      	movs	r3, r1
 8009844:	0010      	movs	r0, r2
 8009846:	0019      	movs	r1, r3
 8009848:	bd10      	pop	{r4, pc}
 800984a:	4249      	negs	r1, r1
 800984c:	1509      	asrs	r1, r1, #20
 800984e:	2200      	movs	r2, #0
 8009850:	2300      	movs	r3, #0
 8009852:	2913      	cmp	r1, #19
 8009854:	dc04      	bgt.n	8009860 <__ulp+0x30>
 8009856:	2080      	movs	r0, #128	; 0x80
 8009858:	0300      	lsls	r0, r0, #12
 800985a:	4108      	asrs	r0, r1
 800985c:	0003      	movs	r3, r0
 800985e:	e7f1      	b.n	8009844 <__ulp+0x14>
 8009860:	3914      	subs	r1, #20
 8009862:	2001      	movs	r0, #1
 8009864:	291e      	cmp	r1, #30
 8009866:	dc02      	bgt.n	800986e <__ulp+0x3e>
 8009868:	241f      	movs	r4, #31
 800986a:	1a61      	subs	r1, r4, r1
 800986c:	4088      	lsls	r0, r1
 800986e:	0002      	movs	r2, r0
 8009870:	e7e8      	b.n	8009844 <__ulp+0x14>
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	7ff00000 	.word	0x7ff00000
 8009878:	fcc00000 	.word	0xfcc00000

0800987c <__b2d>:
 800987c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800987e:	0006      	movs	r6, r0
 8009880:	6903      	ldr	r3, [r0, #16]
 8009882:	3614      	adds	r6, #20
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	18f3      	adds	r3, r6, r3
 8009888:	1f1d      	subs	r5, r3, #4
 800988a:	682c      	ldr	r4, [r5, #0]
 800988c:	000f      	movs	r7, r1
 800988e:	0020      	movs	r0, r4
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	f7ff fdcb 	bl	800942c <__hi0bits>
 8009896:	2320      	movs	r3, #32
 8009898:	1a1b      	subs	r3, r3, r0
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	491c      	ldr	r1, [pc, #112]	; (8009910 <__b2d+0x94>)
 800989e:	280a      	cmp	r0, #10
 80098a0:	dc16      	bgt.n	80098d0 <__b2d+0x54>
 80098a2:	230b      	movs	r3, #11
 80098a4:	0027      	movs	r7, r4
 80098a6:	1a1b      	subs	r3, r3, r0
 80098a8:	40df      	lsrs	r7, r3
 80098aa:	4339      	orrs	r1, r7
 80098ac:	469c      	mov	ip, r3
 80098ae:	000b      	movs	r3, r1
 80098b0:	2100      	movs	r1, #0
 80098b2:	42ae      	cmp	r6, r5
 80098b4:	d202      	bcs.n	80098bc <__b2d+0x40>
 80098b6:	9901      	ldr	r1, [sp, #4]
 80098b8:	3908      	subs	r1, #8
 80098ba:	6809      	ldr	r1, [r1, #0]
 80098bc:	3015      	adds	r0, #21
 80098be:	4084      	lsls	r4, r0
 80098c0:	4660      	mov	r0, ip
 80098c2:	40c1      	lsrs	r1, r0
 80098c4:	430c      	orrs	r4, r1
 80098c6:	0022      	movs	r2, r4
 80098c8:	0010      	movs	r0, r2
 80098ca:	0019      	movs	r1, r3
 80098cc:	b003      	add	sp, #12
 80098ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d0:	2700      	movs	r7, #0
 80098d2:	42ae      	cmp	r6, r5
 80098d4:	d202      	bcs.n	80098dc <__b2d+0x60>
 80098d6:	9d01      	ldr	r5, [sp, #4]
 80098d8:	3d08      	subs	r5, #8
 80098da:	682f      	ldr	r7, [r5, #0]
 80098dc:	380b      	subs	r0, #11
 80098de:	4684      	mov	ip, r0
 80098e0:	1e03      	subs	r3, r0, #0
 80098e2:	d012      	beq.n	800990a <__b2d+0x8e>
 80098e4:	409c      	lsls	r4, r3
 80098e6:	2020      	movs	r0, #32
 80098e8:	4321      	orrs	r1, r4
 80098ea:	003c      	movs	r4, r7
 80098ec:	1ac0      	subs	r0, r0, r3
 80098ee:	40c4      	lsrs	r4, r0
 80098f0:	4321      	orrs	r1, r4
 80098f2:	000b      	movs	r3, r1
 80098f4:	2100      	movs	r1, #0
 80098f6:	42b5      	cmp	r5, r6
 80098f8:	d901      	bls.n	80098fe <__b2d+0x82>
 80098fa:	3d04      	subs	r5, #4
 80098fc:	6829      	ldr	r1, [r5, #0]
 80098fe:	4664      	mov	r4, ip
 8009900:	40c1      	lsrs	r1, r0
 8009902:	40a7      	lsls	r7, r4
 8009904:	430f      	orrs	r7, r1
 8009906:	003a      	movs	r2, r7
 8009908:	e7de      	b.n	80098c8 <__b2d+0x4c>
 800990a:	4321      	orrs	r1, r4
 800990c:	000b      	movs	r3, r1
 800990e:	e7fa      	b.n	8009906 <__b2d+0x8a>
 8009910:	3ff00000 	.word	0x3ff00000

08009914 <__d2b>:
 8009914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009916:	001d      	movs	r5, r3
 8009918:	2101      	movs	r1, #1
 800991a:	9f08      	ldr	r7, [sp, #32]
 800991c:	0014      	movs	r4, r2
 800991e:	f7ff fcb9 	bl	8009294 <_Balloc>
 8009922:	032b      	lsls	r3, r5, #12
 8009924:	006d      	lsls	r5, r5, #1
 8009926:	0006      	movs	r6, r0
 8009928:	0b1b      	lsrs	r3, r3, #12
 800992a:	0d6d      	lsrs	r5, r5, #21
 800992c:	d124      	bne.n	8009978 <__d2b+0x64>
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	2c00      	cmp	r4, #0
 8009932:	d027      	beq.n	8009984 <__d2b+0x70>
 8009934:	4668      	mov	r0, sp
 8009936:	9400      	str	r4, [sp, #0]
 8009938:	f7ff fd92 	bl	8009460 <__lo0bits>
 800993c:	9c00      	ldr	r4, [sp, #0]
 800993e:	2800      	cmp	r0, #0
 8009940:	d01e      	beq.n	8009980 <__d2b+0x6c>
 8009942:	9b01      	ldr	r3, [sp, #4]
 8009944:	2120      	movs	r1, #32
 8009946:	001a      	movs	r2, r3
 8009948:	1a09      	subs	r1, r1, r0
 800994a:	408a      	lsls	r2, r1
 800994c:	40c3      	lsrs	r3, r0
 800994e:	4322      	orrs	r2, r4
 8009950:	6172      	str	r2, [r6, #20]
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	9c01      	ldr	r4, [sp, #4]
 8009956:	61b4      	str	r4, [r6, #24]
 8009958:	1e63      	subs	r3, r4, #1
 800995a:	419c      	sbcs	r4, r3
 800995c:	3401      	adds	r4, #1
 800995e:	6134      	str	r4, [r6, #16]
 8009960:	2d00      	cmp	r5, #0
 8009962:	d018      	beq.n	8009996 <__d2b+0x82>
 8009964:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <__d2b+0x9c>)
 8009966:	18ed      	adds	r5, r5, r3
 8009968:	2335      	movs	r3, #53	; 0x35
 800996a:	182d      	adds	r5, r5, r0
 800996c:	603d      	str	r5, [r7, #0]
 800996e:	1a18      	subs	r0, r3, r0
 8009970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009972:	6018      	str	r0, [r3, #0]
 8009974:	0030      	movs	r0, r6
 8009976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009978:	2280      	movs	r2, #128	; 0x80
 800997a:	0352      	lsls	r2, r2, #13
 800997c:	4313      	orrs	r3, r2
 800997e:	e7d6      	b.n	800992e <__d2b+0x1a>
 8009980:	6174      	str	r4, [r6, #20]
 8009982:	e7e7      	b.n	8009954 <__d2b+0x40>
 8009984:	a801      	add	r0, sp, #4
 8009986:	f7ff fd6b 	bl	8009460 <__lo0bits>
 800998a:	2401      	movs	r4, #1
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	6134      	str	r4, [r6, #16]
 8009990:	6173      	str	r3, [r6, #20]
 8009992:	3020      	adds	r0, #32
 8009994:	e7e4      	b.n	8009960 <__d2b+0x4c>
 8009996:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <__d2b+0xa0>)
 8009998:	18c0      	adds	r0, r0, r3
 800999a:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <__d2b+0xa4>)
 800999c:	6038      	str	r0, [r7, #0]
 800999e:	18e3      	adds	r3, r4, r3
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	18f3      	adds	r3, r6, r3
 80099a4:	6958      	ldr	r0, [r3, #20]
 80099a6:	f7ff fd41 	bl	800942c <__hi0bits>
 80099aa:	0164      	lsls	r4, r4, #5
 80099ac:	1a20      	subs	r0, r4, r0
 80099ae:	e7df      	b.n	8009970 <__d2b+0x5c>
 80099b0:	fffffbcd 	.word	0xfffffbcd
 80099b4:	fffffbce 	.word	0xfffffbce
 80099b8:	3fffffff 	.word	0x3fffffff

080099bc <__ratio>:
 80099bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099be:	b085      	sub	sp, #20
 80099c0:	000f      	movs	r7, r1
 80099c2:	a902      	add	r1, sp, #8
 80099c4:	0006      	movs	r6, r0
 80099c6:	f7ff ff59 	bl	800987c <__b2d>
 80099ca:	0004      	movs	r4, r0
 80099cc:	000d      	movs	r5, r1
 80099ce:	0038      	movs	r0, r7
 80099d0:	a903      	add	r1, sp, #12
 80099d2:	9400      	str	r4, [sp, #0]
 80099d4:	9501      	str	r5, [sp, #4]
 80099d6:	f7ff ff51 	bl	800987c <__b2d>
 80099da:	6936      	ldr	r6, [r6, #16]
 80099dc:	693f      	ldr	r7, [r7, #16]
 80099de:	0002      	movs	r2, r0
 80099e0:	1bf7      	subs	r7, r6, r7
 80099e2:	017e      	lsls	r6, r7, #5
 80099e4:	46b4      	mov	ip, r6
 80099e6:	9f03      	ldr	r7, [sp, #12]
 80099e8:	9e02      	ldr	r6, [sp, #8]
 80099ea:	000b      	movs	r3, r1
 80099ec:	1bf6      	subs	r6, r6, r7
 80099ee:	4466      	add	r6, ip
 80099f0:	0537      	lsls	r7, r6, #20
 80099f2:	2e00      	cmp	r6, #0
 80099f4:	dd07      	ble.n	8009a06 <__ratio+0x4a>
 80099f6:	1979      	adds	r1, r7, r5
 80099f8:	9101      	str	r1, [sp, #4]
 80099fa:	9800      	ldr	r0, [sp, #0]
 80099fc:	9901      	ldr	r1, [sp, #4]
 80099fe:	f7f8 f8a7 	bl	8001b50 <__aeabi_ddiv>
 8009a02:	b005      	add	sp, #20
 8009a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a06:	1bcb      	subs	r3, r1, r7
 8009a08:	e7f7      	b.n	80099fa <__ratio+0x3e>

08009a0a <__copybits>:
 8009a0a:	0013      	movs	r3, r2
 8009a0c:	3901      	subs	r1, #1
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	1149      	asrs	r1, r1, #5
 8009a12:	6912      	ldr	r2, [r2, #16]
 8009a14:	3101      	adds	r1, #1
 8009a16:	0089      	lsls	r1, r1, #2
 8009a18:	3314      	adds	r3, #20
 8009a1a:	0092      	lsls	r2, r2, #2
 8009a1c:	1841      	adds	r1, r0, r1
 8009a1e:	189a      	adds	r2, r3, r2
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d803      	bhi.n	8009a2c <__copybits+0x22>
 8009a24:	2300      	movs	r3, #0
 8009a26:	4281      	cmp	r1, r0
 8009a28:	d803      	bhi.n	8009a32 <__copybits+0x28>
 8009a2a:	bd10      	pop	{r4, pc}
 8009a2c:	cb10      	ldmia	r3!, {r4}
 8009a2e:	c010      	stmia	r0!, {r4}
 8009a30:	e7f6      	b.n	8009a20 <__copybits+0x16>
 8009a32:	c008      	stmia	r0!, {r3}
 8009a34:	e7f7      	b.n	8009a26 <__copybits+0x1c>

08009a36 <__any_on>:
 8009a36:	0002      	movs	r2, r0
 8009a38:	6900      	ldr	r0, [r0, #16]
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	3214      	adds	r2, #20
 8009a3e:	114b      	asrs	r3, r1, #5
 8009a40:	4298      	cmp	r0, r3
 8009a42:	db12      	blt.n	8009a6a <__any_on+0x34>
 8009a44:	dd0b      	ble.n	8009a5e <__any_on+0x28>
 8009a46:	201f      	movs	r0, #31
 8009a48:	4001      	ands	r1, r0
 8009a4a:	d008      	beq.n	8009a5e <__any_on+0x28>
 8009a4c:	0098      	lsls	r0, r3, #2
 8009a4e:	5884      	ldr	r4, [r0, r2]
 8009a50:	0020      	movs	r0, r4
 8009a52:	40c8      	lsrs	r0, r1
 8009a54:	4088      	lsls	r0, r1
 8009a56:	0001      	movs	r1, r0
 8009a58:	2001      	movs	r0, #1
 8009a5a:	428c      	cmp	r4, r1
 8009a5c:	d104      	bne.n	8009a68 <__any_on+0x32>
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	18d3      	adds	r3, r2, r3
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d803      	bhi.n	8009a6e <__any_on+0x38>
 8009a66:	2000      	movs	r0, #0
 8009a68:	bd10      	pop	{r4, pc}
 8009a6a:	0003      	movs	r3, r0
 8009a6c:	e7f7      	b.n	8009a5e <__any_on+0x28>
 8009a6e:	3b04      	subs	r3, #4
 8009a70:	6819      	ldr	r1, [r3, #0]
 8009a72:	2900      	cmp	r1, #0
 8009a74:	d0f5      	beq.n	8009a62 <__any_on+0x2c>
 8009a76:	2001      	movs	r0, #1
 8009a78:	e7f6      	b.n	8009a68 <__any_on+0x32>

08009a7a <_calloc_r>:
 8009a7a:	434a      	muls	r2, r1
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0014      	movs	r4, r2
 8009a82:	f7fe f911 	bl	8007ca8 <_malloc_r>
 8009a86:	1e05      	subs	r5, r0, #0
 8009a88:	d003      	beq.n	8009a92 <_calloc_r+0x18>
 8009a8a:	0022      	movs	r2, r4
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	f7fe f8b8 	bl	8007c02 <memset>
 8009a92:	0028      	movs	r0, r5
 8009a94:	bd70      	pop	{r4, r5, r6, pc}

08009a96 <strncmp>:
 8009a96:	2300      	movs	r3, #0
 8009a98:	b530      	push	{r4, r5, lr}
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d00a      	beq.n	8009ab4 <strncmp+0x1e>
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	5cc4      	ldrb	r4, [r0, r3]
 8009aa2:	5ccd      	ldrb	r5, [r1, r3]
 8009aa4:	42ac      	cmp	r4, r5
 8009aa6:	d104      	bne.n	8009ab2 <strncmp+0x1c>
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d002      	beq.n	8009ab2 <strncmp+0x1c>
 8009aac:	3301      	adds	r3, #1
 8009aae:	2c00      	cmp	r4, #0
 8009ab0:	d1f6      	bne.n	8009aa0 <strncmp+0xa>
 8009ab2:	1b63      	subs	r3, r4, r5
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	bd30      	pop	{r4, r5, pc}

08009ab8 <__ascii_wctomb>:
 8009ab8:	1e0b      	subs	r3, r1, #0
 8009aba:	d004      	beq.n	8009ac6 <__ascii_wctomb+0xe>
 8009abc:	2aff      	cmp	r2, #255	; 0xff
 8009abe:	d904      	bls.n	8009aca <__ascii_wctomb+0x12>
 8009ac0:	238a      	movs	r3, #138	; 0x8a
 8009ac2:	6003      	str	r3, [r0, #0]
 8009ac4:	3b8b      	subs	r3, #139	; 0x8b
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	4770      	bx	lr
 8009aca:	700a      	strb	r2, [r1, #0]
 8009acc:	2301      	movs	r3, #1
 8009ace:	e7fa      	b.n	8009ac6 <__ascii_wctomb+0xe>

08009ad0 <atan2>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	f000 f85b 	bl	8009b8c <__ieee754_atan2>
 8009ad6:	bd10      	pop	{r4, pc}

08009ad8 <sqrt>:
 8009ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ada:	b08f      	sub	sp, #60	; 0x3c
 8009adc:	0004      	movs	r4, r0
 8009ade:	000d      	movs	r5, r1
 8009ae0:	f000 f906 	bl	8009cf0 <__ieee754_sqrt>
 8009ae4:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <sqrt+0xac>)
 8009ae6:	9000      	str	r0, [sp, #0]
 8009ae8:	9101      	str	r1, [sp, #4]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	b25b      	sxtb	r3, r3
 8009aee:	9302      	str	r3, [sp, #8]
 8009af0:	3301      	adds	r3, #1
 8009af2:	d033      	beq.n	8009b5c <sqrt+0x84>
 8009af4:	0022      	movs	r2, r4
 8009af6:	002b      	movs	r3, r5
 8009af8:	0020      	movs	r0, r4
 8009afa:	0029      	movs	r1, r5
 8009afc:	f7f9 f9f2 	bl	8002ee4 <__aeabi_dcmpun>
 8009b00:	9003      	str	r0, [sp, #12]
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d12a      	bne.n	8009b5c <sqrt+0x84>
 8009b06:	2600      	movs	r6, #0
 8009b08:	2700      	movs	r7, #0
 8009b0a:	0032      	movs	r2, r6
 8009b0c:	003b      	movs	r3, r7
 8009b0e:	0020      	movs	r0, r4
 8009b10:	0029      	movs	r1, r5
 8009b12:	f7f6 fca1 	bl	8000458 <__aeabi_dcmplt>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d020      	beq.n	8009b5c <sqrt+0x84>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <sqrt+0xb0>)
 8009b20:	9408      	str	r4, [sp, #32]
 8009b22:	9509      	str	r5, [sp, #36]	; 0x24
 8009b24:	9305      	str	r3, [sp, #20]
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	9406      	str	r4, [sp, #24]
 8009b2a:	9507      	str	r5, [sp, #28]
 8009b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b2e:	9b02      	ldr	r3, [sp, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d117      	bne.n	8009b64 <sqrt+0x8c>
 8009b34:	960a      	str	r6, [sp, #40]	; 0x28
 8009b36:	970b      	str	r7, [sp, #44]	; 0x2c
 8009b38:	a804      	add	r0, sp, #16
 8009b3a:	f000 fb15 	bl	800a168 <matherr>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d01b      	beq.n	8009b7a <sqrt+0xa2>
 8009b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b44:	9302      	str	r3, [sp, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d004      	beq.n	8009b54 <sqrt+0x7c>
 8009b4a:	f7fe f813 	bl	8007b74 <__errno>
 8009b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b50:	9302      	str	r3, [sp, #8]
 8009b52:	6003      	str	r3, [r0, #0]
 8009b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	9401      	str	r4, [sp, #4]
 8009b5c:	9800      	ldr	r0, [sp, #0]
 8009b5e:	9901      	ldr	r1, [sp, #4]
 8009b60:	b00f      	add	sp, #60	; 0x3c
 8009b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b64:	003b      	movs	r3, r7
 8009b66:	0032      	movs	r2, r6
 8009b68:	0030      	movs	r0, r6
 8009b6a:	0039      	movs	r1, r7
 8009b6c:	f7f7 fff0 	bl	8001b50 <__aeabi_ddiv>
 8009b70:	9b02      	ldr	r3, [sp, #8]
 8009b72:	900a      	str	r0, [sp, #40]	; 0x28
 8009b74:	910b      	str	r1, [sp, #44]	; 0x2c
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d1de      	bne.n	8009b38 <sqrt+0x60>
 8009b7a:	f7fd fffb 	bl	8007b74 <__errno>
 8009b7e:	2321      	movs	r3, #33	; 0x21
 8009b80:	6003      	str	r3, [r0, #0]
 8009b82:	e7de      	b.n	8009b42 <sqrt+0x6a>
 8009b84:	200001d8 	.word	0x200001d8
 8009b88:	0800a825 	.word	0x0800a825

08009b8c <__ieee754_atan2>:
 8009b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b8e:	4254      	negs	r4, r2
 8009b90:	005e      	lsls	r6, r3, #1
 8009b92:	4314      	orrs	r4, r2
 8009b94:	4d48      	ldr	r5, [pc, #288]	; (8009cb8 <__ieee754_atan2+0x12c>)
 8009b96:	0876      	lsrs	r6, r6, #1
 8009b98:	0fe4      	lsrs	r4, r4, #31
 8009b9a:	9001      	str	r0, [sp, #4]
 8009b9c:	9100      	str	r1, [sp, #0]
 8009b9e:	4334      	orrs	r4, r6
 8009ba0:	42ac      	cmp	r4, r5
 8009ba2:	d808      	bhi.n	8009bb6 <__ieee754_atan2+0x2a>
 8009ba4:	4244      	negs	r4, r0
 8009ba6:	004d      	lsls	r5, r1, #1
 8009ba8:	4304      	orrs	r4, r0
 8009baa:	4f43      	ldr	r7, [pc, #268]	; (8009cb8 <__ieee754_atan2+0x12c>)
 8009bac:	086d      	lsrs	r5, r5, #1
 8009bae:	0fe4      	lsrs	r4, r4, #31
 8009bb0:	432c      	orrs	r4, r5
 8009bb2:	42bc      	cmp	r4, r7
 8009bb4:	d903      	bls.n	8009bbe <__ieee754_atan2+0x32>
 8009bb6:	f7f7 fcbb 	bl	8001530 <__aeabi_dadd>
 8009bba:	b003      	add	sp, #12
 8009bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bbe:	4c3f      	ldr	r4, [pc, #252]	; (8009cbc <__ieee754_atan2+0x130>)
 8009bc0:	191c      	adds	r4, r3, r4
 8009bc2:	4314      	orrs	r4, r2
 8009bc4:	d102      	bne.n	8009bcc <__ieee754_atan2+0x40>
 8009bc6:	f000 f943 	bl	8009e50 <atan>
 8009bca:	e7f6      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009bcc:	179c      	asrs	r4, r3, #30
 8009bce:	46a4      	mov	ip, r4
 8009bd0:	2402      	movs	r4, #2
 8009bd2:	4667      	mov	r7, ip
 8009bd4:	403c      	ands	r4, r7
 8009bd6:	9f00      	ldr	r7, [sp, #0]
 8009bd8:	0fff      	lsrs	r7, r7, #31
 8009bda:	433c      	orrs	r4, r7
 8009bdc:	9f01      	ldr	r7, [sp, #4]
 8009bde:	432f      	orrs	r7, r5
 8009be0:	d106      	bne.n	8009bf0 <__ieee754_atan2+0x64>
 8009be2:	2c02      	cmp	r4, #2
 8009be4:	d02c      	beq.n	8009c40 <__ieee754_atan2+0xb4>
 8009be6:	2c03      	cmp	r4, #3
 8009be8:	d1e7      	bne.n	8009bba <__ieee754_atan2+0x2e>
 8009bea:	4835      	ldr	r0, [pc, #212]	; (8009cc0 <__ieee754_atan2+0x134>)
 8009bec:	4935      	ldr	r1, [pc, #212]	; (8009cc4 <__ieee754_atan2+0x138>)
 8009bee:	e7e4      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009bf0:	0037      	movs	r7, r6
 8009bf2:	4317      	orrs	r7, r2
 8009bf4:	d105      	bne.n	8009c02 <__ieee754_atan2+0x76>
 8009bf6:	9b00      	ldr	r3, [sp, #0]
 8009bf8:	4831      	ldr	r0, [pc, #196]	; (8009cc0 <__ieee754_atan2+0x134>)
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da59      	bge.n	8009cb2 <__ieee754_atan2+0x126>
 8009bfe:	4932      	ldr	r1, [pc, #200]	; (8009cc8 <__ieee754_atan2+0x13c>)
 8009c00:	e7db      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009c02:	4f2d      	ldr	r7, [pc, #180]	; (8009cb8 <__ieee754_atan2+0x12c>)
 8009c04:	42be      	cmp	r6, r7
 8009c06:	d11e      	bne.n	8009c46 <__ieee754_atan2+0xba>
 8009c08:	42b5      	cmp	r5, r6
 8009c0a:	d10e      	bne.n	8009c2a <__ieee754_atan2+0x9e>
 8009c0c:	2c02      	cmp	r4, #2
 8009c0e:	d006      	beq.n	8009c1e <__ieee754_atan2+0x92>
 8009c10:	2c03      	cmp	r4, #3
 8009c12:	d007      	beq.n	8009c24 <__ieee754_atan2+0x98>
 8009c14:	482a      	ldr	r0, [pc, #168]	; (8009cc0 <__ieee754_atan2+0x134>)
 8009c16:	2c01      	cmp	r4, #1
 8009c18:	d149      	bne.n	8009cae <__ieee754_atan2+0x122>
 8009c1a:	492c      	ldr	r1, [pc, #176]	; (8009ccc <__ieee754_atan2+0x140>)
 8009c1c:	e7cd      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009c1e:	482c      	ldr	r0, [pc, #176]	; (8009cd0 <__ieee754_atan2+0x144>)
 8009c20:	492c      	ldr	r1, [pc, #176]	; (8009cd4 <__ieee754_atan2+0x148>)
 8009c22:	e7ca      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009c24:	482a      	ldr	r0, [pc, #168]	; (8009cd0 <__ieee754_atan2+0x144>)
 8009c26:	492c      	ldr	r1, [pc, #176]	; (8009cd8 <__ieee754_atan2+0x14c>)
 8009c28:	e7c7      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009c2a:	2c02      	cmp	r4, #2
 8009c2c:	d008      	beq.n	8009c40 <__ieee754_atan2+0xb4>
 8009c2e:	2c03      	cmp	r4, #3
 8009c30:	d0db      	beq.n	8009bea <__ieee754_atan2+0x5e>
 8009c32:	2000      	movs	r0, #0
 8009c34:	2100      	movs	r1, #0
 8009c36:	2c01      	cmp	r4, #1
 8009c38:	d1bf      	bne.n	8009bba <__ieee754_atan2+0x2e>
 8009c3a:	2180      	movs	r1, #128	; 0x80
 8009c3c:	0609      	lsls	r1, r1, #24
 8009c3e:	e7bc      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009c40:	481f      	ldr	r0, [pc, #124]	; (8009cc0 <__ieee754_atan2+0x134>)
 8009c42:	4926      	ldr	r1, [pc, #152]	; (8009cdc <__ieee754_atan2+0x150>)
 8009c44:	e7b9      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009c46:	4f1c      	ldr	r7, [pc, #112]	; (8009cb8 <__ieee754_atan2+0x12c>)
 8009c48:	42bd      	cmp	r5, r7
 8009c4a:	d0d4      	beq.n	8009bf6 <__ieee754_atan2+0x6a>
 8009c4c:	1bad      	subs	r5, r5, r6
 8009c4e:	152d      	asrs	r5, r5, #20
 8009c50:	2d3c      	cmp	r5, #60	; 0x3c
 8009c52:	dc16      	bgt.n	8009c82 <__ieee754_atan2+0xf6>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	da01      	bge.n	8009c5c <__ieee754_atan2+0xd0>
 8009c58:	353c      	adds	r5, #60	; 0x3c
 8009c5a:	db15      	blt.n	8009c88 <__ieee754_atan2+0xfc>
 8009c5c:	f7f7 ff78 	bl	8001b50 <__aeabi_ddiv>
 8009c60:	f000 fa7e 	bl	800a160 <fabs>
 8009c64:	f000 f8f4 	bl	8009e50 <atan>
 8009c68:	2c01      	cmp	r4, #1
 8009c6a:	d010      	beq.n	8009c8e <__ieee754_atan2+0x102>
 8009c6c:	2c02      	cmp	r4, #2
 8009c6e:	d013      	beq.n	8009c98 <__ieee754_atan2+0x10c>
 8009c70:	2c00      	cmp	r4, #0
 8009c72:	d0a2      	beq.n	8009bba <__ieee754_atan2+0x2e>
 8009c74:	4a1a      	ldr	r2, [pc, #104]	; (8009ce0 <__ieee754_atan2+0x154>)
 8009c76:	4b1b      	ldr	r3, [pc, #108]	; (8009ce4 <__ieee754_atan2+0x158>)
 8009c78:	f7f8 fe1e 	bl	80028b8 <__aeabi_dsub>
 8009c7c:	4a10      	ldr	r2, [pc, #64]	; (8009cc0 <__ieee754_atan2+0x134>)
 8009c7e:	4b17      	ldr	r3, [pc, #92]	; (8009cdc <__ieee754_atan2+0x150>)
 8009c80:	e012      	b.n	8009ca8 <__ieee754_atan2+0x11c>
 8009c82:	480f      	ldr	r0, [pc, #60]	; (8009cc0 <__ieee754_atan2+0x134>)
 8009c84:	4918      	ldr	r1, [pc, #96]	; (8009ce8 <__ieee754_atan2+0x15c>)
 8009c86:	e7ef      	b.n	8009c68 <__ieee754_atan2+0xdc>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	e7ec      	b.n	8009c68 <__ieee754_atan2+0xdc>
 8009c8e:	2480      	movs	r4, #128	; 0x80
 8009c90:	0624      	lsls	r4, r4, #24
 8009c92:	190b      	adds	r3, r1, r4
 8009c94:	0019      	movs	r1, r3
 8009c96:	e790      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009c98:	4a11      	ldr	r2, [pc, #68]	; (8009ce0 <__ieee754_atan2+0x154>)
 8009c9a:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <__ieee754_atan2+0x158>)
 8009c9c:	f7f8 fe0c 	bl	80028b8 <__aeabi_dsub>
 8009ca0:	0002      	movs	r2, r0
 8009ca2:	000b      	movs	r3, r1
 8009ca4:	4806      	ldr	r0, [pc, #24]	; (8009cc0 <__ieee754_atan2+0x134>)
 8009ca6:	490d      	ldr	r1, [pc, #52]	; (8009cdc <__ieee754_atan2+0x150>)
 8009ca8:	f7f8 fe06 	bl	80028b8 <__aeabi_dsub>
 8009cac:	e785      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009cae:	490f      	ldr	r1, [pc, #60]	; (8009cec <__ieee754_atan2+0x160>)
 8009cb0:	e783      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009cb2:	490d      	ldr	r1, [pc, #52]	; (8009ce8 <__ieee754_atan2+0x15c>)
 8009cb4:	e781      	b.n	8009bba <__ieee754_atan2+0x2e>
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	7ff00000 	.word	0x7ff00000
 8009cbc:	c0100000 	.word	0xc0100000
 8009cc0:	54442d18 	.word	0x54442d18
 8009cc4:	c00921fb 	.word	0xc00921fb
 8009cc8:	bff921fb 	.word	0xbff921fb
 8009ccc:	bfe921fb 	.word	0xbfe921fb
 8009cd0:	7f3321d2 	.word	0x7f3321d2
 8009cd4:	4002d97c 	.word	0x4002d97c
 8009cd8:	c002d97c 	.word	0xc002d97c
 8009cdc:	400921fb 	.word	0x400921fb
 8009ce0:	33145c07 	.word	0x33145c07
 8009ce4:	3ca1a626 	.word	0x3ca1a626
 8009ce8:	3ff921fb 	.word	0x3ff921fb
 8009cec:	3fe921fb 	.word	0x3fe921fb

08009cf0 <__ieee754_sqrt>:
 8009cf0:	4b54      	ldr	r3, [pc, #336]	; (8009e44 <__ieee754_sqrt+0x154>)
 8009cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cf4:	001e      	movs	r6, r3
 8009cf6:	0005      	movs	r5, r0
 8009cf8:	000c      	movs	r4, r1
 8009cfa:	0002      	movs	r2, r0
 8009cfc:	400e      	ands	r6, r1
 8009cfe:	429e      	cmp	r6, r3
 8009d00:	d10f      	bne.n	8009d22 <__ieee754_sqrt+0x32>
 8009d02:	0002      	movs	r2, r0
 8009d04:	000b      	movs	r3, r1
 8009d06:	f7f8 fb57 	bl	80023b8 <__aeabi_dmul>
 8009d0a:	0002      	movs	r2, r0
 8009d0c:	000b      	movs	r3, r1
 8009d0e:	0028      	movs	r0, r5
 8009d10:	0021      	movs	r1, r4
 8009d12:	f7f7 fc0d 	bl	8001530 <__aeabi_dadd>
 8009d16:	0005      	movs	r5, r0
 8009d18:	000c      	movs	r4, r1
 8009d1a:	0028      	movs	r0, r5
 8009d1c:	0021      	movs	r1, r4
 8009d1e:	b003      	add	sp, #12
 8009d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d22:	2900      	cmp	r1, #0
 8009d24:	dc0e      	bgt.n	8009d44 <__ieee754_sqrt+0x54>
 8009d26:	004b      	lsls	r3, r1, #1
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	4303      	orrs	r3, r0
 8009d2c:	d0f5      	beq.n	8009d1a <__ieee754_sqrt+0x2a>
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	d00a      	beq.n	8009d48 <__ieee754_sqrt+0x58>
 8009d32:	0002      	movs	r2, r0
 8009d34:	000b      	movs	r3, r1
 8009d36:	f7f8 fdbf 	bl	80028b8 <__aeabi_dsub>
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	000b      	movs	r3, r1
 8009d3e:	f7f7 ff07 	bl	8001b50 <__aeabi_ddiv>
 8009d42:	e7e8      	b.n	8009d16 <__ieee754_sqrt+0x26>
 8009d44:	150b      	asrs	r3, r1, #20
 8009d46:	d10f      	bne.n	8009d68 <__ieee754_sqrt+0x78>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2900      	cmp	r1, #0
 8009d4c:	d06f      	beq.n	8009e2e <__ieee754_sqrt+0x13e>
 8009d4e:	2480      	movs	r4, #128	; 0x80
 8009d50:	2000      	movs	r0, #0
 8009d52:	0364      	lsls	r4, r4, #13
 8009d54:	4221      	tst	r1, r4
 8009d56:	d06e      	beq.n	8009e36 <__ieee754_sqrt+0x146>
 8009d58:	1e44      	subs	r4, r0, #1
 8009d5a:	1b1b      	subs	r3, r3, r4
 8009d5c:	2420      	movs	r4, #32
 8009d5e:	0015      	movs	r5, r2
 8009d60:	1a24      	subs	r4, r4, r0
 8009d62:	40e5      	lsrs	r5, r4
 8009d64:	4082      	lsls	r2, r0
 8009d66:	4329      	orrs	r1, r5
 8009d68:	4837      	ldr	r0, [pc, #220]	; (8009e48 <__ieee754_sqrt+0x158>)
 8009d6a:	0309      	lsls	r1, r1, #12
 8009d6c:	1818      	adds	r0, r3, r0
 8009d6e:	2380      	movs	r3, #128	; 0x80
 8009d70:	0b09      	lsrs	r1, r1, #12
 8009d72:	035b      	lsls	r3, r3, #13
 8009d74:	4319      	orrs	r1, r3
 8009d76:	07c3      	lsls	r3, r0, #31
 8009d78:	d503      	bpl.n	8009d82 <__ieee754_sqrt+0x92>
 8009d7a:	0fd3      	lsrs	r3, r2, #31
 8009d7c:	0049      	lsls	r1, r1, #1
 8009d7e:	1859      	adds	r1, r3, r1
 8009d80:	0052      	lsls	r2, r2, #1
 8009d82:	2400      	movs	r4, #0
 8009d84:	1043      	asrs	r3, r0, #1
 8009d86:	9301      	str	r3, [sp, #4]
 8009d88:	0fd3      	lsrs	r3, r2, #31
 8009d8a:	185b      	adds	r3, r3, r1
 8009d8c:	2580      	movs	r5, #128	; 0x80
 8009d8e:	185b      	adds	r3, r3, r1
 8009d90:	0020      	movs	r0, r4
 8009d92:	2116      	movs	r1, #22
 8009d94:	0052      	lsls	r2, r2, #1
 8009d96:	03ad      	lsls	r5, r5, #14
 8009d98:	1946      	adds	r6, r0, r5
 8009d9a:	429e      	cmp	r6, r3
 8009d9c:	dc02      	bgt.n	8009da4 <__ieee754_sqrt+0xb4>
 8009d9e:	1970      	adds	r0, r6, r5
 8009da0:	1b9b      	subs	r3, r3, r6
 8009da2:	1964      	adds	r4, r4, r5
 8009da4:	0fd6      	lsrs	r6, r2, #31
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	3901      	subs	r1, #1
 8009daa:	18f3      	adds	r3, r6, r3
 8009dac:	0052      	lsls	r2, r2, #1
 8009dae:	086d      	lsrs	r5, r5, #1
 8009db0:	2900      	cmp	r1, #0
 8009db2:	d1f1      	bne.n	8009d98 <__ieee754_sqrt+0xa8>
 8009db4:	2520      	movs	r5, #32
 8009db6:	2680      	movs	r6, #128	; 0x80
 8009db8:	46ac      	mov	ip, r5
 8009dba:	9100      	str	r1, [sp, #0]
 8009dbc:	0636      	lsls	r6, r6, #24
 8009dbe:	9d00      	ldr	r5, [sp, #0]
 8009dc0:	1977      	adds	r7, r6, r5
 8009dc2:	4283      	cmp	r3, r0
 8009dc4:	dc02      	bgt.n	8009dcc <__ieee754_sqrt+0xdc>
 8009dc6:	d112      	bne.n	8009dee <__ieee754_sqrt+0xfe>
 8009dc8:	4297      	cmp	r7, r2
 8009dca:	d810      	bhi.n	8009dee <__ieee754_sqrt+0xfe>
 8009dcc:	19bd      	adds	r5, r7, r6
 8009dce:	9500      	str	r5, [sp, #0]
 8009dd0:	0005      	movs	r5, r0
 8009dd2:	2f00      	cmp	r7, #0
 8009dd4:	da03      	bge.n	8009dde <__ieee754_sqrt+0xee>
 8009dd6:	9d00      	ldr	r5, [sp, #0]
 8009dd8:	43ed      	mvns	r5, r5
 8009dda:	0fed      	lsrs	r5, r5, #31
 8009ddc:	1945      	adds	r5, r0, r5
 8009dde:	1a1b      	subs	r3, r3, r0
 8009de0:	42ba      	cmp	r2, r7
 8009de2:	4180      	sbcs	r0, r0
 8009de4:	4240      	negs	r0, r0
 8009de6:	1a1b      	subs	r3, r3, r0
 8009de8:	0028      	movs	r0, r5
 8009dea:	1bd2      	subs	r2, r2, r7
 8009dec:	1989      	adds	r1, r1, r6
 8009dee:	0fd5      	lsrs	r5, r2, #31
 8009df0:	18ed      	adds	r5, r5, r3
 8009df2:	18eb      	adds	r3, r5, r3
 8009df4:	2501      	movs	r5, #1
 8009df6:	426d      	negs	r5, r5
 8009df8:	44ac      	add	ip, r5
 8009dfa:	4665      	mov	r5, ip
 8009dfc:	0052      	lsls	r2, r2, #1
 8009dfe:	0876      	lsrs	r6, r6, #1
 8009e00:	2d00      	cmp	r5, #0
 8009e02:	d1dc      	bne.n	8009dbe <__ieee754_sqrt+0xce>
 8009e04:	4313      	orrs	r3, r2
 8009e06:	d003      	beq.n	8009e10 <__ieee754_sqrt+0x120>
 8009e08:	1c4b      	adds	r3, r1, #1
 8009e0a:	d117      	bne.n	8009e3c <__ieee754_sqrt+0x14c>
 8009e0c:	4661      	mov	r1, ip
 8009e0e:	3401      	adds	r4, #1
 8009e10:	4b0e      	ldr	r3, [pc, #56]	; (8009e4c <__ieee754_sqrt+0x15c>)
 8009e12:	1060      	asrs	r0, r4, #1
 8009e14:	18c0      	adds	r0, r0, r3
 8009e16:	0849      	lsrs	r1, r1, #1
 8009e18:	07e3      	lsls	r3, r4, #31
 8009e1a:	d502      	bpl.n	8009e22 <__ieee754_sqrt+0x132>
 8009e1c:	2380      	movs	r3, #128	; 0x80
 8009e1e:	061b      	lsls	r3, r3, #24
 8009e20:	4319      	orrs	r1, r3
 8009e22:	9b01      	ldr	r3, [sp, #4]
 8009e24:	000d      	movs	r5, r1
 8009e26:	051c      	lsls	r4, r3, #20
 8009e28:	1823      	adds	r3, r4, r0
 8009e2a:	001c      	movs	r4, r3
 8009e2c:	e775      	b.n	8009d1a <__ieee754_sqrt+0x2a>
 8009e2e:	0ad1      	lsrs	r1, r2, #11
 8009e30:	3b15      	subs	r3, #21
 8009e32:	0552      	lsls	r2, r2, #21
 8009e34:	e789      	b.n	8009d4a <__ieee754_sqrt+0x5a>
 8009e36:	0049      	lsls	r1, r1, #1
 8009e38:	3001      	adds	r0, #1
 8009e3a:	e78b      	b.n	8009d54 <__ieee754_sqrt+0x64>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	3101      	adds	r1, #1
 8009e40:	4399      	bics	r1, r3
 8009e42:	e7e5      	b.n	8009e10 <__ieee754_sqrt+0x120>
 8009e44:	7ff00000 	.word	0x7ff00000
 8009e48:	fffffc01 	.word	0xfffffc01
 8009e4c:	3fe00000 	.word	0x3fe00000

08009e50 <atan>:
 8009e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e52:	4b9c      	ldr	r3, [pc, #624]	; (800a0c4 <atan+0x274>)
 8009e54:	b085      	sub	sp, #20
 8009e56:	004e      	lsls	r6, r1, #1
 8009e58:	0004      	movs	r4, r0
 8009e5a:	000d      	movs	r5, r1
 8009e5c:	9103      	str	r1, [sp, #12]
 8009e5e:	0876      	lsrs	r6, r6, #1
 8009e60:	429e      	cmp	r6, r3
 8009e62:	dd18      	ble.n	8009e96 <atan+0x46>
 8009e64:	4b98      	ldr	r3, [pc, #608]	; (800a0c8 <atan+0x278>)
 8009e66:	429e      	cmp	r6, r3
 8009e68:	dc02      	bgt.n	8009e70 <atan+0x20>
 8009e6a:	d10a      	bne.n	8009e82 <atan+0x32>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d008      	beq.n	8009e82 <atan+0x32>
 8009e70:	0022      	movs	r2, r4
 8009e72:	002b      	movs	r3, r5
 8009e74:	0020      	movs	r0, r4
 8009e76:	0029      	movs	r1, r5
 8009e78:	f7f7 fb5a 	bl	8001530 <__aeabi_dadd>
 8009e7c:	0004      	movs	r4, r0
 8009e7e:	000d      	movs	r5, r1
 8009e80:	e005      	b.n	8009e8e <atan+0x3e>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	4c91      	ldr	r4, [pc, #580]	; (800a0cc <atan+0x27c>)
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dd00      	ble.n	8009e8c <atan+0x3c>
 8009e8a:	e118      	b.n	800a0be <atan+0x26e>
 8009e8c:	4d90      	ldr	r5, [pc, #576]	; (800a0d0 <atan+0x280>)
 8009e8e:	0020      	movs	r0, r4
 8009e90:	0029      	movs	r1, r5
 8009e92:	b005      	add	sp, #20
 8009e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e96:	4b8f      	ldr	r3, [pc, #572]	; (800a0d4 <atan+0x284>)
 8009e98:	429e      	cmp	r6, r3
 8009e9a:	dc0f      	bgt.n	8009ebc <atan+0x6c>
 8009e9c:	4b8e      	ldr	r3, [pc, #568]	; (800a0d8 <atan+0x288>)
 8009e9e:	429e      	cmp	r6, r3
 8009ea0:	dc09      	bgt.n	8009eb6 <atan+0x66>
 8009ea2:	4a8e      	ldr	r2, [pc, #568]	; (800a0dc <atan+0x28c>)
 8009ea4:	4b8e      	ldr	r3, [pc, #568]	; (800a0e0 <atan+0x290>)
 8009ea6:	f7f7 fb43 	bl	8001530 <__aeabi_dadd>
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4b8d      	ldr	r3, [pc, #564]	; (800a0e4 <atan+0x294>)
 8009eae:	f7f6 fae7 	bl	8000480 <__aeabi_dcmpgt>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d1eb      	bne.n	8009e8e <atan+0x3e>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	425b      	negs	r3, r3
 8009eba:	e025      	b.n	8009f08 <atan+0xb8>
 8009ebc:	f000 f950 	bl	800a160 <fabs>
 8009ec0:	4b89      	ldr	r3, [pc, #548]	; (800a0e8 <atan+0x298>)
 8009ec2:	0004      	movs	r4, r0
 8009ec4:	000d      	movs	r5, r1
 8009ec6:	429e      	cmp	r6, r3
 8009ec8:	dd00      	ble.n	8009ecc <atan+0x7c>
 8009eca:	e0aa      	b.n	800a022 <atan+0x1d2>
 8009ecc:	4b87      	ldr	r3, [pc, #540]	; (800a0ec <atan+0x29c>)
 8009ece:	429e      	cmp	r6, r3
 8009ed0:	dd00      	ble.n	8009ed4 <atan+0x84>
 8009ed2:	e090      	b.n	8009ff6 <atan+0x1a6>
 8009ed4:	0002      	movs	r2, r0
 8009ed6:	000b      	movs	r3, r1
 8009ed8:	f7f7 fb2a 	bl	8001530 <__aeabi_dadd>
 8009edc:	2200      	movs	r2, #0
 8009ede:	4b81      	ldr	r3, [pc, #516]	; (800a0e4 <atan+0x294>)
 8009ee0:	f7f8 fcea 	bl	80028b8 <__aeabi_dsub>
 8009ee4:	2380      	movs	r3, #128	; 0x80
 8009ee6:	0006      	movs	r6, r0
 8009ee8:	000f      	movs	r7, r1
 8009eea:	2200      	movs	r2, #0
 8009eec:	05db      	lsls	r3, r3, #23
 8009eee:	0020      	movs	r0, r4
 8009ef0:	0029      	movs	r1, r5
 8009ef2:	f7f7 fb1d 	bl	8001530 <__aeabi_dadd>
 8009ef6:	000b      	movs	r3, r1
 8009ef8:	0002      	movs	r2, r0
 8009efa:	0039      	movs	r1, r7
 8009efc:	0030      	movs	r0, r6
 8009efe:	f7f7 fe27 	bl	8001b50 <__aeabi_ddiv>
 8009f02:	2300      	movs	r3, #0
 8009f04:	0004      	movs	r4, r0
 8009f06:	000d      	movs	r5, r1
 8009f08:	9302      	str	r3, [sp, #8]
 8009f0a:	0022      	movs	r2, r4
 8009f0c:	002b      	movs	r3, r5
 8009f0e:	0020      	movs	r0, r4
 8009f10:	0029      	movs	r1, r5
 8009f12:	f7f8 fa51 	bl	80023b8 <__aeabi_dmul>
 8009f16:	0002      	movs	r2, r0
 8009f18:	000b      	movs	r3, r1
 8009f1a:	9000      	str	r0, [sp, #0]
 8009f1c:	9101      	str	r1, [sp, #4]
 8009f1e:	f7f8 fa4b 	bl	80023b8 <__aeabi_dmul>
 8009f22:	0006      	movs	r6, r0
 8009f24:	000f      	movs	r7, r1
 8009f26:	4a72      	ldr	r2, [pc, #456]	; (800a0f0 <atan+0x2a0>)
 8009f28:	4b72      	ldr	r3, [pc, #456]	; (800a0f4 <atan+0x2a4>)
 8009f2a:	f7f8 fa45 	bl	80023b8 <__aeabi_dmul>
 8009f2e:	4a72      	ldr	r2, [pc, #456]	; (800a0f8 <atan+0x2a8>)
 8009f30:	4b72      	ldr	r3, [pc, #456]	; (800a0fc <atan+0x2ac>)
 8009f32:	f7f7 fafd 	bl	8001530 <__aeabi_dadd>
 8009f36:	0032      	movs	r2, r6
 8009f38:	003b      	movs	r3, r7
 8009f3a:	f7f8 fa3d 	bl	80023b8 <__aeabi_dmul>
 8009f3e:	4a70      	ldr	r2, [pc, #448]	; (800a100 <atan+0x2b0>)
 8009f40:	4b70      	ldr	r3, [pc, #448]	; (800a104 <atan+0x2b4>)
 8009f42:	f7f7 faf5 	bl	8001530 <__aeabi_dadd>
 8009f46:	0032      	movs	r2, r6
 8009f48:	003b      	movs	r3, r7
 8009f4a:	f7f8 fa35 	bl	80023b8 <__aeabi_dmul>
 8009f4e:	4a6e      	ldr	r2, [pc, #440]	; (800a108 <atan+0x2b8>)
 8009f50:	4b6e      	ldr	r3, [pc, #440]	; (800a10c <atan+0x2bc>)
 8009f52:	f7f7 faed 	bl	8001530 <__aeabi_dadd>
 8009f56:	0032      	movs	r2, r6
 8009f58:	003b      	movs	r3, r7
 8009f5a:	f7f8 fa2d 	bl	80023b8 <__aeabi_dmul>
 8009f5e:	4a6c      	ldr	r2, [pc, #432]	; (800a110 <atan+0x2c0>)
 8009f60:	4b6c      	ldr	r3, [pc, #432]	; (800a114 <atan+0x2c4>)
 8009f62:	f7f7 fae5 	bl	8001530 <__aeabi_dadd>
 8009f66:	0032      	movs	r2, r6
 8009f68:	003b      	movs	r3, r7
 8009f6a:	f7f8 fa25 	bl	80023b8 <__aeabi_dmul>
 8009f6e:	4a6a      	ldr	r2, [pc, #424]	; (800a118 <atan+0x2c8>)
 8009f70:	4b6a      	ldr	r3, [pc, #424]	; (800a11c <atan+0x2cc>)
 8009f72:	f7f7 fadd 	bl	8001530 <__aeabi_dadd>
 8009f76:	9a00      	ldr	r2, [sp, #0]
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	f7f8 fa1d 	bl	80023b8 <__aeabi_dmul>
 8009f7e:	4a68      	ldr	r2, [pc, #416]	; (800a120 <atan+0x2d0>)
 8009f80:	9000      	str	r0, [sp, #0]
 8009f82:	9101      	str	r1, [sp, #4]
 8009f84:	4b67      	ldr	r3, [pc, #412]	; (800a124 <atan+0x2d4>)
 8009f86:	0030      	movs	r0, r6
 8009f88:	0039      	movs	r1, r7
 8009f8a:	f7f8 fa15 	bl	80023b8 <__aeabi_dmul>
 8009f8e:	4a66      	ldr	r2, [pc, #408]	; (800a128 <atan+0x2d8>)
 8009f90:	4b66      	ldr	r3, [pc, #408]	; (800a12c <atan+0x2dc>)
 8009f92:	f7f8 fc91 	bl	80028b8 <__aeabi_dsub>
 8009f96:	0032      	movs	r2, r6
 8009f98:	003b      	movs	r3, r7
 8009f9a:	f7f8 fa0d 	bl	80023b8 <__aeabi_dmul>
 8009f9e:	4a64      	ldr	r2, [pc, #400]	; (800a130 <atan+0x2e0>)
 8009fa0:	4b64      	ldr	r3, [pc, #400]	; (800a134 <atan+0x2e4>)
 8009fa2:	f7f8 fc89 	bl	80028b8 <__aeabi_dsub>
 8009fa6:	0032      	movs	r2, r6
 8009fa8:	003b      	movs	r3, r7
 8009faa:	f7f8 fa05 	bl	80023b8 <__aeabi_dmul>
 8009fae:	4a62      	ldr	r2, [pc, #392]	; (800a138 <atan+0x2e8>)
 8009fb0:	4b62      	ldr	r3, [pc, #392]	; (800a13c <atan+0x2ec>)
 8009fb2:	f7f8 fc81 	bl	80028b8 <__aeabi_dsub>
 8009fb6:	0032      	movs	r2, r6
 8009fb8:	003b      	movs	r3, r7
 8009fba:	f7f8 f9fd 	bl	80023b8 <__aeabi_dmul>
 8009fbe:	4a60      	ldr	r2, [pc, #384]	; (800a140 <atan+0x2f0>)
 8009fc0:	4b60      	ldr	r3, [pc, #384]	; (800a144 <atan+0x2f4>)
 8009fc2:	f7f8 fc79 	bl	80028b8 <__aeabi_dsub>
 8009fc6:	0032      	movs	r2, r6
 8009fc8:	003b      	movs	r3, r7
 8009fca:	f7f8 f9f5 	bl	80023b8 <__aeabi_dmul>
 8009fce:	000b      	movs	r3, r1
 8009fd0:	9902      	ldr	r1, [sp, #8]
 8009fd2:	0002      	movs	r2, r0
 8009fd4:	3101      	adds	r1, #1
 8009fd6:	d14b      	bne.n	800a070 <atan+0x220>
 8009fd8:	9800      	ldr	r0, [sp, #0]
 8009fda:	9901      	ldr	r1, [sp, #4]
 8009fdc:	f7f7 faa8 	bl	8001530 <__aeabi_dadd>
 8009fe0:	0022      	movs	r2, r4
 8009fe2:	002b      	movs	r3, r5
 8009fe4:	f7f8 f9e8 	bl	80023b8 <__aeabi_dmul>
 8009fe8:	0002      	movs	r2, r0
 8009fea:	000b      	movs	r3, r1
 8009fec:	0020      	movs	r0, r4
 8009fee:	0029      	movs	r1, r5
 8009ff0:	f7f8 fc62 	bl	80028b8 <__aeabi_dsub>
 8009ff4:	e742      	b.n	8009e7c <atan+0x2c>
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4b3a      	ldr	r3, [pc, #232]	; (800a0e4 <atan+0x294>)
 8009ffa:	f7f8 fc5d 	bl	80028b8 <__aeabi_dsub>
 8009ffe:	2200      	movs	r2, #0
 800a000:	0006      	movs	r6, r0
 800a002:	000f      	movs	r7, r1
 800a004:	4b37      	ldr	r3, [pc, #220]	; (800a0e4 <atan+0x294>)
 800a006:	0020      	movs	r0, r4
 800a008:	0029      	movs	r1, r5
 800a00a:	f7f7 fa91 	bl	8001530 <__aeabi_dadd>
 800a00e:	000b      	movs	r3, r1
 800a010:	0002      	movs	r2, r0
 800a012:	0039      	movs	r1, r7
 800a014:	0030      	movs	r0, r6
 800a016:	f7f7 fd9b 	bl	8001b50 <__aeabi_ddiv>
 800a01a:	2301      	movs	r3, #1
 800a01c:	0004      	movs	r4, r0
 800a01e:	000d      	movs	r5, r1
 800a020:	e772      	b.n	8009f08 <atan+0xb8>
 800a022:	4b49      	ldr	r3, [pc, #292]	; (800a148 <atan+0x2f8>)
 800a024:	429e      	cmp	r6, r3
 800a026:	dc19      	bgt.n	800a05c <atan+0x20c>
 800a028:	2200      	movs	r2, #0
 800a02a:	4b48      	ldr	r3, [pc, #288]	; (800a14c <atan+0x2fc>)
 800a02c:	f7f8 fc44 	bl	80028b8 <__aeabi_dsub>
 800a030:	2200      	movs	r2, #0
 800a032:	0006      	movs	r6, r0
 800a034:	000f      	movs	r7, r1
 800a036:	4b45      	ldr	r3, [pc, #276]	; (800a14c <atan+0x2fc>)
 800a038:	0020      	movs	r0, r4
 800a03a:	0029      	movs	r1, r5
 800a03c:	f7f8 f9bc 	bl	80023b8 <__aeabi_dmul>
 800a040:	2200      	movs	r2, #0
 800a042:	4b28      	ldr	r3, [pc, #160]	; (800a0e4 <atan+0x294>)
 800a044:	f7f7 fa74 	bl	8001530 <__aeabi_dadd>
 800a048:	000b      	movs	r3, r1
 800a04a:	0002      	movs	r2, r0
 800a04c:	0039      	movs	r1, r7
 800a04e:	0030      	movs	r0, r6
 800a050:	f7f7 fd7e 	bl	8001b50 <__aeabi_ddiv>
 800a054:	2302      	movs	r3, #2
 800a056:	0004      	movs	r4, r0
 800a058:	000d      	movs	r5, r1
 800a05a:	e755      	b.n	8009f08 <atan+0xb8>
 800a05c:	000b      	movs	r3, r1
 800a05e:	0002      	movs	r2, r0
 800a060:	493b      	ldr	r1, [pc, #236]	; (800a150 <atan+0x300>)
 800a062:	2000      	movs	r0, #0
 800a064:	f7f7 fd74 	bl	8001b50 <__aeabi_ddiv>
 800a068:	2303      	movs	r3, #3
 800a06a:	0004      	movs	r4, r0
 800a06c:	000d      	movs	r5, r1
 800a06e:	e74b      	b.n	8009f08 <atan+0xb8>
 800a070:	9902      	ldr	r1, [sp, #8]
 800a072:	4f38      	ldr	r7, [pc, #224]	; (800a154 <atan+0x304>)
 800a074:	00ce      	lsls	r6, r1, #3
 800a076:	9800      	ldr	r0, [sp, #0]
 800a078:	9901      	ldr	r1, [sp, #4]
 800a07a:	f7f7 fa59 	bl	8001530 <__aeabi_dadd>
 800a07e:	0022      	movs	r2, r4
 800a080:	002b      	movs	r3, r5
 800a082:	f7f8 f999 	bl	80023b8 <__aeabi_dmul>
 800a086:	4b34      	ldr	r3, [pc, #208]	; (800a158 <atan+0x308>)
 800a088:	19bf      	adds	r7, r7, r6
 800a08a:	199e      	adds	r6, r3, r6
 800a08c:	6832      	ldr	r2, [r6, #0]
 800a08e:	6873      	ldr	r3, [r6, #4]
 800a090:	f7f8 fc12 	bl	80028b8 <__aeabi_dsub>
 800a094:	0022      	movs	r2, r4
 800a096:	002b      	movs	r3, r5
 800a098:	f7f8 fc0e 	bl	80028b8 <__aeabi_dsub>
 800a09c:	000b      	movs	r3, r1
 800a09e:	0002      	movs	r2, r0
 800a0a0:	6838      	ldr	r0, [r7, #0]
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	f7f8 fc08 	bl	80028b8 <__aeabi_dsub>
 800a0a8:	9b03      	ldr	r3, [sp, #12]
 800a0aa:	0004      	movs	r4, r0
 800a0ac:	000d      	movs	r5, r1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	db00      	blt.n	800a0b4 <atan+0x264>
 800a0b2:	e6ec      	b.n	8009e8e <atan+0x3e>
 800a0b4:	2180      	movs	r1, #128	; 0x80
 800a0b6:	0609      	lsls	r1, r1, #24
 800a0b8:	186b      	adds	r3, r5, r1
 800a0ba:	001d      	movs	r5, r3
 800a0bc:	e6e7      	b.n	8009e8e <atan+0x3e>
 800a0be:	4d27      	ldr	r5, [pc, #156]	; (800a15c <atan+0x30c>)
 800a0c0:	e6e5      	b.n	8009e8e <atan+0x3e>
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	440fffff 	.word	0x440fffff
 800a0c8:	7ff00000 	.word	0x7ff00000
 800a0cc:	54442d18 	.word	0x54442d18
 800a0d0:	bff921fb 	.word	0xbff921fb
 800a0d4:	3fdbffff 	.word	0x3fdbffff
 800a0d8:	3e1fffff 	.word	0x3e1fffff
 800a0dc:	8800759c 	.word	0x8800759c
 800a0e0:	7e37e43c 	.word	0x7e37e43c
 800a0e4:	3ff00000 	.word	0x3ff00000
 800a0e8:	3ff2ffff 	.word	0x3ff2ffff
 800a0ec:	3fe5ffff 	.word	0x3fe5ffff
 800a0f0:	e322da11 	.word	0xe322da11
 800a0f4:	3f90ad3a 	.word	0x3f90ad3a
 800a0f8:	24760deb 	.word	0x24760deb
 800a0fc:	3fa97b4b 	.word	0x3fa97b4b
 800a100:	a0d03d51 	.word	0xa0d03d51
 800a104:	3fb10d66 	.word	0x3fb10d66
 800a108:	c54c206e 	.word	0xc54c206e
 800a10c:	3fb745cd 	.word	0x3fb745cd
 800a110:	920083ff 	.word	0x920083ff
 800a114:	3fc24924 	.word	0x3fc24924
 800a118:	5555550d 	.word	0x5555550d
 800a11c:	3fd55555 	.word	0x3fd55555
 800a120:	2c6a6c2f 	.word	0x2c6a6c2f
 800a124:	bfa2b444 	.word	0xbfa2b444
 800a128:	52defd9a 	.word	0x52defd9a
 800a12c:	3fadde2d 	.word	0x3fadde2d
 800a130:	af749a6d 	.word	0xaf749a6d
 800a134:	3fb3b0f2 	.word	0x3fb3b0f2
 800a138:	fe231671 	.word	0xfe231671
 800a13c:	3fbc71c6 	.word	0x3fbc71c6
 800a140:	9998ebc4 	.word	0x9998ebc4
 800a144:	3fc99999 	.word	0x3fc99999
 800a148:	40037fff 	.word	0x40037fff
 800a14c:	3ff80000 	.word	0x3ff80000
 800a150:	bff00000 	.word	0xbff00000
 800a154:	0800a830 	.word	0x0800a830
 800a158:	0800a850 	.word	0x0800a850
 800a15c:	3ff921fb 	.word	0x3ff921fb

0800a160 <fabs>:
 800a160:	0049      	lsls	r1, r1, #1
 800a162:	084b      	lsrs	r3, r1, #1
 800a164:	0019      	movs	r1, r3
 800a166:	4770      	bx	lr

0800a168 <matherr>:
 800a168:	2000      	movs	r0, #0
 800a16a:	4770      	bx	lr

0800a16c <_init>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	46c0      	nop			; (mov r8, r8)
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr

0800a178 <_fini>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	46c0      	nop			; (mov r8, r8)
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr
